
lab05_ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800d648  0800d648  0001d648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da50  0800da50  000202a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da50  0800da50  0001da50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da58  0800da58  000202a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da58  0800da58  0001da58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da5c  0800da5c  0001da5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0800da60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200002a8  0800dd08  000202a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800dd08  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002be00  00000000  00000000  0002031b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003681  00000000  00000000  0004c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c0  00000000  00000000  0004f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d80  00000000  00000000  00051d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b96  00000000  00000000  00053ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002108e  00000000  00000000  0006d676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a069e  00000000  00000000  0008e704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b848  00000000  00000000  0012eda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0013a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a8 	.word	0x200002a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d62c 	.word	0x0800d62c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ac 	.word	0x200002ac
 80001dc:	0800d62c 	.word	0x0800d62c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int tim2Flag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	tim2Flag = 1; // The interrupt func is going to set the flag every 500 ms
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
} // The flag will be cleared in the while loop.
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000354 	.word	0x20000354
 8000f74:	00000000 	.word	0x00000000

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7c:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 8000f80:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f82:	f005 fd63 	bl	8006a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f86:	f000 fac3 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f000 fba5 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 fb79 	bl	8001684 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f92:	f000 fb29 	bl	80015e8 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char welcome_message[] = "Exercise 4 has started \r\n"; // Message to transmit in case of any error when reading the data
 8000f96:	4be4      	ldr	r3, [pc, #912]	; (8001328 <main+0x3b0>)
 8000f98:	f507 743b 	add.w	r4, r7, #748	; 0x2ec
 8000f9c:	461d      	mov	r5, r3
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa6:	c403      	stmia	r4!, {r0, r1}
 8000fa8:	8022      	strh	r2, [r4, #0]

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Initialize the accelerometer sensor
 8000faa:	2102      	movs	r1, #2
 8000fac:	2001      	movs	r0, #1
 8000fae:	f005 f9bb 	bl	8006328 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Enable the acc sensor
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f005 fab3 	bl	8006520 <IKS01A3_MOTION_SENSOR_Enable>
  IKS01A3_MOTION_SENSOR_Axes_t acc_axes; // Struct to save the data of acceleration measured in each axis of space (X Y and Z);

  /////// Variables for 5 coef M.A.F.
    int index_5coef = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

    int unfiltered_x[5] = {0};
 8000fc0:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
    int unfiltered_y[5] = {0};
 8000fd0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
    int unfiltered_z[5] = {0};
 8000fe0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
    int filtered_xyz[3] = {0};
 8000ff0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
  //////////////

    // Variables for 50 coef Moving Average Filter
    int buffer_x[50] = {0};
 8000ffc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001000:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001004:	4618      	mov	r0, r3
 8001006:	23c8      	movs	r3, #200	; 0xc8
 8001008:	461a      	mov	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f00a f80d 	bl	800b02a <memset>
    int buffer_y[50] = {0};
 8001010:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001014:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001018:	4618      	mov	r0, r3
 800101a:	23c8      	movs	r3, #200	; 0xc8
 800101c:	461a      	mov	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f00a f803 	bl	800b02a <memset>
    int buffer_z[50] = {0};
 8001024:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001028:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800102c:	4618      	mov	r0, r3
 800102e:	23c8      	movs	r3, #200	; 0xc8
 8001030:	461a      	mov	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f009 fff9 	bl	800b02a <memset>

    int index_50coef = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

    int sum50_x = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    int sum50_y = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
    int sum50_z = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

    int aux50 = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    int filter50_y;
    int filter50_z;
    ///////////////////

    // IRR FILTER COEFFICIENTS
    float fc = 0.1/100 * 2; // The sampling frequency is 2 Hz
 8001056:	4bb5      	ldr	r3, [pc, #724]	; (800132c <main+0x3b4>)
 8001058:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    float beta = exp(-2*3.1416*fc); // the value of beta is equal to x, which is defined by this formula
 800105c:	f8d7 031c 	ldr.w	r0, [r7, #796]	; 0x31c
 8001060:	f7ff fa7a 	bl	8000558 <__aeabi_f2d>
 8001064:	a3ae      	add	r3, pc, #696	; (adr r3, 8001320 <main+0x3a8>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	ec43 2b17 	vmov	d7, r2, r3
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	f00c f8cf 	bl	800d220 <exp>
 8001082:	ec53 2b10 	vmov	r2, r3, d0
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd95 	bl	8000bb8 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
    float alfa = 1 - beta;
 8001094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001098:	edd7 7ac6 	vldr	s15, [r7, #792]	; 0x318
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7ac5 	vstr	s15, [r7, #788]	; 0x314
    float IRR_xyz[3] = {0}; // In this variable I will store the filtered output for IRR in the axes x y and z
 80010a4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80010a8:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80010ac:	461a      	mov	r2, r3
 80010ae:	2300      	movs	r3, #0
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	6053      	str	r3, [r2, #4]
 80010b4:	6093      	str	r3, [r2, #8]
    //////////////////////




  HAL_TIM_Base_Start_IT(&htim3);// Start the timer; This will enable interrupts every time the timer is reloaded (every 0.5 sec)
 80010b6:	489e      	ldr	r0, [pc, #632]	; (8001330 <main+0x3b8>)
 80010b8:	f007 feee 	bl	8008e98 <HAL_TIM_Base_Start_IT>
  char buffer_acc[40]; // This will help the data transmission

  // Print welcome message
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
 80010bc:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8dd 	bl	8000280 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80010ce:	4619      	mov	r1, r3
 80010d0:	4898      	ldr	r0, [pc, #608]	; (8001334 <main+0x3bc>)
 80010d2:	f008 fb1b 	bl	800970c <HAL_UART_Transmit_IT>

  while (1)
  {

	 if(tim2Flag == 1){
 80010d6:	4b98      	ldr	r3, [pc, #608]	; (8001338 <main+0x3c0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d1fb      	bne.n	80010d6 <main+0x15e>
		  tim2Flag = 0; //Clear the interrupt flag of the timer
 80010de:	4b96      	ldr	r3, [pc, #600]	; (8001338 <main+0x3c0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &acc_axes); // This function will save the data in the array acc_axes, and return a value that can be useful to finding errors;
 80010e4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80010e8:	461a      	mov	r2, r3
 80010ea:	2102      	movs	r1, #2
 80010ec:	2001      	movs	r0, #1
 80010ee:	f005 fa59 	bl	80065a4 <IKS01A3_MOTION_SENSOR_GetAxes>
		  __HAL_DBGMCU_FREEZE_TIM3(); //Freezes the timer for debugging
 80010f2:	4b92      	ldr	r3, [pc, #584]	; (800133c <main+0x3c4>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a91      	ldr	r2, [pc, #580]	; (800133c <main+0x3c4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6093      	str	r3, [r2, #8]
		  ///// 5 COEFFICIENT M.A. FILTER IMPLEMENTATION
		  //// In this implementation of the MA filter the output is stored in the variable "filtered_xyz";
		  /// The output will be transmitted, and in the next iteration of the loop, it will be overwritten


		  filtered_xyz[0] -= unfiltered_x[index_5coef]/5;
 80010fe:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8001102:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800110c:	f107 0108 	add.w	r1, r7, #8
 8001110:	440b      	add	r3, r1
 8001112:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001116:	498a      	ldr	r1, [pc, #552]	; (8001340 <main+0x3c8>)
 8001118:	fb81 0103 	smull	r0, r1, r1, r3
 800111c:	1049      	asrs	r1, r1, #1
 800111e:	17db      	asrs	r3, r3, #31
 8001120:	1a5b      	subs	r3, r3, r1
 8001122:	4413      	add	r3, r2
 8001124:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
		  filtered_xyz[1] -= unfiltered_y[index_5coef]/5;
 8001128:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800112c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	440b      	add	r3, r1
 800113c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001140:	497f      	ldr	r1, [pc, #508]	; (8001340 <main+0x3c8>)
 8001142:	fb81 0103 	smull	r0, r1, r1, r3
 8001146:	1049      	asrs	r1, r1, #1
 8001148:	17db      	asrs	r3, r3, #31
 800114a:	1a5b      	subs	r3, r3, r1
 800114c:	4413      	add	r3, r2
 800114e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		  filtered_xyz[2] -= unfiltered_z[index_5coef]/5;
 8001152:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001156:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001160:	f107 0108 	add.w	r1, r7, #8
 8001164:	440b      	add	r3, r1
 8001166:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800116a:	4975      	ldr	r1, [pc, #468]	; (8001340 <main+0x3c8>)
 800116c:	fb81 0103 	smull	r0, r1, r1, r3
 8001170:	1049      	asrs	r1, r1, #1
 8001172:	17db      	asrs	r3, r3, #31
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	4413      	add	r3, r2
 8001178:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		  // With this, the oldest sample is discarded from the calculation of Y[i]
		  // Before the first loop of the  circular buffer, the value subtracted will be zero

		  unfiltered_x[index_5coef] = acc_axes.x;
 800117c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8001180:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	440b      	add	r3, r1
 8001190:	f843 2c6c 	str.w	r2, [r3, #-108]
		  unfiltered_y[index_5coef] = acc_axes.y;
 8001194:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8001198:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80011a2:	f107 0108 	add.w	r1, r7, #8
 80011a6:	440b      	add	r3, r1
 80011a8:	f843 2c80 	str.w	r2, [r3, #-128]
		  unfiltered_z[index_5coef] = acc_axes.z;
 80011ac:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80011b0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80011ba:	f107 0108 	add.w	r1, r7, #8
 80011be:	440b      	add	r3, r1
 80011c0:	f843 2c94 	str.w	r2, [r3, #-148]
		  // The new sample is stored in place of the discarded sample

		  filtered_xyz[0] += unfiltered_x[index_5coef]/5;
 80011c4:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80011c8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80011d2:	f107 0108 	add.w	r1, r7, #8
 80011d6:	440b      	add	r3, r1
 80011d8:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80011dc:	4958      	ldr	r1, [pc, #352]	; (8001340 <main+0x3c8>)
 80011de:	fb81 0103 	smull	r0, r1, r1, r3
 80011e2:	1049      	asrs	r1, r1, #1
 80011e4:	17db      	asrs	r3, r3, #31
 80011e6:	1acb      	subs	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
		  filtered_xyz[1] += unfiltered_y[index_5coef]/5;
 80011ee:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80011f2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80011fc:	f107 0108 	add.w	r1, r7, #8
 8001200:	440b      	add	r3, r1
 8001202:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001206:	494e      	ldr	r1, [pc, #312]	; (8001340 <main+0x3c8>)
 8001208:	fb81 0103 	smull	r0, r1, r1, r3
 800120c:	1049      	asrs	r1, r1, #1
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1acb      	subs	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		  filtered_xyz[2] += unfiltered_z[index_5coef]/5;
 8001218:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800121c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001226:	f107 0108 	add.w	r1, r7, #8
 800122a:	440b      	add	r3, r1
 800122c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001230:	4943      	ldr	r1, [pc, #268]	; (8001340 <main+0x3c8>)
 8001232:	fb81 0103 	smull	r0, r1, r1, r3
 8001236:	1049      	asrs	r1, r1, #1
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1acb      	subs	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		  // The new sample is used to calculate the filtered output

		  index_5coef = (index_5coef+1) % 5; //Moves the index for the circular buffer forward. It will go from 0 to 4
 8001242:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <main+0x3c8>)
 800124a:	fb83 1302 	smull	r1, r3, r3, r2
 800124e:	1059      	asrs	r1, r3, #1
 8001250:	17d3      	asrs	r3, r2, #31
 8001252:	1ac9      	subs	r1, r1, r3
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		  ////////////  IRR FILTER IMPLEMENTATION

		  IRR_xyz[0] = alfa*acc_axes.x + beta*IRR_xyz[0];
 8001260:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	edd7 7ac5 	vldr	s15, [r7, #788]	; 0x314
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001278:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800127c:	edd3 6a00 	vldr	s13, [r3]
 8001280:	edd7 7ac6 	vldr	s15, [r7, #792]	; 0x318
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001290:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001294:	edc3 7a00 	vstr	s15, [r3]
		  IRR_xyz[1] = alfa*acc_axes.y + beta*IRR_xyz[1];
 8001298:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	edd7 7ac5 	vldr	s15, [r7, #788]	; 0x314
 80012a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ac:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80012b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80012b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80012b8:	edd7 7ac6 	vldr	s15, [r7, #792]	; 0x318
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80012c8:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80012cc:	edc3 7a01 	vstr	s15, [r3, #4]
		  IRR_xyz[2] = alfa*acc_axes.z + beta*IRR_xyz[2];
 80012d0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012dc:	edd7 7ac5 	vldr	s15, [r7, #788]	; 0x314
 80012e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80012e8:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80012ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80012f0:	edd7 7ac6 	vldr	s15, [r7, #792]	; 0x318
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001300:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001304:	edc3 7a02 	vstr	s15, [r3, #8]

		  //////////// Moving Average Filter with 50 coefficients

		  sum50_x -= buffer_x[index_50coef];
 8001308:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800130c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001310:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	e011      	b.n	8001344 <main+0x3cc>
 8001320:	2e48e8a7 	.word	0x2e48e8a7
 8001324:	c01921ff 	.word	0xc01921ff
 8001328:	0800d678 	.word	0x0800d678
 800132c:	3b03126f 	.word	0x3b03126f
 8001330:	200002c4 	.word	0x200002c4
 8001334:	2000030c 	.word	0x2000030c
 8001338:	20000354 	.word	0x20000354
 800133c:	e0042000 	.word	0xe0042000
 8001340:	66666667 	.word	0x66666667
 8001344:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		  sum50_y -= buffer_y[index_50coef];
 8001348:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800134c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001350:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
		  sum50_z -= buffer_z[index_50coef];
 8001362:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001366:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800136a:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

		  buffer_x[index_50coef] = acc_axes.x;
 800137c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8001380:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001384:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001388:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  buffer_y[index_50coef] = acc_axes.y;
 8001390:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8001394:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001398:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800139c:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  buffer_z[index_50coef] = acc_axes.z;
 80013a4:	f8d7 12e8 	ldr.w	r1, [r7, #744]	; 0x2e8
 80013a8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013ac:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80013b0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80013b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		  sum50_x += buffer_x[index_50coef];
 80013b8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013bc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80013c0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80013cc:	4413      	add	r3, r2
 80013ce:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		  sum50_y += buffer_y[index_50coef];
 80013d2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013d6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80013da:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80013de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e2:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80013e6:	4413      	add	r3, r2
 80013e8:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
		  sum50_z += buffer_z[index_50coef];
 80013ec:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80013f0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80013f4:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8001400:	4413      	add	r3, r2
 8001402:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

		  if(aux50 == 1 || index_50coef == 49){  // This conditional will prevent shifts. With this, the first filtered value to be transmitted will be Y[0]
 8001406:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <main+0x49e>
 800140e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001412:	2b31      	cmp	r3, #49	; 0x31
 8001414:	d165      	bne.n	80014e2 <main+0x56a>

			  aux50 = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
			 // Since this code will only work with integers, this work-around was created to avoid dividing each sample by 50 - this could cause the samples to be lost
			 // With this, the code only performs the division by 50 once fifty samples have been summed
			 filter50_x = sum50_x / 50;
 800141c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001420:	4a38      	ldr	r2, [pc, #224]	; (8001504 <main+0x58c>)
 8001422:	fb82 1203 	smull	r1, r2, r2, r3
 8001426:	1112      	asrs	r2, r2, #4
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
			 filter50_y = sum50_y / 50;
 8001430:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001434:	4a33      	ldr	r2, [pc, #204]	; (8001504 <main+0x58c>)
 8001436:	fb82 1203 	smull	r1, r2, r2, r3
 800143a:	1112      	asrs	r2, r2, #4
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
			 filter50_z = sum50_z / 50;
 8001444:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001448:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <main+0x58c>)
 800144a:	fb82 1203 	smull	r1, r2, r2, r3
 800144e:	1112      	asrs	r2, r2, #4
 8001450:	17db      	asrs	r3, r3, #31
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308


			  HAL_UART_Transmit_IT(&huart2, buffer_acc, sprintf(buffer_acc, " %d, %d, %d,   %d, %d, %d,   %f, %f, %f; \r\n ",
 8001458:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8001462:	6039      	str	r1, [r7, #0]
 8001464:	f8d7 62a0 	ldr.w	r6, [r7, #672]	; 0x2a0
					  	  	  	  filtered_xyz[0], filtered_xyz[1], filtered_xyz[2],
								  filter50_x, filter50_y, filter50_z,
								  IRR_xyz[0], IRR_xyz[1], IRR_xyz[2])); // Transmits the data
 8001468:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800146c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001470:	681b      	ldr	r3, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, buffer_acc, sprintf(buffer_acc, " %d, %d, %d,   %d, %d, %d,   %f, %f, %f; \r\n ",
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f870 	bl	8000558 <__aeabi_f2d>
 8001478:	4604      	mov	r4, r0
 800147a:	460d      	mov	r5, r1
								  IRR_xyz[0], IRR_xyz[1], IRR_xyz[2])); // Transmits the data
 800147c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001480:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001484:	685b      	ldr	r3, [r3, #4]
			  HAL_UART_Transmit_IT(&huart2, buffer_acc, sprintf(buffer_acc, " %d, %d, %d,   %d, %d, %d,   %f, %f, %f; \r\n ",
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f866 	bl	8000558 <__aeabi_f2d>
 800148c:	4680      	mov	r8, r0
 800148e:	4689      	mov	r9, r1
								  IRR_xyz[0], IRR_xyz[1], IRR_xyz[2])); // Transmits the data
 8001490:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001494:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001498:	689b      	ldr	r3, [r3, #8]
			  HAL_UART_Transmit_IT(&huart2, buffer_acc, sprintf(buffer_acc, " %d, %d, %d,   %d, %d, %d,   %f, %f, %f; \r\n ",
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f85c 	bl	8000558 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	f107 000c 	add.w	r0, r7, #12
 80014a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80014ac:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80014b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80014b4:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9600      	str	r6, [sp, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <main+0x590>)
 80014ce:	f009 fd49 	bl	800af64 <siprintf>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <main+0x594>)
 80014de:	f008 f915 	bl	800970c <HAL_UART_Transmit_IT>


		  }

		  index_50coef = (index_50coef+1) % 50;
 80014e2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <main+0x58c>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	1111      	asrs	r1, r2, #4
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	1a8a      	subs	r2, r1, r2
 80014f4:	2132      	movs	r1, #50	; 0x32
 80014f6:	fb01 f202 	mul.w	r2, r1, r2
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
	 if(tim2Flag == 1){
 8001500:	e5e9      	b.n	80010d6 <main+0x15e>
 8001502:	bf00      	nop
 8001504:	51eb851f 	.word	0x51eb851f
 8001508:	0800d648 	.word	0x0800d648
 800150c:	2000030c 	.word	0x2000030c

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	2230      	movs	r2, #48	; 0x30
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f009 fd83 	bl	800b02a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <SystemClock_Config+0xd0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <SystemClock_Config+0xd0>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemClock_Config+0xd0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <SystemClock_Config+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd4>)
 800155e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001584:	2310      	movs	r3, #16
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001592:	2307      	movs	r3, #7
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4618      	mov	r0, r3
 800159c:	f006 ff94 	bl	80084c8 <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015a6:	f000 f905 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	2302      	movs	r3, #2
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 f9f6 	bl	80089b8 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015d2:	f000 f8ef 	bl	80017b4 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_TIM3_Init+0x94>)
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <MX_TIM3_Init+0x98>)
 8001608:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_TIM3_Init+0x94>)
 800160c:	f640 0233 	movw	r2, #2099	; 0x833
 8001610:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_TIM3_Init+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_TIM3_Init+0x94>)
 800161a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800161e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_TIM3_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_TIM3_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_TIM3_Init+0x94>)
 800162e:	f007 fbe3 	bl	8008df8 <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001638:	f000 f8bc 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_TIM3_Init+0x94>)
 800164a:	f007 fd77 	bl	800913c <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001654:	f000 f8ae 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM3_Init+0x94>)
 8001666:	f007 ff7f 	bl	8009568 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f8a0 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200002c4 	.word	0x200002c4
 8001680:	40000400 	.word	0x40000400

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f007 ffd6 	bl	800966c <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 f875 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000030c 	.word	0x2000030c
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MX_GPIO_Init+0xd0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <MX_GPIO_Init+0xd0>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <MX_GPIO_Init+0xd0>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_GPIO_Init+0xd4>)
 8001764:	f005 fe14 	bl	8007390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_GPIO_Init+0xd8>)
 8001780:	f005 fb9e 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001784:	2320      	movs	r3, #32
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_GPIO_Init+0xd4>)
 800179c:	f005 fb90 	bl	8006ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020800 	.word	0x40020800

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_MspInit+0x4c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x4c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017fe:	2007      	movs	r0, #7
 8001800:	f005 fa8a 	bl	8006d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d115      	bne.n	800184e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_Base_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x4c>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	201d      	movs	r0, #29
 8001844:	f005 fa73 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001848:	201d      	movs	r0, #29
 800184a:	f005 fa8c 	bl	8006d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40000400 	.word	0x40000400
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_UART_MspInit+0x94>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d133      	bne.n	80018ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_UART_MspInit+0x98>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_UART_MspInit+0x98>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x98>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <HAL_UART_MspInit+0x9c>)
 80018d6:	f005 faf3 	bl	8006ec0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2026      	movs	r0, #38	; 0x26
 80018e0:	f005 fa25 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018e4:	2026      	movs	r0, #38	; 0x26
 80018e6:	f005 fa3e 	bl	8006d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f005 f8d0 	bl	8006af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM3_IRQHandler+0x10>)
 800195a:	f007 faff 	bl	8008f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200002c4 	.word	0x200002c4

08001968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART2_IRQHandler+0x10>)
 800196e:	f007 ff03 	bl	8009778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000030c 	.word	0x2000030c

0800197c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <BSP_I2C1_Init+0x58>)
 8001988:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <BSP_I2C1_Init+0x5c>)
 800198a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <BSP_I2C1_Init+0x60>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4912      	ldr	r1, [pc, #72]	; (80019dc <BSP_I2C1_Init+0x60>)
 8001994:	600a      	str	r2, [r1, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d117      	bne.n	80019ca <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <BSP_I2C1_Init+0x58>)
 800199c:	f006 f9c6 	bl	8007d2c <HAL_I2C_GetState>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d111      	bne.n	80019ca <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <BSP_I2C1_Init+0x58>)
 80019a8:	f000 f8e2 	bl	8001b70 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <BSP_I2C1_Init+0x58>)
 80019b4:	f000 f8a8 	bl	8001b08 <MX_I2C1_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019be:	f06f 0307 	mvn.w	r3, #7
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000358 	.word	0x20000358
 80019d8:	40005400 	.word	0x40005400
 80019dc:	200003ac 	.word	0x200003ac

080019e0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <BSP_I2C1_DeInit+0x48>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d014      	beq.n	8001a1c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <BSP_I2C1_DeInit+0x48>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <BSP_I2C1_DeInit+0x48>)
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <BSP_I2C1_DeInit+0x48>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <BSP_I2C1_DeInit+0x4c>)
 8001a06:	f000 f8fd 	bl	8001c04 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <BSP_I2C1_DeInit+0x4c>)
 8001a0c:	f005 fe1e 	bl	800764c <HAL_I2C_DeInit>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001a16:	f06f 0307 	mvn.w	r3, #7
 8001a1a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200003ac 	.word	0x200003ac
 8001a2c:	20000358 	.word	0x20000358

08001a30 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af04      	add	r7, sp, #16
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	81bb      	strh	r3, [r7, #12]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a4a:	89ba      	ldrh	r2, [r7, #12]
 8001a4c:	89f9      	ldrh	r1, [r7, #14]
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <BSP_I2C1_WriteReg+0x60>)
 8001a60:	f005 fe38 	bl	80076d4 <HAL_I2C_Mem_Write>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00c      	beq.n	8001a84 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a6a:	4809      	ldr	r0, [pc, #36]	; (8001a90 <BSP_I2C1_WriteReg+0x60>)
 8001a6c:	f006 f96c 	bl	8007d48 <HAL_I2C_GetError>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d103      	bne.n	8001a7e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a76:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e002      	b.n	8001a84 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a7e:	f06f 0303 	mvn.w	r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a84:	697b      	ldr	r3, [r7, #20]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000358 	.word	0x20000358

08001a94 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	81fb      	strh	r3, [r7, #14]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	81bb      	strh	r3, [r7, #12]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001aae:	89ba      	ldrh	r2, [r7, #12]
 8001ab0:	89f9      	ldrh	r1, [r7, #14]
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	480c      	ldr	r0, [pc, #48]	; (8001af4 <BSP_I2C1_ReadReg+0x60>)
 8001ac4:	f005 ff00 	bl	80078c8 <HAL_I2C_Mem_Read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <BSP_I2C1_ReadReg+0x60>)
 8001ad0:	f006 f93a 	bl	8007d48 <HAL_I2C_GetError>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d103      	bne.n	8001ae2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ada:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e002      	b.n	8001ae8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ae2:	f06f 0303 	mvn.w	r3, #3
 8001ae6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ae8:	697b      	ldr	r3, [r7, #20]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000358 	.word	0x20000358

08001af8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001afc:	f005 f80c 	bl	8006b18 <HAL_GetTick>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <MX_I2C1_Init+0x60>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_I2C1_Init+0x64>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f005 fc39 	bl	80073c4 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	00061a80 	.word	0x00061a80

08001b70 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9a:	2312      	movs	r3, #18
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <I2C1_MspInit+0x90>)
 8001bb2:	f005 f985 	bl	8006ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	; (8001c00 <I2C1_MspInit+0x90>)
 8001bd4:	f005 f974 	bl	8006ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001be2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <I2C1_MspInit+0x8c>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <I2C1_MspDeInit+0x30>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <I2C1_MspDeInit+0x30>)
 8001c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <I2C1_MspDeInit+0x34>)
 8001c1e:	f005 fad3 	bl	80071c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <I2C1_MspDeInit+0x34>)
 8001c28:	f005 face 	bl	80071c8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c56:	f009 fa3b 	bl	800b0d0 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
  }

  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e009      	b.n	8001ce0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <_write+0x12>
  }
  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f009 f9a0 	bl	800b0d0 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20018000 	.word	0x20018000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	200003b0 	.word	0x200003b0
 8001dc4:	200005f8 	.word	0x200005f8

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001df0:	f7ff ffea 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df6:	490d      	ldr	r1, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e0c:	4c0a      	ldr	r4, [pc, #40]	; (8001e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f009 f95f 	bl	800b0dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1e:	f7ff f8ab 	bl	8000f78 <main>
  bx  lr    
 8001e22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8001e30:	0800da60 	.word	0x0800da60
  ldr r2, =_sbss
 8001e34:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8001e38:	200005f4 	.word	0x200005f4

08001e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC_IRQHandler>
	...

08001e40 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e051      	b.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	7b1a      	ldrb	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <LIS2DW12_RegisterBusIO+0xcc>)
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <LIS2DW12_RegisterBusIO+0xd0>)
 8001e9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e020      	b.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e016      	b.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d112      	bne.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	461a      	mov	r2, r3
 8001eec:	2121      	movs	r1, #33	; 0x21
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fcc1 	bl	8002876 <LIS2DW12_Write_Reg>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08002c09 	.word	0x08002c09
 8001f10:	08002c3f 	.word	0x08002c3f

08001f14 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f9ce 	bl	80032c4 <lis2dw12_auto_increment_set>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e04b      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f8e2 	bl	8003104 <lis2dw12_block_data_update_set>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e03f      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 f9dc 	bl	8003310 <lis2dw12_fifo_mode_set>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e033      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3320      	adds	r3, #32
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 feb2 	bl	8002cd4 <lis2dw12_power_mode_set>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e027      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <LIS2DW12_Init+0xc0>)
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3320      	adds	r3, #32
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 ffa3 	bl	8002ee4 <lis2dw12_data_rate_set>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	e010      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3320      	adds	r3, #32
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f8cd 	bl	8003150 <lis2dw12_full_scale_set>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	e004      	b.n	8001fcc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	42c80000 	.word	0x42c80000

08001fd8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f888 	bl	80020f6 <LIS2DW12_ACC_Disable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	e010      	b.n	8002014 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3320      	adds	r3, #32
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f938 	bl	80032a2 <lis2dw12_device_id_get>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e000      	b.n	8002040 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <LIS2DW12_GetCapabilities+0x58>)
 8002088:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	44c80000 	.word	0x44c80000

080020a4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e019      	b.n	80020ee <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020cc:	461a      	mov	r2, r3
 80020ce:	eeb0 0a67 	vmov.f32	s0, s15
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fbea 	bl	80028ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e004      	b.n	80020ee <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e010      	b.n	800212e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fee6 	bl	8002ee4 <lis2dw12_data_rate_set>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e004      	b.n	800212e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3320      	adds	r3, #32
 800214a:	f107 020b 	add.w	r2, r7, #11
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f001 f823 	bl	800319c <lis2dw12_full_scale_get>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e080      	b.n	8002264 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3320      	adds	r3, #32
 8002166:	f107 020a 	add.w	r2, r7, #10
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fdff 	bl	8002d70 <lis2dw12_power_mode_get>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	e072      	b.n	8002264 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 800217e:	7abb      	ldrb	r3, [r7, #10]
 8002180:	2b1b      	cmp	r3, #27
 8002182:	bf8c      	ite	hi
 8002184:	2201      	movhi	r2, #1
 8002186:	2200      	movls	r2, #0
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	2a00      	cmp	r2, #0
 800218c:	d162      	bne.n	8002254 <LIS2DW12_ACC_GetSensitivity+0x11c>
 800218e:	2201      	movs	r2, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002196:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12f      	bne.n	8002208 <LIS2DW12_ACC_GetSensitivity+0xd0>
 80021a8:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04c      	beq.n	8002254 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d81b      	bhi.n	80021f8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e1 	.word	0x080021e1
 80021d0:	080021e9 	.word	0x080021e9
 80021d4:	080021f1 	.word	0x080021f1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4a24      	ldr	r2, [pc, #144]	; (800226c <LIS2DW12_ACC_GetSensitivity+0x134>)
 80021dc:	601a      	str	r2, [r3, #0]
          break;
 80021de:	e012      	b.n	8002206 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4a23      	ldr	r2, [pc, #140]	; (8002270 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80021e4:	601a      	str	r2, [r3, #0]
          break;
 80021e6:	e00e      	b.n	8002206 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 80021ec:	601a      	str	r2, [r3, #0]
          break;
 80021ee:	e00a      	b.n	8002206 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <LIS2DW12_ACC_GetSensitivity+0x140>)
 80021f4:	601a      	str	r2, [r3, #0]
          break;
 80021f6:	e006      	b.n	8002206 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4a20      	ldr	r2, [pc, #128]	; (800227c <LIS2DW12_ACC_GetSensitivity+0x144>)
 80021fc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	60fb      	str	r3, [r7, #12]
          break;
 8002204:	bf00      	nop
      }
      break;
 8002206:	e02c      	b.n	8002262 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d81a      	bhi.n	8002244 <LIS2DW12_ACC_GetSensitivity+0x10c>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222d 	.word	0x0800222d
 800221c:	08002235 	.word	0x08002235
 8002220:	0800223d 	.word	0x0800223d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8002228:	601a      	str	r2, [r3, #0]
          break;
 800222a:	e012      	b.n	8002252 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8002230:	601a      	str	r2, [r3, #0]
          break;
 8002232:	e00e      	b.n	8002252 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4a0d      	ldr	r2, [pc, #52]	; (800226c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002238:	601a      	str	r2, [r3, #0]
          break;
 800223a:	e00a      	b.n	8002252 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002240:	601a      	str	r2, [r3, #0]
          break;
 8002242:	e006      	b.n	8002252 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002248:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	60fb      	str	r3, [r7, #12]
          break;
 8002250:	bf00      	nop
      }
      break;
 8002252:	e006      	b.n	8002262 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002258:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	60fb      	str	r3, [r7, #12]
      break;
 8002260:	bf00      	nop
  }

  return ret;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	3f79db23 	.word	0x3f79db23
 8002270:	3ff9db23 	.word	0x3ff9db23
 8002274:	4079db23 	.word	0x4079db23
 8002278:	40f9db23 	.word	0x40f9db23
 800227c:	bf800000 	.word	0xbf800000
 8002280:	3e79db23 	.word	0x3e79db23
 8002284:	3ef9db23 	.word	0x3ef9db23

08002288 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3320      	adds	r3, #32
 800229a:	f107 020b 	add.w	r2, r7, #11
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fe65 	bl	8002f70 <lis2dw12_data_rate_get>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	e14f      	b.n	8002552 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3320      	adds	r3, #32
 80022b6:	f107 020a 	add.w	r2, r7, #10
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fd57 	bl	8002d70 <lis2dw12_power_mode_get>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	e141      	b.n	8002552 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	2b32      	cmp	r3, #50	; 0x32
 80022d2:	f200 8136 	bhi.w	8002542 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080023a9 	.word	0x080023a9
 80022e0:	080023b3 	.word	0x080023b3
 80022e4:	0800240d 	.word	0x0800240d
 80022e8:	08002415 	.word	0x08002415
 80022ec:	0800241d 	.word	0x0800241d
 80022f0:	08002425 	.word	0x08002425
 80022f4:	0800242d 	.word	0x0800242d
 80022f8:	08002435 	.word	0x08002435
 80022fc:	0800248f 	.word	0x0800248f
 8002300:	080024e9 	.word	0x080024e9
 8002304:	08002543 	.word	0x08002543
 8002308:	08002543 	.word	0x08002543
 800230c:	08002543 	.word	0x08002543
 8002310:	08002543 	.word	0x08002543
 8002314:	08002543 	.word	0x08002543
 8002318:	08002543 	.word	0x08002543
 800231c:	08002543 	.word	0x08002543
 8002320:	08002543 	.word	0x08002543
 8002324:	080023a9 	.word	0x080023a9
 8002328:	08002543 	.word	0x08002543
 800232c:	08002543 	.word	0x08002543
 8002330:	08002543 	.word	0x08002543
 8002334:	08002543 	.word	0x08002543
 8002338:	08002543 	.word	0x08002543
 800233c:	08002543 	.word	0x08002543
 8002340:	08002543 	.word	0x08002543
 8002344:	08002543 	.word	0x08002543
 8002348:	08002543 	.word	0x08002543
 800234c:	08002543 	.word	0x08002543
 8002350:	08002543 	.word	0x08002543
 8002354:	08002543 	.word	0x08002543
 8002358:	08002543 	.word	0x08002543
 800235c:	08002543 	.word	0x08002543
 8002360:	08002543 	.word	0x08002543
 8002364:	08002543 	.word	0x08002543
 8002368:	08002543 	.word	0x08002543
 800236c:	08002543 	.word	0x08002543
 8002370:	08002543 	.word	0x08002543
 8002374:	08002543 	.word	0x08002543
 8002378:	08002543 	.word	0x08002543
 800237c:	08002543 	.word	0x08002543
 8002380:	08002543 	.word	0x08002543
 8002384:	08002543 	.word	0x08002543
 8002388:	08002543 	.word	0x08002543
 800238c:	08002543 	.word	0x08002543
 8002390:	08002543 	.word	0x08002543
 8002394:	08002543 	.word	0x08002543
 8002398:	08002543 	.word	0x08002543
 800239c:	08002543 	.word	0x08002543
 80023a0:	08002543 	.word	0x08002543
 80023a4:	080023a9 	.word	0x080023a9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
      break;
 80023b0:	e0ce      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80023b2:	7abb      	ldrb	r3, [r7, #10]
 80023b4:	2b1b      	cmp	r3, #27
 80023b6:	bf8c      	ite	hi
 80023b8:	2201      	movhi	r2, #1
 80023ba:	2200      	movls	r2, #0
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d11c      	bne.n	80023fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
 80023c2:	2201      	movs	r2, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2201      	movne	r2, #1
 80023d2:	2200      	moveq	r2, #0
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d10c      	bne.n	80023f4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 80023da:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4a5b      	ldr	r2, [pc, #364]	; (800255c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80023f0:	601a      	str	r2, [r3, #0]
          break;
 80023f2:	e00a      	b.n	800240a <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80023f8:	601a      	str	r2, [r3, #0]
          break;
 80023fa:	e006      	b.n	800240a <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002400:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	60fb      	str	r3, [r7, #12]
          break;
 8002408:	bf00      	nop
      }
      break;
 800240a:	e0a1      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4a53      	ldr	r2, [pc, #332]	; (800255c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8002410:	601a      	str	r2, [r3, #0]
      break;
 8002412:	e09d      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4a54      	ldr	r2, [pc, #336]	; (8002568 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8002418:	601a      	str	r2, [r3, #0]
      break;
 800241a:	e099      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4a53      	ldr	r2, [pc, #332]	; (800256c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8002420:	601a      	str	r2, [r3, #0]
      break;
 8002422:	e095      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4a52      	ldr	r2, [pc, #328]	; (8002570 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8002428:	601a      	str	r2, [r3, #0]
      break;
 800242a:	e091      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4a51      	ldr	r2, [pc, #324]	; (8002574 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002430:	601a      	str	r2, [r3, #0]
      break;
 8002432:	e08d      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002434:	7abb      	ldrb	r3, [r7, #10]
 8002436:	2b1b      	cmp	r3, #27
 8002438:	bf8c      	ite	hi
 800243a:	2201      	movhi	r2, #1
 800243c:	2200      	movls	r2, #0
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	2a00      	cmp	r2, #0
 8002442:	d11c      	bne.n	800247e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8002444:	2201      	movs	r2, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800244e:	2a00      	cmp	r2, #0
 8002450:	bf14      	ite	ne
 8002452:	2201      	movne	r2, #1
 8002454:	2200      	moveq	r2, #0
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	2a00      	cmp	r2, #0
 800245a:	d10c      	bne.n	8002476 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800245c:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4a41      	ldr	r2, [pc, #260]	; (8002578 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8002472:	601a      	str	r2, [r3, #0]
          break;
 8002474:	e00a      	b.n	800248c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800247a:	601a      	str	r2, [r3, #0]
          break;
 800247c:	e006      	b.n	800248c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4a38      	ldr	r2, [pc, #224]	; (8002564 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002482:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	60fb      	str	r3, [r7, #12]
          break;
 800248a:	bf00      	nop
      }
      break;
 800248c:	e060      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800248e:	7abb      	ldrb	r3, [r7, #10]
 8002490:	2b1b      	cmp	r3, #27
 8002492:	bf8c      	ite	hi
 8002494:	2201      	movhi	r2, #1
 8002496:	2200      	movls	r2, #0
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	2a00      	cmp	r2, #0
 800249c:	d11c      	bne.n	80024d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800249e:	2201      	movs	r2, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	bf14      	ite	ne
 80024ac:	2201      	movne	r2, #1
 80024ae:	2200      	moveq	r2, #0
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d10c      	bne.n	80024d0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80024b6:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4a2c      	ldr	r2, [pc, #176]	; (800257c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80024cc:	601a      	str	r2, [r3, #0]
          break;
 80024ce:	e00a      	b.n	80024e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80024d4:	601a      	str	r2, [r3, #0]
          break;
 80024d6:	e006      	b.n	80024e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80024dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	60fb      	str	r3, [r7, #12]
          break;
 80024e4:	bf00      	nop
      }
      break;
 80024e6:	e033      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80024e8:	7abb      	ldrb	r3, [r7, #10]
 80024ea:	2b1b      	cmp	r3, #27
 80024ec:	bf8c      	ite	hi
 80024ee:	2201      	movhi	r2, #1
 80024f0:	2200      	movls	r2, #0
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d11c      	bne.n	8002532 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80024f8:	2201      	movs	r2, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002502:	2a00      	cmp	r2, #0
 8002504:	bf14      	ite	ne
 8002506:	2201      	movne	r2, #1
 8002508:	2200      	moveq	r2, #0
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	2a00      	cmp	r2, #0
 800250e:	d10c      	bne.n	800252a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8002510:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8002526:	601a      	str	r2, [r3, #0]
          break;
 8002528:	e00a      	b.n	8002540 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800252e:	601a      	str	r2, [r3, #0]
          break;
 8002530:	e006      	b.n	8002540 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002536:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	60fb      	str	r3, [r7, #12]
          break;
 800253e:	bf00      	nop
      }
      break;
 8002540:	e006      	b.n	8002550 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002546:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	60fb      	str	r3, [r7, #12]
      break;
 800254e:	bf00      	nop
  }

  return ret;
 8002550:	68fb      	ldr	r3, [r7, #12]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	41480000 	.word	0x41480000
 8002560:	3fcccccd 	.word	0x3fcccccd
 8002564:	bf800000 	.word	0xbf800000
 8002568:	41c80000 	.word	0x41c80000
 800256c:	42480000 	.word	0x42480000
 8002570:	42c80000 	.word	0x42c80000
 8002574:	43480000 	.word	0x43480000
 8002578:	43c80000 	.word	0x43c80000
 800257c:	44480000 	.word	0x44480000
 8002580:	44c80000 	.word	0x44c80000

08002584 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	ed97 0a00 	vldr	s0, [r7]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f805 	bl	80025a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025b4:	460b      	mov	r3, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d109      	bne.n	80025da <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80025c6:	79ba      	ldrb	r2, [r7, #6]
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4619      	mov	r1, r3
 80025cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f96b 	bl	80028ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	e008      	b.n	80025ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80025da:	79ba      	ldrb	r2, [r7, #6]
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4619      	mov	r1, r3
 80025e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fa7d 	bl	8002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80025ea:	4603      	mov	r3, r0
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3320      	adds	r3, #32
 8002606:	f107 020b 	add.w	r2, r7, #11
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fdc5 	bl	800319c <lis2dw12_full_scale_get>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	e027      	b.n	800266e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d81b      	bhi.n	800265c <LIS2DW12_ACC_GetFullScale+0x68>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <LIS2DW12_ACC_GetFullScale+0x38>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002655 	.word	0x08002655
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]
      break;
 8002642:	e013      	b.n	800266c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2204      	movs	r2, #4
 8002648:	601a      	str	r2, [r3, #0]
      break;
 800264a:	e00f      	b.n	800266c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2208      	movs	r2, #8
 8002650:	601a      	str	r2, [r3, #0]
      break;
 8002652:	e00b      	b.n	800266c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2210      	movs	r2, #16
 8002658:	601a      	str	r2, [r3, #0]
      break;
 800265a:	e007      	b.n	800266c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f04f 32ff 	mov.w	r2, #4294967295
 8002662:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	60fb      	str	r3, [r7, #12]
      break;
 800266a:	bf00      	nop
  }

  return ret;
 800266c:	68fb      	ldr	r3, [r7, #12]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop

08002678 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	dd0b      	ble.n	80026a0 <LIS2DW12_ACC_SetFullScale+0x28>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b04      	cmp	r3, #4
 800268c:	dd06      	ble.n	800269c <LIS2DW12_ACC_SetFullScale+0x24>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b08      	cmp	r3, #8
 8002692:	dc01      	bgt.n	8002698 <LIS2DW12_ACC_SetFullScale+0x20>
 8002694:	2302      	movs	r3, #2
 8002696:	e004      	b.n	80026a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002698:	2303      	movs	r3, #3
 800269a:	e002      	b.n	80026a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80026a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80026a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3320      	adds	r3, #32
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fd4f 	bl	8003150 <lis2dw12_full_scale_set>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	e000      	b.n	80026c0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3320      	adds	r3, #32
 80026da:	f107 020b 	add.w	r2, r7, #11
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fb45 	bl	8002d70 <lis2dw12_power_mode_get>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	e068      	b.n	80027c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3320      	adds	r3, #32
 80026f6:	f107 020c 	add.w	r2, r7, #12
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd85 	bl	800320c <lis2dw12_acceleration_raw_get>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	e05a      	b.n	80027c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	2b1b      	cmp	r3, #27
 8002712:	bf8c      	ite	hi
 8002714:	2201      	movhi	r2, #1
 8002716:	2200      	movls	r2, #0
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	2a00      	cmp	r2, #0
 800271c:	d14d      	bne.n	80027ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002726:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d124      	bne.n	8002782 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8002738:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d037      	beq.n	80027ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800274a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	da00      	bge.n	8002754 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8002752:	330f      	adds	r3, #15
 8002754:	111b      	asrs	r3, r3, #4
 8002756:	b21a      	sxth	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800275c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002760:	2b00      	cmp	r3, #0
 8002762:	da00      	bge.n	8002766 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8002764:	330f      	adds	r3, #15
 8002766:	111b      	asrs	r3, r3, #4
 8002768:	b21a      	sxth	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800276e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	da00      	bge.n	8002778 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8002776:	330f      	adds	r3, #15
 8002778:	111b      	asrs	r3, r3, #4
 800277a:	b21a      	sxth	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	809a      	strh	r2, [r3, #4]
      break;
 8002780:	e01f      	b.n	80027c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002782:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	da00      	bge.n	800278c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800278a:	3303      	adds	r3, #3
 800278c:	109b      	asrs	r3, r3, #2
 800278e:	b21a      	sxth	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da00      	bge.n	800279e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800279c:	3303      	adds	r3, #3
 800279e:	109b      	asrs	r3, r3, #2
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80027a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da00      	bge.n	80027b0 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80027ae:	3303      	adds	r3, #3
 80027b0:	109b      	asrs	r3, r3, #2
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	809a      	strh	r2, [r3, #4]
      break;
 80027b8:	e003      	b.n	80027c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	617b      	str	r3, [r7, #20]
      break;
 80027c0:	bf00      	nop
  }

  return ret;
 80027c2:	697b      	ldr	r3, [r7, #20]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff70 	bl	80026c8 <LIS2DW12_ACC_GetAxesRaw>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e03c      	b.n	800286e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fc9c 	bl	8002138 <LIS2DW12_ACC_GetSensitivity>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e030      	b.n	800286e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800280c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002818:	edd7 7a03 	vldr	s15, [r7, #12]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002824:	ee17 2a90 	vmov	r2, s15
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800282c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	edd7 7a03 	vldr	s15, [r7, #12]
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002844:	ee17 2a90 	vmov	r2, s15
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800284c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002858:	edd7 7a03 	vldr	s15, [r7, #12]
 800285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002864:	ee17 2a90 	vmov	r2, s15
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
 8002882:	4613      	mov	r3, r2
 8002884:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f103 0020 	add.w	r0, r3, #32
 800288c:	1cba      	adds	r2, r7, #2
 800288e:	78f9      	ldrb	r1, [r7, #3]
 8002890:	2301      	movs	r3, #1
 8002892:	f000 fa07 	bl	8002ca4 <lis2dw12_write_reg>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	e000      	b.n	80028a4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80028b8:	460b      	mov	r3, r1
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	4613      	mov	r3, r2
 80028be:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d80b      	bhi.n	80028e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	0800290d 	.word	0x0800290d
 80028d4:	08002939 	.word	0x08002939
 80028d8:	08002965 	.word	0x08002965
 80028dc:	08002991 	.word	0x08002991
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80028e6:	2304      	movs	r3, #4
 80028e8:	75fb      	strb	r3, [r7, #23]
          break;
 80028ea:	e002      	b.n	80028f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80028ec:	2314      	movs	r3, #20
 80028ee:	75fb      	strb	r3, [r7, #23]
          break;
 80028f0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80028f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	d400      	bmi.n	8002906 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002904:	e05a      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002906:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002908:	60bb      	str	r3, [r7, #8]
      break;
 800290a:	e057      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800290c:	79bb      	ldrb	r3, [r7, #6]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d002      	beq.n	8002918 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002912:	2303      	movs	r3, #3
 8002914:	75fb      	strb	r3, [r7, #23]
          break;
 8002916:	e002      	b.n	800291e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002918:	2313      	movs	r3, #19
 800291a:	75fb      	strb	r3, [r7, #23]
          break;
 800291c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800291e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002922:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	dc00      	bgt.n	8002932 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002930:	e044      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002932:	4b66      	ldr	r3, [pc, #408]	; (8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002934:	60bb      	str	r3, [r7, #8]
      break;
 8002936:	e041      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d002      	beq.n	8002944 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800293e:	2302      	movs	r3, #2
 8002940:	75fb      	strb	r3, [r7, #23]
          break;
 8002942:	e002      	b.n	800294a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002944:	2312      	movs	r3, #18
 8002946:	75fb      	strb	r3, [r7, #23]
          break;
 8002948:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800294a:	edd7 7a02 	vldr	s15, [r7, #8]
 800294e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	dc00      	bgt.n	800295e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800295c:	e02e      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002960:	60bb      	str	r3, [r7, #8]
      break;
 8002962:	e02b      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002964:	79bb      	ldrb	r3, [r7, #6]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
          break;
 800296e:	e002      	b.n	8002976 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002970:	2311      	movs	r3, #17
 8002972:	75fb      	strb	r3, [r7, #23]
          break;
 8002974:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002976:	edd7 7a02 	vldr	s15, [r7, #8]
 800297a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	dc00      	bgt.n	800298a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002988:	e018      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800298c:	60bb      	str	r3, [r7, #8]
      break;
 800298e:	e015      	b.n	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
          break;
 800299a:	e002      	b.n	80029a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800299c:	2310      	movs	r3, #16
 800299e:	75fb      	strb	r3, [r7, #23]
          break;
 80029a0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80029a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80029aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	dc00      	bgt.n	80029b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80029b4:	e001      	b.n	80029ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80029b6:	4b45      	ldr	r3, [pc, #276]	; (8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80029b8:	60bb      	str	r3, [r7, #8]
      break;
 80029ba:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80029bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002ad0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80029c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	d801      	bhi.n	80029d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04d      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80029d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80029da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	d801      	bhi.n	80029e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e042      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80029f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d801      	bhi.n	80029fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e037      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80029fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002ad4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d801      	bhi.n	8002a14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e02c      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002ad8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	d801      	bhi.n	8002a2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002a26:	2305      	movs	r3, #5
 8002a28:	e021      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3a:	d801      	bhi.n	8002a40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002a3c:	2306      	movs	r3, #6
 8002a3e:	e016      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a44:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002adc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	d801      	bhi.n	8002a56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00b      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ae0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d801      	bhi.n	8002a6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	e000      	b.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002a6c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002a6e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3320      	adds	r3, #32
 8002a74:	7dba      	ldrb	r2, [r7, #22]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa33 	bl	8002ee4 <lis2dw12_data_rate_set>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	e018      	b.n	8002abc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	7dfa      	ldrb	r2, [r7, #23]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f91e 	bl	8002cd4 <lis2dw12_power_mode_set>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e00b      	b.n	8002abc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	79fa      	ldrb	r2, [r7, #7]
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	79ba      	ldrb	r2, [r7, #6]
 8002ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	41480000 	.word	0x41480000
 8002ac8:	43480000 	.word	0x43480000
 8002acc:	43480000 	.word	0x43480000
 8002ad0:	3fcccccd 	.word	0x3fcccccd
 8002ad4:	42480000 	.word	0x42480000
 8002ad8:	42c80000 	.word	0x42c80000
 8002adc:	43c80000 	.word	0x43c80000
 8002ae0:	44480000 	.word	0x44480000

08002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	ed87 0a02 	vstr	s0, [r7, #8]
 8002af0:	460b      	mov	r3, r1
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	79ba      	ldrb	r2, [r7, #6]
 8002b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002bcc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	d801      	bhi.n	8002b1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002b1c:	e04d      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b22:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d801      	bhi.n	8002b34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002b32:	e042      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b38:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	d801      	bhi.n	8002b4a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002b48:	e037      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b4e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002bdc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d801      	bhi.n	8002b60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002b5e:	e02c      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b64:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002be4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d801      	bhi.n	8002b76 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002b74:	e021      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b7a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002bec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	d801      	bhi.n	8002b8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002b8a:	e016      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d801      	bhi.n	8002ba2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002ba0:	e00b      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002ba2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ba6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002bfc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d801      	bhi.n	8002bb8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002bb6:	e000      	b.n	8002bba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	3fcccccd 	.word	0x3fcccccd
 8002bd0:	3fcccccd 	.word	0x3fcccccd
 8002bd4:	41480000 	.word	0x41480000
 8002bd8:	41c80000 	.word	0x41c80000
 8002bdc:	42480000 	.word	0x42480000
 8002be0:	42480000 	.word	0x42480000
 8002be4:	42c80000 	.word	0x42c80000
 8002be8:	42c80000 	.word	0x42c80000
 8002bec:	43480000 	.word	0x43480000
 8002bf0:	43480000 	.word	0x43480000
 8002bf4:	43c80000 	.word	0x43c80000
 8002bf8:	43c80000 	.word	0x43c80000
 8002bfc:	44480000 	.word	0x44480000
 8002c00:	44480000 	.word	0x44480000
 8002c04:	44c80000 	.word	0x44c80000

08002c08 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	461a      	mov	r2, r3
 8002c14:	460b      	mov	r3, r1
 8002c16:	72fb      	strb	r3, [r7, #11]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	695c      	ldr	r4, [r3, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	7b1b      	ldrb	r3, [r3, #12]
 8002c28:	b298      	uxth	r0, r3
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	b299      	uxth	r1, r3
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	47a0      	blx	r4
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}

08002c3e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c3e:	b590      	push	{r4, r7, lr}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	72fb      	strb	r3, [r7, #11]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	691c      	ldr	r4, [r3, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	7b1b      	ldrb	r3, [r3, #12]
 8002c5e:	b298      	uxth	r0, r3
 8002c60:	7afb      	ldrb	r3, [r7, #11]
 8002c62:	b299      	uxth	r1, r3
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	47a0      	blx	r4
 8002c6a:	4603      	mov	r3, r0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
 8002c84:	4613      	mov	r3, r2
 8002c86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685c      	ldr	r4, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68d8      	ldr	r0, [r3, #12]
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	7af9      	ldrb	r1, [r7, #11]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	47a0      	blx	r4
 8002c98:	6178      	str	r0, [r7, #20]

  return ret;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd90      	pop	{r4, r7, pc}

08002ca4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	72fb      	strb	r3, [r7, #11]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681c      	ldr	r4, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68d8      	ldr	r0, [r3, #12]
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	7af9      	ldrb	r1, [r7, #11]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	47a0      	blx	r4
 8002cc8:	6178      	str	r0, [r7, #20]

  return ret;
 8002cca:	697b      	ldr	r3, [r7, #20]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}

08002cd4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffc3 	bl	8002c74 <lis2dw12_read_reg>
 8002cee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	7c3b      	ldrb	r3, [r7, #16]
 8002d02:	f362 0383 	bfi	r3, r2, #2, #2
 8002d06:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	7c3b      	ldrb	r3, [r7, #16]
 8002d12:	f362 0301 	bfi	r3, r2, #0, #2
 8002d16:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d18:	f107 0210 	add.w	r2, r7, #16
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	2120      	movs	r1, #32
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ffbf 	bl	8002ca4 <lis2dw12_write_reg>
 8002d26:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002d2e:	f107 020c 	add.w	r2, r7, #12
 8002d32:	2301      	movs	r3, #1
 8002d34:	2125      	movs	r1, #37	; 0x25
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff9c 	bl	8002c74 <lis2dw12_read_reg>
 8002d3c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	7b3b      	ldrb	r3, [r7, #12]
 8002d50:	f362 0382 	bfi	r3, r2, #2, #1
 8002d54:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002d56:	f107 020c 	add.w	r2, r7, #12
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	2125      	movs	r1, #37	; 0x25
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffa0 	bl	8002ca4 <lis2dw12_write_reg>
 8002d64:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002d66:	697b      	ldr	r3, [r7, #20]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d7a:	f107 0210 	add.w	r2, r7, #16
 8002d7e:	2301      	movs	r3, #1
 8002d80:	2120      	movs	r1, #32
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff76 	bl	8002c74 <lis2dw12_read_reg>
 8002d88:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 80a3 	bne.w	8002ed8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002d92:	f107 020c 	add.w	r2, r7, #12
 8002d96:	2301      	movs	r3, #1
 8002d98:	2125      	movs	r1, #37	; 0x25
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff6a 	bl	8002c74 <lis2dw12_read_reg>
 8002da0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002da2:	7b3b      	ldrb	r3, [r7, #12]
 8002da4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	011a      	lsls	r2, r3, #4
 8002dac:	7c3b      	ldrb	r3, [r7, #16]
 8002dae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002db8:	7c3a      	ldrb	r2, [r7, #16]
 8002dba:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002dbe:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002dc0:	4413      	add	r3, r2
 8002dc2:	2b1b      	cmp	r3, #27
 8002dc4:	f200 8084 	bhi.w	8002ed0 <lis2dw12_power_mode_get+0x160>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <lis2dw12_power_mode_get+0x60>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002e61 	.word	0x08002e61
 8002dd4:	08002e59 	.word	0x08002e59
 8002dd8:	08002e51 	.word	0x08002e51
 8002ddc:	08002e49 	.word	0x08002e49
 8002de0:	08002e41 	.word	0x08002e41
 8002de4:	08002ed1 	.word	0x08002ed1
 8002de8:	08002ed1 	.word	0x08002ed1
 8002dec:	08002ed1 	.word	0x08002ed1
 8002df0:	08002e81 	.word	0x08002e81
 8002df4:	08002e79 	.word	0x08002e79
 8002df8:	08002e71 	.word	0x08002e71
 8002dfc:	08002e69 	.word	0x08002e69
 8002e00:	08002ed1 	.word	0x08002ed1
 8002e04:	08002ed1 	.word	0x08002ed1
 8002e08:	08002ed1 	.word	0x08002ed1
 8002e0c:	08002ed1 	.word	0x08002ed1
 8002e10:	08002ea9 	.word	0x08002ea9
 8002e14:	08002ea1 	.word	0x08002ea1
 8002e18:	08002e99 	.word	0x08002e99
 8002e1c:	08002e91 	.word	0x08002e91
 8002e20:	08002e89 	.word	0x08002e89
 8002e24:	08002ed1 	.word	0x08002ed1
 8002e28:	08002ed1 	.word	0x08002ed1
 8002e2c:	08002ed1 	.word	0x08002ed1
 8002e30:	08002ec9 	.word	0x08002ec9
 8002e34:	08002ec1 	.word	0x08002ec1
 8002e38:	08002eb9 	.word	0x08002eb9
 8002e3c:	08002eb1 	.word	0x08002eb1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	701a      	strb	r2, [r3, #0]
        break;
 8002e46:	e047      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	701a      	strb	r2, [r3, #0]
        break;
 8002e4e:	e043      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]
        break;
 8002e56:	e03f      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
        break;
 8002e5e:	e03b      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
        break;
 8002e66:	e037      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	220b      	movs	r2, #11
 8002e6c:	701a      	strb	r2, [r3, #0]
        break;
 8002e6e:	e033      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	220a      	movs	r2, #10
 8002e74:	701a      	strb	r2, [r3, #0]
        break;
 8002e76:	e02f      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2209      	movs	r2, #9
 8002e7c:	701a      	strb	r2, [r3, #0]
        break;
 8002e7e:	e02b      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2208      	movs	r2, #8
 8002e84:	701a      	strb	r2, [r3, #0]
        break;
 8002e86:	e027      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2214      	movs	r2, #20
 8002e8c:	701a      	strb	r2, [r3, #0]
        break;
 8002e8e:	e023      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2213      	movs	r2, #19
 8002e94:	701a      	strb	r2, [r3, #0]
        break;
 8002e96:	e01f      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2212      	movs	r2, #18
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	e01b      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2211      	movs	r2, #17
 8002ea4:	701a      	strb	r2, [r3, #0]
        break;
 8002ea6:	e017      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2210      	movs	r2, #16
 8002eac:	701a      	strb	r2, [r3, #0]
        break;
 8002eae:	e013      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	221b      	movs	r2, #27
 8002eb4:	701a      	strb	r2, [r3, #0]
        break;
 8002eb6:	e00f      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	221a      	movs	r2, #26
 8002ebc:	701a      	strb	r2, [r3, #0]
        break;
 8002ebe:	e00b      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2219      	movs	r2, #25
 8002ec4:	701a      	strb	r2, [r3, #0]
        break;
 8002ec6:	e007      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2218      	movs	r2, #24
 8002ecc:	701a      	strb	r2, [r3, #0]
        break;
 8002ece:	e003      	b.n	8002ed8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
        break;
 8002ed6:	bf00      	nop
    }
  }

  return ret;
 8002ed8:	697b      	ldr	r3, [r7, #20]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop

08002ee4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002ef0:	f107 0210 	add.w	r2, r7, #16
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2120      	movs	r1, #32
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff febb 	bl	8002c74 <lis2dw12_read_reg>
 8002efe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	7c3b      	ldrb	r3, [r7, #16]
 8002f10:	f362 1307 	bfi	r3, r2, #4, #4
 8002f14:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f16:	f107 0210 	add.w	r2, r7, #16
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fec0 	bl	8002ca4 <lis2dw12_write_reg>
 8002f24:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002f2c:	f107 020c 	add.w	r2, r7, #12
 8002f30:	2301      	movs	r3, #1
 8002f32:	2122      	movs	r1, #34	; 0x22
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fe9d 	bl	8002c74 <lis2dw12_read_reg>
 8002f3a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d110      	bne.n	8002f64 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	7b3b      	ldrb	r3, [r7, #12]
 8002f4e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f52:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002f54:	f107 020c 	add.w	r2, r7, #12
 8002f58:	2301      	movs	r3, #1
 8002f5a:	2122      	movs	r1, #34	; 0x22
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fea1 	bl	8002ca4 <lis2dw12_write_reg>
 8002f62:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002f64:	697b      	ldr	r3, [r7, #20]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f7a:	f107 0210 	add.w	r2, r7, #16
 8002f7e:	2301      	movs	r3, #1
 8002f80:	2120      	movs	r1, #32
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fe76 	bl	8002c74 <lis2dw12_read_reg>
 8002f88:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 80b3 	bne.w	80030f8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	2301      	movs	r3, #1
 8002f98:	2122      	movs	r1, #34	; 0x22
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fe6a 	bl	8002c74 <lis2dw12_read_reg>
 8002fa0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002fa2:	7b3b      	ldrb	r3, [r7, #12]
 8002fa4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	7c3a      	ldrb	r2, [r7, #16]
 8002fae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	2b32      	cmp	r3, #50	; 0x32
 8002fb8:	f200 809a 	bhi.w	80030f0 <lis2dw12_data_rate_get+0x180>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <lis2dw12_data_rate_get+0x54>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08003091 	.word	0x08003091
 8002fc8:	08003099 	.word	0x08003099
 8002fcc:	080030a1 	.word	0x080030a1
 8002fd0:	080030a9 	.word	0x080030a9
 8002fd4:	080030b1 	.word	0x080030b1
 8002fd8:	080030b9 	.word	0x080030b9
 8002fdc:	080030c1 	.word	0x080030c1
 8002fe0:	080030c9 	.word	0x080030c9
 8002fe4:	080030d1 	.word	0x080030d1
 8002fe8:	080030d9 	.word	0x080030d9
 8002fec:	080030f1 	.word	0x080030f1
 8002ff0:	080030f1 	.word	0x080030f1
 8002ff4:	080030f1 	.word	0x080030f1
 8002ff8:	080030f1 	.word	0x080030f1
 8002ffc:	080030f1 	.word	0x080030f1
 8003000:	080030f1 	.word	0x080030f1
 8003004:	080030f1 	.word	0x080030f1
 8003008:	080030f1 	.word	0x080030f1
 800300c:	080030e9 	.word	0x080030e9
 8003010:	080030f1 	.word	0x080030f1
 8003014:	080030f1 	.word	0x080030f1
 8003018:	080030f1 	.word	0x080030f1
 800301c:	080030f1 	.word	0x080030f1
 8003020:	080030f1 	.word	0x080030f1
 8003024:	080030f1 	.word	0x080030f1
 8003028:	080030f1 	.word	0x080030f1
 800302c:	080030f1 	.word	0x080030f1
 8003030:	080030f1 	.word	0x080030f1
 8003034:	080030f1 	.word	0x080030f1
 8003038:	080030f1 	.word	0x080030f1
 800303c:	080030f1 	.word	0x080030f1
 8003040:	080030f1 	.word	0x080030f1
 8003044:	080030f1 	.word	0x080030f1
 8003048:	080030f1 	.word	0x080030f1
 800304c:	080030f1 	.word	0x080030f1
 8003050:	080030f1 	.word	0x080030f1
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f1 	.word	0x080030f1
 800305c:	080030f1 	.word	0x080030f1
 8003060:	080030f1 	.word	0x080030f1
 8003064:	080030f1 	.word	0x080030f1
 8003068:	080030f1 	.word	0x080030f1
 800306c:	080030f1 	.word	0x080030f1
 8003070:	080030f1 	.word	0x080030f1
 8003074:	080030f1 	.word	0x080030f1
 8003078:	080030f1 	.word	0x080030f1
 800307c:	080030f1 	.word	0x080030f1
 8003080:	080030f1 	.word	0x080030f1
 8003084:	080030f1 	.word	0x080030f1
 8003088:	080030f1 	.word	0x080030f1
 800308c:	080030e1 	.word	0x080030e1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
        break;
 8003096:	e02f      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
        break;
 800309e:	e02b      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
        break;
 80030a6:	e027      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2203      	movs	r2, #3
 80030ac:	701a      	strb	r2, [r3, #0]
        break;
 80030ae:	e023      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2204      	movs	r2, #4
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e01f      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2205      	movs	r2, #5
 80030bc:	701a      	strb	r2, [r3, #0]
        break;
 80030be:	e01b      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2206      	movs	r2, #6
 80030c4:	701a      	strb	r2, [r3, #0]
        break;
 80030c6:	e017      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2207      	movs	r2, #7
 80030cc:	701a      	strb	r2, [r3, #0]
        break;
 80030ce:	e013      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2208      	movs	r2, #8
 80030d4:	701a      	strb	r2, [r3, #0]
        break;
 80030d6:	e00f      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2209      	movs	r2, #9
 80030dc:	701a      	strb	r2, [r3, #0]
        break;
 80030de:	e00b      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2232      	movs	r2, #50	; 0x32
 80030e4:	701a      	strb	r2, [r3, #0]
        break;
 80030e6:	e007      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2212      	movs	r2, #18
 80030ec:	701a      	strb	r2, [r3, #0]
        break;
 80030ee:	e003      	b.n	80030f8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
        break;
 80030f6:	bf00      	nop
    }
  }

  return ret;
 80030f8:	697b      	ldr	r3, [r7, #20]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop

08003104 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003110:	f107 0208 	add.w	r2, r7, #8
 8003114:	2301      	movs	r3, #1
 8003116:	2121      	movs	r1, #33	; 0x21
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fdab 	bl	8002c74 <lis2dw12_read_reg>
 800311e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	7a3b      	ldrb	r3, [r7, #8]
 8003130:	f362 03c3 	bfi	r3, r2, #3, #1
 8003134:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003136:	f107 0208 	add.w	r2, r7, #8
 800313a:	2301      	movs	r3, #1
 800313c:	2121      	movs	r1, #33	; 0x21
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fdb0 	bl	8002ca4 <lis2dw12_write_reg>
 8003144:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800315c:	f107 0208 	add.w	r2, r7, #8
 8003160:	2301      	movs	r3, #1
 8003162:	2125      	movs	r1, #37	; 0x25
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fd85 	bl	8002c74 <lis2dw12_read_reg>
 800316a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	b2da      	uxtb	r2, r3
 800317a:	7a3b      	ldrb	r3, [r7, #8]
 800317c:	f362 1305 	bfi	r3, r2, #4, #2
 8003180:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003182:	f107 0208 	add.w	r2, r7, #8
 8003186:	2301      	movs	r3, #1
 8003188:	2125      	movs	r1, #37	; 0x25
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fd8a 	bl	8002ca4 <lis2dw12_write_reg>
 8003190:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80031a6:	f107 0208 	add.w	r2, r7, #8
 80031aa:	2301      	movs	r3, #1
 80031ac:	2125      	movs	r1, #37	; 0x25
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fd60 	bl	8002c74 <lis2dw12_read_reg>
 80031b4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80031b6:	7a3b      	ldrb	r3, [r7, #8]
 80031b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d81a      	bhi.n	80031f8 <lis2dw12_full_scale_get+0x5c>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <lis2dw12_full_scale_get+0x2c>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031e1 	.word	0x080031e1
 80031d0:	080031e9 	.word	0x080031e9
 80031d4:	080031f1 	.word	0x080031f1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
      break;
 80031de:	e00f      	b.n	8003200 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
      break;
 80031e6:	e00b      	b.n	8003200 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
      break;
 80031ee:	e007      	b.n	8003200 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2203      	movs	r2, #3
 80031f4:	701a      	strb	r2, [r3, #0]
      break;
 80031f6:	e003      	b.n	8003200 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
      break;
 80031fe:	bf00      	nop
  }

  return ret;
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003216:	f107 020c 	add.w	r2, r7, #12
 800321a:	2306      	movs	r3, #6
 800321c:	2128      	movs	r1, #40	; 0x28
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fd28 	bl	8002c74 <lis2dw12_read_reg>
 8003224:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003226:	7b7b      	ldrb	r3, [r7, #13]
 8003228:	b21a      	sxth	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003234:	b29b      	uxth	r3, r3
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b29a      	uxth	r2, r3
 800323a:	7b3b      	ldrb	r3, [r7, #12]
 800323c:	b29b      	uxth	r3, r3
 800323e:	4413      	add	r3, r2
 8003240:	b29b      	uxth	r3, r3
 8003242:	b21a      	sxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3302      	adds	r3, #2
 800324e:	b212      	sxth	r2, r2
 8003250:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3302      	adds	r3, #2
 8003256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800325a:	b29b      	uxth	r3, r3
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	b29a      	uxth	r2, r3
 8003260:	7bbb      	ldrb	r3, [r7, #14]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4413      	add	r3, r2
 8003266:	b29a      	uxth	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	3302      	adds	r3, #2
 800326c:	b212      	sxth	r2, r2
 800326e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003270:	7c7a      	ldrb	r2, [r7, #17]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	3304      	adds	r3, #4
 8003276:	b212      	sxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003282:	b29b      	uxth	r3, r3
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b29a      	uxth	r2, r3
 8003288:	7c3b      	ldrb	r3, [r7, #16]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4413      	add	r3, r2
 800328e:	b29a      	uxth	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3304      	adds	r3, #4
 8003294:	b212      	sxth	r2, r2
 8003296:	801a      	strh	r2, [r3, #0]

  return ret;
 8003298:	697b      	ldr	r3, [r7, #20]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80032ac:	2301      	movs	r3, #1
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	210f      	movs	r1, #15
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fcde 	bl	8002c74 <lis2dw12_read_reg>
 80032b8:	60f8      	str	r0, [r7, #12]

  return ret;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80032d0:	f107 0208 	add.w	r2, r7, #8
 80032d4:	2301      	movs	r3, #1
 80032d6:	2121      	movs	r1, #33	; 0x21
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fccb 	bl	8002c74 <lis2dw12_read_reg>
 80032de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	7a3b      	ldrb	r3, [r7, #8]
 80032f0:	f362 0382 	bfi	r3, r2, #2, #1
 80032f4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80032f6:	f107 0208 	add.w	r2, r7, #8
 80032fa:	2301      	movs	r3, #1
 80032fc:	2121      	movs	r1, #33	; 0x21
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fcd0 	bl	8002ca4 <lis2dw12_write_reg>
 8003304:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800331c:	f107 0208 	add.w	r2, r7, #8
 8003320:	2301      	movs	r3, #1
 8003322:	212e      	movs	r1, #46	; 0x2e
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fca5 	bl	8002c74 <lis2dw12_read_reg>
 800332a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	b2da      	uxtb	r2, r3
 800333a:	7a3b      	ldrb	r3, [r7, #8]
 800333c:	f362 1347 	bfi	r3, r2, #5, #3
 8003340:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003342:	f107 0208 	add.w	r2, r7, #8
 8003346:	2301      	movs	r3, #1
 8003348:	212e      	movs	r1, #46	; 0x2e
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fcaa 	bl	8002ca4 <lis2dw12_write_reg>
 8003350:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e067      	b.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	7b1a      	ldrb	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a28      	ldr	r2, [pc, #160]	; (8003454 <LIS2MDL_RegisterBusIO+0xf8>)
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a27      	ldr	r2, [pc, #156]	; (8003458 <LIS2MDL_RegisterBusIO+0xfc>)
 80033ba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e036      	b.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4798      	blx	r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e02c      	b.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d123      	bne.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10d      	bne.n	8003424 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003408:	2334      	movs	r3, #52	; 0x34
 800340a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	461a      	mov	r2, r3
 8003410:	2162      	movs	r1, #98	; 0x62
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb1b 	bl	8003a4e <LIS2MDL_Write_Reg>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d014      	beq.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e012      	b.n	800344a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d101      	bne.n	8003430 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	e00c      	b.n	800344a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3320      	adds	r3, #32
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 ff70 	bl	800431c <lis2mdl_i2c_interface_set>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	e000      	b.n	800344a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08003aa5 	.word	0x08003aa5
 8003458:	08003b27 	.word	0x08003b27

0800345c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d144      	bne.n	80034f6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800346c:	f107 0208 	add.w	r2, r7, #8
 8003470:	2301      	movs	r3, #1
 8003472:	2162      	movs	r1, #98	; 0x62
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb97 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	e06c      	b.n	8003560 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003486:	f107 020c 	add.w	r2, r7, #12
 800348a:	2301      	movs	r3, #1
 800348c:	2160      	movs	r1, #96	; 0x60
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fb8a 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	e05f      	b.n	8003560 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80034a0:	7a3b      	ldrb	r3, [r7, #8]
 80034a2:	f043 0310 	orr.w	r3, r3, #16
 80034a6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80034a8:	7a3b      	ldrb	r3, [r7, #8]
 80034aa:	f36f 0341 	bfc	r3, #1, #1
 80034ae:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80034b0:	7b3b      	ldrb	r3, [r7, #12]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f362 0301 	bfi	r3, r2, #0, #2
 80034b8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80034ba:	7b3b      	ldrb	r3, [r7, #12]
 80034bc:	f043 030c 	orr.w	r3, r3, #12
 80034c0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80034c2:	f107 0208 	add.w	r2, r7, #8
 80034c6:	2301      	movs	r3, #1
 80034c8:	2162      	movs	r1, #98	; 0x62
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fcab 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	e041      	b.n	8003560 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80034dc:	f107 020c 	add.w	r2, r7, #12
 80034e0:	2301      	movs	r3, #1
 80034e2:	2160      	movs	r1, #96	; 0x60
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fc9e 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
 80034f4:	e034      	b.n	8003560 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3320      	adds	r3, #32
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe65 	bl	80041cc <lis2mdl_block_data_update_set>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	e028      	b.n	8003560 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3320      	adds	r3, #32
 8003512:	2102      	movs	r1, #2
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fdd4 	bl	80040c2 <lis2mdl_operating_mode_set>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	e01c      	b.n	8003560 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2103      	movs	r1, #3
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fdee 	bl	800410e <lis2mdl_data_rate_set>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	e010      	b.n	8003560 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fec3 	bl	80042d0 <lis2mdl_self_test_set>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	e004      	b.n	8003560 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8a5 	bl	80036c0 <LIS2MDL_MAG_Disable>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e004      	b.n	800358c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d10b      	bne.n	80035be <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80035a6:	2301      	movs	r3, #1
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	214f      	movs	r1, #79	; 0x4f
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fafb 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	e00c      	b.n	80035d8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3320      	adds	r3, #32
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fe72 	bl	80042ae <lis2mdl_device_id_get>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	e000      	b.n	80035d8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2200      	movs	r2, #0
 8003606:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2232      	movs	r2, #50	; 0x32
 8003612:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <LIS2MDL_GetCapabilities+0x58>)
 8003628:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	42c80000 	.word	0x42c80000

0800363c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e032      	b.n	80036b8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d11d      	bne.n	8003696 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800365a:	f107 020c 	add.w	r2, r7, #12
 800365e:	2301      	movs	r3, #1
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 faa0 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e021      	b.n	80036b8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003674:	7b3b      	ldrb	r3, [r7, #12]
 8003676:	f36f 0301 	bfc	r3, #0, #2
 800367a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800367c:	f107 020c 	add.w	r2, r7, #12
 8003680:	2301      	movs	r3, #1
 8003682:	2160      	movs	r1, #96	; 0x60
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fbce 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
 8003694:	e010      	b.n	80036b8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3320      	adds	r3, #32
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fd10 	bl	80040c2 <lis2mdl_operating_mode_set>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80036a8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ac:	e004      	b.n	80036b8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e033      	b.n	800373e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d11e      	bne.n	800371c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036de:	f107 020c 	add.w	r2, r7, #12
 80036e2:	2301      	movs	r3, #1
 80036e4:	2160      	movs	r1, #96	; 0x60
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa5e 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e022      	b.n	800373e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80036f8:	7b3b      	ldrb	r3, [r7, #12]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f362 0301 	bfi	r3, r2, #0, #2
 8003700:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003702:	f107 020c 	add.w	r2, r7, #12
 8003706:	2301      	movs	r3, #1
 8003708:	2160      	movs	r1, #96	; 0x60
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb8b 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	e010      	b.n	800373e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3320      	adds	r3, #32
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fccd 	bl	80040c2 <lis2mdl_operating_mode_set>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	e004      	b.n	800373e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003756:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3320      	adds	r3, #32
 800377a:	f107 020b 	add.w	r2, r7, #11
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fceb 	bl	800415c <lis2mdl_data_rate_get>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	e023      	b.n	80037da <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d81b      	bhi.n	80037d0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037b9 	.word	0x080037b9
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037c9 	.word	0x080037c9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80037b4:	601a      	str	r2, [r3, #0]
      break;
 80037b6:	e00f      	b.n	80037d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80037bc:	601a      	str	r2, [r3, #0]
      break;
 80037be:	e00b      	b.n	80037d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80037c4:	601a      	str	r2, [r3, #0]
      break;
 80037c6:	e007      	b.n	80037d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80037cc:	601a      	str	r2, [r3, #0]
      break;
 80037ce:	e003      	b.n	80037d8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
 80037d4:	60fb      	str	r3, [r7, #12]
      break;
 80037d6:	bf00      	nop
  }

  return ret;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	41200000 	.word	0x41200000
 80037e8:	41a00000 	.word	0x41a00000
 80037ec:	42480000 	.word	0x42480000
 80037f0:	42c80000 	.word	0x42c80000

080037f4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003800:	edd7 7a00 	vldr	s15, [r7]
 8003804:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d801      	bhi.n	8003816 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003812:	2300      	movs	r3, #0
 8003814:	e016      	b.n	8003844 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003816:	edd7 7a00 	vldr	s15, [r7]
 800381a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800381e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	d801      	bhi.n	800382c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003828:	2301      	movs	r3, #1
 800382a:	e00b      	b.n	8003844 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800382c:	edd7 7a00 	vldr	s15, [r7]
 8003830:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80038b8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d801      	bhi.n	8003842 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800383e:	2302      	movs	r3, #2
 8003840:	e000      	b.n	8003844 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003842:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003844:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d121      	bne.n	8003892 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800384e:	f107 020c 	add.w	r2, r7, #12
 8003852:	2301      	movs	r3, #1
 8003854:	2160      	movs	r1, #96	; 0x60
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f9a6 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e022      	b.n	80038ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	b2da      	uxtb	r2, r3
 8003870:	7b3b      	ldrb	r3, [r7, #12]
 8003872:	f362 0383 	bfi	r3, r2, #2, #2
 8003876:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003878:	f107 020c 	add.w	r2, r7, #12
 800387c:	2301      	movs	r3, #1
 800387e:	2160      	movs	r1, #96	; 0x60
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fad0 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00f      	beq.n	80038ac <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	e00d      	b.n	80038ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3320      	adds	r3, #32
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fc37 	bl	800410e <lis2mdl_data_rate_set>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e000      	b.n	80038ae <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	42480000 	.word	0x42480000

080038bc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2232      	movs	r2, #50	; 0x32
 80038ca:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	f107 0208 	add.w	r2, r7, #8
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fc86 	bl	8004218 <lis2mdl_magnetic_raw_get>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e00c      	b.n	8003932 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003918:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003920:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003928:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d137      	bne.n	80039bc <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800394c:	f107 0218 	add.w	r2, r7, #24
 8003950:	2306      	movs	r3, #6
 8003952:	2168      	movs	r1, #104	; 0x68
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f927 	bl	8003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	e06f      	b.n	8003a46 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003966:	7e7b      	ldrb	r3, [r7, #25]
 8003968:	b21b      	sxth	r3, r3
 800396a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800396c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003970:	b29b      	uxth	r3, r3
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	b29a      	uxth	r2, r3
 8003976:	7e3b      	ldrb	r3, [r7, #24]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4413      	add	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	b21b      	sxth	r3, r3
 8003980:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003982:	7efb      	ldrb	r3, [r7, #27]
 8003984:	b21b      	sxth	r3, r3
 8003986:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800398c:	b29b      	uxth	r3, r3
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	b29a      	uxth	r2, r3
 8003992:	7ebb      	ldrb	r3, [r7, #26]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21b      	sxth	r3, r3
 800399c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800399e:	7f7b      	ldrb	r3, [r7, #29]
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80039a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	7f3b      	ldrb	r3, [r7, #28]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	82bb      	strh	r3, [r7, #20]
 80039ba:	e00d      	b.n	80039d8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3320      	adds	r3, #32
 80039c0:	f107 0210 	add.w	r2, r7, #16
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc26 	bl	8004218 <lis2mdl_magnetic_raw_get>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e036      	b.n	8003a46 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff feb1 	bl	8003746 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80039e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039fc:	ee17 2a90 	vmov	r2, s15
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003a04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1c:	ee17 2a90 	vmov	r2, s15
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003a24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a3c:	ee17 2a90 	vmov	r2, s15
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d10b      	bne.n	8003a7e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003a66:	1cba      	adds	r2, r7, #2
 8003a68:	78f9      	ldrb	r1, [r7, #3]
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f9da 	bl	8003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	e00e      	b.n	8003a9c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f103 0020 	add.w	r0, r3, #32
 8003a84:	1cba      	adds	r2, r7, #2
 8003a86:	78f9      	ldrb	r1, [r7, #3]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f000 fb02 	bl	8004092 <lis2mdl_write_reg>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	e000      	b.n	8003a9c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	72fb      	strb	r3, [r7, #11]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10e      	bne.n	8003ae2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	695c      	ldr	r4, [r3, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	7b1b      	ldrb	r3, [r3, #12]
 8003acc:	b298      	uxth	r0, r3
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	b299      	uxth	r1, r3
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	47a0      	blx	r4
 8003ade:	4603      	mov	r3, r0
 8003ae0:	e01d      	b.n	8003b1e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d10b      	bne.n	8003b02 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	695c      	ldr	r4, [r3, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	7b1b      	ldrb	r3, [r3, #12]
 8003af2:	b298      	uxth	r0, r3
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	b299      	uxth	r1, r3
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	47a0      	blx	r4
 8003afe:	4603      	mov	r3, r0
 8003b00:	e00d      	b.n	8003b1e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	695c      	ldr	r4, [r3, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	7b1b      	ldrb	r3, [r3, #12]
 8003b0a:	b298      	uxth	r0, r3
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	b299      	uxth	r1, r3
 8003b16:	893b      	ldrh	r3, [r7, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	47a0      	blx	r4
 8003b1c:	4603      	mov	r3, r0
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd90      	pop	{r4, r7, pc}

08003b26 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b26:	b590      	push	{r4, r7, lr}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	461a      	mov	r2, r3
 8003b32:	460b      	mov	r3, r1
 8003b34:	72fb      	strb	r3, [r7, #11]
 8003b36:	4613      	mov	r3, r2
 8003b38:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10e      	bne.n	8003b64 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	691c      	ldr	r4, [r3, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	7b1b      	ldrb	r3, [r3, #12]
 8003b4e:	b298      	uxth	r0, r3
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	893b      	ldrh	r3, [r7, #8]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	47a0      	blx	r4
 8003b60:	4603      	mov	r3, r0
 8003b62:	e01d      	b.n	8003ba0 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10b      	bne.n	8003b84 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	691c      	ldr	r4, [r3, #16]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	7b1b      	ldrb	r3, [r3, #12]
 8003b74:	b298      	uxth	r0, r3
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	47a0      	blx	r4
 8003b80:	4603      	mov	r3, r0
 8003b82:	e00d      	b.n	8003ba0 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	691c      	ldr	r4, [r3, #16]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	7b1b      	ldrb	r3, [r3, #12]
 8003b8c:	b298      	uxth	r0, r3
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	b299      	uxth	r1, r3
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	47a0      	blx	r4
 8003b9e:	4603      	mov	r3, r0
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}

08003ba8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	72fb      	strb	r3, [r7, #11]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003bce:	233d      	movs	r3, #61	; 0x3d
 8003bd0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003bd2:	2315      	movs	r3, #21
 8003bd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003bd8:	2316      	movs	r3, #22
 8003bda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003bde:	2317      	movs	r3, #23
 8003be0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003be4:	2314      	movs	r3, #20
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003bea:	2344      	movs	r3, #68	; 0x44
 8003bec:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003bf4:	2339      	movs	r3, #57	; 0x39
 8003bf6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003c00:	2329      	movs	r3, #41	; 0x29
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003c06:	231e      	movs	r3, #30
 8003c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003c12:	893b      	ldrh	r3, [r7, #8]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f103 0020 	add.w	r0, r3, #32
 8003c30:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003c34:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f000 fa2a 	bl	8004092 <lis2mdl_write_reg>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e0e9      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f103 0020 	add.w	r0, r3, #32
 8003c50:	f107 021f 	add.w	r2, r7, #31
 8003c54:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f000 fa1a 	bl	8004092 <lis2mdl_write_reg>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	e0d9      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f103 0020 	add.w	r0, r3, #32
 8003c70:	f107 020b 	add.w	r2, r7, #11
 8003c74:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f000 fa0a 	bl	8004092 <lis2mdl_write_reg>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e0c9      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f103 0020 	add.w	r0, r3, #32
 8003c90:	f107 021d 	add.w	r2, r7, #29
 8003c94:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f000 f9fa 	bl	8004092 <lis2mdl_write_reg>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	e0b9      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f103 0020 	add.w	r0, r3, #32
 8003cb0:	f107 021e 	add.w	r2, r7, #30
 8003cb4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f000 f9ea 	bl	8004092 <lis2mdl_write_reg>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	e0a9      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f103 0020 	add.w	r0, r3, #32
 8003cd0:	f107 0220 	add.w	r2, r7, #32
 8003cd4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f000 f9da 	bl	8004092 <lis2mdl_write_reg>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e099      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f103 0020 	add.w	r0, r3, #32
 8003cf0:	f107 021c 	add.w	r2, r7, #28
 8003cf4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f000 f9b2 	bl	8004062 <lis2mdl_read_reg>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e089      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003d0a:	7f3b      	ldrb	r3, [r7, #28]
 8003d0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d102      	bne.n	8003d1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d18:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f103 0020 	add.w	r0, r3, #32
 8003d20:	f107 021c 	add.w	r2, r7, #28
 8003d24:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f000 f9b2 	bl	8004092 <lis2mdl_write_reg>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	e071      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f103 0020 	add.w	r0, r3, #32
 8003d40:	f107 0214 	add.w	r2, r7, #20
 8003d44:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003d48:	2306      	movs	r3, #6
 8003d4a:	f000 f98a 	bl	8004062 <lis2mdl_read_reg>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	e061      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f103 0020 	add.w	r0, r3, #32
 8003d60:	f107 021b 	add.w	r2, r7, #27
 8003d64:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f000 f97a 	bl	8004062 <lis2mdl_read_reg>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	e051      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003d7a:	7efa      	ldrb	r2, [r7, #27]
 8003d7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d80:	4013      	ands	r3, r2
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1e6      	bne.n	8003d5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f103 0020 	add.w	r0, r3, #32
 8003d92:	f107 021b 	add.w	r2, r7, #27
 8003d96:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f000 f961 	bl	8004062 <lis2mdl_read_reg>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e038      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003dac:	7efa      	ldrb	r2, [r7, #27]
 8003dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db2:	4013      	ands	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d1e6      	bne.n	8003d8c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f103 0020 	add.w	r0, r3, #32
 8003dc4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003dc8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f000 f960 	bl	8004092 <lis2mdl_write_reg>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	e01f      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f103 0020 	add.w	r0, r3, #32
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	f000 f939 	bl	8004062 <lis2mdl_read_reg>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e010      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f103 0020 	add.w	r0, r3, #32
 8003e02:	f107 0220 	add.w	r2, r7, #32
 8003e06:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f000 f941 	bl	8004092 <lis2mdl_write_reg>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1a:	e000      	b.n	8003e1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3730      	adds	r7, #48	; 0x30
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08c      	sub	sp, #48	; 0x30
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	461a      	mov	r2, r3
 8003e32:	460b      	mov	r3, r1
 8003e34:	72fb      	strb	r3, [r7, #11]
 8003e36:	4613      	mov	r3, r2
 8003e38:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003e40:	2340      	movs	r3, #64	; 0x40
 8003e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003e4c:	233c      	movs	r3, #60	; 0x3c
 8003e4e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003e50:	2315      	movs	r3, #21
 8003e52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003e56:	2316      	movs	r3, #22
 8003e58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003e5c:	2317      	movs	r3, #23
 8003e5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003e66:	2314      	movs	r3, #20
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003e6c:	2344      	movs	r3, #68	; 0x44
 8003e6e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003e70:	2339      	movs	r3, #57	; 0x39
 8003e72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003e7c:	2329      	movs	r3, #41	; 0x29
 8003e7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003e82:	231e      	movs	r3, #30
 8003e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003e8e:	2310      	movs	r3, #16
 8003e90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003e9a:	2340      	movs	r3, #64	; 0x40
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003ea0:	230e      	movs	r3, #14
 8003ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f103 0020 	add.w	r0, r3, #32
 8003eac:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003eb0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f000 f8ec 	bl	8004092 <lis2mdl_write_reg>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	e0c9      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f103 0020 	add.w	r0, r3, #32
 8003ecc:	f107 021f 	add.w	r2, r7, #31
 8003ed0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 f8dc 	bl	8004092 <lis2mdl_write_reg>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	e0b9      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f103 0020 	add.w	r0, r3, #32
 8003eec:	f107 020b 	add.w	r2, r7, #11
 8003ef0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f000 f8cc 	bl	8004092 <lis2mdl_write_reg>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e0a9      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f103 0020 	add.w	r0, r3, #32
 8003f0c:	f107 021e 	add.w	r2, r7, #30
 8003f10:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003f14:	2301      	movs	r3, #1
 8003f16:	f000 f8bc 	bl	8004092 <lis2mdl_write_reg>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	e099      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f103 0020 	add.w	r0, r3, #32
 8003f2c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003f30:	2301      	movs	r3, #1
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	f000 f8ad 	bl	8004092 <lis2mdl_write_reg>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	e08a      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f103 0020 	add.w	r0, r3, #32
 8003f4a:	f107 021d 	add.w	r2, r7, #29
 8003f4e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003f52:	2301      	movs	r3, #1
 8003f54:	f000 f89d 	bl	8004092 <lis2mdl_write_reg>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	e07a      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f103 0020 	add.w	r0, r3, #32
 8003f6a:	f107 0220 	add.w	r2, r7, #32
 8003f6e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f72:	2301      	movs	r3, #1
 8003f74:	f000 f88d 	bl	8004092 <lis2mdl_write_reg>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	e06a      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f103 0020 	add.w	r0, r3, #32
 8003f8a:	f107 021c 	add.w	r2, r7, #28
 8003f8e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003f92:	2301      	movs	r3, #1
 8003f94:	f000 f865 	bl	8004062 <lis2mdl_read_reg>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	e05a      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003fa4:	7f3b      	ldrb	r3, [r7, #28]
 8003fa6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d102      	bne.n	8003fb4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f103 0020 	add.w	r0, r3, #32
 8003fba:	f107 021c 	add.w	r2, r7, #28
 8003fbe:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f000 f865 	bl	8004092 <lis2mdl_write_reg>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	e042      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f103 0020 	add.w	r0, r3, #32
 8003fda:	f107 0214 	add.w	r2, r7, #20
 8003fde:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	f000 f83d 	bl	8004062 <lis2mdl_read_reg>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	e032      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f103 0020 	add.w	r0, r3, #32
 8003ffa:	f107 021b 	add.w	r2, r7, #27
 8003ffe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004002:	2301      	movs	r3, #1
 8004004:	f000 f82d 	bl	8004062 <lis2mdl_read_reg>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e022      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004014:	7efa      	ldrb	r2, [r7, #27]
 8004016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800401a:	4013      	ands	r3, r2
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004022:	429a      	cmp	r2, r3
 8004024:	d1e6      	bne.n	8003ff4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f103 0020 	add.w	r0, r3, #32
 800402c:	f107 021b 	add.w	r2, r7, #27
 8004030:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004034:	2301      	movs	r3, #1
 8004036:	f000 f814 	bl	8004062 <lis2mdl_read_reg>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	e009      	b.n	800405a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004046:	7efa      	ldrb	r2, [r7, #27]
 8004048:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800404c:	4013      	ands	r3, r2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004054:	429a      	cmp	r2, r3
 8004056:	d1e6      	bne.n	8004026 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3730      	adds	r7, #48	; 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004062:	b590      	push	{r4, r7, lr}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	461a      	mov	r2, r3
 800406e:	460b      	mov	r3, r1
 8004070:	72fb      	strb	r3, [r7, #11]
 8004072:	4613      	mov	r3, r2
 8004074:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685c      	ldr	r4, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68d8      	ldr	r0, [r3, #12]
 800407e:	893b      	ldrh	r3, [r7, #8]
 8004080:	7af9      	ldrb	r1, [r7, #11]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	47a0      	blx	r4
 8004086:	6178      	str	r0, [r7, #20]

  return ret;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}

08004092 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	461a      	mov	r2, r3
 800409e:	460b      	mov	r3, r1
 80040a0:	72fb      	strb	r3, [r7, #11]
 80040a2:	4613      	mov	r3, r2
 80040a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681c      	ldr	r4, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68d8      	ldr	r0, [r3, #12]
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	7af9      	ldrb	r1, [r7, #11]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	47a0      	blx	r4
 80040b6:	6178      	str	r0, [r7, #20]

  return ret;
 80040b8:	697b      	ldr	r3, [r7, #20]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}

080040c2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040ce:	f107 0208 	add.w	r2, r7, #8
 80040d2:	2301      	movs	r3, #1
 80040d4:	2160      	movs	r1, #96	; 0x60
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffc3 	bl	8004062 <lis2mdl_read_reg>
 80040dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	7a3b      	ldrb	r3, [r7, #8]
 80040ee:	f362 0301 	bfi	r3, r2, #0, #2
 80040f2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040f4:	f107 0208 	add.w	r2, r7, #8
 80040f8:	2301      	movs	r3, #1
 80040fa:	2160      	movs	r1, #96	; 0x60
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ffc8 	bl	8004092 <lis2mdl_write_reg>
 8004102:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800411a:	f107 0208 	add.w	r2, r7, #8
 800411e:	2301      	movs	r3, #1
 8004120:	2160      	movs	r1, #96	; 0x60
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ff9d 	bl	8004062 <lis2mdl_read_reg>
 8004128:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10f      	bne.n	8004150 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	b2da      	uxtb	r2, r3
 8004138:	7a3b      	ldrb	r3, [r7, #8]
 800413a:	f362 0383 	bfi	r3, r2, #2, #2
 800413e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004140:	f107 0208 	add.w	r2, r7, #8
 8004144:	2301      	movs	r3, #1
 8004146:	2160      	movs	r1, #96	; 0x60
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ffa2 	bl	8004092 <lis2mdl_write_reg>
 800414e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004166:	f107 0208 	add.w	r2, r7, #8
 800416a:	2301      	movs	r3, #1
 800416c:	2160      	movs	r1, #96	; 0x60
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff77 	bl	8004062 <lis2mdl_read_reg>
 8004174:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004176:	7a3b      	ldrb	r3, [r7, #8]
 8004178:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d81a      	bhi.n	80041b8 <lis2mdl_data_rate_get+0x5c>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <lis2mdl_data_rate_get+0x2c>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	08004199 	.word	0x08004199
 800418c:	080041a1 	.word	0x080041a1
 8004190:	080041a9 	.word	0x080041a9
 8004194:	080041b1 	.word	0x080041b1
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
      break;
 800419e:	e00f      	b.n	80041c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
      break;
 80041a6:	e00b      	b.n	80041c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
      break;
 80041ae:	e007      	b.n	80041c0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2203      	movs	r2, #3
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	e003      	b.n	80041c0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
      break;
 80041be:	bf00      	nop
  }

  return ret;
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop

080041cc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041d8:	f107 0208 	add.w	r2, r7, #8
 80041dc:	2301      	movs	r3, #1
 80041de:	2162      	movs	r1, #98	; 0x62
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff3e 	bl	8004062 <lis2mdl_read_reg>
 80041e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	7a3b      	ldrb	r3, [r7, #8]
 80041f8:	f362 1304 	bfi	r3, r2, #4, #1
 80041fc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041fe:	f107 0208 	add.w	r2, r7, #8
 8004202:	2301      	movs	r3, #1
 8004204:	2162      	movs	r1, #98	; 0x62
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ff43 	bl	8004092 <lis2mdl_write_reg>
 800420c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004222:	f107 020c 	add.w	r2, r7, #12
 8004226:	2306      	movs	r3, #6
 8004228:	2168      	movs	r1, #104	; 0x68
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff19 	bl	8004062 <lis2mdl_read_reg>
 8004230:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004232:	7b7b      	ldrb	r3, [r7, #13]
 8004234:	b21a      	sxth	r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004240:	b29b      	uxth	r3, r3
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	b29a      	uxth	r2, r3
 8004246:	7b3b      	ldrb	r3, [r7, #12]
 8004248:	b29b      	uxth	r3, r3
 800424a:	4413      	add	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	b21a      	sxth	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3302      	adds	r3, #2
 800425a:	b212      	sxth	r2, r2
 800425c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	3302      	adds	r3, #2
 8004262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004266:	b29b      	uxth	r3, r3
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	b29a      	uxth	r2, r3
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	b29b      	uxth	r3, r3
 8004270:	4413      	add	r3, r2
 8004272:	b29a      	uxth	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	3302      	adds	r3, #2
 8004278:	b212      	sxth	r2, r2
 800427a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800427c:	7c7a      	ldrb	r2, [r7, #17]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	3304      	adds	r3, #4
 8004282:	b212      	sxth	r2, r2
 8004284:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800428e:	b29b      	uxth	r3, r3
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	b29a      	uxth	r2, r3
 8004294:	7c3b      	ldrb	r3, [r7, #16]
 8004296:	b29b      	uxth	r3, r3
 8004298:	4413      	add	r3, r2
 800429a:	b29a      	uxth	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	b212      	sxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]

  return ret;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80042b8:	2301      	movs	r3, #1
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	214f      	movs	r1, #79	; 0x4f
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fecf 	bl	8004062 <lis2mdl_read_reg>
 80042c4:	60f8      	str	r0, [r7, #12]

  return ret;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042dc:	f107 0208 	add.w	r2, r7, #8
 80042e0:	2301      	movs	r3, #1
 80042e2:	2162      	movs	r1, #98	; 0x62
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff febc 	bl	8004062 <lis2mdl_read_reg>
 80042ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	7a3b      	ldrb	r3, [r7, #8]
 80042fc:	f362 0341 	bfi	r3, r2, #1, #1
 8004300:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004302:	f107 0208 	add.w	r2, r7, #8
 8004306:	2301      	movs	r3, #1
 8004308:	2162      	movs	r1, #98	; 0x62
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fec1 	bl	8004092 <lis2mdl_write_reg>
 8004310:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004328:	f107 0208 	add.w	r2, r7, #8
 800432c:	2301      	movs	r3, #1
 800432e:	2162      	movs	r1, #98	; 0x62
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fe96 	bl	8004062 <lis2mdl_read_reg>
 8004336:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	7a3b      	ldrb	r3, [r7, #8]
 8004348:	f362 1345 	bfi	r3, r2, #5, #1
 800434c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800434e:	f107 0208 	add.w	r2, r7, #8
 8004352:	2301      	movs	r3, #1
 8004354:	2162      	movs	r1, #98	; 0x62
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe9b 	bl	8004092 <lis2mdl_write_reg>
 800435c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e051      	b.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7b1a      	ldrb	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <LSM6DSO_RegisterBusIO+0xcc>)
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <LSM6DSO_RegisterBusIO+0xd0>)
 80043c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e020      	b.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4798      	blx	r3
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e016      	b.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d112      	bne.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800440c:	230c      	movs	r3, #12
 800440e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	461a      	mov	r2, r3
 8004414:	2112      	movs	r1, #18
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 ff5d 	bl	80052d6 <LSM6DSO_Write_Reg>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	08005779 	.word	0x08005779
 8004438:	080057af 	.word	0x080057af

0800443c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d00b      	beq.n	8004464 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3320      	adds	r3, #32
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fe8a 	bl	800616c <lsm6dso_i3c_disable_set>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	e060      	b.n	8004526 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3320      	adds	r3, #32
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fe58 	bl	8006120 <lsm6dso_auto_increment_set>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	e054      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3320      	adds	r3, #32
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fd62 	bl	8005f4c <lsm6dso_block_data_update_set>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	e048      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3320      	adds	r3, #32
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f001 feae 	bl	80061fc <lsm6dso_fifo_mode_set>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e03c      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2204      	movs	r2, #4
 80044b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3320      	adds	r3, #32
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 fa20 	bl	8005900 <lsm6dso_xl_data_rate_set>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80044c6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ca:	e02c      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3320      	adds	r3, #32
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f9b6 	bl	8005844 <lsm6dso_xl_full_scale_set>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e020      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3320      	adds	r3, #32
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fbce 	bl	8005c94 <lsm6dso_gy_data_rate_set>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	e010      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3320      	adds	r3, #32
 8004508:	2106      	movs	r1, #6
 800450a:	4618      	mov	r0, r3
 800450c:	f001 fb5a 	bl	8005bc4 <lsm6dso_gy_full_scale_set>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	e004      	b.n	8004526 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f888 	bl	800464c <LSM6DSO_ACC_Disable>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	e015      	b.n	8004574 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fc2e 	bl	8004daa <LSM6DSO_GYRO_Disable>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
 8004558:	e00c      	b.n	8004574 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3320      	adds	r3, #32
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fdb6 	bl	80060fe <lsm6dso_device_id_get>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	e000      	b.n	80045a0 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045d0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4a07      	ldr	r2, [pc, #28]	; (8004600 <LSM6DSO_GetCapabilities+0x58>)
 80045e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <LSM6DSO_GetCapabilities+0x58>)
 80045e8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	45d02000 	.word	0x45d02000

08004604 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e014      	b.n	8004644 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 0220 	add.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f001 f969 	bl	8005900 <lsm6dso_xl_data_rate_set>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	e004      	b.n	8004644 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e01f      	b.n	80046a2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 0220 	add.w	r2, r3, #32
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3333      	adds	r3, #51	; 0x33
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f001 fa40 	bl	8005af4 <lsm6dso_xl_data_rate_get>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e010      	b.n	80046a2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3320      	adds	r3, #32
 8004684:	2100      	movs	r1, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f001 f93a 	bl	8005900 <lsm6dso_xl_data_rate_set>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	e004      	b.n	80046a2 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3320      	adds	r3, #32
 80046be:	f107 020b 	add.w	r2, r7, #11
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f8e3 	bl	8005890 <lsm6dso_xl_full_scale_get>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e023      	b.n	800471e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80046d6:	7afb      	ldrb	r3, [r7, #11]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d81b      	bhi.n	8004714 <LSM6DSO_ACC_GetSensitivity+0x68>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004705 	.word	0x08004705
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80046f8:	601a      	str	r2, [r3, #0]
      break;
 80046fa:	e00f      	b.n	800471c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4a0b      	ldr	r2, [pc, #44]	; (800472c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004700:	601a      	str	r2, [r3, #0]
      break;
 8004702:	e00b      	b.n	800471c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004708:	601a      	str	r2, [r3, #0]
      break;
 800470a:	e007      	b.n	800471c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004710:	601a      	str	r2, [r3, #0]
      break;
 8004712:	e003      	b.n	800471c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295
 8004718:	60fb      	str	r3, [r7, #12]
      break;
 800471a:	bf00      	nop
  }

  return ret;
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	3d79db23 	.word	0x3d79db23
 800472c:	3df9db23 	.word	0x3df9db23
 8004730:	3e79db23 	.word	0x3e79db23
 8004734:	3ef9db23 	.word	0x3ef9db23

08004738 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3320      	adds	r3, #32
 800474a:	f107 020b 	add.w	r2, r7, #11
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f9cf 	bl	8005af4 <lsm6dso_xl_data_rate_get>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	e054      	b.n	800480c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004762:	7afb      	ldrb	r3, [r7, #11]
 8004764:	2b0b      	cmp	r3, #11
 8004766:	d84c      	bhi.n	8004802 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047a1 	.word	0x080047a1
 8004774:	080047b3 	.word	0x080047b3
 8004778:	080047bb 	.word	0x080047bb
 800477c:	080047c3 	.word	0x080047c3
 8004780:	080047cb 	.word	0x080047cb
 8004784:	080047d3 	.word	0x080047d3
 8004788:	080047db 	.word	0x080047db
 800478c:	080047e3 	.word	0x080047e3
 8004790:	080047eb 	.word	0x080047eb
 8004794:	080047f3 	.word	0x080047f3
 8004798:	080047fb 	.word	0x080047fb
 800479c:	080047ab 	.word	0x080047ab
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
      break;
 80047a8:	e02f      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4a19      	ldr	r2, [pc, #100]	; (8004814 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80047ae:	601a      	str	r2, [r3, #0]
      break;
 80047b0:	e02b      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80047b6:	601a      	str	r2, [r3, #0]
      break;
 80047b8:	e027      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80047be:	601a      	str	r2, [r3, #0]
      break;
 80047c0:	e023      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80047c6:	601a      	str	r2, [r3, #0]
      break;
 80047c8:	e01f      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80047ce:	601a      	str	r2, [r3, #0]
      break;
 80047d0:	e01b      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80047d6:	601a      	str	r2, [r3, #0]
      break;
 80047d8:	e017      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80047de:	601a      	str	r2, [r3, #0]
      break;
 80047e0:	e013      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	4a12      	ldr	r2, [pc, #72]	; (8004830 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80047e6:	601a      	str	r2, [r3, #0]
      break;
 80047e8:	e00f      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80047ee:	601a      	str	r2, [r3, #0]
      break;
 80047f0:	e00b      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	4a10      	ldr	r2, [pc, #64]	; (8004838 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80047f6:	601a      	str	r2, [r3, #0]
      break;
 80047f8:	e007      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	4a0f      	ldr	r2, [pc, #60]	; (800483c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80047fe:	601a      	str	r2, [r3, #0]
      break;
 8004800:	e003      	b.n	800480a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295
 8004806:	60fb      	str	r3, [r7, #12]
      break;
 8004808:	bf00      	nop
  }

  return ret;
 800480a:	68fb      	ldr	r3, [r7, #12]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	3fcccccd 	.word	0x3fcccccd
 8004818:	41480000 	.word	0x41480000
 800481c:	41d00000 	.word	0x41d00000
 8004820:	42500000 	.word	0x42500000
 8004824:	42d00000 	.word	0x42d00000
 8004828:	43500000 	.word	0x43500000
 800482c:	43d08000 	.word	0x43d08000
 8004830:	44504000 	.word	0x44504000
 8004834:	44d06000 	.word	0x44d06000
 8004838:	45505000 	.word	0x45505000
 800483c:	45d05800 	.word	0x45d05800

08004840 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800484c:	2100      	movs	r1, #0
 800484e:	ed97 0a00 	vldr	s0, [r7]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f806 	bl	8004864 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004870:	460b      	mov	r3, r1
 8004872:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b02      	cmp	r3, #2
 8004880:	f000 80ea 	beq.w	8004a58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004884:	2b02      	cmp	r3, #2
 8004886:	f300 8163 	bgt.w	8004b50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800488e:	2b01      	cmp	r3, #1
 8004890:	d074      	beq.n	800497c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004892:	e15d      	b.n	8004b50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f103 0020 	add.w	r0, r3, #32
 800489a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800489e:	2301      	movs	r3, #1
 80048a0:	2114      	movs	r1, #20
 80048a2:	f000 ff9f 	bl	80057e4 <lsm6dso_read_reg>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e16c      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80048b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d025      	beq.n	800490c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10b      	bne.n	80048e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3320      	adds	r3, #32
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 f815 	bl	8005900 <lsm6dso_xl_data_rate_set>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	e154      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80048e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048e6:	f36f 13c7 	bfc	r3, #7, #1
 80048ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f103 0020 	add.w	r0, r3, #32
 80048f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80048f8:	2301      	movs	r3, #1
 80048fa:	2114      	movs	r1, #20
 80048fc:	f000 ff8a 	bl	8005814 <lsm6dso_write_reg>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	e13f      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f103 0020 	add.w	r0, r3, #32
 8004912:	f107 0220 	add.w	r2, r7, #32
 8004916:	2301      	movs	r3, #1
 8004918:	2115      	movs	r1, #21
 800491a:	f000 ff63 	bl	80057e4 <lsm6dso_read_reg>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	e130      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800492a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d014      	beq.n	8004962 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800493c:	f36f 1304 	bfc	r3, #4, #1
 8004940:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f103 0020 	add.w	r0, r3, #32
 800494a:	f107 0220 	add.w	r2, r7, #32
 800494e:	2301      	movs	r3, #1
 8004950:	2115      	movs	r1, #21
 8004952:	f000 ff5f 	bl	8005814 <lsm6dso_write_reg>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	e114      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004962:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004966:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800496a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d400      	bmi.n	8004976 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004974:	e0f0      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004976:	4b87      	ldr	r3, [pc, #540]	; (8004b94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
 800497a:	e0ed      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f103 0020 	add.w	r0, r3, #32
 8004982:	f107 021c 	add.w	r2, r7, #28
 8004986:	2301      	movs	r3, #1
 8004988:	2114      	movs	r1, #20
 800498a:	f000 ff2b 	bl	80057e4 <lsm6dso_read_reg>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e0f8      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800499a:	7f3b      	ldrb	r3, [r7, #28]
 800499c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10b      	bne.n	80049c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3320      	adds	r3, #32
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 ffa2 	bl	8005900 <lsm6dso_xl_data_rate_set>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80049c2:	f04f 33ff 	mov.w	r3, #4294967295
 80049c6:	e0e1      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80049c8:	7f3b      	ldrb	r3, [r7, #28]
 80049ca:	f36f 13c7 	bfc	r3, #7, #1
 80049ce:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f103 0020 	add.w	r0, r3, #32
 80049d6:	f107 021c 	add.w	r2, r7, #28
 80049da:	2301      	movs	r3, #1
 80049dc:	2114      	movs	r1, #20
 80049de:	f000 ff19 	bl	8005814 <lsm6dso_write_reg>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e0ce      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f103 0020 	add.w	r0, r3, #32
 80049f4:	f107 0218 	add.w	r2, r7, #24
 80049f8:	2301      	movs	r3, #1
 80049fa:	2115      	movs	r1, #21
 80049fc:	f000 fef2 	bl	80057e4 <lsm6dso_read_reg>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	e0bf      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004a0c:	7e3b      	ldrb	r3, [r7, #24]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d112      	bne.n	8004a3e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004a18:	7e3b      	ldrb	r3, [r7, #24]
 8004a1a:	f043 0310 	orr.w	r3, r3, #16
 8004a1e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f103 0020 	add.w	r0, r3, #32
 8004a26:	f107 0218 	add.w	r2, r7, #24
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2115      	movs	r1, #21
 8004a2e:	f000 fef1 	bl	8005814 <lsm6dso_write_reg>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	e0a6      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004a3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a42:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004b98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	dc00      	bgt.n	8004a52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004a50:	e082      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004a52:	4b52      	ldr	r3, [pc, #328]	; (8004b9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	e07f      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f103 0020 	add.w	r0, r3, #32
 8004a5e:	f107 0210 	add.w	r2, r7, #16
 8004a62:	2301      	movs	r3, #1
 8004a64:	2115      	movs	r1, #21
 8004a66:	f000 febd 	bl	80057e4 <lsm6dso_read_reg>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	e08a      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004a76:	7c3b      	ldrb	r3, [r7, #16]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d012      	beq.n	8004aa8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004a82:	7c3b      	ldrb	r3, [r7, #16]
 8004a84:	f36f 1304 	bfc	r3, #4, #1
 8004a88:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f103 0020 	add.w	r0, r3, #32
 8004a90:	f107 0210 	add.w	r2, r7, #16
 8004a94:	2301      	movs	r3, #1
 8004a96:	2115      	movs	r1, #21
 8004a98:	f000 febc 	bl	8005814 <lsm6dso_write_reg>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	e071      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f979 	bl	8004daa <LSM6DSO_GYRO_Disable>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	e063      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f103 0020 	add.w	r0, r3, #32
 8004aca:	f107 0214 	add.w	r2, r7, #20
 8004ace:	2301      	movs	r3, #1
 8004ad0:	2114      	movs	r1, #20
 8004ad2:	f000 fe87 	bl	80057e4 <lsm6dso_read_reg>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	e054      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004ae2:	7d3b      	ldrb	r3, [r7, #20]
 8004ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d123      	bne.n	8004b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10b      	bne.n	8004b10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3320      	adds	r3, #32
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fefe 	bl	8005900 <lsm6dso_xl_data_rate_set>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	e03d      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004b10:	7d3b      	ldrb	r3, [r7, #20]
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f103 0020 	add.w	r0, r3, #32
 8004b1e:	f107 0214 	add.w	r2, r7, #20
 8004b22:	2301      	movs	r3, #1
 8004b24:	2114      	movs	r1, #20
 8004b26:	f000 fe75 	bl	8005814 <lsm6dso_write_reg>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	e02a      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004b36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b3a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	dc00      	bgt.n	8004b4a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004b48:	e006      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4e:	e003      	b.n	8004b58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004b50:	f04f 33ff 	mov.w	r3, #4294967295
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004b56:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d102      	bne.n	8004b66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	e012      	b.n	8004b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004b70:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fbc9 	bl	800530c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b7c:	e005      	b.n	8004b8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004b7e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fc5a 	bl	800543c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004b88:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3730      	adds	r7, #48	; 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	41480000 	.word	0x41480000
 8004b98:	43500000 	.word	0x43500000
 8004b9c:	43500000 	.word	0x43500000

08004ba0 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3320      	adds	r3, #32
 8004bb2:	f107 020b 	add.w	r2, r7, #11
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fe69 	bl	8005890 <lsm6dso_xl_full_scale_get>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	e023      	b.n	8004c12 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004bca:	7afb      	ldrb	r3, [r7, #11]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d81b      	bhi.n	8004c08 <LSM6DSO_ACC_GetFullScale+0x68>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <LSM6DSO_ACC_GetFullScale+0x38>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bf9 	.word	0x08004bf9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2202      	movs	r2, #2
 8004bec:	601a      	str	r2, [r3, #0]
      break;
 8004bee:	e00f      	b.n	8004c10 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	601a      	str	r2, [r3, #0]
      break;
 8004bf6:	e00b      	b.n	8004c10 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
      break;
 8004bfe:	e007      	b.n	8004c10 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2210      	movs	r2, #16
 8004c04:	601a      	str	r2, [r3, #0]
      break;
 8004c06:	e003      	b.n	8004c10 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	60fb      	str	r3, [r7, #12]
      break;
 8004c0e:	bf00      	nop
  }

  return ret;
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	dd0b      	ble.n	8004c44 <LSM6DSO_ACC_SetFullScale+0x28>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	dd06      	ble.n	8004c40 <LSM6DSO_ACC_SetFullScale+0x24>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	dc01      	bgt.n	8004c3c <LSM6DSO_ACC_SetFullScale+0x20>
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e004      	b.n	8004c46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e002      	b.n	8004c46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e000      	b.n	8004c46 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004c44:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004c46:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fdf7 	bl	8005844 <lsm6dso_xl_full_scale_set>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	e000      	b.n	8004c64 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3320      	adds	r3, #32
 8004c7a:	f107 0208 	add.w	r2, r7, #8
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f9d4 	bl	800602e <lsm6dso_acceleration_raw_get>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c90:	e00c      	b.n	8004cac <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004c92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004c9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ca2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3320      	adds	r3, #32
 8004cc8:	f107 0210 	add.w	r2, r7, #16
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f9ad 	bl	800602e <lsm6dso_acceleration_raw_get>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	e03c      	b.n	8004d5a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004ce0:	f107 030c 	add.w	r3, r7, #12
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fce0 	bl	80046ac <LSM6DSO_ACC_GetSensitivity>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	e030      	b.n	8004d5a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004cfc:	ee07 3a90 	vmov	s15, r3
 8004d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d10:	ee17 2a90 	vmov	r2, s15
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d30:	ee17 2a90 	vmov	r2, s15
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004d38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d50:	ee17 2a90 	vmov	r2, s15
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e014      	b.n	8004da2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f103 0220 	add.w	r2, r3, #32
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f000 ff84 	bl	8005c94 <lsm6dso_gy_data_rate_set>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e004      	b.n	8004da2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e01f      	b.n	8004e00 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f103 0220 	add.w	r2, r3, #32
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3334      	adds	r3, #52	; 0x34
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f001 f85b 	bl	8005e88 <lsm6dso_gy_data_rate_get>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ddc:	e010      	b.n	8004e00 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3320      	adds	r3, #32
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 ff55 	bl	8005c94 <lsm6dso_gy_data_rate_set>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295
 8004df4:	e004      	b.n	8004e00 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3320      	adds	r3, #32
 8004e1a:	f107 020b 	add.w	r2, r7, #11
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fef5 	bl	8005c10 <lsm6dso_gy_full_scale_get>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e02d      	b.n	8004e8e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	2b06      	cmp	r3, #6
 8004e36:	d825      	bhi.n	8004e84 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e85 	.word	0x08004e85
 8004e50:	08004e75 	.word	0x08004e75
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e7d 	.word	0x08004e7d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004e60:	601a      	str	r2, [r3, #0]
      break;
 8004e62:	e013      	b.n	8004e8c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004e68:	601a      	str	r2, [r3, #0]
      break;
 8004e6a:	e00f      	b.n	8004e8c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004e70:	601a      	str	r2, [r3, #0]
      break;
 8004e72:	e00b      	b.n	8004e8c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004e78:	601a      	str	r2, [r3, #0]
      break;
 8004e7a:	e007      	b.n	8004e8c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004e80:	601a      	str	r2, [r3, #0]
      break;
 8004e82:	e003      	b.n	8004e8c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	60fb      	str	r3, [r7, #12]
      break;
 8004e8a:	bf00      	nop
  }

  return ret;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	408c0000 	.word	0x408c0000
 8004e9c:	410c0000 	.word	0x410c0000
 8004ea0:	418c0000 	.word	0x418c0000
 8004ea4:	420c0000 	.word	0x420c0000
 8004ea8:	428c0000 	.word	0x428c0000

08004eac <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	f107 020b 	add.w	r2, r7, #11
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 ffdf 	bl	8005e88 <lsm6dso_gy_data_rate_get>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	e04e      	b.n	8004f74 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	2b0a      	cmp	r3, #10
 8004eda:	d846      	bhi.n	8004f6a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f1b 	.word	0x08004f1b
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f2b 	.word	0x08004f2b
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f3b 	.word	0x08004f3b
 8004efc:	08004f43 	.word	0x08004f43
 8004f00:	08004f4b 	.word	0x08004f4b
 8004f04:	08004f53 	.word	0x08004f53
 8004f08:	08004f5b 	.word	0x08004f5b
 8004f0c:	08004f63 	.word	0x08004f63
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
      break;
 8004f18:	e02b      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004f1e:	601a      	str	r2, [r3, #0]
      break;
 8004f20:	e027      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004f26:	601a      	str	r2, [r3, #0]
      break;
 8004f28:	e023      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004f2e:	601a      	str	r2, [r3, #0]
      break;
 8004f30:	e01f      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004f36:	601a      	str	r2, [r3, #0]
      break;
 8004f38:	e01b      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004f3e:	601a      	str	r2, [r3, #0]
      break;
 8004f40:	e017      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004f46:	601a      	str	r2, [r3, #0]
      break;
 8004f48:	e013      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004f4e:	601a      	str	r2, [r3, #0]
      break;
 8004f50:	e00f      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004f56:	601a      	str	r2, [r3, #0]
      break;
 8004f58:	e00b      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004f5e:	601a      	str	r2, [r3, #0]
      break;
 8004f60:	e007      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004f66:	601a      	str	r2, [r3, #0]
      break;
 8004f68:	e003      	b.n	8004f72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	60fb      	str	r3, [r7, #12]
      break;
 8004f70:	bf00      	nop
  }

  return ret;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	41480000 	.word	0x41480000
 8004f80:	41d00000 	.word	0x41d00000
 8004f84:	42500000 	.word	0x42500000
 8004f88:	42d00000 	.word	0x42d00000
 8004f8c:	43500000 	.word	0x43500000
 8004f90:	43d08000 	.word	0x43d08000
 8004f94:	44504000 	.word	0x44504000
 8004f98:	44d06000 	.word	0x44d06000
 8004f9c:	45505000 	.word	0x45505000
 8004fa0:	45d05800 	.word	0x45d05800

08004fa4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	ed97 0a00 	vldr	s0, [r7]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f806 	bl	8004fc8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d028      	beq.n	800503c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004fea:	e05c      	b.n	80050a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f103 0020 	add.w	r0, r3, #32
 8004ff2:	f107 0214 	add.w	r2, r7, #20
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	2116      	movs	r1, #22
 8004ffa:	f000 fbf3 	bl	80057e4 <lsm6dso_read_reg>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	e06c      	b.n	80050e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800500a:	7d3b      	ldrb	r3, [r7, #20]
 800500c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d04b      	beq.n	80050ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005016:	7d3b      	ldrb	r3, [r7, #20]
 8005018:	f36f 13c7 	bfc	r3, #7, #1
 800501c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f103 0020 	add.w	r0, r3, #32
 8005024:	f107 0214 	add.w	r2, r7, #20
 8005028:	2301      	movs	r3, #1
 800502a:	2116      	movs	r1, #22
 800502c:	f000 fbf2 	bl	8005814 <lsm6dso_write_reg>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03b      	beq.n	80050ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005036:	f04f 33ff 	mov.w	r3, #4294967295
 800503a:	e053      	b.n	80050e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f103 0020 	add.w	r0, r3, #32
 8005042:	f107 0210 	add.w	r2, r7, #16
 8005046:	2301      	movs	r3, #1
 8005048:	2116      	movs	r1, #22
 800504a:	f000 fbcb 	bl	80057e4 <lsm6dso_read_reg>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	e044      	b.n	80050e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800505a:	7c3b      	ldrb	r3, [r7, #16]
 800505c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d112      	bne.n	800508c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005066:	7c3b      	ldrb	r3, [r7, #16]
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f103 0020 	add.w	r0, r3, #32
 8005074:	f107 0210 	add.w	r2, r7, #16
 8005078:	2301      	movs	r3, #1
 800507a:	2116      	movs	r1, #22
 800507c:	f000 fbca 	bl	8005814 <lsm6dso_write_reg>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e02b      	b.n	80050e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800508c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005090:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80050ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509c:	dc00      	bgt.n	80050a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800509e:	e007      	b.n	80050b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e004      	b.n	80050b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	61fb      	str	r3, [r7, #28]
      break;
 80050ac:	e000      	b.n	80050b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80050ae:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d102      	bne.n	80050be <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e012      	b.n	80050e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80050c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fa45 	bl	800555c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80050d2:	61f8      	str	r0, [r7, #28]
 80050d4:	e005      	b.n	80050e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80050d6:	ed97 0a06 	vldr	s0, [r7, #24]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 faca 	bl	8005674 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80050e0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80050e2:	69fb      	ldr	r3, [r7, #28]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	43500000 	.word	0x43500000
 80050f0:	43500000 	.word	0x43500000

080050f4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3320      	adds	r3, #32
 8005106:	f107 020b 	add.w	r2, r7, #11
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fd7f 	bl	8005c10 <lsm6dso_gy_full_scale_get>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	e030      	b.n	8005180 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	2b06      	cmp	r3, #6
 8005122:	d828      	bhi.n	8005176 <LSM6DSO_GYRO_GetFullScale+0x82>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005151 	.word	0x08005151
 8005130:	08005149 	.word	0x08005149
 8005134:	08005159 	.word	0x08005159
 8005138:	08005177 	.word	0x08005177
 800513c:	08005163 	.word	0x08005163
 8005140:	08005177 	.word	0x08005177
 8005144:	0800516d 	.word	0x0800516d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	227d      	movs	r2, #125	; 0x7d
 800514c:	601a      	str	r2, [r3, #0]
      break;
 800514e:	e016      	b.n	800517e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	22fa      	movs	r2, #250	; 0xfa
 8005154:	601a      	str	r2, [r3, #0]
      break;
 8005156:	e012      	b.n	800517e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800515e:	601a      	str	r2, [r3, #0]
      break;
 8005160:	e00d      	b.n	800517e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005168:	601a      	str	r2, [r3, #0]
      break;
 800516a:	e008      	b.n	800517e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005172:	601a      	str	r2, [r3, #0]
      break;
 8005174:	e003      	b.n	800517e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	60fb      	str	r3, [r7, #12]
      break;
 800517c:	bf00      	nop
  }

  return ret;
 800517e:	68fb      	ldr	r3, [r7, #12]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b7d      	cmp	r3, #125	; 0x7d
 8005196:	dd12      	ble.n	80051be <LSM6DSO_GYRO_SetFullScale+0x36>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2bfa      	cmp	r3, #250	; 0xfa
 800519c:	dd0d      	ble.n	80051ba <LSM6DSO_GYRO_SetFullScale+0x32>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051a4:	dd07      	ble.n	80051b6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ac:	dc01      	bgt.n	80051b2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80051ae:	2304      	movs	r3, #4
 80051b0:	e006      	b.n	80051c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80051b2:	2306      	movs	r3, #6
 80051b4:	e004      	b.n	80051c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e002      	b.n	80051c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80051be:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80051c0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3320      	adds	r3, #32
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fcfa 	bl	8005bc4 <lsm6dso_gy_full_scale_set>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e000      	b.n	80051de <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3320      	adds	r3, #32
 80051f4:	f107 0208 	add.w	r2, r7, #8
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fecc 	bl	8005f98 <lsm6dso_angular_rate_raw_get>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	e00c      	b.n	8005226 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800520c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005214:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800521c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3320      	adds	r3, #32
 800523c:	f107 0210 	add.w	r2, r7, #16
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fea8 	bl	8005f98 <lsm6dso_angular_rate_raw_get>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	e03c      	b.n	80052ce <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fdd4 	bl	8004e08 <LSM6DSO_GYRO_GetSensitivity>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	e030      	b.n	80052ce <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800526c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005278:	edd7 7a03 	vldr	s15, [r7, #12]
 800527c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005284:	ee17 2a90 	vmov	r2, s15
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800528c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005298:	edd7 7a03 	vldr	s15, [r7, #12]
 800529c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052a4:	ee17 2a90 	vmov	r2, s15
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80052ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80052bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c4:	ee17 2a90 	vmov	r2, s15
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
 80052e2:	4613      	mov	r3, r2
 80052e4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0020 	add.w	r0, r3, #32
 80052ec:	1cba      	adds	r2, r7, #2
 80052ee:	78f9      	ldrb	r1, [r7, #3]
 80052f0:	2301      	movs	r3, #1
 80052f2:	f000 fa8f 	bl	8005814 <lsm6dso_write_reg>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	e000      	b.n	8005304 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005318:	edd7 7a00 	vldr	s15, [r7]
 800531c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800541c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005328:	d801      	bhi.n	800532e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800532a:	230b      	movs	r3, #11
 800532c:	e063      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800532e:	edd7 7a00 	vldr	s15, [r7]
 8005332:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	d801      	bhi.n	8005344 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005340:	2301      	movs	r3, #1
 8005342:	e058      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005344:	edd7 7a00 	vldr	s15, [r7]
 8005348:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800534c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	d801      	bhi.n	800535a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005356:	2302      	movs	r3, #2
 8005358:	e04d      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800535a:	edd7 7a00 	vldr	s15, [r7]
 800535e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005420 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d801      	bhi.n	8005370 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800536c:	2303      	movs	r3, #3
 800536e:	e042      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005370:	edd7 7a00 	vldr	s15, [r7]
 8005374:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005424 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	d801      	bhi.n	8005386 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005382:	2304      	movs	r3, #4
 8005384:	e037      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005386:	edd7 7a00 	vldr	s15, [r7]
 800538a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005428 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800538e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	d801      	bhi.n	800539c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005398:	2305      	movs	r3, #5
 800539a:	e02c      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800539c:	edd7 7a00 	vldr	s15, [r7]
 80053a0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800542c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80053a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	d801      	bhi.n	80053b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80053ae:	2306      	movs	r3, #6
 80053b0:	e021      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053b2:	edd7 7a00 	vldr	s15, [r7]
 80053b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005430 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80053ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c2:	d801      	bhi.n	80053c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80053c4:	2307      	movs	r3, #7
 80053c6:	e016      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053c8:	edd7 7a00 	vldr	s15, [r7]
 80053cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005434 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80053d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	d801      	bhi.n	80053de <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80053da:	2308      	movs	r3, #8
 80053dc:	e00b      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053de:	edd7 7a00 	vldr	s15, [r7]
 80053e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005438 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80053e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	d801      	bhi.n	80053f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80053f0:	2309      	movs	r3, #9
 80053f2:	e000      	b.n	80053f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80053f4:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80053f6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3320      	adds	r3, #32
 80053fc:	7bfa      	ldrb	r2, [r7, #15]
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fa7d 	bl	8005900 <lsm6dso_xl_data_rate_set>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	e000      	b.n	8005414 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	3fcccccd 	.word	0x3fcccccd
 8005420:	42500000 	.word	0x42500000
 8005424:	42d00000 	.word	0x42d00000
 8005428:	43500000 	.word	0x43500000
 800542c:	43d08000 	.word	0x43d08000
 8005430:	44504000 	.word	0x44504000
 8005434:	44d06000 	.word	0x44d06000
 8005438:	45505000 	.word	0x45505000

0800543c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005448:	edd7 7a00 	vldr	s15, [r7]
 800544c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800553c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	d801      	bhi.n	800545e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800545a:	230b      	movs	r3, #11
 800545c:	e063      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800545e:	edd7 7a00 	vldr	s15, [r7]
 8005462:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d801      	bhi.n	8005474 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005470:	2301      	movs	r3, #1
 8005472:	e058      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005474:	edd7 7a00 	vldr	s15, [r7]
 8005478:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800547c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005484:	d801      	bhi.n	800548a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005486:	2302      	movs	r3, #2
 8005488:	e04d      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800548a:	edd7 7a00 	vldr	s15, [r7]
 800548e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005540 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8005492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	d801      	bhi.n	80054a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 800549c:	2303      	movs	r3, #3
 800549e:	e042      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054a0:	edd7 7a00 	vldr	s15, [r7]
 80054a4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005544 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80054a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	d801      	bhi.n	80054b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80054b2:	2304      	movs	r3, #4
 80054b4:	e037      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054b6:	edd7 7a00 	vldr	s15, [r7]
 80054ba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005548 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80054be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d801      	bhi.n	80054cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80054c8:	2305      	movs	r3, #5
 80054ca:	e02c      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054cc:	edd7 7a00 	vldr	s15, [r7]
 80054d0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800554c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d801      	bhi.n	80054e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80054de:	2306      	movs	r3, #6
 80054e0:	e021      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054e2:	edd7 7a00 	vldr	s15, [r7]
 80054e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005550 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	d801      	bhi.n	80054f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80054f4:	2307      	movs	r3, #7
 80054f6:	e016      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80054f8:	edd7 7a00 	vldr	s15, [r7]
 80054fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005554 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d801      	bhi.n	800550e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800550a:	2308      	movs	r3, #8
 800550c:	e00b      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800550e:	edd7 7a00 	vldr	s15, [r7]
 8005512:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005558 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d801      	bhi.n	8005524 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005520:	2309      	movs	r3, #9
 8005522:	e000      	b.n	8005526 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005524:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	3fcccccd 	.word	0x3fcccccd
 8005540:	42500000 	.word	0x42500000
 8005544:	42d00000 	.word	0x42d00000
 8005548:	43500000 	.word	0x43500000
 800554c:	43d08000 	.word	0x43d08000
 8005550:	44504000 	.word	0x44504000
 8005554:	44d06000 	.word	0x44d06000
 8005558:	45505000 	.word	0x45505000

0800555c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005568:	edd7 7a00 	vldr	s15, [r7]
 800556c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	d801      	bhi.n	800557e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800557a:	2301      	movs	r3, #1
 800557c:	e058      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800557e:	edd7 7a00 	vldr	s15, [r7]
 8005582:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d801      	bhi.n	8005594 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005590:	2302      	movs	r3, #2
 8005592:	e04d      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005594:	edd7 7a00 	vldr	s15, [r7]
 8005598:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005658 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800559c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	d801      	bhi.n	80055aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80055a6:	2303      	movs	r3, #3
 80055a8:	e042      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055aa:	edd7 7a00 	vldr	s15, [r7]
 80055ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800565c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80055b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	d801      	bhi.n	80055c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80055bc:	2304      	movs	r3, #4
 80055be:	e037      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055c0:	edd7 7a00 	vldr	s15, [r7]
 80055c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005660 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80055c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d801      	bhi.n	80055d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80055d2:	2305      	movs	r3, #5
 80055d4:	e02c      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055d6:	edd7 7a00 	vldr	s15, [r7]
 80055da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005664 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80055de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	d801      	bhi.n	80055ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80055e8:	2306      	movs	r3, #6
 80055ea:	e021      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055ec:	edd7 7a00 	vldr	s15, [r7]
 80055f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005668 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d801      	bhi.n	8005602 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80055fe:	2307      	movs	r3, #7
 8005600:	e016      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005602:	edd7 7a00 	vldr	s15, [r7]
 8005606:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800566c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800560a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	d801      	bhi.n	8005618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005614:	2308      	movs	r3, #8
 8005616:	e00b      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005618:	edd7 7a00 	vldr	s15, [r7]
 800561c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005670 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	d801      	bhi.n	800562e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800562a:	2309      	movs	r3, #9
 800562c:	e000      	b.n	8005630 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800562e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005630:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3320      	adds	r3, #32
 8005636:	7bfa      	ldrb	r2, [r7, #15]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fb2a 	bl	8005c94 <lsm6dso_gy_data_rate_set>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	e000      	b.n	800564e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	42500000 	.word	0x42500000
 800565c:	42d00000 	.word	0x42d00000
 8005660:	43500000 	.word	0x43500000
 8005664:	43d08000 	.word	0x43d08000
 8005668:	44504000 	.word	0x44504000
 800566c:	44d06000 	.word	0x44d06000
 8005670:	45505000 	.word	0x45505000

08005674 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005680:	edd7 7a00 	vldr	s15, [r7]
 8005684:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005690:	d801      	bhi.n	8005696 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005692:	2301      	movs	r3, #1
 8005694:	e058      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005696:	edd7 7a00 	vldr	s15, [r7]
 800569a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800569e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a6:	d801      	bhi.n	80056ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e04d      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80056ac:	edd7 7a00 	vldr	s15, [r7]
 80056b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800575c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80056b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056bc:	d801      	bhi.n	80056c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80056be:	2303      	movs	r3, #3
 80056c0:	e042      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80056c2:	edd7 7a00 	vldr	s15, [r7]
 80056c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005760 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80056ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d2:	d801      	bhi.n	80056d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80056d4:	2304      	movs	r3, #4
 80056d6:	e037      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80056d8:	edd7 7a00 	vldr	s15, [r7]
 80056dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005764 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80056e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e8:	d801      	bhi.n	80056ee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e02c      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80056ee:	edd7 7a00 	vldr	s15, [r7]
 80056f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005768 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80056f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	d801      	bhi.n	8005704 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005700:	2306      	movs	r3, #6
 8005702:	e021      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005704:	edd7 7a00 	vldr	s15, [r7]
 8005708:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800576c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800570c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	d801      	bhi.n	800571a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005716:	2307      	movs	r3, #7
 8005718:	e016      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800571a:	edd7 7a00 	vldr	s15, [r7]
 800571e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005770 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d801      	bhi.n	8005730 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800572c:	2308      	movs	r3, #8
 800572e:	e00b      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005730:	edd7 7a00 	vldr	s15, [r7]
 8005734:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005774 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005740:	d801      	bhi.n	8005746 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005742:	2309      	movs	r3, #9
 8005744:	e000      	b.n	8005748 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005746:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	42500000 	.word	0x42500000
 8005760:	42d00000 	.word	0x42d00000
 8005764:	43500000 	.word	0x43500000
 8005768:	43d08000 	.word	0x43d08000
 800576c:	44504000 	.word	0x44504000
 8005770:	44d06000 	.word	0x44d06000
 8005774:	45505000 	.word	0x45505000

08005778 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	461a      	mov	r2, r3
 8005784:	460b      	mov	r3, r1
 8005786:	72fb      	strb	r3, [r7, #11]
 8005788:	4613      	mov	r3, r2
 800578a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	695c      	ldr	r4, [r3, #20]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	7b1b      	ldrb	r3, [r3, #12]
 8005798:	b298      	uxth	r0, r3
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	b299      	uxth	r1, r3
 800579e:	893b      	ldrh	r3, [r7, #8]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	47a0      	blx	r4
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}

080057ae <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80057ae:	b590      	push	{r4, r7, lr}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	461a      	mov	r2, r3
 80057ba:	460b      	mov	r3, r1
 80057bc:	72fb      	strb	r3, [r7, #11]
 80057be:	4613      	mov	r3, r2
 80057c0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	691c      	ldr	r4, [r3, #16]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	7b1b      	ldrb	r3, [r3, #12]
 80057ce:	b298      	uxth	r0, r3
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	b299      	uxth	r1, r3
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	47a0      	blx	r4
 80057da:	4603      	mov	r3, r0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd90      	pop	{r4, r7, pc}

080057e4 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	460b      	mov	r3, r1
 80057f2:	72fb      	strb	r3, [r7, #11]
 80057f4:	4613      	mov	r3, r2
 80057f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685c      	ldr	r4, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68d8      	ldr	r0, [r3, #12]
 8005800:	893b      	ldrh	r3, [r7, #8]
 8005802:	7af9      	ldrb	r1, [r7, #11]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	47a0      	blx	r4
 8005808:	6178      	str	r0, [r7, #20]

  return ret;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd90      	pop	{r4, r7, pc}

08005814 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	461a      	mov	r2, r3
 8005820:	460b      	mov	r3, r1
 8005822:	72fb      	strb	r3, [r7, #11]
 8005824:	4613      	mov	r3, r2
 8005826:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681c      	ldr	r4, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68d8      	ldr	r0, [r3, #12]
 8005830:	893b      	ldrh	r3, [r7, #8]
 8005832:	7af9      	ldrb	r1, [r7, #11]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	47a0      	blx	r4
 8005838:	6178      	str	r0, [r7, #20]

  return ret;
 800583a:	697b      	ldr	r3, [r7, #20]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd90      	pop	{r4, r7, pc}

08005844 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005850:	f107 0208 	add.w	r2, r7, #8
 8005854:	2301      	movs	r3, #1
 8005856:	2110      	movs	r1, #16
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffc3 	bl	80057e4 <lsm6dso_read_reg>
 800585e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	b2da      	uxtb	r2, r3
 800586e:	7a3b      	ldrb	r3, [r7, #8]
 8005870:	f362 0383 	bfi	r3, r2, #2, #2
 8005874:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005876:	f107 0208 	add.w	r2, r7, #8
 800587a:	2301      	movs	r3, #1
 800587c:	2110      	movs	r1, #16
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ffc8 	bl	8005814 <lsm6dso_write_reg>
 8005884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005886:	68fb      	ldr	r3, [r7, #12]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800589a:	f107 0208 	add.w	r2, r7, #8
 800589e:	2301      	movs	r3, #1
 80058a0:	2110      	movs	r1, #16
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ff9e 	bl	80057e4 <lsm6dso_read_reg>
 80058a8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80058aa:	7a3b      	ldrb	r3, [r7, #8]
 80058ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d81a      	bhi.n	80058ec <lsm6dso_xl_full_scale_get+0x5c>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <lsm6dso_xl_full_scale_get+0x2c>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d5 	.word	0x080058d5
 80058c4:	080058dd 	.word	0x080058dd
 80058c8:	080058e5 	.word	0x080058e5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
      break;
 80058d2:	e00f      	b.n	80058f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
      break;
 80058da:	e00b      	b.n	80058f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
      break;
 80058e2:	e007      	b.n	80058f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2203      	movs	r2, #3
 80058e8:	701a      	strb	r2, [r3, #0]
      break;
 80058ea:	e003      	b.n	80058f4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
      break;
 80058f2:	bf00      	nop
  }

  return ret;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fc96 	bl	8006248 <lsm6dso_fsm_enable_get>
 800591c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <lsm6dso_xl_data_rate_set+0x28>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	e0e0      	b.n	8005aea <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005928:	7b3b      	ldrb	r3, [r7, #12]
 800592a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800592e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005930:	7b3b      	ldrb	r3, [r7, #12]
 8005932:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005936:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005938:	4313      	orrs	r3, r2
 800593a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800593c:	7b3b      	ldrb	r3, [r7, #12]
 800593e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005942:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005944:	4313      	orrs	r3, r2
 8005946:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005948:	7b3b      	ldrb	r3, [r7, #12]
 800594a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800594e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005950:	4313      	orrs	r3, r2
 8005952:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005954:	7b3b      	ldrb	r3, [r7, #12]
 8005956:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800595a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800595c:	4313      	orrs	r3, r2
 800595e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005960:	7b3b      	ldrb	r3, [r7, #12]
 8005962:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005966:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005968:	4313      	orrs	r3, r2
 800596a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800596c:	7b3b      	ldrb	r3, [r7, #12]
 800596e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005972:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005974:	4313      	orrs	r3, r2
 8005976:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005978:	7b3b      	ldrb	r3, [r7, #12]
 800597a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800597e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005980:	4313      	orrs	r3, r2
 8005982:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005984:	7b7b      	ldrb	r3, [r7, #13]
 8005986:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800598a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800598c:	4313      	orrs	r3, r2
 800598e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005990:	7b7b      	ldrb	r3, [r7, #13]
 8005992:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005996:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005998:	4313      	orrs	r3, r2
 800599a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800599c:	7b7b      	ldrb	r3, [r7, #13]
 800599e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80059a4:	4313      	orrs	r3, r2
 80059a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80059a8:	7b7b      	ldrb	r3, [r7, #13]
 80059aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80059b0:	4313      	orrs	r3, r2
 80059b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80059b4:	7b7b      	ldrb	r3, [r7, #13]
 80059b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80059bc:	4313      	orrs	r3, r2
 80059be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80059c0:	7b7b      	ldrb	r3, [r7, #13]
 80059c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80059c8:	4313      	orrs	r3, r2
 80059ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80059cc:	7b7b      	ldrb	r3, [r7, #13]
 80059ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80059d8:	7b7b      	ldrb	r3, [r7, #13]
 80059da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80059e0:	4313      	orrs	r3, r2
 80059e2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d164      	bne.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80059e8:	f107 030b 	add.w	r3, r7, #11
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fc4c 	bl	800628c <lsm6dso_fsm_data_rate_get>
 80059f4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <lsm6dso_xl_data_rate_set+0x100>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	e074      	b.n	8005aea <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d852      	bhi.n	8005aac <lsm6dso_xl_data_rate_set+0x1ac>
 8005a06:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <lsm6dso_xl_data_rate_set+0x10c>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005a2f 	.word	0x08005a2f
 8005a14:	08005a4d 	.word	0x08005a4d
 8005a18:	08005a77 	.word	0x08005a77
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005a26:	e044      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a2c:	e041      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005a34:	2302      	movs	r3, #2
 8005a36:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005a38:	e03b      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d102      	bne.n	8005a46 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005a40:	2302      	movs	r3, #2
 8005a42:	75fb      	strb	r3, [r7, #23]
        break;
 8005a44:	e035      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	75fb      	strb	r3, [r7, #23]
        break;
 8005a4a:	e032      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005a52:	2303      	movs	r3, #3
 8005a54:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005a56:	e02c      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d102      	bne.n	8005a64 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	75fb      	strb	r3, [r7, #23]
        break;
 8005a62:	e026      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d102      	bne.n	8005a70 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	75fb      	strb	r3, [r7, #23]
        break;
 8005a6e:	e020      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	75fb      	strb	r3, [r7, #23]
        break;
 8005a74:	e01d      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8005a80:	e017      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005a88:	2304      	movs	r3, #4
 8005a8a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a8c:	e011      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d102      	bne.n	8005a9a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005a94:	2304      	movs	r3, #4
 8005a96:	75fb      	strb	r3, [r7, #23]
        break;
 8005a98:	e00b      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d102      	bne.n	8005aa6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	75fb      	strb	r3, [r7, #23]
        break;
 8005aa4:	e005      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	75fb      	strb	r3, [r7, #23]
        break;
 8005aaa:	e002      	b.n	8005ab2 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	75fb      	strb	r3, [r7, #23]
        break;
 8005ab0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005ab2:	f107 0208 	add.w	r2, r7, #8
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	2110      	movs	r1, #16
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fe92 	bl	80057e4 <lsm6dso_read_reg>
 8005ac0:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	7a3b      	ldrb	r3, [r7, #8]
 8005acc:	f362 1307 	bfi	r3, r2, #4, #4
 8005ad0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005ad2:	f107 0208 	add.w	r2, r7, #8
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	2110      	movs	r1, #16
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fe9a 	bl	8005814 <lsm6dso_write_reg>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  return ret;
 8005ae8:	693b      	ldr	r3, [r7, #16]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005afe:	f107 0208 	add.w	r2, r7, #8
 8005b02:	2301      	movs	r3, #1
 8005b04:	2110      	movs	r1, #16
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fe6c 	bl	80057e4 <lsm6dso_read_reg>
 8005b0c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005b0e:	7a3b      	ldrb	r3, [r7, #8]
 8005b10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b0b      	cmp	r3, #11
 8005b18:	d84a      	bhi.n	8005bb0 <lsm6dso_xl_data_rate_get+0xbc>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <lsm6dso_xl_data_rate_get+0x2c>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005b59 	.word	0x08005b59
 8005b28:	08005b61 	.word	0x08005b61
 8005b2c:	08005b69 	.word	0x08005b69
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005ba9 	.word	0x08005ba9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
      break;
 8005b56:	e02f      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e02b      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2202      	movs	r2, #2
 8005b64:	701a      	strb	r2, [r3, #0]
      break;
 8005b66:	e027      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e023      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2204      	movs	r2, #4
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	e01f      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2205      	movs	r2, #5
 8005b7c:	701a      	strb	r2, [r3, #0]
      break;
 8005b7e:	e01b      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2206      	movs	r2, #6
 8005b84:	701a      	strb	r2, [r3, #0]
      break;
 8005b86:	e017      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2207      	movs	r2, #7
 8005b8c:	701a      	strb	r2, [r3, #0]
      break;
 8005b8e:	e013      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2208      	movs	r2, #8
 8005b94:	701a      	strb	r2, [r3, #0]
      break;
 8005b96:	e00f      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2209      	movs	r2, #9
 8005b9c:	701a      	strb	r2, [r3, #0]
      break;
 8005b9e:	e00b      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	701a      	strb	r2, [r3, #0]
      break;
 8005ba6:	e007      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	220b      	movs	r2, #11
 8005bac:	701a      	strb	r2, [r3, #0]
      break;
 8005bae:	e003      	b.n	8005bb8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
      break;
 8005bb6:	bf00      	nop
  }

  return ret;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2111      	movs	r1, #17
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fe03 	bl	80057e4 <lsm6dso_read_reg>
 8005bde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10f      	bne.n	8005c06 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	7a3b      	ldrb	r3, [r7, #8]
 8005bf0:	f362 0343 	bfi	r3, r2, #1, #3
 8005bf4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005bf6:	f107 0208 	add.w	r2, r7, #8
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	2111      	movs	r1, #17
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fe08 	bl	8005814 <lsm6dso_write_reg>
 8005c04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005c1a:	f107 0208 	add.w	r2, r7, #8
 8005c1e:	2301      	movs	r3, #1
 8005c20:	2111      	movs	r1, #17
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fdde 	bl	80057e4 <lsm6dso_read_reg>
 8005c28:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005c2a:	7a3b      	ldrb	r3, [r7, #8]
 8005c2c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d824      	bhi.n	8005c80 <lsm6dso_gy_full_scale_get+0x70>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <lsm6dso_gy_full_scale_get+0x2c>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c81 	.word	0x08005c81
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c79 	.word	0x08005c79
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
      break;
 8005c5e:	e013      	b.n	8005c88 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
      break;
 8005c66:	e00f      	b.n	8005c88 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	701a      	strb	r2, [r3, #0]
      break;
 8005c6e:	e00b      	b.n	8005c88 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2204      	movs	r2, #4
 8005c74:	701a      	strb	r2, [r3, #0]
      break;
 8005c76:	e007      	b.n	8005c88 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2206      	movs	r2, #6
 8005c7c:	701a      	strb	r2, [r3, #0]
      break;
 8005c7e:	e003      	b.n	8005c88 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
      break;
 8005c86:	bf00      	nop
  }

  return ret;
 8005c88:	68fb      	ldr	r3, [r7, #12]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop

08005c94 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005ca4:	f107 030c 	add.w	r3, r7, #12
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 facc 	bl	8006248 <lsm6dso_fsm_enable_get>
 8005cb0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <lsm6dso_gy_data_rate_set+0x28>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	e0e0      	b.n	8005e7e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005cbc:	7b3b      	ldrb	r3, [r7, #12]
 8005cbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005cc4:	7b3b      	ldrb	r3, [r7, #12]
 8005cc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005cca:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005cd0:	7b3b      	ldrb	r3, [r7, #12]
 8005cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005cdc:	7b3b      	ldrb	r3, [r7, #12]
 8005cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005ce8:	7b3b      	ldrb	r3, [r7, #12]
 8005cea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005cf4:	7b3b      	ldrb	r3, [r7, #12]
 8005cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005d00:	7b3b      	ldrb	r3, [r7, #12]
 8005d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005d0c:	7b3b      	ldrb	r3, [r7, #12]
 8005d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005d14:	4313      	orrs	r3, r2
 8005d16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005d18:	7b7b      	ldrb	r3, [r7, #13]
 8005d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005d20:	4313      	orrs	r3, r2
 8005d22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005d24:	7b7b      	ldrb	r3, [r7, #13]
 8005d26:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005d30:	7b7b      	ldrb	r3, [r7, #13]
 8005d32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005d3c:	7b7b      	ldrb	r3, [r7, #13]
 8005d3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005d48:	7b7b      	ldrb	r3, [r7, #13]
 8005d4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d4e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005d54:	7b7b      	ldrb	r3, [r7, #13]
 8005d56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d5a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005d60:	7b7b      	ldrb	r3, [r7, #13]
 8005d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d66:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005d6c:	7b7b      	ldrb	r3, [r7, #13]
 8005d6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d72:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d164      	bne.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005d7c:	f107 030b 	add.w	r3, r7, #11
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa82 	bl	800628c <lsm6dso_fsm_data_rate_get>
 8005d88:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <lsm6dso_gy_data_rate_set+0x100>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	e074      	b.n	8005e7e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d852      	bhi.n	8005e40 <lsm6dso_gy_data_rate_set+0x1ac>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <lsm6dso_gy_data_rate_set+0x10c>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dc3 	.word	0x08005dc3
 8005da8:	08005de1 	.word	0x08005de1
 8005dac:	08005e0b 	.word	0x08005e0b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005dba:	e044      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8005dc0:	e041      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005dcc:	e03b      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d102      	bne.n	8005dda <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8005dd8:	e035      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8005dde:	e032      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005de6:	2303      	movs	r3, #3
 8005de8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005dea:	e02c      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005df2:	2303      	movs	r3, #3
 8005df4:	75fb      	strb	r3, [r7, #23]
        break;
 8005df6:	e026      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d102      	bne.n	8005e04 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
        break;
 8005e02:	e020      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	75fb      	strb	r3, [r7, #23]
        break;
 8005e08:	e01d      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e10:	2304      	movs	r3, #4
 8005e12:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005e14:	e017      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	75fb      	strb	r3, [r7, #23]
        break;
 8005e20:	e011      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d102      	bne.n	8005e2e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e28:	2304      	movs	r3, #4
 8005e2a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e2c:	e00b      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d102      	bne.n	8005e3a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005e34:	2304      	movs	r3, #4
 8005e36:	75fb      	strb	r3, [r7, #23]
        break;
 8005e38:	e005      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8005e3e:	e002      	b.n	8005e46 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	75fb      	strb	r3, [r7, #23]
        break;
 8005e44:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e46:	f107 0208 	add.w	r2, r7, #8
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	2111      	movs	r1, #17
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fcc8 	bl	80057e4 <lsm6dso_read_reg>
 8005e54:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	7a3b      	ldrb	r3, [r7, #8]
 8005e60:	f362 1307 	bfi	r3, r2, #4, #4
 8005e64:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e66:	f107 0208 	add.w	r2, r7, #8
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	2111      	movs	r1, #17
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fcd0 	bl	8005814 <lsm6dso_write_reg>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  return ret;
 8005e7c:	693b      	ldr	r3, [r7, #16]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e92:	f107 0208 	add.w	r2, r7, #8
 8005e96:	2301      	movs	r3, #1
 8005e98:	2111      	movs	r1, #17
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fca2 	bl	80057e4 <lsm6dso_read_reg>
 8005ea0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005ea2:	7a3b      	ldrb	r3, [r7, #8]
 8005ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b0a      	cmp	r3, #10
 8005eac:	d844      	bhi.n	8005f38 <lsm6dso_gy_data_rate_get+0xb0>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <lsm6dso_gy_data_rate_get+0x2c>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	08005ee9 	.word	0x08005ee9
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005ef9 	.word	0x08005ef9
 8005ec4:	08005f01 	.word	0x08005f01
 8005ec8:	08005f09 	.word	0x08005f09
 8005ecc:	08005f11 	.word	0x08005f11
 8005ed0:	08005f19 	.word	0x08005f19
 8005ed4:	08005f21 	.word	0x08005f21
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f31 	.word	0x08005f31
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
      break;
 8005ee6:	e02b      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
      break;
 8005eee:	e027      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	701a      	strb	r2, [r3, #0]
      break;
 8005ef6:	e023      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2203      	movs	r2, #3
 8005efc:	701a      	strb	r2, [r3, #0]
      break;
 8005efe:	e01f      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2204      	movs	r2, #4
 8005f04:	701a      	strb	r2, [r3, #0]
      break;
 8005f06:	e01b      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	701a      	strb	r2, [r3, #0]
      break;
 8005f0e:	e017      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2206      	movs	r2, #6
 8005f14:	701a      	strb	r2, [r3, #0]
      break;
 8005f16:	e013      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2207      	movs	r2, #7
 8005f1c:	701a      	strb	r2, [r3, #0]
      break;
 8005f1e:	e00f      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2208      	movs	r2, #8
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e00b      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2209      	movs	r2, #9
 8005f2c:	701a      	strb	r2, [r3, #0]
      break;
 8005f2e:	e007      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	220a      	movs	r2, #10
 8005f34:	701a      	strb	r2, [r3, #0]
      break;
 8005f36:	e003      	b.n	8005f40 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
      break;
 8005f3e:	bf00      	nop
  }

  return ret;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005f58:	f107 0208 	add.w	r2, r7, #8
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	2112      	movs	r1, #18
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff fc3f 	bl	80057e4 <lsm6dso_read_reg>
 8005f66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10f      	bne.n	8005f8e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	7a3b      	ldrb	r3, [r7, #8]
 8005f78:	f362 1386 	bfi	r3, r2, #6, #1
 8005f7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	2301      	movs	r3, #1
 8005f84:	2112      	movs	r1, #18
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fc44 	bl	8005814 <lsm6dso_write_reg>
 8005f8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005fa2:	f107 020c 	add.w	r2, r7, #12
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	2122      	movs	r1, #34	; 0x22
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fc1a 	bl	80057e4 <lsm6dso_read_reg>
 8005fb0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005fb2:	7b7b      	ldrb	r3, [r7, #13]
 8005fb4:	b21a      	sxth	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	7b3b      	ldrb	r3, [r7, #12]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	b21a      	sxth	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	3302      	adds	r3, #2
 8005fda:	b212      	sxth	r2, r2
 8005fdc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	b212      	sxth	r2, r2
 8005ffa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ffc:	7c7a      	ldrb	r2, [r7, #17]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	3304      	adds	r3, #4
 8006002:	b212      	sxth	r2, r2
 8006004:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	3304      	adds	r3, #4
 800600a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800600e:	b29b      	uxth	r3, r3
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	b29a      	uxth	r2, r3
 8006014:	7c3b      	ldrb	r3, [r7, #16]
 8006016:	b29b      	uxth	r3, r3
 8006018:	4413      	add	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3304      	adds	r3, #4
 8006020:	b212      	sxth	r2, r2
 8006022:	801a      	strh	r2, [r3, #0]

  return ret;
 8006024:	697b      	ldr	r3, [r7, #20]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006038:	f107 020c 	add.w	r2, r7, #12
 800603c:	2306      	movs	r3, #6
 800603e:	2128      	movs	r1, #40	; 0x28
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fbcf 	bl	80057e4 <lsm6dso_read_reg>
 8006046:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006048:	7b7b      	ldrb	r3, [r7, #13]
 800604a:	b21a      	sxth	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006056:	b29b      	uxth	r3, r3
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	b29a      	uxth	r2, r3
 800605c:	7b3b      	ldrb	r3, [r7, #12]
 800605e:	b29b      	uxth	r3, r3
 8006060:	4413      	add	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	b21a      	sxth	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800606a:	7bfa      	ldrb	r2, [r7, #15]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	3302      	adds	r3, #2
 8006070:	b212      	sxth	r2, r2
 8006072:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	3302      	adds	r3, #2
 8006078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607c:	b29b      	uxth	r3, r3
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	b29a      	uxth	r2, r3
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	b29b      	uxth	r3, r3
 8006086:	4413      	add	r3, r2
 8006088:	b29a      	uxth	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	3302      	adds	r3, #2
 800608e:	b212      	sxth	r2, r2
 8006090:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006092:	7c7a      	ldrb	r2, [r7, #17]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	b212      	sxth	r2, r2
 800609a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3304      	adds	r3, #4
 80060a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	7c3b      	ldrb	r3, [r7, #16]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	b212      	sxth	r2, r2
 80060b8:	801a      	strh	r2, [r3, #0]

  return ret;
 80060ba:	697b      	ldr	r3, [r7, #20]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80060d0:	2300      	movs	r3, #0
 80060d2:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	7a3b      	ldrb	r3, [r7, #8]
 80060de:	f362 1387 	bfi	r3, r2, #6, #2
 80060e2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80060e4:	f107 0208 	add.w	r2, r7, #8
 80060e8:	2301      	movs	r3, #1
 80060ea:	2101      	movs	r1, #1
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fb91 	bl	8005814 <lsm6dso_write_reg>
 80060f2:	60f8      	str	r0, [r7, #12]

  return ret;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006108:	2301      	movs	r3, #1
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	210f      	movs	r1, #15
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fb68 	bl	80057e4 <lsm6dso_read_reg>
 8006114:	60f8      	str	r0, [r7, #12]

  return ret;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800612c:	f107 0208 	add.w	r2, r7, #8
 8006130:	2301      	movs	r3, #1
 8006132:	2112      	movs	r1, #18
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fb55 	bl	80057e4 <lsm6dso_read_reg>
 800613a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10f      	bne.n	8006162 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	7a3b      	ldrb	r3, [r7, #8]
 800614c:	f362 0382 	bfi	r3, r2, #2, #1
 8006150:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006152:	f107 0208 	add.w	r2, r7, #8
 8006156:	2301      	movs	r3, #1
 8006158:	2112      	movs	r1, #18
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fb5a 	bl	8005814 <lsm6dso_write_reg>
 8006160:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006178:	f107 020c 	add.w	r2, r7, #12
 800617c:	2301      	movs	r3, #1
 800617e:	2118      	movs	r1, #24
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fb2f 	bl	80057e4 <lsm6dso_read_reg>
 8006186:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	7b3b      	ldrb	r3, [r7, #12]
 8006196:	f362 0341 	bfi	r3, r2, #1, #1
 800619a:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800619c:	f107 020c 	add.w	r2, r7, #12
 80061a0:	2301      	movs	r3, #1
 80061a2:	2118      	movs	r1, #24
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fb35 	bl	8005814 <lsm6dso_write_reg>
 80061aa:	4602      	mov	r2, r0
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <lsm6dso_i3c_disable_set+0x50>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	e01b      	b.n	80061f4 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80061bc:	f107 0210 	add.w	r2, r7, #16
 80061c0:	2301      	movs	r3, #1
 80061c2:	2162      	movs	r1, #98	; 0x62
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fb0d 	bl	80057e4 <lsm6dso_read_reg>
 80061ca:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	7c3b      	ldrb	r3, [r7, #16]
 80061d6:	f362 03c4 	bfi	r3, r2, #3, #2
 80061da:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80061dc:	f107 0210 	add.w	r2, r7, #16
 80061e0:	2301      	movs	r3, #1
 80061e2:	2162      	movs	r1, #98	; 0x62
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fb15 	bl	8005814 <lsm6dso_write_reg>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  return ret;
 80061f2:	697b      	ldr	r3, [r7, #20]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	2301      	movs	r3, #1
 800620e:	210a      	movs	r1, #10
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fae7 	bl	80057e4 <lsm6dso_read_reg>
 8006216:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	b2da      	uxtb	r2, r3
 8006226:	7a3b      	ldrb	r3, [r7, #8]
 8006228:	f362 0302 	bfi	r3, r2, #0, #3
 800622c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800622e:	f107 0208 	add.w	r2, r7, #8
 8006232:	2301      	movs	r3, #1
 8006234:	210a      	movs	r1, #10
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff faec 	bl	8005814 <lsm6dso_write_reg>
 800623c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006252:	2102      	movs	r1, #2
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff35 	bl	80060c4 <lsm6dso_mem_bank_set>
 800625a:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800625c:	2302      	movs	r3, #2
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	2146      	movs	r1, #70	; 0x46
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fabe 	bl	80057e4 <lsm6dso_read_reg>
 8006268:	4602      	mov	r2, r0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006270:	2100      	movs	r1, #0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ff26 	bl	80060c4 <lsm6dso_mem_bank_set>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  return ret;
 8006280:	68fb      	ldr	r3, [r7, #12]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006296:	2102      	movs	r1, #2
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ff13 	bl	80060c4 <lsm6dso_mem_bank_set>
 800629e:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <lsm6dso_fsm_data_rate_get+0x1e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	e03a      	b.n	8006320 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80062aa:	f107 0208 	add.w	r2, r7, #8
 80062ae:	2301      	movs	r3, #1
 80062b0:	215f      	movs	r1, #95	; 0x5f
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fa96 	bl	80057e4 <lsm6dso_read_reg>
 80062b8:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d125      	bne.n	800630c <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80062c0:	7a3b      	ldrb	r3, [r7, #8]
 80062c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d81b      	bhi.n	8006304 <lsm6dso_fsm_data_rate_get+0x78>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <lsm6dso_fsm_data_rate_get+0x48>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062ed 	.word	0x080062ed
 80062dc:	080062f5 	.word	0x080062f5
 80062e0:	080062fd 	.word	0x080062fd
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	e010      	b.n	800630e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
      break;
 80062f2:	e00c      	b.n	800630e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
      break;
 80062fa:	e008      	b.n	800630e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2203      	movs	r2, #3
 8006300:	701a      	strb	r2, [r3, #0]
      break;
 8006302:	e004      	b.n	800630e <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
      break;
 800630a:	e000      	b.n	800630e <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 800630c:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800630e:	2100      	movs	r1, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fed7 	bl	80060c4 <lsm6dso_mem_bank_set>
 8006316:	4602      	mov	r2, r0
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  return ret;
 800631e:	68fb      	ldr	r3, [r7, #12]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006336:	2301      	movs	r3, #1
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d06e      	beq.n	8006422 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b02      	cmp	r3, #2
 8006348:	f200 809d 	bhi.w	8006486 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <IKS01A3_MOTION_SENSOR_Init+0x32>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d032      	beq.n	80063be <IKS01A3_MOTION_SENSOR_Init+0x96>
 8006358:	e095      	b.n	8006486 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800635a:	6838      	ldr	r0, [r7, #0]
 800635c:	f000 f966 	bl	800662c <LSM6DSO_0_Probe>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e0cc      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800636c:	4a68      	ldr	r2, [pc, #416]	; (8006510 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	4967      	ldr	r1, [pc, #412]	; (8006514 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800637e:	f107 010c 	add.w	r1, r7, #12
 8006382:	4610      	mov	r0, r2
 8006384:	4798      	blx	r3
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800638c:	f06f 0306 	mvn.w	r3, #6
 8006390:	e0b9      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006392:	7b3b      	ldrb	r3, [r7, #12]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d103      	bne.n	80063a0 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80063a0:	7b7b      	ldrb	r3, [r7, #13]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d103      	bne.n	80063ae <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d16c      	bne.n	800648e <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80063bc:	e067      	b.n	800648e <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80063be:	6838      	ldr	r0, [r7, #0]
 80063c0:	f000 f9f4 	bl	80067ac <LIS2DW12_0_Probe>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	e09a      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80063d0:	4a4f      	ldr	r2, [pc, #316]	; (8006510 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	494e      	ldr	r1, [pc, #312]	; (8006514 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80063e2:	f107 010c 	add.w	r1, r7, #12
 80063e6:	4610      	mov	r0, r2
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80063f0:	f06f 0306 	mvn.w	r3, #6
 80063f4:	e087      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80063f6:	7b3b      	ldrb	r3, [r7, #12]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d103      	bne.n	8006404 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006404:	7b7b      	ldrb	r3, [r7, #13]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d103      	bne.n	8006412 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d13c      	bne.n	8006492 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	f043 0304 	orr.w	r3, r3, #4
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006420:	e037      	b.n	8006492 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8006422:	6838      	ldr	r0, [r7, #0]
 8006424:	f000 fa6a 	bl	80068fc <LIS2MDL_0_Probe>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	e068      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006434:	4a36      	ldr	r2, [pc, #216]	; (8006510 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4935      	ldr	r1, [pc, #212]	; (8006514 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006446:	f107 010c 	add.w	r1, r7, #12
 800644a:	4610      	mov	r0, r2
 800644c:	4798      	blx	r3
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006454:	f06f 0306 	mvn.w	r3, #6
 8006458:	e055      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800645a:	7b3b      	ldrb	r3, [r7, #12]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d103      	bne.n	8006468 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f043 0302 	orr.w	r3, r3, #2
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006468:	7b7b      	ldrb	r3, [r7, #13]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d103      	bne.n	8006476 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d10c      	bne.n	8006496 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f043 0304 	orr.w	r3, r3, #4
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006484:	e007      	b.n	8006496 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006486:	f06f 0301 	mvn.w	r3, #1
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800648c:	e004      	b.n	8006498 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006496:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	e031      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	e02a      	b.n	80064fe <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	4013      	ands	r3, r2
 80064ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d11e      	bne.n	80064f2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80064b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	4013      	ands	r3, r2
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	429a      	cmp	r2, r3
 80064be:	d118      	bne.n	80064f2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80064c0:	4a15      	ldr	r2, [pc, #84]	; (8006518 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064c8:	4814      	ldr	r0, [pc, #80]	; (800651c <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	440b      	add	r3, r1
 80064d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	490e      	ldr	r1, [pc, #56]	; (8006514 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80064ec:	f06f 0304 	mvn.w	r3, #4
 80064f0:	e009      	b.n	8006506 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	3301      	adds	r3, #1
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	2b02      	cmp	r3, #2
 8006502:	d9d1      	bls.n	80064a8 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006506:	4618      	mov	r0, r3
 8006508:	3738      	adds	r7, #56	; 0x38
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200003e4 	.word	0x200003e4
 8006514:	200003b4 	.word	0x200003b4
 8006518:	200000c4 	.word	0x200000c4
 800651c:	200003c0 	.word	0x200003c0

08006520 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d903      	bls.n	8006538 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006530:	f06f 0301 	mvn.w	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e028      	b.n	800658a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006538:	4a16      	ldr	r2, [pc, #88]	; (8006594 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	4013      	ands	r3, r2
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d11c      	bne.n	8006584 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800654a:	4a13      	ldr	r2, [pc, #76]	; (8006598 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006552:	4812      	ldr	r0, [pc, #72]	; (800659c <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4413      	add	r3, r2
 800655c:	440b      	add	r3, r1
 800655e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	490e      	ldr	r1, [pc, #56]	; (80065a0 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006576:	f06f 0304 	mvn.w	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e005      	b.n	800658a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e002      	b.n	800658a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006584:	f06f 0301 	mvn.w	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	200003f0 	.word	0x200003f0
 8006598:	200000c4 	.word	0x200000c4
 800659c:	200003c0 	.word	0x200003c0
 80065a0:	200003b4 	.word	0x200003b4

080065a4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d903      	bls.n	80065be <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80065b6:	f06f 0301 	mvn.w	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e029      	b.n	8006612 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4013      	ands	r3, r2
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d11d      	bne.n	800660c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065d8:	4812      	ldr	r0, [pc, #72]	; (8006624 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	440b      	add	r3, r1
 80065e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	490f      	ldr	r1, [pc, #60]	; (8006628 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065fe:	f06f 0304 	mvn.w	r3, #4
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e005      	b.n	8006612 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e002      	b.n	8006612 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800660c:	f06f 0301 	mvn.w	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006612:	697b      	ldr	r3, [r7, #20]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200003f0 	.word	0x200003f0
 8006620:	200000c4 	.word	0x200000c4
 8006624:	200003c0 	.word	0x200003c0
 8006628:	200003b4 	.word	0x200003b4

0800662c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b094      	sub	sp, #80	; 0x50
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006634:	2300      	movs	r3, #0
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8006638:	2300      	movs	r3, #0
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800663c:	23d7      	movs	r3, #215	; 0xd7
 800663e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006642:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <LSM6DSO_0_Probe+0x144>)
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006646:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <LSM6DSO_0_Probe+0x148>)
 8006648:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800664a:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <LSM6DSO_0_Probe+0x14c>)
 800664c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800664e:	4b4b      	ldr	r3, [pc, #300]	; (800677c <LSM6DSO_0_Probe+0x150>)
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006652:	4b4b      	ldr	r3, [pc, #300]	; (8006780 <LSM6DSO_0_Probe+0x154>)
 8006654:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006656:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <LSM6DSO_0_Probe+0x158>)
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800665a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800665e:	4619      	mov	r1, r3
 8006660:	4849      	ldr	r0, [pc, #292]	; (8006788 <LSM6DSO_0_Probe+0x15c>)
 8006662:	f7fd fe81 	bl	8004368 <LSM6DSO_RegisterBusIO>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800666c:	f06f 0306 	mvn.w	r3, #6
 8006670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006672:	e077      	b.n	8006764 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8006674:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006678:	4619      	mov	r1, r3
 800667a:	4843      	ldr	r0, [pc, #268]	; (8006788 <LSM6DSO_0_Probe+0x15c>)
 800667c:	f7fd ff7e 	bl	800457c <LSM6DSO_ReadID>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006686:	f06f 0306 	mvn.w	r3, #6
 800668a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668c:	e06a      	b.n	8006764 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800668e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006692:	2b6c      	cmp	r3, #108	; 0x6c
 8006694:	d003      	beq.n	800669e <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006696:	f06f 0306 	mvn.w	r3, #6
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	e062      	b.n	8006764 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	4619      	mov	r1, r3
 80066a4:	4838      	ldr	r0, [pc, #224]	; (8006788 <LSM6DSO_0_Probe+0x15c>)
 80066a6:	f7fd ff7f 	bl	80045a8 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80066aa:	7b7b      	ldrb	r3, [r7, #13]
 80066ac:	461a      	mov	r2, r3
 80066ae:	7b3b      	ldrb	r3, [r7, #12]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	431a      	orrs	r2, r3
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4313      	orrs	r3, r2
 80066ba:	4a34      	ldr	r2, [pc, #208]	; (800678c <LSM6DSO_0_Probe+0x160>)
 80066bc:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <LSM6DSO_0_Probe+0x164>)
 80066c0:	4a31      	ldr	r2, [pc, #196]	; (8006788 <LSM6DSO_0_Probe+0x15c>)
 80066c2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80066c4:	4b33      	ldr	r3, [pc, #204]	; (8006794 <LSM6DSO_0_Probe+0x168>)
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <LSM6DSO_0_Probe+0x16c>)
 80066c8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11d      	bne.n	800670c <LSM6DSO_0_Probe+0xe0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d018      	beq.n	800670c <LSM6DSO_0_Probe+0xe0>
 80066da:	7b7b      	ldrb	r3, [r7, #13]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d115      	bne.n	800670c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80066e0:	4b2e      	ldr	r3, [pc, #184]	; (800679c <LSM6DSO_0_Probe+0x170>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a2e      	ldr	r2, [pc, #184]	; (80067a0 <LSM6DSO_0_Probe+0x174>)
 80066e6:	492f      	ldr	r1, [pc, #188]	; (80067a4 <LSM6DSO_0_Probe+0x178>)
 80066e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80066ec:	4b29      	ldr	r3, [pc, #164]	; (8006794 <LSM6DSO_0_Probe+0x168>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a27      	ldr	r2, [pc, #156]	; (8006790 <LSM6DSO_0_Probe+0x164>)
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	4610      	mov	r0, r2
 80066f8:	4798      	blx	r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006700:	f06f 0304 	mvn.w	r3, #4
 8006704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006706:	e001      	b.n	800670c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006708:	2300      	movs	r3, #0
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11d      	bne.n	800674e <LSM6DSO_0_Probe+0x122>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d018      	beq.n	800674e <LSM6DSO_0_Probe+0x122>
 800671c:	7b3b      	ldrb	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d115      	bne.n	800674e <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006722:	4b1e      	ldr	r3, [pc, #120]	; (800679c <LSM6DSO_0_Probe+0x170>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <LSM6DSO_0_Probe+0x174>)
 8006728:	491f      	ldr	r1, [pc, #124]	; (80067a8 <LSM6DSO_0_Probe+0x17c>)
 800672a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <LSM6DSO_0_Probe+0x168>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a16      	ldr	r2, [pc, #88]	; (8006790 <LSM6DSO_0_Probe+0x164>)
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006742:	f06f 0304 	mvn.w	r3, #4
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	e001      	b.n	800674e <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800674a:	2300      	movs	r3, #0
 800674c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800674e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <LSM6DSO_0_Probe+0x138>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800675e:	f06f 0304 	mvn.w	r3, #4
 8006762:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006766:	4618      	mov	r0, r3
 8006768:	3750      	adds	r7, #80	; 0x50
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	0800197d 	.word	0x0800197d
 8006774:	080019e1 	.word	0x080019e1
 8006778:	08001a95 	.word	0x08001a95
 800677c:	08001a31 	.word	0x08001a31
 8006780:	08001af9 	.word	0x08001af9
 8006784:	08006b31 	.word	0x08006b31
 8006788:	200003fc 	.word	0x200003fc
 800678c:	200003f0 	.word	0x200003f0
 8006790:	200003b4 	.word	0x200003b4
 8006794:	200003e4 	.word	0x200003e4
 8006798:	2000006c 	.word	0x2000006c
 800679c:	200000c4 	.word	0x200000c4
 80067a0:	200003c0 	.word	0x200003c0
 80067a4:	200000a0 	.word	0x200000a0
 80067a8:	2000007c 	.word	0x2000007c

080067ac <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b094      	sub	sp, #80	; 0x50
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80067b8:	2300      	movs	r3, #0
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80067bc:	2333      	movs	r3, #51	; 0x33
 80067be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80067c2:	4b40      	ldr	r3, [pc, #256]	; (80068c4 <LIS2DW12_0_Probe+0x118>)
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80067c6:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <LIS2DW12_0_Probe+0x11c>)
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80067ca:	4b40      	ldr	r3, [pc, #256]	; (80068cc <LIS2DW12_0_Probe+0x120>)
 80067cc:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80067ce:	4b40      	ldr	r3, [pc, #256]	; (80068d0 <LIS2DW12_0_Probe+0x124>)
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80067d2:	4b40      	ldr	r3, [pc, #256]	; (80068d4 <LIS2DW12_0_Probe+0x128>)
 80067d4:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80067d6:	4b40      	ldr	r3, [pc, #256]	; (80068d8 <LIS2DW12_0_Probe+0x12c>)
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80067da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067de:	4619      	mov	r1, r3
 80067e0:	483e      	ldr	r0, [pc, #248]	; (80068dc <LIS2DW12_0_Probe+0x130>)
 80067e2:	f7fb fb2d 	bl	8001e40 <LIS2DW12_RegisterBusIO>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80067ec:	f06f 0306 	mvn.w	r3, #6
 80067f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f2:	e062      	b.n	80068ba <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80067f4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80067f8:	4619      	mov	r1, r3
 80067fa:	4838      	ldr	r0, [pc, #224]	; (80068dc <LIS2DW12_0_Probe+0x130>)
 80067fc:	f7fb fc0e 	bl	800201c <LIS2DW12_ReadID>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006806:	f06f 0306 	mvn.w	r3, #6
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680c:	e055      	b.n	80068ba <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800680e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006812:	2b44      	cmp	r3, #68	; 0x44
 8006814:	d003      	beq.n	800681e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006816:	f06f 0306 	mvn.w	r3, #6
 800681a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800681c:	e04d      	b.n	80068ba <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	4619      	mov	r1, r3
 8006824:	482d      	ldr	r0, [pc, #180]	; (80068dc <LIS2DW12_0_Probe+0x130>)
 8006826:	f7fb fc0f 	bl	8002048 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800682a:	7b7b      	ldrb	r3, [r7, #13]
 800682c:	461a      	mov	r2, r3
 800682e:	7b3b      	ldrb	r3, [r7, #12]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	431a      	orrs	r2, r3
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4313      	orrs	r3, r2
 800683a:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <LIS2DW12_0_Probe+0x134>)
 800683c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <LIS2DW12_0_Probe+0x138>)
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <LIS2DW12_0_Probe+0x130>)
 8006842:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006844:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <LIS2DW12_0_Probe+0x13c>)
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <LIS2DW12_0_Probe+0x140>)
 8006848:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11e      	bne.n	800688e <LIS2DW12_0_Probe+0xe2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d019      	beq.n	800688e <LIS2DW12_0_Probe+0xe2>
 800685a:	7b3b      	ldrb	r3, [r7, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d116      	bne.n	800688e <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006860:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <LIS2DW12_0_Probe+0x144>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4a23      	ldr	r2, [pc, #140]	; (80068f4 <LIS2DW12_0_Probe+0x148>)
 8006866:	3303      	adds	r3, #3
 8006868:	4923      	ldr	r1, [pc, #140]	; (80068f8 <LIS2DW12_0_Probe+0x14c>)
 800686a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800686e:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <LIS2DW12_0_Probe+0x13c>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1b      	ldr	r2, [pc, #108]	; (80068e4 <LIS2DW12_0_Probe+0x138>)
 8006876:	6852      	ldr	r2, [r2, #4]
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006882:	f06f 0304 	mvn.w	r3, #4
 8006886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006888:	e001      	b.n	800688e <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
 800688c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <LIS2DW12_0_Probe+0xf8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800689e:	f06f 0304 	mvn.w	r3, #4
 80068a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d107      	bne.n	80068ba <LIS2DW12_0_Probe+0x10e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80068b4:	f06f 0304 	mvn.w	r3, #4
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3750      	adds	r7, #80	; 0x50
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	0800197d 	.word	0x0800197d
 80068c8:	080019e1 	.word	0x080019e1
 80068cc:	08001a95 	.word	0x08001a95
 80068d0:	08001a31 	.word	0x08001a31
 80068d4:	08001af9 	.word	0x08001af9
 80068d8:	08006b31 	.word	0x08006b31
 80068dc:	20000434 	.word	0x20000434
 80068e0:	200003f0 	.word	0x200003f0
 80068e4:	200003b4 	.word	0x200003b4
 80068e8:	200003e4 	.word	0x200003e4
 80068ec:	20000004 	.word	0x20000004
 80068f0:	200000c4 	.word	0x200000c4
 80068f4:	200003c0 	.word	0x200003c0
 80068f8:	20000014 	.word	0x20000014

080068fc <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b094      	sub	sp, #80	; 0x50
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006904:	2300      	movs	r3, #0
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006908:	2300      	movs	r3, #0
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800690c:	233d      	movs	r3, #61	; 0x3d
 800690e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006912:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <LIS2MDL_0_Probe+0x118>)
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006916:	4b40      	ldr	r3, [pc, #256]	; (8006a18 <LIS2MDL_0_Probe+0x11c>)
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800691a:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <LIS2MDL_0_Probe+0x120>)
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800691e:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <LIS2MDL_0_Probe+0x124>)
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006922:	4b40      	ldr	r3, [pc, #256]	; (8006a24 <LIS2MDL_0_Probe+0x128>)
 8006924:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8006926:	4b40      	ldr	r3, [pc, #256]	; (8006a28 <LIS2MDL_0_Probe+0x12c>)
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800692a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800692e:	4619      	mov	r1, r3
 8006930:	483e      	ldr	r0, [pc, #248]	; (8006a2c <LIS2MDL_0_Probe+0x130>)
 8006932:	f7fc fd13 	bl	800335c <LIS2MDL_RegisterBusIO>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800693c:	f06f 0306 	mvn.w	r3, #6
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006942:	e062      	b.n	8006a0a <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006944:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006948:	4619      	mov	r1, r3
 800694a:	4838      	ldr	r0, [pc, #224]	; (8006a2c <LIS2MDL_0_Probe+0x130>)
 800694c:	f7fc fe22 	bl	8003594 <LIS2MDL_ReadID>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006956:	f06f 0306 	mvn.w	r3, #6
 800695a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695c:	e055      	b.n	8006a0a <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800695e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d003      	beq.n	800696e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006966:	f06f 0306 	mvn.w	r3, #6
 800696a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800696c:	e04d      	b.n	8006a0a <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4619      	mov	r1, r3
 8006974:	482d      	ldr	r0, [pc, #180]	; (8006a2c <LIS2MDL_0_Probe+0x130>)
 8006976:	f7fc fe33 	bl	80035e0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800697a:	7b7b      	ldrb	r3, [r7, #13]
 800697c:	461a      	mov	r2, r3
 800697e:	7b3b      	ldrb	r3, [r7, #12]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	431a      	orrs	r2, r3
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4313      	orrs	r3, r2
 800698a:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <LIS2MDL_0_Probe+0x134>)
 800698c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <LIS2MDL_0_Probe+0x138>)
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <LIS2MDL_0_Probe+0x130>)
 8006992:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006994:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <LIS2MDL_0_Probe+0x13c>)
 8006996:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <LIS2MDL_0_Probe+0x140>)
 8006998:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11e      	bne.n	80069de <LIS2MDL_0_Probe+0xe2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d019      	beq.n	80069de <LIS2MDL_0_Probe+0xe2>
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d116      	bne.n	80069de <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <LIS2MDL_0_Probe+0x144>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4a23      	ldr	r2, [pc, #140]	; (8006a44 <LIS2MDL_0_Probe+0x148>)
 80069b6:	3306      	adds	r3, #6
 80069b8:	4923      	ldr	r1, [pc, #140]	; (8006a48 <LIS2MDL_0_Probe+0x14c>)
 80069ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <LIS2MDL_0_Probe+0x13c>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <LIS2MDL_0_Probe+0x138>)
 80069c6:	6892      	ldr	r2, [r2, #8]
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069d2:	f06f 0304 	mvn.w	r3, #4
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d8:	e001      	b.n	80069de <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069da:	2300      	movs	r3, #0
 80069dc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80069de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <LIS2MDL_0_Probe+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ee:	f06f 0304 	mvn.w	r3, #4
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <LIS2MDL_0_Probe+0x10e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a04:	f06f 0304 	mvn.w	r3, #4
 8006a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3750      	adds	r7, #80	; 0x50
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	0800197d 	.word	0x0800197d
 8006a18:	080019e1 	.word	0x080019e1
 8006a1c:	08001a95 	.word	0x08001a95
 8006a20:	08001a31 	.word	0x08001a31
 8006a24:	08001af9 	.word	0x08001af9
 8006a28:	08006b31 	.word	0x08006b31
 8006a2c:	20000470 	.word	0x20000470
 8006a30:	200003f0 	.word	0x200003f0
 8006a34:	200003b4 	.word	0x200003b4
 8006a38:	200003e4 	.word	0x200003e4
 8006a3c:	20000038 	.word	0x20000038
 8006a40:	200000c4 	.word	0x200000c4
 8006a44:	200003c0 	.word	0x200003c0
 8006a48:	20000048 	.word	0x20000048

08006a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a50:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <HAL_Init+0x40>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <HAL_Init+0x40>)
 8006a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_Init+0x40>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <HAL_Init+0x40>)
 8006a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <HAL_Init+0x40>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <HAL_Init+0x40>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a74:	2003      	movs	r0, #3
 8006a76:	f000 f94f 	bl	8006d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f000 f808 	bl	8006a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a80:	f7fa fe9e 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023c00 	.word	0x40023c00

08006a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <HAL_InitTick+0x54>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_InitTick+0x58>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f967 	bl	8006d82 <HAL_SYSTICK_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e00e      	b.n	8006adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b0f      	cmp	r3, #15
 8006ac2:	d80a      	bhi.n	8006ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	f000 f92f 	bl	8006d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ad0:	4a06      	ldr	r2, [pc, #24]	; (8006aec <HAL_InitTick+0x5c>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e000      	b.n	8006adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000000 	.word	0x20000000
 8006ae8:	200000dc 	.word	0x200000dc
 8006aec:	200000d8 	.word	0x200000d8

08006af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_IncTick+0x20>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_IncTick+0x24>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	4a04      	ldr	r2, [pc, #16]	; (8006b14 <HAL_IncTick+0x24>)
 8006b02:	6013      	str	r3, [r2, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200000dc 	.word	0x200000dc
 8006b14:	200004a4 	.word	0x200004a4

08006b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <HAL_GetTick+0x14>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	200004a4 	.word	0x200004a4

08006b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b38:	f7ff ffee 	bl	8006b18 <HAL_GetTick>
 8006b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d005      	beq.n	8006b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <HAL_Delay+0x44>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b56:	bf00      	nop
 8006b58:	f7ff ffde 	bl	8006b18 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d8f7      	bhi.n	8006b58 <HAL_Delay+0x28>
  {
  }
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200000dc 	.word	0x200000dc

08006b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <__NVIC_SetPriorityGrouping+0x44>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b94:	4013      	ands	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006baa:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <__NVIC_SetPriorityGrouping+0x44>)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	60d3      	str	r3, [r2, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	e000ed00 	.word	0xe000ed00

08006bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	f003 0307 	and.w	r3, r3, #7
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	e000ed00 	.word	0xe000ed00

08006bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	db0b      	blt.n	8006c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	f003 021f 	and.w	r2, r3, #31
 8006bf4:	4907      	ldr	r1, [pc, #28]	; (8006c14 <__NVIC_EnableIRQ+0x38>)
 8006bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8006c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	e000e100 	.word	0xe000e100

08006c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db0a      	blt.n	8006c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	490c      	ldr	r1, [pc, #48]	; (8006c64 <__NVIC_SetPriority+0x4c>)
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c40:	e00a      	b.n	8006c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4908      	ldr	r1, [pc, #32]	; (8006c68 <__NVIC_SetPriority+0x50>)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	3b04      	subs	r3, #4
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	440b      	add	r3, r1
 8006c56:	761a      	strb	r2, [r3, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000e100 	.word	0xe000e100
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	; 0x24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f1c3 0307 	rsb	r3, r3, #7
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	bf28      	it	cs
 8006c8a:	2304      	movcs	r3, #4
 8006c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3304      	adds	r3, #4
 8006c92:	2b06      	cmp	r3, #6
 8006c94:	d902      	bls.n	8006c9c <NVIC_EncodePriority+0x30>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3b03      	subs	r3, #3
 8006c9a:	e000      	b.n	8006c9e <NVIC_EncodePriority+0x32>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43da      	mvns	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	401a      	ands	r2, r3
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	43d9      	mvns	r1, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cc4:	4313      	orrs	r3, r2
         );
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3724      	adds	r7, #36	; 0x24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ce4:	d301      	bcc.n	8006cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e00f      	b.n	8006d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <SysTick_Config+0x40>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cf2:	210f      	movs	r1, #15
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	f7ff ff8e 	bl	8006c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <SysTick_Config+0x40>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d02:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <SysTick_Config+0x40>)
 8006d04:	2207      	movs	r2, #7
 8006d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	e000e010 	.word	0xe000e010

08006d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff29 	bl	8006b78 <__NVIC_SetPriorityGrouping>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	4603      	mov	r3, r0
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d40:	f7ff ff3e 	bl	8006bc0 <__NVIC_GetPriorityGrouping>
 8006d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	6978      	ldr	r0, [r7, #20]
 8006d4c:	f7ff ff8e 	bl	8006c6c <NVIC_EncodePriority>
 8006d50:	4602      	mov	r2, r0
 8006d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff ff5d 	bl	8006c18 <__NVIC_SetPriority>
}
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff ff31 	bl	8006bdc <__NVIC_EnableIRQ>
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff ffa2 	bl	8006cd4 <SysTick_Config>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006da8:	f7ff feb6 	bl	8006b18 <HAL_GetTick>
 8006dac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d008      	beq.n	8006dcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2280      	movs	r2, #128	; 0x80
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e052      	b.n	8006e72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0216 	bic.w	r2, r2, #22
 8006dda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <HAL_DMA_Abort+0x62>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0208 	bic.w	r2, r2, #8
 8006e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e1c:	e013      	b.n	8006e46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e1e:	f7ff fe7b 	bl	8006b18 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d90c      	bls.n	8006e46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2203      	movs	r2, #3
 8006e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e015      	b.n	8006e72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e4      	bne.n	8006e1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	223f      	movs	r2, #63	; 0x3f
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d004      	beq.n	8006e98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2280      	movs	r2, #128	; 0x80
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e00c      	b.n	8006eb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2205      	movs	r2, #5
 8006e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	e159      	b.n	8007190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006edc:	2201      	movs	r2, #1
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4013      	ands	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	f040 8148 	bne.w	800718a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d005      	beq.n	8006f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d130      	bne.n	8006f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f48:	2201      	movs	r2, #1
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 0201 	and.w	r2, r3, #1
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d017      	beq.n	8006fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	43db      	mvns	r3, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4013      	ands	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d123      	bne.n	8007004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	08da      	lsrs	r2, r3, #3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3208      	adds	r2, #8
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	220f      	movs	r2, #15
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	08da      	lsrs	r2, r3, #3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3208      	adds	r2, #8
 8006ffe:	69b9      	ldr	r1, [r7, #24]
 8007000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	2203      	movs	r2, #3
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0203 	and.w	r2, r3, #3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4313      	orrs	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a2 	beq.w	800718a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	4b57      	ldr	r3, [pc, #348]	; (80071a8 <HAL_GPIO_Init+0x2e8>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	4a56      	ldr	r2, [pc, #344]	; (80071a8 <HAL_GPIO_Init+0x2e8>)
 8007050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007054:	6453      	str	r3, [r2, #68]	; 0x44
 8007056:	4b54      	ldr	r3, [pc, #336]	; (80071a8 <HAL_GPIO_Init+0x2e8>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007062:	4a52      	ldr	r2, [pc, #328]	; (80071ac <HAL_GPIO_Init+0x2ec>)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	089b      	lsrs	r3, r3, #2
 8007068:	3302      	adds	r3, #2
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	220f      	movs	r2, #15
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a49      	ldr	r2, [pc, #292]	; (80071b0 <HAL_GPIO_Init+0x2f0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d019      	beq.n	80070c2 <HAL_GPIO_Init+0x202>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a48      	ldr	r2, [pc, #288]	; (80071b4 <HAL_GPIO_Init+0x2f4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_GPIO_Init+0x1fe>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a47      	ldr	r2, [pc, #284]	; (80071b8 <HAL_GPIO_Init+0x2f8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00d      	beq.n	80070ba <HAL_GPIO_Init+0x1fa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a46      	ldr	r2, [pc, #280]	; (80071bc <HAL_GPIO_Init+0x2fc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <HAL_GPIO_Init+0x1f6>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a45      	ldr	r2, [pc, #276]	; (80071c0 <HAL_GPIO_Init+0x300>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_GPIO_Init+0x1f2>
 80070ae:	2304      	movs	r3, #4
 80070b0:	e008      	b.n	80070c4 <HAL_GPIO_Init+0x204>
 80070b2:	2307      	movs	r3, #7
 80070b4:	e006      	b.n	80070c4 <HAL_GPIO_Init+0x204>
 80070b6:	2303      	movs	r3, #3
 80070b8:	e004      	b.n	80070c4 <HAL_GPIO_Init+0x204>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e002      	b.n	80070c4 <HAL_GPIO_Init+0x204>
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <HAL_GPIO_Init+0x204>
 80070c2:	2300      	movs	r3, #0
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	f002 0203 	and.w	r2, r2, #3
 80070ca:	0092      	lsls	r2, r2, #2
 80070cc:	4093      	lsls	r3, r2
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070d4:	4935      	ldr	r1, [pc, #212]	; (80071ac <HAL_GPIO_Init+0x2ec>)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	089b      	lsrs	r3, r3, #2
 80070da:	3302      	adds	r3, #2
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <HAL_GPIO_Init+0x304>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	43db      	mvns	r3, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	4013      	ands	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007106:	4a2f      	ldr	r2, [pc, #188]	; (80071c4 <HAL_GPIO_Init+0x304>)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800710c:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <HAL_GPIO_Init+0x304>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	43db      	mvns	r3, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4013      	ands	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007130:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <HAL_GPIO_Init+0x304>)
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <HAL_GPIO_Init+0x304>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	43db      	mvns	r3, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4013      	ands	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800715a:	4a1a      	ldr	r2, [pc, #104]	; (80071c4 <HAL_GPIO_Init+0x304>)
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007160:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_GPIO_Init+0x304>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	43db      	mvns	r3, r3
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4013      	ands	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007184:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <HAL_GPIO_Init+0x304>)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	3301      	adds	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b0f      	cmp	r3, #15
 8007194:	f67f aea2 	bls.w	8006edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	3724      	adds	r7, #36	; 0x24
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40013800 	.word	0x40013800
 80071b0:	40020000 	.word	0x40020000
 80071b4:	40020400 	.word	0x40020400
 80071b8:	40020800 	.word	0x40020800
 80071bc:	40020c00 	.word	0x40020c00
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40013c00 	.word	0x40013c00

080071c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e0bb      	b.n	800735c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071e4:	2201      	movs	r2, #1
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4013      	ands	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f040 80ab 	bne.w	8007356 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007200:	4a5c      	ldr	r2, [pc, #368]	; (8007374 <HAL_GPIO_DeInit+0x1ac>)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	3302      	adds	r3, #2
 8007208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	220f      	movs	r2, #15
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a54      	ldr	r2, [pc, #336]	; (8007378 <HAL_GPIO_DeInit+0x1b0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d019      	beq.n	800725e <HAL_GPIO_DeInit+0x96>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a53      	ldr	r2, [pc, #332]	; (800737c <HAL_GPIO_DeInit+0x1b4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <HAL_GPIO_DeInit+0x92>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a52      	ldr	r2, [pc, #328]	; (8007380 <HAL_GPIO_DeInit+0x1b8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00d      	beq.n	8007256 <HAL_GPIO_DeInit+0x8e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a51      	ldr	r2, [pc, #324]	; (8007384 <HAL_GPIO_DeInit+0x1bc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <HAL_GPIO_DeInit+0x8a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a50      	ldr	r2, [pc, #320]	; (8007388 <HAL_GPIO_DeInit+0x1c0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d101      	bne.n	800724e <HAL_GPIO_DeInit+0x86>
 800724a:	2304      	movs	r3, #4
 800724c:	e008      	b.n	8007260 <HAL_GPIO_DeInit+0x98>
 800724e:	2307      	movs	r3, #7
 8007250:	e006      	b.n	8007260 <HAL_GPIO_DeInit+0x98>
 8007252:	2303      	movs	r3, #3
 8007254:	e004      	b.n	8007260 <HAL_GPIO_DeInit+0x98>
 8007256:	2302      	movs	r3, #2
 8007258:	e002      	b.n	8007260 <HAL_GPIO_DeInit+0x98>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <HAL_GPIO_DeInit+0x98>
 800725e:	2300      	movs	r3, #0
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	f002 0203 	and.w	r2, r2, #3
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	4093      	lsls	r3, r2
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	429a      	cmp	r2, r3
 800726e:	d132      	bne.n	80072d6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007270:	4b46      	ldr	r3, [pc, #280]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	43db      	mvns	r3, r3
 8007278:	4944      	ldr	r1, [pc, #272]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 800727a:	4013      	ands	r3, r2
 800727c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800727e:	4b43      	ldr	r3, [pc, #268]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	43db      	mvns	r3, r3
 8007286:	4941      	ldr	r1, [pc, #260]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 8007288:	4013      	ands	r3, r2
 800728a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800728c:	4b3f      	ldr	r3, [pc, #252]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	43db      	mvns	r3, r3
 8007294:	493d      	ldr	r1, [pc, #244]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 8007296:	4013      	ands	r3, r2
 8007298:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800729a:	4b3c      	ldr	r3, [pc, #240]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	43db      	mvns	r3, r3
 80072a2:	493a      	ldr	r1, [pc, #232]	; (800738c <HAL_GPIO_DeInit+0x1c4>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	220f      	movs	r2, #15
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80072b8:	4a2e      	ldr	r2, [pc, #184]	; (8007374 <HAL_GPIO_DeInit+0x1ac>)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	089b      	lsrs	r3, r3, #2
 80072be:	3302      	adds	r3, #2
 80072c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	43da      	mvns	r2, r3
 80072c8:	482a      	ldr	r0, [pc, #168]	; (8007374 <HAL_GPIO_DeInit+0x1ac>)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	400a      	ands	r2, r1
 80072d0:	3302      	adds	r3, #2
 80072d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	2103      	movs	r1, #3
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	401a      	ands	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	08da      	lsrs	r2, r3, #3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3208      	adds	r2, #8
 80072f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	220f      	movs	r2, #15
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	08d2      	lsrs	r2, r2, #3
 800730c:	4019      	ands	r1, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3208      	adds	r2, #8
 8007312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	2103      	movs	r1, #3
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	43db      	mvns	r3, r3
 8007326:	401a      	ands	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	2101      	movs	r1, #1
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	401a      	ands	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	2103      	movs	r1, #3
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	401a      	ands	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	3301      	adds	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	f67f af40 	bls.w	80071e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40013800 	.word	0x40013800
 8007378:	40020000 	.word	0x40020000
 800737c:	40020400 	.word	0x40020400
 8007380:	40020800 	.word	0x40020800
 8007384:	40020c00 	.word	0x40020c00
 8007388:	40021000 	.word	0x40021000
 800738c:	40013c00 	.word	0x40013c00

08007390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	807b      	strh	r3, [r7, #2]
 800739c:	4613      	mov	r3, r2
 800739e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073a0:	787b      	ldrb	r3, [r7, #1]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073ac:	e003      	b.n	80073b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073ae:	887b      	ldrh	r3, [r7, #2]
 80073b0:	041a      	lsls	r2, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	619a      	str	r2, [r3, #24]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e12b      	b.n	800762e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f95d 	bl	80076aa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007428:	f001 fcbe 	bl	8008da8 <HAL_RCC_GetPCLK1Freq>
 800742c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4a81      	ldr	r2, [pc, #516]	; (8007638 <HAL_I2C_Init+0x274>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d807      	bhi.n	8007448 <HAL_I2C_Init+0x84>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a80      	ldr	r2, [pc, #512]	; (800763c <HAL_I2C_Init+0x278>)
 800743c:	4293      	cmp	r3, r2
 800743e:	bf94      	ite	ls
 8007440:	2301      	movls	r3, #1
 8007442:	2300      	movhi	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e006      	b.n	8007456 <HAL_I2C_Init+0x92>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a7d      	ldr	r2, [pc, #500]	; (8007640 <HAL_I2C_Init+0x27c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	bf94      	ite	ls
 8007450:	2301      	movls	r3, #1
 8007452:	2300      	movhi	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e0e7      	b.n	800762e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a78      	ldr	r2, [pc, #480]	; (8007644 <HAL_I2C_Init+0x280>)
 8007462:	fba2 2303 	umull	r2, r3, r2, r3
 8007466:	0c9b      	lsrs	r3, r3, #18
 8007468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4a6a      	ldr	r2, [pc, #424]	; (8007638 <HAL_I2C_Init+0x274>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d802      	bhi.n	8007498 <HAL_I2C_Init+0xd4>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3301      	adds	r3, #1
 8007496:	e009      	b.n	80074ac <HAL_I2C_Init+0xe8>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	4a69      	ldr	r2, [pc, #420]	; (8007648 <HAL_I2C_Init+0x284>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	3301      	adds	r3, #1
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	495c      	ldr	r1, [pc, #368]	; (8007638 <HAL_I2C_Init+0x274>)
 80074c8:	428b      	cmp	r3, r1
 80074ca:	d819      	bhi.n	8007500 <HAL_I2C_Init+0x13c>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	1e59      	subs	r1, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074e0:	400b      	ands	r3, r1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_I2C_Init+0x138>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1e59      	subs	r1, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074fa:	e051      	b.n	80075a0 <HAL_I2C_Init+0x1dc>
 80074fc:	2304      	movs	r3, #4
 80074fe:	e04f      	b.n	80075a0 <HAL_I2C_Init+0x1dc>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d111      	bne.n	800752c <HAL_I2C_Init+0x168>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	1e58      	subs	r0, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6859      	ldr	r1, [r3, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	440b      	add	r3, r1
 8007516:	fbb0 f3f3 	udiv	r3, r0, r3
 800751a:	3301      	adds	r3, #1
 800751c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e012      	b.n	8007552 <HAL_I2C_Init+0x18e>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1e58      	subs	r0, r3, #1
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	0099      	lsls	r1, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007542:	3301      	adds	r3, #1
 8007544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <HAL_I2C_Init+0x196>
 8007556:	2301      	movs	r3, #1
 8007558:	e022      	b.n	80075a0 <HAL_I2C_Init+0x1dc>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10e      	bne.n	8007580 <HAL_I2C_Init+0x1bc>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	1e58      	subs	r0, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	440b      	add	r3, r1
 8007570:	fbb0 f3f3 	udiv	r3, r0, r3
 8007574:	3301      	adds	r3, #1
 8007576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800757a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757e:	e00f      	b.n	80075a0 <HAL_I2C_Init+0x1dc>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1e58      	subs	r0, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6859      	ldr	r1, [r3, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	0099      	lsls	r1, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	fbb0 f3f3 	udiv	r3, r0, r3
 8007596:	3301      	adds	r3, #1
 8007598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800759c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	6809      	ldr	r1, [r1, #0]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69da      	ldr	r2, [r3, #28]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6911      	ldr	r1, [r2, #16]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68d2      	ldr	r2, [r2, #12]
 80075da:	4311      	orrs	r1, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	430b      	orrs	r3, r1
 80075e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695a      	ldr	r2, [r3, #20]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	000186a0 	.word	0x000186a0
 800763c:	001e847f 	.word	0x001e847f
 8007640:	003d08ff 	.word	0x003d08ff
 8007644:	431bde83 	.word	0x431bde83
 8007648:	10624dd3 	.word	0x10624dd3

0800764c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e021      	b.n	80076a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	; 0x24
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f821 	bl	80076be <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	817b      	strh	r3, [r7, #10]
 80076e6:	460b      	mov	r3, r1
 80076e8:	813b      	strh	r3, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076ee:	f7ff fa13 	bl	8006b18 <HAL_GetTick>
 80076f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	f040 80d9 	bne.w	80078b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2319      	movs	r3, #25
 8007708:	2201      	movs	r2, #1
 800770a:	496d      	ldr	r1, [pc, #436]	; (80078c0 <HAL_I2C_Mem_Write+0x1ec>)
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fca5 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
 800771a:	e0cc      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_I2C_Mem_Write+0x56>
 8007726:	2302      	movs	r3, #2
 8007728:	e0c5      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d007      	beq.n	8007750 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800775e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2221      	movs	r2, #33	; 0x21
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a4d      	ldr	r2, [pc, #308]	; (80078c4 <HAL_I2C_Mem_Write+0x1f0>)
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007792:	88f8      	ldrh	r0, [r7, #6]
 8007794:	893a      	ldrh	r2, [r7, #8]
 8007796:	8979      	ldrh	r1, [r7, #10]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4603      	mov	r3, r0
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fadc 	bl	8007d60 <I2C_RequestMemoryWrite>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d052      	beq.n	8007854 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e081      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fd6a 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d107      	bne.n	80077da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e06b      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b04      	cmp	r3, #4
 800781a:	d11b      	bne.n	8007854 <HAL_I2C_Mem_Write+0x180>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d017      	beq.n	8007854 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1aa      	bne.n	80077b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fd5d 	bl	8008320 <I2C_WaitOnBTFFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00d      	beq.n	8007888 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	2b04      	cmp	r3, #4
 8007872:	d107      	bne.n	8007884 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007882:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e016      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e000      	b.n	80078b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	00100002 	.word	0x00100002
 80078c4:	ffff0000 	.word	0xffff0000

080078c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	; 0x30
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	461a      	mov	r2, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	817b      	strh	r3, [r7, #10]
 80078da:	460b      	mov	r3, r1
 80078dc:	813b      	strh	r3, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078e2:	f7ff f919 	bl	8006b18 <HAL_GetTick>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	f040 8214 	bne.w	8007d1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2319      	movs	r3, #25
 80078fc:	2201      	movs	r2, #1
 80078fe:	497b      	ldr	r1, [pc, #492]	; (8007aec <HAL_I2C_Mem_Read+0x224>)
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fbab 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
 800790e:	e207      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_I2C_Mem_Read+0x56>
 800791a:	2302      	movs	r3, #2
 800791c:	e200      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	d007      	beq.n	8007944 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2222      	movs	r2, #34	; 0x22
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2240      	movs	r2, #64	; 0x40
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a5b      	ldr	r2, [pc, #364]	; (8007af0 <HAL_I2C_Mem_Read+0x228>)
 8007984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007986:	88f8      	ldrh	r0, [r7, #6]
 8007988:	893a      	ldrh	r2, [r7, #8]
 800798a:	8979      	ldrh	r1, [r7, #10]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4603      	mov	r3, r0
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 fa78 	bl	8007e8c <I2C_RequestMemoryRead>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e1bc      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ae:	2300      	movs	r3, #0
 80079b0:	623b      	str	r3, [r7, #32]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	623b      	str	r3, [r7, #32]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e190      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d11b      	bne.n	8007a16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	61fb      	str	r3, [r7, #28]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	e170      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d11b      	bne.n	8007a56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	e150      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a6c:	e144      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	f200 80f1 	bhi.w	8007c5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d123      	bne.n	8007ac8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fc93 	bl	80083b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e145      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ac6:	e117      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d14e      	bne.n	8007b6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4906      	ldr	r1, [pc, #24]	; (8007af4 <HAL_I2C_Mem_Read+0x22c>)
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fabe 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e11a      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
 8007aea:	bf00      	nop
 8007aec:	00100002 	.word	0x00100002
 8007af0:	ffff0000 	.word	0xffff0000
 8007af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b6c:	e0c4      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	2200      	movs	r2, #0
 8007b76:	496c      	ldr	r1, [pc, #432]	; (8007d28 <HAL_I2C_Mem_Read+0x460>)
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fa6f 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0cb      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4955      	ldr	r1, [pc, #340]	; (8007d28 <HAL_I2C_Mem_Read+0x460>)
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fa41 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09d      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c58:	e04e      	b.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fba6 	bl	80083b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e058      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d124      	bne.n	8007cf8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d107      	bne.n	8007cc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f47f aeb6 	bne.w	8007a6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e000      	b.n	8007d20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
  }
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3728      	adds	r7, #40	; 0x28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	00010004 	.word	0x00010004

08007d2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3a:	b2db      	uxtb	r3, r3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	4608      	mov	r0, r1
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	817b      	strh	r3, [r7, #10]
 8007d72:	460b      	mov	r3, r1
 8007d74:	813b      	strh	r3, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f960 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db0:	d103      	bne.n	8007dba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e05f      	b.n	8007e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dbe:	897b      	ldrh	r3, [r7, #10]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	6a3a      	ldr	r2, [r7, #32]
 8007dd2:	492d      	ldr	r1, [pc, #180]	; (8007e88 <I2C_RequestMemoryWrite+0x128>)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f9bb 	bl	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e04c      	b.n	8007e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfc:	6a39      	ldr	r1, [r7, #32]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fa46 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00d      	beq.n	8007e26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d107      	bne.n	8007e22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e02b      	b.n	8007e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d105      	bne.n	8007e38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e2c:	893b      	ldrh	r3, [r7, #8]
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	611a      	str	r2, [r3, #16]
 8007e36:	e021      	b.n	8007e7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e38:	893b      	ldrh	r3, [r7, #8]
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e48:	6a39      	ldr	r1, [r7, #32]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fa20 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00d      	beq.n	8007e72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d107      	bne.n	8007e6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e005      	b.n	8007e7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e72:	893b      	ldrh	r3, [r7, #8]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	00010002 	.word	0x00010002

08007e8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	817b      	strh	r3, [r7, #10]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	813b      	strh	r3, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f8c2 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eec:	d103      	bne.n	8007ef6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e0aa      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007efa:	897b      	ldrh	r3, [r7, #10]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	6a3a      	ldr	r2, [r7, #32]
 8007f0e:	4952      	ldr	r1, [pc, #328]	; (8008058 <I2C_RequestMemoryRead+0x1cc>)
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f91d 	bl	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e097      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f38:	6a39      	ldr	r1, [r7, #32]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f9a8 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d107      	bne.n	8007f5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e076      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d105      	bne.n	8007f74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	611a      	str	r2, [r3, #16]
 8007f72:	e021      	b.n	8007fb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f74:	893b      	ldrh	r3, [r7, #8]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f84:	6a39      	ldr	r1, [r7, #32]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f982 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d107      	bne.n	8007faa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e050      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fae:	893b      	ldrh	r3, [r7, #8]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	6a39      	ldr	r1, [r7, #32]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f967 	bl	8008290 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d107      	bne.n	8007fe0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e035      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f82b 	bl	800805c <I2C_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00d      	beq.n	8008028 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801a:	d103      	bne.n	8008024 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e013      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008028:	897b      	ldrh	r3, [r7, #10]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	4906      	ldr	r1, [pc, #24]	; (8008058 <I2C_RequestMemoryRead+0x1cc>)
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f886 	bl	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	00010002 	.word	0x00010002

0800805c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	4613      	mov	r3, r2
 800806a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800806c:	e048      	b.n	8008100 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d044      	beq.n	8008100 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008076:	f7fe fd4f 	bl	8006b18 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d302      	bcc.n	800808c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d139      	bne.n	8008100 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	0c1b      	lsrs	r3, r3, #16
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d10d      	bne.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	43da      	mvns	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4013      	ands	r3, r2
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	e00c      	b.n	80080cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	43da      	mvns	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d116      	bne.n	8008100 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e023      	b.n	8008148 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10d      	bne.n	8008126 <I2C_WaitOnFlagUntilTimeout+0xca>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	43da      	mvns	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4013      	ands	r3, r2
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	e00c      	b.n	8008140 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	43da      	mvns	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4013      	ands	r3, r2
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	429a      	cmp	r2, r3
 8008144:	d093      	beq.n	800806e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800815e:	e071      	b.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816e:	d123      	bne.n	80081b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	f043 0204 	orr.w	r2, r3, #4
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e067      	b.n	8008288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d041      	beq.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c0:	f7fe fcaa 	bl	8006b18 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d136      	bne.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d10c      	bne.n	80081fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	43da      	mvns	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4013      	ands	r3, r2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bf14      	ite	ne
 80081f2:	2301      	movne	r3, #1
 80081f4:	2300      	moveq	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	e00b      	b.n	8008212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	43da      	mvns	r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4013      	ands	r3, r2
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf14      	ite	ne
 800820c:	2301      	movne	r3, #1
 800820e:	2300      	moveq	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	f043 0220 	orr.w	r2, r3, #32
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e021      	b.n	8008288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10c      	bne.n	8008268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	43da      	mvns	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4013      	ands	r3, r2
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e00b      	b.n	8008280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	43da      	mvns	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f af6d 	bne.w	8008160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800829c:	e034      	b.n	8008308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 f8e3 	bl	800846a <I2C_IsAcknowledgeFailed>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e034      	b.n	8008318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b4:	d028      	beq.n	8008308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b6:	f7fe fc2f 	bl	8006b18 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d302      	bcc.n	80082cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d11d      	bne.n	8008308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d016      	beq.n	8008308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f4:	f043 0220 	orr.w	r2, r3, #32
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e007      	b.n	8008318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d1c3      	bne.n	800829e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800832c:	e034      	b.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f89b 	bl	800846a <I2C_IsAcknowledgeFailed>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e034      	b.n	80083a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d028      	beq.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008346:	f7fe fbe7 	bl	8006b18 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	429a      	cmp	r2, r3
 8008354:	d302      	bcc.n	800835c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d11d      	bne.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b04      	cmp	r3, #4
 8008368:	d016      	beq.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	f043 0220 	orr.w	r2, r3, #32
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e007      	b.n	80083a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d1c3      	bne.n	800832e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083bc:	e049      	b.n	8008452 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d119      	bne.n	8008400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0210 	mvn.w	r2, #16
 80083d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e030      	b.n	8008462 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008400:	f7fe fb8a 	bl	8006b18 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d11d      	bne.n	8008452 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d016      	beq.n	8008452 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f043 0220 	orr.w	r2, r3, #32
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e007      	b.n	8008462 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d1ae      	bne.n	80083be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008480:	d11b      	bne.n	80084ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800848a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	f043 0204 	orr.w	r2, r3, #4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e267      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d075      	beq.n	80085d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084e6:	4b88      	ldr	r3, [pc, #544]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 030c 	and.w	r3, r3, #12
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d00c      	beq.n	800850c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084f2:	4b85      	ldr	r3, [pc, #532]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	d112      	bne.n	8008524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084fe:	4b82      	ldr	r3, [pc, #520]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850a:	d10b      	bne.n	8008524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850c:	4b7e      	ldr	r3, [pc, #504]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d05b      	beq.n	80085d0 <HAL_RCC_OscConfig+0x108>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d157      	bne.n	80085d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e242      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852c:	d106      	bne.n	800853c <HAL_RCC_OscConfig+0x74>
 800852e:	4b76      	ldr	r3, [pc, #472]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a75      	ldr	r2, [pc, #468]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	e01d      	b.n	8008578 <HAL_RCC_OscConfig+0xb0>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008544:	d10c      	bne.n	8008560 <HAL_RCC_OscConfig+0x98>
 8008546:	4b70      	ldr	r3, [pc, #448]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a6f      	ldr	r2, [pc, #444]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800854c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	4b6d      	ldr	r3, [pc, #436]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a6c      	ldr	r2, [pc, #432]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	e00b      	b.n	8008578 <HAL_RCC_OscConfig+0xb0>
 8008560:	4b69      	ldr	r3, [pc, #420]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a68      	ldr	r2, [pc, #416]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4b66      	ldr	r3, [pc, #408]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a65      	ldr	r2, [pc, #404]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d013      	beq.n	80085a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008580:	f7fe faca 	bl	8006b18 <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008588:	f7fe fac6 	bl	8006b18 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b64      	cmp	r3, #100	; 0x64
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e207      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859a:	4b5b      	ldr	r3, [pc, #364]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCC_OscConfig+0xc0>
 80085a6:	e014      	b.n	80085d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085a8:	f7fe fab6 	bl	8006b18 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b0:	f7fe fab2 	bl	8006b18 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b64      	cmp	r3, #100	; 0x64
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e1f3      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085c2:	4b51      	ldr	r3, [pc, #324]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f0      	bne.n	80085b0 <HAL_RCC_OscConfig+0xe8>
 80085ce:	e000      	b.n	80085d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d063      	beq.n	80086a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085de:	4b4a      	ldr	r3, [pc, #296]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 030c 	and.w	r3, r3, #12
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d11c      	bne.n	8008630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085f6:	4b44      	ldr	r3, [pc, #272]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d116      	bne.n	8008630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008602:	4b41      	ldr	r3, [pc, #260]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <HAL_RCC_OscConfig+0x152>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d001      	beq.n	800861a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e1c7      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800861a:	4b3b      	ldr	r3, [pc, #236]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4937      	ldr	r1, [pc, #220]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800862a:	4313      	orrs	r3, r2
 800862c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800862e:	e03a      	b.n	80086a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d020      	beq.n	800867a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008638:	4b34      	ldr	r3, [pc, #208]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863e:	f7fe fa6b 	bl	8006b18 <HAL_GetTick>
 8008642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008644:	e008      	b.n	8008658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008646:	f7fe fa67 	bl	8006b18 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e1a8      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008658:	4b2b      	ldr	r3, [pc, #172]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0f0      	beq.n	8008646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008664:	4b28      	ldr	r3, [pc, #160]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4925      	ldr	r1, [pc, #148]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 8008674:	4313      	orrs	r3, r2
 8008676:	600b      	str	r3, [r1, #0]
 8008678:	e015      	b.n	80086a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008680:	f7fe fa4a 	bl	8006b18 <HAL_GetTick>
 8008684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008688:	f7fe fa46 	bl	8006b18 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e187      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f0      	bne.n	8008688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d036      	beq.n	8008720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d016      	beq.n	80086e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <HAL_RCC_OscConfig+0x248>)
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c0:	f7fe fa2a 	bl	8006b18 <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086c8:	f7fe fa26 	bl	8006b18 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e167      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <HAL_RCC_OscConfig+0x240>)
 80086dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0x200>
 80086e6:	e01b      	b.n	8008720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <HAL_RCC_OscConfig+0x248>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ee:	f7fe fa13 	bl	8006b18 <HAL_GetTick>
 80086f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f4:	e00e      	b.n	8008714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f6:	f7fe fa0f 	bl	8006b18 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d907      	bls.n	8008714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e150      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
 8008708:	40023800 	.word	0x40023800
 800870c:	42470000 	.word	0x42470000
 8008710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008714:	4b88      	ldr	r3, [pc, #544]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ea      	bne.n	80086f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8097 	beq.w	800885c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008732:	4b81      	ldr	r3, [pc, #516]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10f      	bne.n	800875e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	4b7d      	ldr	r3, [pc, #500]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	4a7c      	ldr	r2, [pc, #496]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874c:	6413      	str	r3, [r2, #64]	; 0x40
 800874e:	4b7a      	ldr	r3, [pc, #488]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008756:	60bb      	str	r3, [r7, #8]
 8008758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800875e:	4b77      	ldr	r3, [pc, #476]	; (800893c <HAL_RCC_OscConfig+0x474>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	2b00      	cmp	r3, #0
 8008768:	d118      	bne.n	800879c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800876a:	4b74      	ldr	r3, [pc, #464]	; (800893c <HAL_RCC_OscConfig+0x474>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a73      	ldr	r2, [pc, #460]	; (800893c <HAL_RCC_OscConfig+0x474>)
 8008770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008776:	f7fe f9cf 	bl	8006b18 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800877e:	f7fe f9cb 	bl	8006b18 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e10c      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008790:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCC_OscConfig+0x474>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d106      	bne.n	80087b2 <HAL_RCC_OscConfig+0x2ea>
 80087a4:	4b64      	ldr	r3, [pc, #400]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a8:	4a63      	ldr	r2, [pc, #396]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	6713      	str	r3, [r2, #112]	; 0x70
 80087b0:	e01c      	b.n	80087ec <HAL_RCC_OscConfig+0x324>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCC_OscConfig+0x30c>
 80087ba:	4b5f      	ldr	r3, [pc, #380]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087be:	4a5e      	ldr	r2, [pc, #376]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087c0:	f043 0304 	orr.w	r3, r3, #4
 80087c4:	6713      	str	r3, [r2, #112]	; 0x70
 80087c6:	4b5c      	ldr	r3, [pc, #368]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4a5b      	ldr	r2, [pc, #364]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6713      	str	r3, [r2, #112]	; 0x70
 80087d2:	e00b      	b.n	80087ec <HAL_RCC_OscConfig+0x324>
 80087d4:	4b58      	ldr	r3, [pc, #352]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d8:	4a57      	ldr	r2, [pc, #348]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	6713      	str	r3, [r2, #112]	; 0x70
 80087e0:	4b55      	ldr	r3, [pc, #340]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	4a54      	ldr	r2, [pc, #336]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80087e6:	f023 0304 	bic.w	r3, r3, #4
 80087ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d015      	beq.n	8008820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fe f990 	bl	8006b18 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087fc:	f7fe f98c 	bl	8006b18 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e0cb      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008812:	4b49      	ldr	r3, [pc, #292]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0ee      	beq.n	80087fc <HAL_RCC_OscConfig+0x334>
 800881e:	e014      	b.n	800884a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008820:	f7fe f97a 	bl	8006b18 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008826:	e00a      	b.n	800883e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008828:	f7fe f976 	bl	8006b18 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f241 3288 	movw	r2, #5000	; 0x1388
 8008836:	4293      	cmp	r3, r2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e0b5      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800883e:	4b3e      	ldr	r3, [pc, #248]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1ee      	bne.n	8008828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d105      	bne.n	800885c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008850:	4b39      	ldr	r3, [pc, #228]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	4a38      	ldr	r2, [pc, #224]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800885a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 80a1 	beq.w	80089a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008866:	4b34      	ldr	r3, [pc, #208]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 030c 	and.w	r3, r3, #12
 800886e:	2b08      	cmp	r3, #8
 8008870:	d05c      	beq.n	800892c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d141      	bne.n	80088fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <HAL_RCC_OscConfig+0x478>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008880:	f7fe f94a 	bl	8006b18 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008888:	f7fe f946 	bl	8006b18 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e087      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889a:	4b27      	ldr	r3, [pc, #156]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69da      	ldr	r2, [r3, #28]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	019b      	lsls	r3, r3, #6
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	3b01      	subs	r3, #1
 80088c0:	041b      	lsls	r3, r3, #16
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	061b      	lsls	r3, r3, #24
 80088ca:	491b      	ldr	r1, [pc, #108]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <HAL_RCC_OscConfig+0x478>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d6:	f7fe f91f 	bl	8006b18 <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088dc:	e008      	b.n	80088f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088de:	f7fe f91b 	bl	8006b18 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e05c      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088f0:	4b11      	ldr	r3, [pc, #68]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0f0      	beq.n	80088de <HAL_RCC_OscConfig+0x416>
 80088fc:	e054      	b.n	80089a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <HAL_RCC_OscConfig+0x478>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7fe f908 	bl	8006b18 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890c:	f7fe f904 	bl	8006b18 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e045      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891e:	4b06      	ldr	r3, [pc, #24]	; (8008938 <HAL_RCC_OscConfig+0x470>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0x444>
 800892a:	e03d      	b.n	80089a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d107      	bne.n	8008944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e038      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
 8008938:	40023800 	.word	0x40023800
 800893c:	40007000 	.word	0x40007000
 8008940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008944:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <HAL_RCC_OscConfig+0x4ec>)
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d028      	beq.n	80089a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800895c:	429a      	cmp	r2, r3
 800895e:	d121      	bne.n	80089a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800896a:	429a      	cmp	r2, r3
 800896c:	d11a      	bne.n	80089a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008974:	4013      	ands	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800897a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800897c:	4293      	cmp	r3, r2
 800897e:	d111      	bne.n	80089a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	3b01      	subs	r3, #1
 800898e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008990:	429a      	cmp	r2, r3
 8008992:	d107      	bne.n	80089a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d001      	beq.n	80089a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	40023800 	.word	0x40023800

080089b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0cc      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089cc:	4b68      	ldr	r3, [pc, #416]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d90c      	bls.n	80089f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089da:	4b65      	ldr	r3, [pc, #404]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e2:	4b63      	ldr	r3, [pc, #396]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d001      	beq.n	80089f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0b8      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d020      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a0c:	4b59      	ldr	r3, [pc, #356]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	4a58      	ldr	r2, [pc, #352]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a24:	4b53      	ldr	r3, [pc, #332]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	4a52      	ldr	r2, [pc, #328]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a30:	4b50      	ldr	r3, [pc, #320]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	494d      	ldr	r1, [pc, #308]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d044      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d107      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a56:	4b47      	ldr	r3, [pc, #284]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d119      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e07f      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d003      	beq.n	8008a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d107      	bne.n	8008a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a76:	4b3f      	ldr	r3, [pc, #252]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e06f      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a86:	4b3b      	ldr	r3, [pc, #236]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e067      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a96:	4b37      	ldr	r3, [pc, #220]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f023 0203 	bic.w	r2, r3, #3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	4934      	ldr	r1, [pc, #208]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008aa8:	f7fe f836 	bl	8006b18 <HAL_GetTick>
 8008aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aae:	e00a      	b.n	8008ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab0:	f7fe f832 	bl	8006b18 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e04f      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 020c 	and.w	r2, r3, #12
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d1eb      	bne.n	8008ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d20c      	bcs.n	8008b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae6:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aee:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <HAL_RCC_ClockConfig+0x1b8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d001      	beq.n	8008b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e032      	b.n	8008b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d008      	beq.n	8008b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b0c:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	4916      	ldr	r1, [pc, #88]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	490e      	ldr	r1, [pc, #56]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b3e:	f000 f821 	bl	8008b84 <HAL_RCC_GetSysClockFreq>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	091b      	lsrs	r3, r3, #4
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	490a      	ldr	r1, [pc, #40]	; (8008b78 <HAL_RCC_ClockConfig+0x1c0>)
 8008b50:	5ccb      	ldrb	r3, [r1, r3]
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <HAL_RCC_ClockConfig+0x1c4>)
 8008b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <HAL_RCC_ClockConfig+0x1c8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fd ff96 	bl	8006a90 <HAL_InitTick>

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40023c00 	.word	0x40023c00
 8008b74:	40023800 	.word	0x40023800
 8008b78:	0800d694 	.word	0x0800d694
 8008b7c:	20000000 	.word	0x20000000
 8008b80:	200000d8 	.word	0x200000d8

08008b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b88:	b094      	sub	sp, #80	; 0x50
 8008b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b90:	2300      	movs	r3, #0
 8008b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b94:	2300      	movs	r3, #0
 8008b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b9c:	4b79      	ldr	r3, [pc, #484]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 030c 	and.w	r3, r3, #12
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d00d      	beq.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	f200 80e1 	bhi.w	8008d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d003      	beq.n	8008bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8008bb6:	e0db      	b.n	8008d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bb8:	4b73      	ldr	r3, [pc, #460]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bbc:	e0db      	b.n	8008d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bbe:	4b73      	ldr	r3, [pc, #460]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8008bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bc2:	e0d8      	b.n	8008d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bc4:	4b6f      	ldr	r3, [pc, #444]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bce:	4b6d      	ldr	r3, [pc, #436]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d063      	beq.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bda:	4b6a      	ldr	r3, [pc, #424]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	099b      	lsrs	r3, r3, #6
 8008be0:	2200      	movs	r2, #0
 8008be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bec:	633b      	str	r3, [r7, #48]	; 0x30
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	f04f 0000 	mov.w	r0, #0
 8008bfe:	f04f 0100 	mov.w	r1, #0
 8008c02:	0159      	lsls	r1, r3, #5
 8008c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c08:	0150      	lsls	r0, r2, #5
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4621      	mov	r1, r4
 8008c10:	1a51      	subs	r1, r2, r1
 8008c12:	6139      	str	r1, [r7, #16]
 8008c14:	4629      	mov	r1, r5
 8008c16:	eb63 0301 	sbc.w	r3, r3, r1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	f04f 0300 	mov.w	r3, #0
 8008c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c28:	4659      	mov	r1, fp
 8008c2a:	018b      	lsls	r3, r1, #6
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c32:	4651      	mov	r1, sl
 8008c34:	018a      	lsls	r2, r1, #6
 8008c36:	4651      	mov	r1, sl
 8008c38:	ebb2 0801 	subs.w	r8, r2, r1
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c56:	4690      	mov	r8, r2
 8008c58:	4699      	mov	r9, r3
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	eb18 0303 	adds.w	r3, r8, r3
 8008c60:	60bb      	str	r3, [r7, #8]
 8008c62:	462b      	mov	r3, r5
 8008c64:	eb49 0303 	adc.w	r3, r9, r3
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c76:	4629      	mov	r1, r5
 8008c78:	024b      	lsls	r3, r1, #9
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c80:	4621      	mov	r1, r4
 8008c82:	024a      	lsls	r2, r1, #9
 8008c84:	4610      	mov	r0, r2
 8008c86:	4619      	mov	r1, r3
 8008c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c94:	f7f7 ffe0 	bl	8000c58 <__aeabi_uldivmod>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca0:	e058      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca2:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	4611      	mov	r1, r2
 8008cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cb2:	623b      	str	r3, [r7, #32]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	f04f 0000 	mov.w	r0, #0
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	0159      	lsls	r1, r3, #5
 8008cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cce:	0150      	lsls	r0, r2, #5
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cda:	4649      	mov	r1, r9
 8008cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8008cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	00eb      	lsls	r3, r5, #3
 8008d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d0a:	00e2      	lsls	r2, r4, #3
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	461d      	mov	r5, r3
 8008d10:	4643      	mov	r3, r8
 8008d12:	18e3      	adds	r3, r4, r3
 8008d14:	603b      	str	r3, [r7, #0]
 8008d16:	464b      	mov	r3, r9
 8008d18:	eb45 0303 	adc.w	r3, r5, r3
 8008d1c:	607b      	str	r3, [r7, #4]
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	028b      	lsls	r3, r1, #10
 8008d2e:	4621      	mov	r1, r4
 8008d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d34:	4621      	mov	r1, r4
 8008d36:	028a      	lsls	r2, r1, #10
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3e:	2200      	movs	r2, #0
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	61fa      	str	r2, [r7, #28]
 8008d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d48:	f7f7 ff86 	bl	8000c58 <__aeabi_uldivmod>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4613      	mov	r3, r2
 8008d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d54:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	3301      	adds	r3, #1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d6e:	e002      	b.n	8008d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3750      	adds	r7, #80	; 0x50
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d82:	bf00      	nop
 8008d84:	40023800 	.word	0x40023800
 8008d88:	00f42400 	.word	0x00f42400
 8008d8c:	007a1200 	.word	0x007a1200

08008d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d94:	4b03      	ldr	r3, [pc, #12]	; (8008da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d96:	681b      	ldr	r3, [r3, #0]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000000 	.word	0x20000000

08008da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008dac:	f7ff fff0 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008db0:	4602      	mov	r2, r0
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	0a9b      	lsrs	r3, r3, #10
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	4903      	ldr	r1, [pc, #12]	; (8008dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dbe:	5ccb      	ldrb	r3, [r1, r3]
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	0800d6a4 	.word	0x0800d6a4

08008dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dd4:	f7ff ffdc 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	0b5b      	lsrs	r3, r3, #13
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	4903      	ldr	r1, [pc, #12]	; (8008df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40023800 	.word	0x40023800
 8008df4:	0800d6a4 	.word	0x0800d6a4

08008df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e041      	b.n	8008e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7f8 fcf6 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f000 fa70 	bl	800931c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d001      	beq.n	8008eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e044      	b.n	8008f3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0201 	orr.w	r2, r2, #1
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a1e      	ldr	r2, [pc, #120]	; (8008f48 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d018      	beq.n	8008f04 <HAL_TIM_Base_Start_IT+0x6c>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eda:	d013      	beq.n	8008f04 <HAL_TIM_Base_Start_IT+0x6c>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1a      	ldr	r2, [pc, #104]	; (8008f4c <HAL_TIM_Base_Start_IT+0xb4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00e      	beq.n	8008f04 <HAL_TIM_Base_Start_IT+0x6c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a19      	ldr	r2, [pc, #100]	; (8008f50 <HAL_TIM_Base_Start_IT+0xb8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d009      	beq.n	8008f04 <HAL_TIM_Base_Start_IT+0x6c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <HAL_TIM_Base_Start_IT+0xbc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d004      	beq.n	8008f04 <HAL_TIM_Base_Start_IT+0x6c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a16      	ldr	r2, [pc, #88]	; (8008f58 <HAL_TIM_Base_Start_IT+0xc0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d111      	bne.n	8008f28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b06      	cmp	r3, #6
 8008f14:	d010      	beq.n	8008f38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0201 	orr.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f26:	e007      	b.n	8008f38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0201 	orr.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40000800 	.word	0x40000800
 8008f54:	40000c00 	.word	0x40000c00
 8008f58:	40014000 	.word	0x40014000

08008f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d020      	beq.n	8008fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0202 	mvn.w	r2, #2
 8008f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f999 	bl	80092de <HAL_TIM_IC_CaptureCallback>
 8008fac:	e005      	b.n	8008fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f98b 	bl	80092ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f99c 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	f003 0304 	and.w	r3, r3, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d020      	beq.n	800900c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01b      	beq.n	800900c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0204 	mvn.w	r2, #4
 8008fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f973 	bl	80092de <HAL_TIM_IC_CaptureCallback>
 8008ff8:	e005      	b.n	8009006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f965 	bl	80092ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f976 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0308 	and.w	r3, r3, #8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d020      	beq.n	8009058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f003 0308 	and.w	r3, r3, #8
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01b      	beq.n	8009058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0208 	mvn.w	r2, #8
 8009028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f94d 	bl	80092de <HAL_TIM_IC_CaptureCallback>
 8009044:	e005      	b.n	8009052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f93f 	bl	80092ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f950 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	2b00      	cmp	r3, #0
 8009060:	d020      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0210 	mvn.w	r2, #16
 8009074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2208      	movs	r2, #8
 800907a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f927 	bl	80092de <HAL_TIM_IC_CaptureCallback>
 8009090:	e005      	b.n	800909e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f919 	bl	80092ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f92a 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00c      	beq.n	80090c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0201 	mvn.w	r2, #1
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f7 ff46 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00c      	beq.n	80090ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fab6 	bl	8009658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d007      	beq.n	8009110 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f8fb 	bl	8009306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00c      	beq.n	8009134 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0220 	mvn.w	r2, #32
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa88 	bl	8009644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_TIM_ConfigClockSource+0x1c>
 8009154:	2302      	movs	r3, #2
 8009156:	e0b4      	b.n	80092c2 <HAL_TIM_ConfigClockSource+0x186>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800917e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009190:	d03e      	beq.n	8009210 <HAL_TIM_ConfigClockSource+0xd4>
 8009192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009196:	f200 8087 	bhi.w	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 800919a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919e:	f000 8086 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x172>
 80091a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a6:	d87f      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091a8:	2b70      	cmp	r3, #112	; 0x70
 80091aa:	d01a      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0xa6>
 80091ac:	2b70      	cmp	r3, #112	; 0x70
 80091ae:	d87b      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091b0:	2b60      	cmp	r3, #96	; 0x60
 80091b2:	d050      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x11a>
 80091b4:	2b60      	cmp	r3, #96	; 0x60
 80091b6:	d877      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091b8:	2b50      	cmp	r3, #80	; 0x50
 80091ba:	d03c      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0xfa>
 80091bc:	2b50      	cmp	r3, #80	; 0x50
 80091be:	d873      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091c0:	2b40      	cmp	r3, #64	; 0x40
 80091c2:	d058      	beq.n	8009276 <HAL_TIM_ConfigClockSource+0x13a>
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	d86f      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091c8:	2b30      	cmp	r3, #48	; 0x30
 80091ca:	d064      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x15a>
 80091cc:	2b30      	cmp	r3, #48	; 0x30
 80091ce:	d86b      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d060      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x15a>
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d867      	bhi.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d05c      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x15a>
 80091dc:	2b10      	cmp	r3, #16
 80091de:	d05a      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x15a>
 80091e0:	e062      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091f2:	f000 f999 	bl	8009528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	609a      	str	r2, [r3, #8]
      break;
 800920e:	e04f      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009220:	f000 f982 	bl	8009528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009232:	609a      	str	r2, [r3, #8]
      break;
 8009234:	e03c      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009242:	461a      	mov	r2, r3
 8009244:	f000 f8f6 	bl	8009434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2150      	movs	r1, #80	; 0x50
 800924e:	4618      	mov	r0, r3
 8009250:	f000 f94f 	bl	80094f2 <TIM_ITRx_SetConfig>
      break;
 8009254:	e02c      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009262:	461a      	mov	r2, r3
 8009264:	f000 f915 	bl	8009492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2160      	movs	r1, #96	; 0x60
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f93f 	bl	80094f2 <TIM_ITRx_SetConfig>
      break;
 8009274:	e01c      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009282:	461a      	mov	r2, r3
 8009284:	f000 f8d6 	bl	8009434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2140      	movs	r1, #64	; 0x40
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f92f 	bl	80094f2 <TIM_ITRx_SetConfig>
      break;
 8009294:	e00c      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f000 f926 	bl	80094f2 <TIM_ITRx_SetConfig>
      break;
 80092a6:	e003      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
      break;
 80092ac:	e000      	b.n	80092b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
	...

0800931c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3a      	ldr	r2, [pc, #232]	; (8009418 <TIM_Base_SetConfig+0xfc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00f      	beq.n	8009354 <TIM_Base_SetConfig+0x38>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933a:	d00b      	beq.n	8009354 <TIM_Base_SetConfig+0x38>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a37      	ldr	r2, [pc, #220]	; (800941c <TIM_Base_SetConfig+0x100>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d007      	beq.n	8009354 <TIM_Base_SetConfig+0x38>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a36      	ldr	r2, [pc, #216]	; (8009420 <TIM_Base_SetConfig+0x104>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_Base_SetConfig+0x38>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a35      	ldr	r2, [pc, #212]	; (8009424 <TIM_Base_SetConfig+0x108>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d108      	bne.n	8009366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	4313      	orrs	r3, r2
 8009364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <TIM_Base_SetConfig+0xfc>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01b      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009374:	d017      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a28      	ldr	r2, [pc, #160]	; (800941c <TIM_Base_SetConfig+0x100>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d013      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a27      	ldr	r2, [pc, #156]	; (8009420 <TIM_Base_SetConfig+0x104>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00f      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a26      	ldr	r2, [pc, #152]	; (8009424 <TIM_Base_SetConfig+0x108>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00b      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a25      	ldr	r2, [pc, #148]	; (8009428 <TIM_Base_SetConfig+0x10c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d007      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a24      	ldr	r2, [pc, #144]	; (800942c <TIM_Base_SetConfig+0x110>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d003      	beq.n	80093a6 <TIM_Base_SetConfig+0x8a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a23      	ldr	r2, [pc, #140]	; (8009430 <TIM_Base_SetConfig+0x114>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d108      	bne.n	80093b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a0e      	ldr	r2, [pc, #56]	; (8009418 <TIM_Base_SetConfig+0xfc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d103      	bne.n	80093ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d105      	bne.n	800940a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f023 0201 	bic.w	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	611a      	str	r2, [r3, #16]
  }
}
 800940a:	bf00      	nop
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40010000 	.word	0x40010000
 800941c:	40000400 	.word	0x40000400
 8009420:	40000800 	.word	0x40000800
 8009424:	40000c00 	.word	0x40000c00
 8009428:	40014000 	.word	0x40014000
 800942c:	40014400 	.word	0x40014400
 8009430:	40014800 	.word	0x40014800

08009434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6a1b      	ldr	r3, [r3, #32]
 8009444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800945e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 030a 	bic.w	r3, r3, #10
 8009470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	621a      	str	r2, [r3, #32]
}
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009492:	b480      	push	{r7}
 8009494:	b087      	sub	sp, #28
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f023 0210 	bic.w	r2, r3, #16
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	031b      	lsls	r3, r3, #12
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	621a      	str	r2, [r3, #32]
}
 80094e6:	bf00      	nop
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	f043 0307 	orr.w	r3, r3, #7
 8009514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]
}
 800951c:	bf00      	nop
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	021a      	lsls	r2, r3, #8
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	431a      	orrs	r2, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4313      	orrs	r3, r2
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	609a      	str	r2, [r3, #8]
}
 800955c:	bf00      	nop
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800957c:	2302      	movs	r3, #2
 800957e:	e050      	b.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a1c      	ldr	r2, [pc, #112]	; (8009630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d018      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095cc:	d013      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a18      	ldr	r2, [pc, #96]	; (8009634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00e      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a16      	ldr	r2, [pc, #88]	; (8009638 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d009      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a15      	ldr	r2, [pc, #84]	; (800963c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d004      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a13      	ldr	r2, [pc, #76]	; (8009640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d10c      	bne.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4313      	orrs	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	40010000 	.word	0x40010000
 8009634:	40000400 	.word	0x40000400
 8009638:	40000800 	.word	0x40000800
 800963c:	40000c00 	.word	0x40000c00
 8009640:	40014000 	.word	0x40014000

08009644 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e042      	b.n	8009704 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7f8 f8e4 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2224      	movs	r2, #36	; 0x24
 800969c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fcbb 	bl	800a02c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695a      	ldr	r2, [r3, #20]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b20      	cmp	r3, #32
 8009724:	d121      	bne.n	800976a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <HAL_UART_Transmit_IT+0x26>
 800972c:	88fb      	ldrh	r3, [r7, #6]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e01a      	b.n	800976c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	88fa      	ldrh	r2, [r7, #6]
 8009740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	88fa      	ldrh	r2, [r7, #6]
 8009746:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2221      	movs	r2, #33	; 0x21
 8009752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009764:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e000      	b.n	800976c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800976a:	2302      	movs	r3, #2
  }
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b0ba      	sub	sp, #232	; 0xe8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80097b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10f      	bne.n	80097de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <HAL_UART_IRQHandler+0x66>
 80097ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fb69 	bl	8009eae <UART_Receive_IT>
      return;
 80097dc:	e25b      	b.n	8009c96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80de 	beq.w	80099a4 <HAL_UART_IRQHandler+0x22c>
 80097e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80d1 	beq.w	80099a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <HAL_UART_IRQHandler+0xae>
 800980e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981e:	f043 0201 	orr.w	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00b      	beq.n	800984a <HAL_UART_IRQHandler+0xd2>
 8009832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009842:	f043 0202 	orr.w	r2, r3, #2
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800984a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <HAL_UART_IRQHandler+0xf6>
 8009856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d005      	beq.n	800986e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009866:	f043 0204 	orr.w	r2, r3, #4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800986e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <HAL_UART_IRQHandler+0x126>
 800987a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d105      	bne.n	8009892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	f043 0208 	orr.w	r2, r3, #8
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 81f2 	beq.w	8009c8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_UART_IRQHandler+0x14e>
 80098b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 faf4 	bl	8009eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d0:	2b40      	cmp	r3, #64	; 0x40
 80098d2:	bf0c      	ite	eq
 80098d4:	2301      	moveq	r3, #1
 80098d6:	2300      	movne	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <HAL_UART_IRQHandler+0x17a>
 80098ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d04f      	beq.n	8009992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f9fc 	bl	8009cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d141      	bne.n	800998a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3314      	adds	r3, #20
 800990c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800991c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3314      	adds	r3, #20
 800992e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800993e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800994a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1d9      	bne.n	8009906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d013      	beq.n	8009982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995e:	4a7e      	ldr	r2, [pc, #504]	; (8009b58 <HAL_UART_IRQHandler+0x3e0>)
 8009960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd fa87 	bl	8006e7a <HAL_DMA_Abort_IT>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009980:	e00e      	b.n	80099a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f99e 	bl	8009cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009988:	e00a      	b.n	80099a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f99a 	bl	8009cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009990:	e006      	b.n	80099a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f996 	bl	8009cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800999e:	e175      	b.n	8009c8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a0:	bf00      	nop
    return;
 80099a2:	e173      	b.n	8009c8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	f040 814f 	bne.w	8009c4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 8148 	beq.w	8009c4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80099bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c0:	f003 0310 	and.w	r3, r3, #16
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8141 	beq.w	8009c4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60bb      	str	r3, [r7, #8]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	60bb      	str	r3, [r7, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	f040 80b6 	bne.w	8009b5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8145 	beq.w	8009c90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	f080 813e 	bcs.w	8009c90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a26:	f000 8088 	beq.w	8009b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	330c      	adds	r3, #12
 8009a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	330c      	adds	r3, #12
 8009a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a66:	e841 2300 	strex	r3, r2, [r1]
 8009a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1d9      	bne.n	8009a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3314      	adds	r3, #20
 8009a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3314      	adds	r3, #20
 8009a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e1      	bne.n	8009a76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3314      	adds	r3, #20
 8009ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e3      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0a:	f023 0310 	bic.w	r3, r3, #16
 8009b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	330c      	adds	r3, #12
 8009b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e3      	bne.n	8009af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fd f930 	bl	8006d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8c1 	bl	8009cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b56:	e09b      	b.n	8009c90 <HAL_UART_IRQHandler+0x518>
 8009b58:	08009db7 	.word	0x08009db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 808e 	beq.w	8009c94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8089 	beq.w	8009c94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	330c      	adds	r3, #12
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e3      	bne.n	8009b82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3314      	adds	r3, #20
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3314      	adds	r3, #20
 8009bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bde:	633a      	str	r2, [r7, #48]	; 0x30
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e3      	bne.n	8009bba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	330c      	adds	r3, #12
 8009c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0310 	bic.w	r3, r3, #16
 8009c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c24:	61fa      	str	r2, [r7, #28]
 8009c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	69b9      	ldr	r1, [r7, #24]
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	617b      	str	r3, [r7, #20]
   return(result);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e3      	bne.n	8009c00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f847 	bl	8009cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c4a:	e023      	b.n	8009c94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d009      	beq.n	8009c6c <HAL_UART_IRQHandler+0x4f4>
 8009c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8ba 	bl	8009dde <UART_Transmit_IT>
    return;
 8009c6a:	e014      	b.n	8009c96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00e      	beq.n	8009c96 <HAL_UART_IRQHandler+0x51e>
 8009c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d008      	beq.n	8009c96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f8fa 	bl	8009e7e <UART_EndTransmit_IT>
    return;
 8009c8a:	e004      	b.n	8009c96 <HAL_UART_IRQHandler+0x51e>
    return;
 8009c8c:	bf00      	nop
 8009c8e:	e002      	b.n	8009c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c90:	bf00      	nop
 8009c92:	e000      	b.n	8009c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c94:	bf00      	nop
  }
}
 8009c96:	37e8      	adds	r7, #232	; 0xe8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b095      	sub	sp, #84	; 0x54
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	330c      	adds	r3, #12
 8009d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d18:	643a      	str	r2, [r7, #64]	; 0x40
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e5      	bne.n	8009cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3314      	adds	r3, #20
 8009d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	f023 0301 	bic.w	r3, r3, #1
 8009d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3314      	adds	r3, #20
 8009d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e5      	bne.n	8009d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d119      	bne.n	8009d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	330c      	adds	r3, #12
 8009d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0310 	bic.w	r3, r3, #16
 8009d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	330c      	adds	r3, #12
 8009d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d88:	61ba      	str	r2, [r7, #24]
 8009d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	6979      	ldr	r1, [r7, #20]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	613b      	str	r3, [r7, #16]
   return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e5      	bne.n	8009d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009daa:	bf00      	nop
 8009dac:	3754      	adds	r7, #84	; 0x54
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff ff77 	bl	8009cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b21      	cmp	r3, #33	; 0x21
 8009df0:	d13e      	bne.n	8009e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d114      	bne.n	8009e26 <UART_Transmit_IT+0x48>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d110      	bne.n	8009e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	621a      	str	r2, [r3, #32]
 8009e24:	e008      	b.n	8009e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6211      	str	r1, [r2, #32]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10f      	bne.n	8009e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e000      	b.n	8009e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fefc 	bl	8009c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b08c      	sub	sp, #48	; 0x30
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b22      	cmp	r3, #34	; 0x22
 8009ec0:	f040 80ae 	bne.w	800a020 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ecc:	d117      	bne.n	8009efe <UART_Receive_IT+0x50>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d113      	bne.n	8009efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	1c9a      	adds	r2, r3, #2
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	629a      	str	r2, [r3, #40]	; 0x28
 8009efc:	e026      	b.n	8009f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f10:	d007      	beq.n	8009f22 <UART_Receive_IT+0x74>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <UART_Receive_IT+0x82>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	e008      	b.n	8009f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d15d      	bne.n	800a01c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0220 	bic.w	r2, r2, #32
 8009f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695a      	ldr	r2, [r3, #20]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0201 	bic.w	r2, r2, #1
 8009f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d135      	bne.n	800a012 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	330c      	adds	r3, #12
 8009fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	613b      	str	r3, [r7, #16]
   return(result);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f023 0310 	bic.w	r3, r3, #16
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	330c      	adds	r3, #12
 8009fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fcc:	623a      	str	r2, [r7, #32]
 8009fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	6a3a      	ldr	r2, [r7, #32]
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e5      	bne.n	8009fac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0310 	and.w	r3, r3, #16
 8009fea:	2b10      	cmp	r3, #16
 8009fec:	d10a      	bne.n	800a004 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fe64 	bl	8009cd8 <HAL_UARTEx_RxEventCallback>
 800a010:	e002      	b.n	800a018 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fe4c 	bl	8009cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	e002      	b.n	800a022 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	e000      	b.n	800a022 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a020:	2302      	movs	r3, #2
  }
}
 800a022:	4618      	mov	r0, r3
 800a024:	3730      	adds	r7, #48	; 0x30
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a02c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a030:	b0c0      	sub	sp, #256	; 0x100
 800a032:	af00      	add	r7, sp, #0
 800a034:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a048:	68d9      	ldr	r1, [r3, #12]
 800a04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	ea40 0301 	orr.w	r3, r0, r1
 800a054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	431a      	orrs	r2, r3
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	4313      	orrs	r3, r2
 800a074:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a084:	f021 010c 	bic.w	r1, r1, #12
 800a088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a092:	430b      	orrs	r3, r1
 800a094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a6:	6999      	ldr	r1, [r3, #24]
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	ea40 0301 	orr.w	r3, r0, r1
 800a0b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b8f      	ldr	r3, [pc, #572]	; (800a2f8 <UART_SetConfig+0x2cc>)
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d005      	beq.n	800a0cc <UART_SetConfig+0xa0>
 800a0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	4b8d      	ldr	r3, [pc, #564]	; (800a2fc <UART_SetConfig+0x2d0>)
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d104      	bne.n	800a0d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0cc:	f7fe fe80 	bl	8008dd0 <HAL_RCC_GetPCLK2Freq>
 800a0d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a0d4:	e003      	b.n	800a0de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0d6:	f7fe fe67 	bl	8008da8 <HAL_RCC_GetPCLK1Freq>
 800a0da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0e8:	f040 810c 	bne.w	800a304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a0fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a0fe:	4622      	mov	r2, r4
 800a100:	462b      	mov	r3, r5
 800a102:	1891      	adds	r1, r2, r2
 800a104:	65b9      	str	r1, [r7, #88]	; 0x58
 800a106:	415b      	adcs	r3, r3
 800a108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a10a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a10e:	4621      	mov	r1, r4
 800a110:	eb12 0801 	adds.w	r8, r2, r1
 800a114:	4629      	mov	r1, r5
 800a116:	eb43 0901 	adc.w	r9, r3, r1
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a12a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a12e:	4690      	mov	r8, r2
 800a130:	4699      	mov	r9, r3
 800a132:	4623      	mov	r3, r4
 800a134:	eb18 0303 	adds.w	r3, r8, r3
 800a138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a13c:	462b      	mov	r3, r5
 800a13e:	eb49 0303 	adc.w	r3, r9, r3
 800a142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a152:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a15a:	460b      	mov	r3, r1
 800a15c:	18db      	adds	r3, r3, r3
 800a15e:	653b      	str	r3, [r7, #80]	; 0x50
 800a160:	4613      	mov	r3, r2
 800a162:	eb42 0303 	adc.w	r3, r2, r3
 800a166:	657b      	str	r3, [r7, #84]	; 0x54
 800a168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a16c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a170:	f7f6 fd72 	bl	8000c58 <__aeabi_uldivmod>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4b61      	ldr	r3, [pc, #388]	; (800a300 <UART_SetConfig+0x2d4>)
 800a17a:	fba3 2302 	umull	r2, r3, r3, r2
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	011c      	lsls	r4, r3, #4
 800a182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a186:	2200      	movs	r2, #0
 800a188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a18c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a194:	4642      	mov	r2, r8
 800a196:	464b      	mov	r3, r9
 800a198:	1891      	adds	r1, r2, r2
 800a19a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a19c:	415b      	adcs	r3, r3
 800a19e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a1a4:	4641      	mov	r1, r8
 800a1a6:	eb12 0a01 	adds.w	sl, r2, r1
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	eb43 0b01 	adc.w	fp, r3, r1
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	f04f 0300 	mov.w	r3, #0
 800a1b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1c4:	4692      	mov	sl, r2
 800a1c6:	469b      	mov	fp, r3
 800a1c8:	4643      	mov	r3, r8
 800a1ca:	eb1a 0303 	adds.w	r3, sl, r3
 800a1ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	eb4b 0303 	adc.w	r3, fp, r3
 800a1d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a1ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	18db      	adds	r3, r3, r3
 800a1f4:	643b      	str	r3, [r7, #64]	; 0x40
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	eb42 0303 	adc.w	r3, r2, r3
 800a1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a1fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a206:	f7f6 fd27 	bl	8000c58 <__aeabi_uldivmod>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4611      	mov	r1, r2
 800a210:	4b3b      	ldr	r3, [pc, #236]	; (800a300 <UART_SetConfig+0x2d4>)
 800a212:	fba3 2301 	umull	r2, r3, r3, r1
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	2264      	movs	r2, #100	; 0x64
 800a21a:	fb02 f303 	mul.w	r3, r2, r3
 800a21e:	1acb      	subs	r3, r1, r3
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a226:	4b36      	ldr	r3, [pc, #216]	; (800a300 <UART_SetConfig+0x2d4>)
 800a228:	fba3 2302 	umull	r2, r3, r3, r2
 800a22c:	095b      	lsrs	r3, r3, #5
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a234:	441c      	add	r4, r3
 800a236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a240:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	1891      	adds	r1, r2, r2
 800a24e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a250:	415b      	adcs	r3, r3
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a258:	4641      	mov	r1, r8
 800a25a:	1851      	adds	r1, r2, r1
 800a25c:	6339      	str	r1, [r7, #48]	; 0x30
 800a25e:	4649      	mov	r1, r9
 800a260:	414b      	adcs	r3, r1
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	f04f 0300 	mov.w	r3, #0
 800a26c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a270:	4659      	mov	r1, fp
 800a272:	00cb      	lsls	r3, r1, #3
 800a274:	4651      	mov	r1, sl
 800a276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a27a:	4651      	mov	r1, sl
 800a27c:	00ca      	lsls	r2, r1, #3
 800a27e:	4610      	mov	r0, r2
 800a280:	4619      	mov	r1, r3
 800a282:	4603      	mov	r3, r0
 800a284:	4642      	mov	r2, r8
 800a286:	189b      	adds	r3, r3, r2
 800a288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a28c:	464b      	mov	r3, r9
 800a28e:	460a      	mov	r2, r1
 800a290:	eb42 0303 	adc.w	r3, r2, r3
 800a294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a2a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	18db      	adds	r3, r3, r3
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	eb42 0303 	adc.w	r3, r2, r3
 800a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a2c2:	f7f6 fcc9 	bl	8000c58 <__aeabi_uldivmod>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <UART_SetConfig+0x2d4>)
 800a2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d0:	095b      	lsrs	r3, r3, #5
 800a2d2:	2164      	movs	r1, #100	; 0x64
 800a2d4:	fb01 f303 	mul.w	r3, r1, r3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	3332      	adds	r3, #50	; 0x32
 800a2de:	4a08      	ldr	r2, [pc, #32]	; (800a300 <UART_SetConfig+0x2d4>)
 800a2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e4:	095b      	lsrs	r3, r3, #5
 800a2e6:	f003 0207 	and.w	r2, r3, #7
 800a2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4422      	add	r2, r4
 800a2f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2f4:	e106      	b.n	800a504 <UART_SetConfig+0x4d8>
 800a2f6:	bf00      	nop
 800a2f8:	40011000 	.word	0x40011000
 800a2fc:	40011400 	.word	0x40011400
 800a300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a308:	2200      	movs	r2, #0
 800a30a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a30e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a316:	4642      	mov	r2, r8
 800a318:	464b      	mov	r3, r9
 800a31a:	1891      	adds	r1, r2, r2
 800a31c:	6239      	str	r1, [r7, #32]
 800a31e:	415b      	adcs	r3, r3
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
 800a322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a326:	4641      	mov	r1, r8
 800a328:	1854      	adds	r4, r2, r1
 800a32a:	4649      	mov	r1, r9
 800a32c:	eb43 0501 	adc.w	r5, r3, r1
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	00eb      	lsls	r3, r5, #3
 800a33a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a33e:	00e2      	lsls	r2, r4, #3
 800a340:	4614      	mov	r4, r2
 800a342:	461d      	mov	r5, r3
 800a344:	4643      	mov	r3, r8
 800a346:	18e3      	adds	r3, r4, r3
 800a348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a34c:	464b      	mov	r3, r9
 800a34e:	eb45 0303 	adc.w	r3, r5, r3
 800a352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a366:	f04f 0200 	mov.w	r2, #0
 800a36a:	f04f 0300 	mov.w	r3, #0
 800a36e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a372:	4629      	mov	r1, r5
 800a374:	008b      	lsls	r3, r1, #2
 800a376:	4621      	mov	r1, r4
 800a378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a37c:	4621      	mov	r1, r4
 800a37e:	008a      	lsls	r2, r1, #2
 800a380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a384:	f7f6 fc68 	bl	8000c58 <__aeabi_uldivmod>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4b60      	ldr	r3, [pc, #384]	; (800a510 <UART_SetConfig+0x4e4>)
 800a38e:	fba3 2302 	umull	r2, r3, r3, r2
 800a392:	095b      	lsrs	r3, r3, #5
 800a394:	011c      	lsls	r4, r3, #4
 800a396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	1891      	adds	r1, r2, r2
 800a3ae:	61b9      	str	r1, [r7, #24]
 800a3b0:	415b      	adcs	r3, r3
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	1851      	adds	r1, r2, r1
 800a3bc:	6139      	str	r1, [r7, #16]
 800a3be:	4649      	mov	r1, r9
 800a3c0:	414b      	adcs	r3, r1
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	00cb      	lsls	r3, r1, #3
 800a3d4:	4651      	mov	r1, sl
 800a3d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3da:	4651      	mov	r1, sl
 800a3dc:	00ca      	lsls	r2, r1, #3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	189b      	adds	r3, r3, r2
 800a3e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	460a      	mov	r2, r1
 800a3f0:	eb42 0303 	adc.w	r3, r2, r3
 800a3f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	67bb      	str	r3, [r7, #120]	; 0x78
 800a402:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 0300 	mov.w	r3, #0
 800a40c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a410:	4649      	mov	r1, r9
 800a412:	008b      	lsls	r3, r1, #2
 800a414:	4641      	mov	r1, r8
 800a416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a41a:	4641      	mov	r1, r8
 800a41c:	008a      	lsls	r2, r1, #2
 800a41e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a422:	f7f6 fc19 	bl	8000c58 <__aeabi_uldivmod>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4611      	mov	r1, r2
 800a42c:	4b38      	ldr	r3, [pc, #224]	; (800a510 <UART_SetConfig+0x4e4>)
 800a42e:	fba3 2301 	umull	r2, r3, r3, r1
 800a432:	095b      	lsrs	r3, r3, #5
 800a434:	2264      	movs	r2, #100	; 0x64
 800a436:	fb02 f303 	mul.w	r3, r2, r3
 800a43a:	1acb      	subs	r3, r1, r3
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	3332      	adds	r3, #50	; 0x32
 800a440:	4a33      	ldr	r2, [pc, #204]	; (800a510 <UART_SetConfig+0x4e4>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a44c:	441c      	add	r4, r3
 800a44e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a452:	2200      	movs	r2, #0
 800a454:	673b      	str	r3, [r7, #112]	; 0x70
 800a456:	677a      	str	r2, [r7, #116]	; 0x74
 800a458:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	1891      	adds	r1, r2, r2
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	415b      	adcs	r3, r3
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a46c:	4641      	mov	r1, r8
 800a46e:	1851      	adds	r1, r2, r1
 800a470:	6039      	str	r1, [r7, #0]
 800a472:	4649      	mov	r1, r9
 800a474:	414b      	adcs	r3, r1
 800a476:	607b      	str	r3, [r7, #4]
 800a478:	f04f 0200 	mov.w	r2, #0
 800a47c:	f04f 0300 	mov.w	r3, #0
 800a480:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a484:	4659      	mov	r1, fp
 800a486:	00cb      	lsls	r3, r1, #3
 800a488:	4651      	mov	r1, sl
 800a48a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a48e:	4651      	mov	r1, sl
 800a490:	00ca      	lsls	r2, r1, #3
 800a492:	4610      	mov	r0, r2
 800a494:	4619      	mov	r1, r3
 800a496:	4603      	mov	r3, r0
 800a498:	4642      	mov	r2, r8
 800a49a:	189b      	adds	r3, r3, r2
 800a49c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a49e:	464b      	mov	r3, r9
 800a4a0:	460a      	mov	r2, r1
 800a4a2:	eb42 0303 	adc.w	r3, r2, r3
 800a4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a4b2:	667a      	str	r2, [r7, #100]	; 0x64
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	008b      	lsls	r3, r1, #2
 800a4c4:	4641      	mov	r1, r8
 800a4c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	008a      	lsls	r2, r1, #2
 800a4ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a4d2:	f7f6 fbc1 	bl	8000c58 <__aeabi_uldivmod>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <UART_SetConfig+0x4e4>)
 800a4dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a4e0:	095b      	lsrs	r3, r3, #5
 800a4e2:	2164      	movs	r1, #100	; 0x64
 800a4e4:	fb01 f303 	mul.w	r3, r1, r3
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	3332      	adds	r3, #50	; 0x32
 800a4ee:	4a08      	ldr	r2, [pc, #32]	; (800a510 <UART_SetConfig+0x4e4>)
 800a4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f4:	095b      	lsrs	r3, r3, #5
 800a4f6:	f003 020f 	and.w	r2, r3, #15
 800a4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4422      	add	r2, r4
 800a502:	609a      	str	r2, [r3, #8]
}
 800a504:	bf00      	nop
 800a506:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a50a:	46bd      	mov	sp, r7
 800a50c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a510:	51eb851f 	.word	0x51eb851f

0800a514 <__cvt>:
 800a514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	ec55 4b10 	vmov	r4, r5, d0
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	460e      	mov	r6, r1
 800a520:	4619      	mov	r1, r3
 800a522:	462b      	mov	r3, r5
 800a524:	bfbb      	ittet	lt
 800a526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a52a:	461d      	movlt	r5, r3
 800a52c:	2300      	movge	r3, #0
 800a52e:	232d      	movlt	r3, #45	; 0x2d
 800a530:	700b      	strb	r3, [r1, #0]
 800a532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a534:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a538:	4691      	mov	r9, r2
 800a53a:	f023 0820 	bic.w	r8, r3, #32
 800a53e:	bfbc      	itt	lt
 800a540:	4622      	movlt	r2, r4
 800a542:	4614      	movlt	r4, r2
 800a544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a548:	d005      	beq.n	800a556 <__cvt+0x42>
 800a54a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a54e:	d100      	bne.n	800a552 <__cvt+0x3e>
 800a550:	3601      	adds	r6, #1
 800a552:	2102      	movs	r1, #2
 800a554:	e000      	b.n	800a558 <__cvt+0x44>
 800a556:	2103      	movs	r1, #3
 800a558:	ab03      	add	r3, sp, #12
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	ab02      	add	r3, sp, #8
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	ec45 4b10 	vmov	d0, r4, r5
 800a564:	4653      	mov	r3, sl
 800a566:	4632      	mov	r2, r6
 800a568:	f000 fe6a 	bl	800b240 <_dtoa_r>
 800a56c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a570:	4607      	mov	r7, r0
 800a572:	d102      	bne.n	800a57a <__cvt+0x66>
 800a574:	f019 0f01 	tst.w	r9, #1
 800a578:	d022      	beq.n	800a5c0 <__cvt+0xac>
 800a57a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a57e:	eb07 0906 	add.w	r9, r7, r6
 800a582:	d110      	bne.n	800a5a6 <__cvt+0x92>
 800a584:	783b      	ldrb	r3, [r7, #0]
 800a586:	2b30      	cmp	r3, #48	; 0x30
 800a588:	d10a      	bne.n	800a5a0 <__cvt+0x8c>
 800a58a:	2200      	movs	r2, #0
 800a58c:	2300      	movs	r3, #0
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f6 faa1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a596:	b918      	cbnz	r0, 800a5a0 <__cvt+0x8c>
 800a598:	f1c6 0601 	rsb	r6, r6, #1
 800a59c:	f8ca 6000 	str.w	r6, [sl]
 800a5a0:	f8da 3000 	ldr.w	r3, [sl]
 800a5a4:	4499      	add	r9, r3
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	f7f6 fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5b2:	b108      	cbz	r0, 800a5b8 <__cvt+0xa4>
 800a5b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5b8:	2230      	movs	r2, #48	; 0x30
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	454b      	cmp	r3, r9
 800a5be:	d307      	bcc.n	800a5d0 <__cvt+0xbc>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5c4:	1bdb      	subs	r3, r3, r7
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	b004      	add	sp, #16
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	9103      	str	r1, [sp, #12]
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e7f0      	b.n	800a5ba <__cvt+0xa6>

0800a5d8 <__exponent>:
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	bfb8      	it	lt
 800a5e0:	4249      	neglt	r1, r1
 800a5e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a5e6:	bfb4      	ite	lt
 800a5e8:	222d      	movlt	r2, #45	; 0x2d
 800a5ea:	222b      	movge	r2, #43	; 0x2b
 800a5ec:	2909      	cmp	r1, #9
 800a5ee:	7042      	strb	r2, [r0, #1]
 800a5f0:	dd2a      	ble.n	800a648 <__exponent+0x70>
 800a5f2:	f10d 0207 	add.w	r2, sp, #7
 800a5f6:	4617      	mov	r7, r2
 800a5f8:	260a      	movs	r6, #10
 800a5fa:	4694      	mov	ip, r2
 800a5fc:	fb91 f5f6 	sdiv	r5, r1, r6
 800a600:	fb06 1415 	mls	r4, r6, r5, r1
 800a604:	3430      	adds	r4, #48	; 0x30
 800a606:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a60a:	460c      	mov	r4, r1
 800a60c:	2c63      	cmp	r4, #99	; 0x63
 800a60e:	f102 32ff 	add.w	r2, r2, #4294967295
 800a612:	4629      	mov	r1, r5
 800a614:	dcf1      	bgt.n	800a5fa <__exponent+0x22>
 800a616:	3130      	adds	r1, #48	; 0x30
 800a618:	f1ac 0402 	sub.w	r4, ip, #2
 800a61c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a620:	1c41      	adds	r1, r0, #1
 800a622:	4622      	mov	r2, r4
 800a624:	42ba      	cmp	r2, r7
 800a626:	d30a      	bcc.n	800a63e <__exponent+0x66>
 800a628:	f10d 0209 	add.w	r2, sp, #9
 800a62c:	eba2 020c 	sub.w	r2, r2, ip
 800a630:	42bc      	cmp	r4, r7
 800a632:	bf88      	it	hi
 800a634:	2200      	movhi	r2, #0
 800a636:	4413      	add	r3, r2
 800a638:	1a18      	subs	r0, r3, r0
 800a63a:	b003      	add	sp, #12
 800a63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a642:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a646:	e7ed      	b.n	800a624 <__exponent+0x4c>
 800a648:	2330      	movs	r3, #48	; 0x30
 800a64a:	3130      	adds	r1, #48	; 0x30
 800a64c:	7083      	strb	r3, [r0, #2]
 800a64e:	70c1      	strb	r1, [r0, #3]
 800a650:	1d03      	adds	r3, r0, #4
 800a652:	e7f1      	b.n	800a638 <__exponent+0x60>

0800a654 <_printf_float>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	ed2d 8b02 	vpush	{d8}
 800a65c:	b08d      	sub	sp, #52	; 0x34
 800a65e:	460c      	mov	r4, r1
 800a660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a664:	4616      	mov	r6, r2
 800a666:	461f      	mov	r7, r3
 800a668:	4605      	mov	r5, r0
 800a66a:	f000 fce7 	bl	800b03c <_localeconv_r>
 800a66e:	f8d0 a000 	ldr.w	sl, [r0]
 800a672:	4650      	mov	r0, sl
 800a674:	f7f5 fe04 	bl	8000280 <strlen>
 800a678:	2300      	movs	r3, #0
 800a67a:	930a      	str	r3, [sp, #40]	; 0x28
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	f8d8 3000 	ldr.w	r3, [r8]
 800a684:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	f103 0208 	add.w	r2, r3, #8
 800a692:	f8c8 2000 	str.w	r2, [r8]
 800a696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a69a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6a4:	ee08 0a10 	vmov	s16, r0
 800a6a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a6ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b0:	4b9e      	ldr	r3, [pc, #632]	; (800a92c <_printf_float+0x2d8>)
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	f7f6 fa41 	bl	8000b3c <__aeabi_dcmpun>
 800a6ba:	bb88      	cbnz	r0, 800a720 <_printf_float+0xcc>
 800a6bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6c0:	4b9a      	ldr	r3, [pc, #616]	; (800a92c <_printf_float+0x2d8>)
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c6:	f7f6 fa1b 	bl	8000b00 <__aeabi_dcmple>
 800a6ca:	bb48      	cbnz	r0, 800a720 <_printf_float+0xcc>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f6 fa0a 	bl	8000aec <__aeabi_dcmplt>
 800a6d8:	b110      	cbz	r0, 800a6e0 <_printf_float+0x8c>
 800a6da:	232d      	movs	r3, #45	; 0x2d
 800a6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e0:	4a93      	ldr	r2, [pc, #588]	; (800a930 <_printf_float+0x2dc>)
 800a6e2:	4b94      	ldr	r3, [pc, #592]	; (800a934 <_printf_float+0x2e0>)
 800a6e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6e8:	bf94      	ite	ls
 800a6ea:	4690      	movls	r8, r2
 800a6ec:	4698      	movhi	r8, r3
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	9b05      	ldr	r3, [sp, #20]
 800a6f4:	f023 0304 	bic.w	r3, r3, #4
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	f04f 0900 	mov.w	r9, #0
 800a6fe:	9700      	str	r7, [sp, #0]
 800a700:	4633      	mov	r3, r6
 800a702:	aa0b      	add	r2, sp, #44	; 0x2c
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f9da 	bl	800aac0 <_printf_common>
 800a70c:	3001      	adds	r0, #1
 800a70e:	f040 8090 	bne.w	800a832 <_printf_float+0x1de>
 800a712:	f04f 30ff 	mov.w	r0, #4294967295
 800a716:	b00d      	add	sp, #52	; 0x34
 800a718:	ecbd 8b02 	vpop	{d8}
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a720:	4642      	mov	r2, r8
 800a722:	464b      	mov	r3, r9
 800a724:	4640      	mov	r0, r8
 800a726:	4649      	mov	r1, r9
 800a728:	f7f6 fa08 	bl	8000b3c <__aeabi_dcmpun>
 800a72c:	b140      	cbz	r0, 800a740 <_printf_float+0xec>
 800a72e:	464b      	mov	r3, r9
 800a730:	2b00      	cmp	r3, #0
 800a732:	bfbc      	itt	lt
 800a734:	232d      	movlt	r3, #45	; 0x2d
 800a736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a73a:	4a7f      	ldr	r2, [pc, #508]	; (800a938 <_printf_float+0x2e4>)
 800a73c:	4b7f      	ldr	r3, [pc, #508]	; (800a93c <_printf_float+0x2e8>)
 800a73e:	e7d1      	b.n	800a6e4 <_printf_float+0x90>
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a746:	9206      	str	r2, [sp, #24]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	d13f      	bne.n	800a7cc <_printf_float+0x178>
 800a74c:	2306      	movs	r3, #6
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	6861      	ldr	r1, [r4, #4]
 800a754:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a758:	2300      	movs	r3, #0
 800a75a:	9303      	str	r3, [sp, #12]
 800a75c:	ab0a      	add	r3, sp, #40	; 0x28
 800a75e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a762:	ab09      	add	r3, sp, #36	; 0x24
 800a764:	ec49 8b10 	vmov	d0, r8, r9
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	6022      	str	r2, [r4, #0]
 800a76c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a770:	4628      	mov	r0, r5
 800a772:	f7ff fecf 	bl	800a514 <__cvt>
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a77a:	2b47      	cmp	r3, #71	; 0x47
 800a77c:	4680      	mov	r8, r0
 800a77e:	d108      	bne.n	800a792 <_printf_float+0x13e>
 800a780:	1cc8      	adds	r0, r1, #3
 800a782:	db02      	blt.n	800a78a <_printf_float+0x136>
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	4299      	cmp	r1, r3
 800a788:	dd41      	ble.n	800a80e <_printf_float+0x1ba>
 800a78a:	f1ab 0302 	sub.w	r3, fp, #2
 800a78e:	fa5f fb83 	uxtb.w	fp, r3
 800a792:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a796:	d820      	bhi.n	800a7da <_printf_float+0x186>
 800a798:	3901      	subs	r1, #1
 800a79a:	465a      	mov	r2, fp
 800a79c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7a0:	9109      	str	r1, [sp, #36]	; 0x24
 800a7a2:	f7ff ff19 	bl	800a5d8 <__exponent>
 800a7a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7a8:	1813      	adds	r3, r2, r0
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	4681      	mov	r9, r0
 800a7ae:	6123      	str	r3, [r4, #16]
 800a7b0:	dc02      	bgt.n	800a7b8 <_printf_float+0x164>
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	07d2      	lsls	r2, r2, #31
 800a7b6:	d501      	bpl.n	800a7bc <_printf_float+0x168>
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	6123      	str	r3, [r4, #16]
 800a7bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d09c      	beq.n	800a6fe <_printf_float+0xaa>
 800a7c4:	232d      	movs	r3, #45	; 0x2d
 800a7c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ca:	e798      	b.n	800a6fe <_printf_float+0xaa>
 800a7cc:	9a06      	ldr	r2, [sp, #24]
 800a7ce:	2a47      	cmp	r2, #71	; 0x47
 800a7d0:	d1be      	bne.n	800a750 <_printf_float+0xfc>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1bc      	bne.n	800a750 <_printf_float+0xfc>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e7b9      	b.n	800a74e <_printf_float+0xfa>
 800a7da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7de:	d118      	bne.n	800a812 <_printf_float+0x1be>
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	dd0b      	ble.n	800a7fe <_printf_float+0x1aa>
 800a7e6:	6121      	str	r1, [r4, #16]
 800a7e8:	b913      	cbnz	r3, 800a7f0 <_printf_float+0x19c>
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	07d0      	lsls	r0, r2, #31
 800a7ee:	d502      	bpl.n	800a7f6 <_printf_float+0x1a2>
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	440b      	add	r3, r1
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7f8:	f04f 0900 	mov.w	r9, #0
 800a7fc:	e7de      	b.n	800a7bc <_printf_float+0x168>
 800a7fe:	b913      	cbnz	r3, 800a806 <_printf_float+0x1b2>
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	07d2      	lsls	r2, r2, #31
 800a804:	d501      	bpl.n	800a80a <_printf_float+0x1b6>
 800a806:	3302      	adds	r3, #2
 800a808:	e7f4      	b.n	800a7f4 <_printf_float+0x1a0>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e7f2      	b.n	800a7f4 <_printf_float+0x1a0>
 800a80e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a814:	4299      	cmp	r1, r3
 800a816:	db05      	blt.n	800a824 <_printf_float+0x1d0>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	6121      	str	r1, [r4, #16]
 800a81c:	07d8      	lsls	r0, r3, #31
 800a81e:	d5ea      	bpl.n	800a7f6 <_printf_float+0x1a2>
 800a820:	1c4b      	adds	r3, r1, #1
 800a822:	e7e7      	b.n	800a7f4 <_printf_float+0x1a0>
 800a824:	2900      	cmp	r1, #0
 800a826:	bfd4      	ite	le
 800a828:	f1c1 0202 	rsble	r2, r1, #2
 800a82c:	2201      	movgt	r2, #1
 800a82e:	4413      	add	r3, r2
 800a830:	e7e0      	b.n	800a7f4 <_printf_float+0x1a0>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	055a      	lsls	r2, r3, #21
 800a836:	d407      	bmi.n	800a848 <_printf_float+0x1f4>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	4642      	mov	r2, r8
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	47b8      	blx	r7
 800a842:	3001      	adds	r0, #1
 800a844:	d12c      	bne.n	800a8a0 <_printf_float+0x24c>
 800a846:	e764      	b.n	800a712 <_printf_float+0xbe>
 800a848:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a84c:	f240 80e0 	bls.w	800aa10 <_printf_float+0x3bc>
 800a850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a854:	2200      	movs	r2, #0
 800a856:	2300      	movs	r3, #0
 800a858:	f7f6 f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d034      	beq.n	800a8ca <_printf_float+0x276>
 800a860:	4a37      	ldr	r2, [pc, #220]	; (800a940 <_printf_float+0x2ec>)
 800a862:	2301      	movs	r3, #1
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af51 	beq.w	800a712 <_printf_float+0xbe>
 800a870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a874:	429a      	cmp	r2, r3
 800a876:	db02      	blt.n	800a87e <_printf_float+0x22a>
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	07d8      	lsls	r0, r3, #31
 800a87c:	d510      	bpl.n	800a8a0 <_printf_float+0x24c>
 800a87e:	ee18 3a10 	vmov	r3, s16
 800a882:	4652      	mov	r2, sl
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	f43f af41 	beq.w	800a712 <_printf_float+0xbe>
 800a890:	f04f 0800 	mov.w	r8, #0
 800a894:	f104 091a 	add.w	r9, r4, #26
 800a898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89a:	3b01      	subs	r3, #1
 800a89c:	4543      	cmp	r3, r8
 800a89e:	dc09      	bgt.n	800a8b4 <_printf_float+0x260>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	079b      	lsls	r3, r3, #30
 800a8a4:	f100 8107 	bmi.w	800aab6 <_printf_float+0x462>
 800a8a8:	68e0      	ldr	r0, [r4, #12]
 800a8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ac:	4298      	cmp	r0, r3
 800a8ae:	bfb8      	it	lt
 800a8b0:	4618      	movlt	r0, r3
 800a8b2:	e730      	b.n	800a716 <_printf_float+0xc2>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	464a      	mov	r2, r9
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b8      	blx	r7
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f43f af27 	beq.w	800a712 <_printf_float+0xbe>
 800a8c4:	f108 0801 	add.w	r8, r8, #1
 800a8c8:	e7e6      	b.n	800a898 <_printf_float+0x244>
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dc39      	bgt.n	800a944 <_printf_float+0x2f0>
 800a8d0:	4a1b      	ldr	r2, [pc, #108]	; (800a940 <_printf_float+0x2ec>)
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f af19 	beq.w	800a712 <_printf_float+0xbe>
 800a8e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	d102      	bne.n	800a8ee <_printf_float+0x29a>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	07d9      	lsls	r1, r3, #31
 800a8ec:	d5d8      	bpl.n	800a8a0 <_printf_float+0x24c>
 800a8ee:	ee18 3a10 	vmov	r3, s16
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f af09 	beq.w	800a712 <_printf_float+0xbe>
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	f104 0a1a 	add.w	sl, r4, #26
 800a908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90a:	425b      	negs	r3, r3
 800a90c:	454b      	cmp	r3, r9
 800a90e:	dc01      	bgt.n	800a914 <_printf_float+0x2c0>
 800a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a912:	e792      	b.n	800a83a <_printf_float+0x1e6>
 800a914:	2301      	movs	r3, #1
 800a916:	4652      	mov	r2, sl
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	f43f aef7 	beq.w	800a712 <_printf_float+0xbe>
 800a924:	f109 0901 	add.w	r9, r9, #1
 800a928:	e7ee      	b.n	800a908 <_printf_float+0x2b4>
 800a92a:	bf00      	nop
 800a92c:	7fefffff 	.word	0x7fefffff
 800a930:	0800d6ac 	.word	0x0800d6ac
 800a934:	0800d6b0 	.word	0x0800d6b0
 800a938:	0800d6b4 	.word	0x0800d6b4
 800a93c:	0800d6b8 	.word	0x0800d6b8
 800a940:	0800d6bc 	.word	0x0800d6bc
 800a944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a948:	429a      	cmp	r2, r3
 800a94a:	bfa8      	it	ge
 800a94c:	461a      	movge	r2, r3
 800a94e:	2a00      	cmp	r2, #0
 800a950:	4691      	mov	r9, r2
 800a952:	dc37      	bgt.n	800a9c4 <_printf_float+0x370>
 800a954:	f04f 0b00 	mov.w	fp, #0
 800a958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a95c:	f104 021a 	add.w	r2, r4, #26
 800a960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	eba3 0309 	sub.w	r3, r3, r9
 800a968:	455b      	cmp	r3, fp
 800a96a:	dc33      	bgt.n	800a9d4 <_printf_float+0x380>
 800a96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a970:	429a      	cmp	r2, r3
 800a972:	db3b      	blt.n	800a9ec <_printf_float+0x398>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	07da      	lsls	r2, r3, #31
 800a978:	d438      	bmi.n	800a9ec <_printf_float+0x398>
 800a97a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a97e:	eba2 0903 	sub.w	r9, r2, r3
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	4591      	cmp	r9, r2
 800a988:	bfa8      	it	ge
 800a98a:	4691      	movge	r9, r2
 800a98c:	f1b9 0f00 	cmp.w	r9, #0
 800a990:	dc35      	bgt.n	800a9fe <_printf_float+0x3aa>
 800a992:	f04f 0800 	mov.w	r8, #0
 800a996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a99a:	f104 0a1a 	add.w	sl, r4, #26
 800a99e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a2:	1a9b      	subs	r3, r3, r2
 800a9a4:	eba3 0309 	sub.w	r3, r3, r9
 800a9a8:	4543      	cmp	r3, r8
 800a9aa:	f77f af79 	ble.w	800a8a0 <_printf_float+0x24c>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f43f aeaa 	beq.w	800a712 <_printf_float+0xbe>
 800a9be:	f108 0801 	add.w	r8, r8, #1
 800a9c2:	e7ec      	b.n	800a99e <_printf_float+0x34a>
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	47b8      	blx	r7
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d1c0      	bne.n	800a954 <_printf_float+0x300>
 800a9d2:	e69e      	b.n	800a712 <_printf_float+0xbe>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	9205      	str	r2, [sp, #20]
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f ae97 	beq.w	800a712 <_printf_float+0xbe>
 800a9e4:	9a05      	ldr	r2, [sp, #20]
 800a9e6:	f10b 0b01 	add.w	fp, fp, #1
 800a9ea:	e7b9      	b.n	800a960 <_printf_float+0x30c>
 800a9ec:	ee18 3a10 	vmov	r3, s16
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d1be      	bne.n	800a97a <_printf_float+0x326>
 800a9fc:	e689      	b.n	800a712 <_printf_float+0xbe>
 800a9fe:	9a05      	ldr	r2, [sp, #20]
 800aa00:	464b      	mov	r3, r9
 800aa02:	4442      	add	r2, r8
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d1c1      	bne.n	800a992 <_printf_float+0x33e>
 800aa0e:	e680      	b.n	800a712 <_printf_float+0xbe>
 800aa10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa12:	2a01      	cmp	r2, #1
 800aa14:	dc01      	bgt.n	800aa1a <_printf_float+0x3c6>
 800aa16:	07db      	lsls	r3, r3, #31
 800aa18:	d53a      	bpl.n	800aa90 <_printf_float+0x43c>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	4631      	mov	r1, r6
 800aa20:	4628      	mov	r0, r5
 800aa22:	47b8      	blx	r7
 800aa24:	3001      	adds	r0, #1
 800aa26:	f43f ae74 	beq.w	800a712 <_printf_float+0xbe>
 800aa2a:	ee18 3a10 	vmov	r3, s16
 800aa2e:	4652      	mov	r2, sl
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f ae6b 	beq.w	800a712 <_printf_float+0xbe>
 800aa3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa40:	2200      	movs	r2, #0
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aa48:	f7f6 f846 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa4c:	b9d8      	cbnz	r0, 800aa86 <_printf_float+0x432>
 800aa4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa52:	f108 0201 	add.w	r2, r8, #1
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d10e      	bne.n	800aa7e <_printf_float+0x42a>
 800aa60:	e657      	b.n	800a712 <_printf_float+0xbe>
 800aa62:	2301      	movs	r3, #1
 800aa64:	4652      	mov	r2, sl
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f43f ae50 	beq.w	800a712 <_printf_float+0xbe>
 800aa72:	f108 0801 	add.w	r8, r8, #1
 800aa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	4543      	cmp	r3, r8
 800aa7c:	dcf1      	bgt.n	800aa62 <_printf_float+0x40e>
 800aa7e:	464b      	mov	r3, r9
 800aa80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa84:	e6da      	b.n	800a83c <_printf_float+0x1e8>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f104 0a1a 	add.w	sl, r4, #26
 800aa8e:	e7f2      	b.n	800aa76 <_printf_float+0x422>
 800aa90:	2301      	movs	r3, #1
 800aa92:	4642      	mov	r2, r8
 800aa94:	e7df      	b.n	800aa56 <_printf_float+0x402>
 800aa96:	2301      	movs	r3, #1
 800aa98:	464a      	mov	r2, r9
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f43f ae36 	beq.w	800a712 <_printf_float+0xbe>
 800aaa6:	f108 0801 	add.w	r8, r8, #1
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaae:	1a5b      	subs	r3, r3, r1
 800aab0:	4543      	cmp	r3, r8
 800aab2:	dcf0      	bgt.n	800aa96 <_printf_float+0x442>
 800aab4:	e6f8      	b.n	800a8a8 <_printf_float+0x254>
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	f104 0919 	add.w	r9, r4, #25
 800aabe:	e7f4      	b.n	800aaaa <_printf_float+0x456>

0800aac0 <_printf_common>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	4616      	mov	r6, r2
 800aac6:	4699      	mov	r9, r3
 800aac8:	688a      	ldr	r2, [r1, #8]
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bfb8      	it	lt
 800aad4:	4613      	movlt	r3, r2
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aadc:	4607      	mov	r7, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	b10a      	cbz	r2, 800aae6 <_printf_common+0x26>
 800aae2:	3301      	adds	r3, #1
 800aae4:	6033      	str	r3, [r6, #0]
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	0699      	lsls	r1, r3, #26
 800aaea:	bf42      	ittt	mi
 800aaec:	6833      	ldrmi	r3, [r6, #0]
 800aaee:	3302      	addmi	r3, #2
 800aaf0:	6033      	strmi	r3, [r6, #0]
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	f015 0506 	ands.w	r5, r5, #6
 800aaf8:	d106      	bne.n	800ab08 <_printf_common+0x48>
 800aafa:	f104 0a19 	add.w	sl, r4, #25
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	6832      	ldr	r2, [r6, #0]
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dc26      	bgt.n	800ab56 <_printf_common+0x96>
 800ab08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab0c:	1e13      	subs	r3, r2, #0
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	2301      	movne	r3, #1
 800ab14:	0692      	lsls	r2, r2, #26
 800ab16:	d42b      	bmi.n	800ab70 <_printf_common+0xb0>
 800ab18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	3001      	adds	r0, #1
 800ab24:	d01e      	beq.n	800ab64 <_printf_common+0xa4>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	6922      	ldr	r2, [r4, #16]
 800ab2a:	f003 0306 	and.w	r3, r3, #6
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	bf02      	ittt	eq
 800ab32:	68e5      	ldreq	r5, [r4, #12]
 800ab34:	6833      	ldreq	r3, [r6, #0]
 800ab36:	1aed      	subeq	r5, r5, r3
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	bf0c      	ite	eq
 800ab3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab40:	2500      	movne	r5, #0
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bfc4      	itt	gt
 800ab46:	1a9b      	subgt	r3, r3, r2
 800ab48:	18ed      	addgt	r5, r5, r3
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	341a      	adds	r4, #26
 800ab4e:	42b5      	cmp	r5, r6
 800ab50:	d11a      	bne.n	800ab88 <_printf_common+0xc8>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e008      	b.n	800ab68 <_printf_common+0xa8>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4652      	mov	r2, sl
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	47c0      	blx	r8
 800ab60:	3001      	adds	r0, #1
 800ab62:	d103      	bne.n	800ab6c <_printf_common+0xac>
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295
 800ab68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	e7c6      	b.n	800aafe <_printf_common+0x3e>
 800ab70:	18e1      	adds	r1, r4, r3
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	2030      	movs	r0, #48	; 0x30
 800ab76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab7a:	4422      	add	r2, r4
 800ab7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab84:	3302      	adds	r3, #2
 800ab86:	e7c7      	b.n	800ab18 <_printf_common+0x58>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4638      	mov	r0, r7
 800ab90:	47c0      	blx	r8
 800ab92:	3001      	adds	r0, #1
 800ab94:	d0e6      	beq.n	800ab64 <_printf_common+0xa4>
 800ab96:	3601      	adds	r6, #1
 800ab98:	e7d9      	b.n	800ab4e <_printf_common+0x8e>
	...

0800ab9c <_printf_i>:
 800ab9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	7e0f      	ldrb	r7, [r1, #24]
 800aba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aba4:	2f78      	cmp	r7, #120	; 0x78
 800aba6:	4691      	mov	r9, r2
 800aba8:	4680      	mov	r8, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	469a      	mov	sl, r3
 800abae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abb2:	d807      	bhi.n	800abc4 <_printf_i+0x28>
 800abb4:	2f62      	cmp	r7, #98	; 0x62
 800abb6:	d80a      	bhi.n	800abce <_printf_i+0x32>
 800abb8:	2f00      	cmp	r7, #0
 800abba:	f000 80d4 	beq.w	800ad66 <_printf_i+0x1ca>
 800abbe:	2f58      	cmp	r7, #88	; 0x58
 800abc0:	f000 80c0 	beq.w	800ad44 <_printf_i+0x1a8>
 800abc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abcc:	e03a      	b.n	800ac44 <_printf_i+0xa8>
 800abce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abd2:	2b15      	cmp	r3, #21
 800abd4:	d8f6      	bhi.n	800abc4 <_printf_i+0x28>
 800abd6:	a101      	add	r1, pc, #4	; (adr r1, 800abdc <_printf_i+0x40>)
 800abd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abdc:	0800ac35 	.word	0x0800ac35
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800abc5 	.word	0x0800abc5
 800abe8:	0800abc5 	.word	0x0800abc5
 800abec:	0800abc5 	.word	0x0800abc5
 800abf0:	0800abc5 	.word	0x0800abc5
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800abc5 	.word	0x0800abc5
 800abfc:	0800abc5 	.word	0x0800abc5
 800ac00:	0800abc5 	.word	0x0800abc5
 800ac04:	0800abc5 	.word	0x0800abc5
 800ac08:	0800ad4d 	.word	0x0800ad4d
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ad07 	.word	0x0800ad07
 800ac14:	0800abc5 	.word	0x0800abc5
 800ac18:	0800abc5 	.word	0x0800abc5
 800ac1c:	0800ad6f 	.word	0x0800ad6f
 800ac20:	0800abc5 	.word	0x0800abc5
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800abc5 	.word	0x0800abc5
 800ac2c:	0800abc5 	.word	0x0800abc5
 800ac30:	0800ad0f 	.word	0x0800ad0f
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	602a      	str	r2, [r5, #0]
 800ac3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac44:	2301      	movs	r3, #1
 800ac46:	e09f      	b.n	800ad88 <_printf_i+0x1ec>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	682b      	ldr	r3, [r5, #0]
 800ac4c:	0607      	lsls	r7, r0, #24
 800ac4e:	f103 0104 	add.w	r1, r3, #4
 800ac52:	6029      	str	r1, [r5, #0]
 800ac54:	d501      	bpl.n	800ac5a <_printf_i+0xbe>
 800ac56:	681e      	ldr	r6, [r3, #0]
 800ac58:	e003      	b.n	800ac62 <_printf_i+0xc6>
 800ac5a:	0646      	lsls	r6, r0, #25
 800ac5c:	d5fb      	bpl.n	800ac56 <_printf_i+0xba>
 800ac5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	da03      	bge.n	800ac6e <_printf_i+0xd2>
 800ac66:	232d      	movs	r3, #45	; 0x2d
 800ac68:	4276      	negs	r6, r6
 800ac6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac6e:	485a      	ldr	r0, [pc, #360]	; (800add8 <_printf_i+0x23c>)
 800ac70:	230a      	movs	r3, #10
 800ac72:	e012      	b.n	800ac9a <_printf_i+0xfe>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	1d19      	adds	r1, r3, #4
 800ac7a:	6029      	str	r1, [r5, #0]
 800ac7c:	0605      	lsls	r5, r0, #24
 800ac7e:	d501      	bpl.n	800ac84 <_printf_i+0xe8>
 800ac80:	681e      	ldr	r6, [r3, #0]
 800ac82:	e002      	b.n	800ac8a <_printf_i+0xee>
 800ac84:	0641      	lsls	r1, r0, #25
 800ac86:	d5fb      	bpl.n	800ac80 <_printf_i+0xe4>
 800ac88:	881e      	ldrh	r6, [r3, #0]
 800ac8a:	4853      	ldr	r0, [pc, #332]	; (800add8 <_printf_i+0x23c>)
 800ac8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac8e:	bf0c      	ite	eq
 800ac90:	2308      	moveq	r3, #8
 800ac92:	230a      	movne	r3, #10
 800ac94:	2100      	movs	r1, #0
 800ac96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac9a:	6865      	ldr	r5, [r4, #4]
 800ac9c:	60a5      	str	r5, [r4, #8]
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	bfa2      	ittt	ge
 800aca2:	6821      	ldrge	r1, [r4, #0]
 800aca4:	f021 0104 	bicge.w	r1, r1, #4
 800aca8:	6021      	strge	r1, [r4, #0]
 800acaa:	b90e      	cbnz	r6, 800acb0 <_printf_i+0x114>
 800acac:	2d00      	cmp	r5, #0
 800acae:	d04b      	beq.n	800ad48 <_printf_i+0x1ac>
 800acb0:	4615      	mov	r5, r2
 800acb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800acb6:	fb03 6711 	mls	r7, r3, r1, r6
 800acba:	5dc7      	ldrb	r7, [r0, r7]
 800acbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acc0:	4637      	mov	r7, r6
 800acc2:	42bb      	cmp	r3, r7
 800acc4:	460e      	mov	r6, r1
 800acc6:	d9f4      	bls.n	800acb2 <_printf_i+0x116>
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d10b      	bne.n	800ace4 <_printf_i+0x148>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	07de      	lsls	r6, r3, #31
 800acd0:	d508      	bpl.n	800ace4 <_printf_i+0x148>
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	6861      	ldr	r1, [r4, #4]
 800acd6:	4299      	cmp	r1, r3
 800acd8:	bfde      	ittt	le
 800acda:	2330      	movle	r3, #48	; 0x30
 800acdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ace0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ace4:	1b52      	subs	r2, r2, r5
 800ace6:	6122      	str	r2, [r4, #16]
 800ace8:	f8cd a000 	str.w	sl, [sp]
 800acec:	464b      	mov	r3, r9
 800acee:	aa03      	add	r2, sp, #12
 800acf0:	4621      	mov	r1, r4
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fee4 	bl	800aac0 <_printf_common>
 800acf8:	3001      	adds	r0, #1
 800acfa:	d14a      	bne.n	800ad92 <_printf_i+0x1f6>
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	b004      	add	sp, #16
 800ad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f043 0320 	orr.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	4833      	ldr	r0, [pc, #204]	; (800addc <_printf_i+0x240>)
 800ad10:	2778      	movs	r7, #120	; 0x78
 800ad12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	6829      	ldr	r1, [r5, #0]
 800ad1a:	061f      	lsls	r7, r3, #24
 800ad1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad20:	d402      	bmi.n	800ad28 <_printf_i+0x18c>
 800ad22:	065f      	lsls	r7, r3, #25
 800ad24:	bf48      	it	mi
 800ad26:	b2b6      	uxthmi	r6, r6
 800ad28:	07df      	lsls	r7, r3, #31
 800ad2a:	bf48      	it	mi
 800ad2c:	f043 0320 	orrmi.w	r3, r3, #32
 800ad30:	6029      	str	r1, [r5, #0]
 800ad32:	bf48      	it	mi
 800ad34:	6023      	strmi	r3, [r4, #0]
 800ad36:	b91e      	cbnz	r6, 800ad40 <_printf_i+0x1a4>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	f023 0320 	bic.w	r3, r3, #32
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	2310      	movs	r3, #16
 800ad42:	e7a7      	b.n	800ac94 <_printf_i+0xf8>
 800ad44:	4824      	ldr	r0, [pc, #144]	; (800add8 <_printf_i+0x23c>)
 800ad46:	e7e4      	b.n	800ad12 <_printf_i+0x176>
 800ad48:	4615      	mov	r5, r2
 800ad4a:	e7bd      	b.n	800acc8 <_printf_i+0x12c>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	6826      	ldr	r6, [r4, #0]
 800ad50:	6961      	ldr	r1, [r4, #20]
 800ad52:	1d18      	adds	r0, r3, #4
 800ad54:	6028      	str	r0, [r5, #0]
 800ad56:	0635      	lsls	r5, r6, #24
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	d501      	bpl.n	800ad60 <_printf_i+0x1c4>
 800ad5c:	6019      	str	r1, [r3, #0]
 800ad5e:	e002      	b.n	800ad66 <_printf_i+0x1ca>
 800ad60:	0670      	lsls	r0, r6, #25
 800ad62:	d5fb      	bpl.n	800ad5c <_printf_i+0x1c0>
 800ad64:	8019      	strh	r1, [r3, #0]
 800ad66:	2300      	movs	r3, #0
 800ad68:	6123      	str	r3, [r4, #16]
 800ad6a:	4615      	mov	r5, r2
 800ad6c:	e7bc      	b.n	800ace8 <_printf_i+0x14c>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	1d1a      	adds	r2, r3, #4
 800ad72:	602a      	str	r2, [r5, #0]
 800ad74:	681d      	ldr	r5, [r3, #0]
 800ad76:	6862      	ldr	r2, [r4, #4]
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f7f5 fa30 	bl	80001e0 <memchr>
 800ad80:	b108      	cbz	r0, 800ad86 <_printf_i+0x1ea>
 800ad82:	1b40      	subs	r0, r0, r5
 800ad84:	6060      	str	r0, [r4, #4]
 800ad86:	6863      	ldr	r3, [r4, #4]
 800ad88:	6123      	str	r3, [r4, #16]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad90:	e7aa      	b.n	800ace8 <_printf_i+0x14c>
 800ad92:	6923      	ldr	r3, [r4, #16]
 800ad94:	462a      	mov	r2, r5
 800ad96:	4649      	mov	r1, r9
 800ad98:	4640      	mov	r0, r8
 800ad9a:	47d0      	blx	sl
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	d0ad      	beq.n	800acfc <_printf_i+0x160>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	079b      	lsls	r3, r3, #30
 800ada4:	d413      	bmi.n	800adce <_printf_i+0x232>
 800ada6:	68e0      	ldr	r0, [r4, #12]
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	4298      	cmp	r0, r3
 800adac:	bfb8      	it	lt
 800adae:	4618      	movlt	r0, r3
 800adb0:	e7a6      	b.n	800ad00 <_printf_i+0x164>
 800adb2:	2301      	movs	r3, #1
 800adb4:	4632      	mov	r2, r6
 800adb6:	4649      	mov	r1, r9
 800adb8:	4640      	mov	r0, r8
 800adba:	47d0      	blx	sl
 800adbc:	3001      	adds	r0, #1
 800adbe:	d09d      	beq.n	800acfc <_printf_i+0x160>
 800adc0:	3501      	adds	r5, #1
 800adc2:	68e3      	ldr	r3, [r4, #12]
 800adc4:	9903      	ldr	r1, [sp, #12]
 800adc6:	1a5b      	subs	r3, r3, r1
 800adc8:	42ab      	cmp	r3, r5
 800adca:	dcf2      	bgt.n	800adb2 <_printf_i+0x216>
 800adcc:	e7eb      	b.n	800ada6 <_printf_i+0x20a>
 800adce:	2500      	movs	r5, #0
 800add0:	f104 0619 	add.w	r6, r4, #25
 800add4:	e7f5      	b.n	800adc2 <_printf_i+0x226>
 800add6:	bf00      	nop
 800add8:	0800d6be 	.word	0x0800d6be
 800addc:	0800d6cf 	.word	0x0800d6cf

0800ade0 <std>:
 800ade0:	2300      	movs	r3, #0
 800ade2:	b510      	push	{r4, lr}
 800ade4:	4604      	mov	r4, r0
 800ade6:	e9c0 3300 	strd	r3, r3, [r0]
 800adea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adee:	6083      	str	r3, [r0, #8]
 800adf0:	8181      	strh	r1, [r0, #12]
 800adf2:	6643      	str	r3, [r0, #100]	; 0x64
 800adf4:	81c2      	strh	r2, [r0, #14]
 800adf6:	6183      	str	r3, [r0, #24]
 800adf8:	4619      	mov	r1, r3
 800adfa:	2208      	movs	r2, #8
 800adfc:	305c      	adds	r0, #92	; 0x5c
 800adfe:	f000 f914 	bl	800b02a <memset>
 800ae02:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <std+0x58>)
 800ae04:	6263      	str	r3, [r4, #36]	; 0x24
 800ae06:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <std+0x5c>)
 800ae08:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae0a:	4b0d      	ldr	r3, [pc, #52]	; (800ae40 <std+0x60>)
 800ae0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae0e:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <std+0x64>)
 800ae10:	6323      	str	r3, [r4, #48]	; 0x30
 800ae12:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <std+0x68>)
 800ae14:	6224      	str	r4, [r4, #32]
 800ae16:	429c      	cmp	r4, r3
 800ae18:	d006      	beq.n	800ae28 <std+0x48>
 800ae1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ae1e:	4294      	cmp	r4, r2
 800ae20:	d002      	beq.n	800ae28 <std+0x48>
 800ae22:	33d0      	adds	r3, #208	; 0xd0
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d105      	bne.n	800ae34 <std+0x54>
 800ae28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae30:	f000 b978 	b.w	800b124 <__retarget_lock_init_recursive>
 800ae34:	bd10      	pop	{r4, pc}
 800ae36:	bf00      	nop
 800ae38:	0800afa5 	.word	0x0800afa5
 800ae3c:	0800afc7 	.word	0x0800afc7
 800ae40:	0800afff 	.word	0x0800afff
 800ae44:	0800b023 	.word	0x0800b023
 800ae48:	200004a8 	.word	0x200004a8

0800ae4c <stdio_exit_handler>:
 800ae4c:	4a02      	ldr	r2, [pc, #8]	; (800ae58 <stdio_exit_handler+0xc>)
 800ae4e:	4903      	ldr	r1, [pc, #12]	; (800ae5c <stdio_exit_handler+0x10>)
 800ae50:	4803      	ldr	r0, [pc, #12]	; (800ae60 <stdio_exit_handler+0x14>)
 800ae52:	f000 b869 	b.w	800af28 <_fwalk_sglue>
 800ae56:	bf00      	nop
 800ae58:	200000e0 	.word	0x200000e0
 800ae5c:	0800cad9 	.word	0x0800cad9
 800ae60:	200000ec 	.word	0x200000ec

0800ae64 <cleanup_stdio>:
 800ae64:	6841      	ldr	r1, [r0, #4]
 800ae66:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <cleanup_stdio+0x34>)
 800ae68:	4299      	cmp	r1, r3
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	d001      	beq.n	800ae74 <cleanup_stdio+0x10>
 800ae70:	f001 fe32 	bl	800cad8 <_fflush_r>
 800ae74:	68a1      	ldr	r1, [r4, #8]
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <cleanup_stdio+0x38>)
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d002      	beq.n	800ae82 <cleanup_stdio+0x1e>
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 fe2b 	bl	800cad8 <_fflush_r>
 800ae82:	68e1      	ldr	r1, [r4, #12]
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <cleanup_stdio+0x3c>)
 800ae86:	4299      	cmp	r1, r3
 800ae88:	d004      	beq.n	800ae94 <cleanup_stdio+0x30>
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae90:	f001 be22 	b.w	800cad8 <_fflush_r>
 800ae94:	bd10      	pop	{r4, pc}
 800ae96:	bf00      	nop
 800ae98:	200004a8 	.word	0x200004a8
 800ae9c:	20000510 	.word	0x20000510
 800aea0:	20000578 	.word	0x20000578

0800aea4 <global_stdio_init.part.0>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <global_stdio_init.part.0+0x30>)
 800aea8:	4c0b      	ldr	r4, [pc, #44]	; (800aed8 <global_stdio_init.part.0+0x34>)
 800aeaa:	4a0c      	ldr	r2, [pc, #48]	; (800aedc <global_stdio_init.part.0+0x38>)
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2104      	movs	r1, #4
 800aeb4:	f7ff ff94 	bl	800ade0 <std>
 800aeb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aebc:	2201      	movs	r2, #1
 800aebe:	2109      	movs	r1, #9
 800aec0:	f7ff ff8e 	bl	800ade0 <std>
 800aec4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aec8:	2202      	movs	r2, #2
 800aeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aece:	2112      	movs	r1, #18
 800aed0:	f7ff bf86 	b.w	800ade0 <std>
 800aed4:	200005e0 	.word	0x200005e0
 800aed8:	200004a8 	.word	0x200004a8
 800aedc:	0800ae4d 	.word	0x0800ae4d

0800aee0 <__sfp_lock_acquire>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__sfp_lock_acquire+0x8>)
 800aee2:	f000 b920 	b.w	800b126 <__retarget_lock_acquire_recursive>
 800aee6:	bf00      	nop
 800aee8:	200005e9 	.word	0x200005e9

0800aeec <__sfp_lock_release>:
 800aeec:	4801      	ldr	r0, [pc, #4]	; (800aef4 <__sfp_lock_release+0x8>)
 800aeee:	f000 b91b 	b.w	800b128 <__retarget_lock_release_recursive>
 800aef2:	bf00      	nop
 800aef4:	200005e9 	.word	0x200005e9

0800aef8 <__sinit>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	4604      	mov	r4, r0
 800aefc:	f7ff fff0 	bl	800aee0 <__sfp_lock_acquire>
 800af00:	6a23      	ldr	r3, [r4, #32]
 800af02:	b11b      	cbz	r3, 800af0c <__sinit+0x14>
 800af04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af08:	f7ff bff0 	b.w	800aeec <__sfp_lock_release>
 800af0c:	4b04      	ldr	r3, [pc, #16]	; (800af20 <__sinit+0x28>)
 800af0e:	6223      	str	r3, [r4, #32]
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <__sinit+0x2c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1f5      	bne.n	800af04 <__sinit+0xc>
 800af18:	f7ff ffc4 	bl	800aea4 <global_stdio_init.part.0>
 800af1c:	e7f2      	b.n	800af04 <__sinit+0xc>
 800af1e:	bf00      	nop
 800af20:	0800ae65 	.word	0x0800ae65
 800af24:	200005e0 	.word	0x200005e0

0800af28 <_fwalk_sglue>:
 800af28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af2c:	4607      	mov	r7, r0
 800af2e:	4688      	mov	r8, r1
 800af30:	4614      	mov	r4, r2
 800af32:	2600      	movs	r6, #0
 800af34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af38:	f1b9 0901 	subs.w	r9, r9, #1
 800af3c:	d505      	bpl.n	800af4a <_fwalk_sglue+0x22>
 800af3e:	6824      	ldr	r4, [r4, #0]
 800af40:	2c00      	cmp	r4, #0
 800af42:	d1f7      	bne.n	800af34 <_fwalk_sglue+0xc>
 800af44:	4630      	mov	r0, r6
 800af46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d907      	bls.n	800af60 <_fwalk_sglue+0x38>
 800af50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af54:	3301      	adds	r3, #1
 800af56:	d003      	beq.n	800af60 <_fwalk_sglue+0x38>
 800af58:	4629      	mov	r1, r5
 800af5a:	4638      	mov	r0, r7
 800af5c:	47c0      	blx	r8
 800af5e:	4306      	orrs	r6, r0
 800af60:	3568      	adds	r5, #104	; 0x68
 800af62:	e7e9      	b.n	800af38 <_fwalk_sglue+0x10>

0800af64 <siprintf>:
 800af64:	b40e      	push	{r1, r2, r3}
 800af66:	b500      	push	{lr}
 800af68:	b09c      	sub	sp, #112	; 0x70
 800af6a:	ab1d      	add	r3, sp, #116	; 0x74
 800af6c:	9002      	str	r0, [sp, #8]
 800af6e:	9006      	str	r0, [sp, #24]
 800af70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af74:	4809      	ldr	r0, [pc, #36]	; (800af9c <siprintf+0x38>)
 800af76:	9107      	str	r1, [sp, #28]
 800af78:	9104      	str	r1, [sp, #16]
 800af7a:	4909      	ldr	r1, [pc, #36]	; (800afa0 <siprintf+0x3c>)
 800af7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af80:	9105      	str	r1, [sp, #20]
 800af82:	6800      	ldr	r0, [r0, #0]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	a902      	add	r1, sp, #8
 800af88:	f001 fc22 	bl	800c7d0 <_svfiprintf_r>
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	b01c      	add	sp, #112	; 0x70
 800af94:	f85d eb04 	ldr.w	lr, [sp], #4
 800af98:	b003      	add	sp, #12
 800af9a:	4770      	bx	lr
 800af9c:	20000138 	.word	0x20000138
 800afa0:	ffff0208 	.word	0xffff0208

0800afa4 <__sread>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	460c      	mov	r4, r1
 800afa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afac:	f000 f86c 	bl	800b088 <_read_r>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	bfab      	itete	ge
 800afb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afb6:	89a3      	ldrhlt	r3, [r4, #12]
 800afb8:	181b      	addge	r3, r3, r0
 800afba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afbe:	bfac      	ite	ge
 800afc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800afc2:	81a3      	strhlt	r3, [r4, #12]
 800afc4:	bd10      	pop	{r4, pc}

0800afc6 <__swrite>:
 800afc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afca:	461f      	mov	r7, r3
 800afcc:	898b      	ldrh	r3, [r1, #12]
 800afce:	05db      	lsls	r3, r3, #23
 800afd0:	4605      	mov	r5, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	4616      	mov	r6, r2
 800afd6:	d505      	bpl.n	800afe4 <__swrite+0x1e>
 800afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afdc:	2302      	movs	r3, #2
 800afde:	2200      	movs	r2, #0
 800afe0:	f000 f840 	bl	800b064 <_lseek_r>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	4632      	mov	r2, r6
 800aff2:	463b      	mov	r3, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800affa:	f000 b857 	b.w	800b0ac <_write_r>

0800affe <__sseek>:
 800affe:	b510      	push	{r4, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b006:	f000 f82d 	bl	800b064 <_lseek_r>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	bf15      	itete	ne
 800b010:	6560      	strne	r0, [r4, #84]	; 0x54
 800b012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b01a:	81a3      	strheq	r3, [r4, #12]
 800b01c:	bf18      	it	ne
 800b01e:	81a3      	strhne	r3, [r4, #12]
 800b020:	bd10      	pop	{r4, pc}

0800b022 <__sclose>:
 800b022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b026:	f000 b80d 	b.w	800b044 <_close_r>

0800b02a <memset>:
 800b02a:	4402      	add	r2, r0
 800b02c:	4603      	mov	r3, r0
 800b02e:	4293      	cmp	r3, r2
 800b030:	d100      	bne.n	800b034 <memset+0xa>
 800b032:	4770      	bx	lr
 800b034:	f803 1b01 	strb.w	r1, [r3], #1
 800b038:	e7f9      	b.n	800b02e <memset+0x4>
	...

0800b03c <_localeconv_r>:
 800b03c:	4800      	ldr	r0, [pc, #0]	; (800b040 <_localeconv_r+0x4>)
 800b03e:	4770      	bx	lr
 800b040:	2000022c 	.word	0x2000022c

0800b044 <_close_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4d06      	ldr	r5, [pc, #24]	; (800b060 <_close_r+0x1c>)
 800b048:	2300      	movs	r3, #0
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	602b      	str	r3, [r5, #0]
 800b050:	f7f6 fe4f 	bl	8001cf2 <_close>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_close_r+0x1a>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_close_r+0x1a>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	200005e4 	.word	0x200005e4

0800b064 <_lseek_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4d07      	ldr	r5, [pc, #28]	; (800b084 <_lseek_r+0x20>)
 800b068:	4604      	mov	r4, r0
 800b06a:	4608      	mov	r0, r1
 800b06c:	4611      	mov	r1, r2
 800b06e:	2200      	movs	r2, #0
 800b070:	602a      	str	r2, [r5, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	f7f6 fe64 	bl	8001d40 <_lseek>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_lseek_r+0x1e>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_lseek_r+0x1e>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	200005e4 	.word	0x200005e4

0800b088 <_read_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	; (800b0a8 <_read_r+0x20>)
 800b08c:	4604      	mov	r4, r0
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	2200      	movs	r2, #0
 800b094:	602a      	str	r2, [r5, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	f7f6 fdf2 	bl	8001c80 <_read>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d102      	bne.n	800b0a6 <_read_r+0x1e>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	b103      	cbz	r3, 800b0a6 <_read_r+0x1e>
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	200005e4 	.word	0x200005e4

0800b0ac <_write_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d07      	ldr	r5, [pc, #28]	; (800b0cc <_write_r+0x20>)
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	4608      	mov	r0, r1
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	602a      	str	r2, [r5, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f7f6 fdfd 	bl	8001cba <_write>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_write_r+0x1e>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_write_r+0x1e>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	200005e4 	.word	0x200005e4

0800b0d0 <__errno>:
 800b0d0:	4b01      	ldr	r3, [pc, #4]	; (800b0d8 <__errno+0x8>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	20000138 	.word	0x20000138

0800b0dc <__libc_init_array>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	4d0d      	ldr	r5, [pc, #52]	; (800b114 <__libc_init_array+0x38>)
 800b0e0:	4c0d      	ldr	r4, [pc, #52]	; (800b118 <__libc_init_array+0x3c>)
 800b0e2:	1b64      	subs	r4, r4, r5
 800b0e4:	10a4      	asrs	r4, r4, #2
 800b0e6:	2600      	movs	r6, #0
 800b0e8:	42a6      	cmp	r6, r4
 800b0ea:	d109      	bne.n	800b100 <__libc_init_array+0x24>
 800b0ec:	4d0b      	ldr	r5, [pc, #44]	; (800b11c <__libc_init_array+0x40>)
 800b0ee:	4c0c      	ldr	r4, [pc, #48]	; (800b120 <__libc_init_array+0x44>)
 800b0f0:	f002 fa9c 	bl	800d62c <_init>
 800b0f4:	1b64      	subs	r4, r4, r5
 800b0f6:	10a4      	asrs	r4, r4, #2
 800b0f8:	2600      	movs	r6, #0
 800b0fa:	42a6      	cmp	r6, r4
 800b0fc:	d105      	bne.n	800b10a <__libc_init_array+0x2e>
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}
 800b100:	f855 3b04 	ldr.w	r3, [r5], #4
 800b104:	4798      	blx	r3
 800b106:	3601      	adds	r6, #1
 800b108:	e7ee      	b.n	800b0e8 <__libc_init_array+0xc>
 800b10a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b10e:	4798      	blx	r3
 800b110:	3601      	adds	r6, #1
 800b112:	e7f2      	b.n	800b0fa <__libc_init_array+0x1e>
 800b114:	0800da58 	.word	0x0800da58
 800b118:	0800da58 	.word	0x0800da58
 800b11c:	0800da58 	.word	0x0800da58
 800b120:	0800da5c 	.word	0x0800da5c

0800b124 <__retarget_lock_init_recursive>:
 800b124:	4770      	bx	lr

0800b126 <__retarget_lock_acquire_recursive>:
 800b126:	4770      	bx	lr

0800b128 <__retarget_lock_release_recursive>:
 800b128:	4770      	bx	lr

0800b12a <quorem>:
 800b12a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12e:	6903      	ldr	r3, [r0, #16]
 800b130:	690c      	ldr	r4, [r1, #16]
 800b132:	42a3      	cmp	r3, r4
 800b134:	4607      	mov	r7, r0
 800b136:	db7e      	blt.n	800b236 <quorem+0x10c>
 800b138:	3c01      	subs	r4, #1
 800b13a:	f101 0814 	add.w	r8, r1, #20
 800b13e:	f100 0514 	add.w	r5, r0, #20
 800b142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b14c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b150:	3301      	adds	r3, #1
 800b152:	429a      	cmp	r2, r3
 800b154:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b15c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b160:	d331      	bcc.n	800b1c6 <quorem+0x9c>
 800b162:	f04f 0e00 	mov.w	lr, #0
 800b166:	4640      	mov	r0, r8
 800b168:	46ac      	mov	ip, r5
 800b16a:	46f2      	mov	sl, lr
 800b16c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b170:	b293      	uxth	r3, r2
 800b172:	fb06 e303 	mla	r3, r6, r3, lr
 800b176:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b17a:	0c1a      	lsrs	r2, r3, #16
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	ebaa 0303 	sub.w	r3, sl, r3
 800b182:	f8dc a000 	ldr.w	sl, [ip]
 800b186:	fa13 f38a 	uxtah	r3, r3, sl
 800b18a:	fb06 220e 	mla	r2, r6, lr, r2
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b196:	b292      	uxth	r2, r2
 800b198:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b19c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1a4:	4581      	cmp	r9, r0
 800b1a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1aa:	f84c 3b04 	str.w	r3, [ip], #4
 800b1ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1b2:	d2db      	bcs.n	800b16c <quorem+0x42>
 800b1b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1b8:	b92b      	cbnz	r3, 800b1c6 <quorem+0x9c>
 800b1ba:	9b01      	ldr	r3, [sp, #4]
 800b1bc:	3b04      	subs	r3, #4
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	d32c      	bcc.n	800b21e <quorem+0xf4>
 800b1c4:	613c      	str	r4, [r7, #16]
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f001 f9a8 	bl	800c51c <__mcmp>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	db22      	blt.n	800b216 <quorem+0xec>
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1da:	f8d1 c000 	ldr.w	ip, [r1]
 800b1de:	b293      	uxth	r3, r2
 800b1e0:	1ac3      	subs	r3, r0, r3
 800b1e2:	0c12      	lsrs	r2, r2, #16
 800b1e4:	fa13 f38c 	uxtah	r3, r3, ip
 800b1e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1f6:	45c1      	cmp	r9, r8
 800b1f8:	f841 3b04 	str.w	r3, [r1], #4
 800b1fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b200:	d2e9      	bcs.n	800b1d6 <quorem+0xac>
 800b202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b20a:	b922      	cbnz	r2, 800b216 <quorem+0xec>
 800b20c:	3b04      	subs	r3, #4
 800b20e:	429d      	cmp	r5, r3
 800b210:	461a      	mov	r2, r3
 800b212:	d30a      	bcc.n	800b22a <quorem+0x100>
 800b214:	613c      	str	r4, [r7, #16]
 800b216:	4630      	mov	r0, r6
 800b218:	b003      	add	sp, #12
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	3b04      	subs	r3, #4
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1ce      	bne.n	800b1c4 <quorem+0x9a>
 800b226:	3c01      	subs	r4, #1
 800b228:	e7c9      	b.n	800b1be <quorem+0x94>
 800b22a:	6812      	ldr	r2, [r2, #0]
 800b22c:	3b04      	subs	r3, #4
 800b22e:	2a00      	cmp	r2, #0
 800b230:	d1f0      	bne.n	800b214 <quorem+0xea>
 800b232:	3c01      	subs	r4, #1
 800b234:	e7eb      	b.n	800b20e <quorem+0xe4>
 800b236:	2000      	movs	r0, #0
 800b238:	e7ee      	b.n	800b218 <quorem+0xee>
 800b23a:	0000      	movs	r0, r0
 800b23c:	0000      	movs	r0, r0
	...

0800b240 <_dtoa_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	ed2d 8b04 	vpush	{d8-d9}
 800b248:	69c5      	ldr	r5, [r0, #28]
 800b24a:	b093      	sub	sp, #76	; 0x4c
 800b24c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b250:	ec57 6b10 	vmov	r6, r7, d0
 800b254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b258:	9107      	str	r1, [sp, #28]
 800b25a:	4604      	mov	r4, r0
 800b25c:	920a      	str	r2, [sp, #40]	; 0x28
 800b25e:	930d      	str	r3, [sp, #52]	; 0x34
 800b260:	b975      	cbnz	r5, 800b280 <_dtoa_r+0x40>
 800b262:	2010      	movs	r0, #16
 800b264:	f000 fe2a 	bl	800bebc <malloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	61e0      	str	r0, [r4, #28]
 800b26c:	b920      	cbnz	r0, 800b278 <_dtoa_r+0x38>
 800b26e:	4bae      	ldr	r3, [pc, #696]	; (800b528 <_dtoa_r+0x2e8>)
 800b270:	21ef      	movs	r1, #239	; 0xef
 800b272:	48ae      	ldr	r0, [pc, #696]	; (800b52c <_dtoa_r+0x2ec>)
 800b274:	f001 fc90 	bl	800cb98 <__assert_func>
 800b278:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b27c:	6005      	str	r5, [r0, #0]
 800b27e:	60c5      	str	r5, [r0, #12]
 800b280:	69e3      	ldr	r3, [r4, #28]
 800b282:	6819      	ldr	r1, [r3, #0]
 800b284:	b151      	cbz	r1, 800b29c <_dtoa_r+0x5c>
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	604a      	str	r2, [r1, #4]
 800b28a:	2301      	movs	r3, #1
 800b28c:	4093      	lsls	r3, r2
 800b28e:	608b      	str	r3, [r1, #8]
 800b290:	4620      	mov	r0, r4
 800b292:	f000 ff07 	bl	800c0a4 <_Bfree>
 800b296:	69e3      	ldr	r3, [r4, #28]
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	1e3b      	subs	r3, r7, #0
 800b29e:	bfbb      	ittet	lt
 800b2a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b2a4:	9303      	strlt	r3, [sp, #12]
 800b2a6:	2300      	movge	r3, #0
 800b2a8:	2201      	movlt	r2, #1
 800b2aa:	bfac      	ite	ge
 800b2ac:	f8c8 3000 	strge.w	r3, [r8]
 800b2b0:	f8c8 2000 	strlt.w	r2, [r8]
 800b2b4:	4b9e      	ldr	r3, [pc, #632]	; (800b530 <_dtoa_r+0x2f0>)
 800b2b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2ba:	ea33 0308 	bics.w	r3, r3, r8
 800b2be:	d11b      	bne.n	800b2f8 <_dtoa_r+0xb8>
 800b2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b2cc:	4333      	orrs	r3, r6
 800b2ce:	f000 8593 	beq.w	800bdf8 <_dtoa_r+0xbb8>
 800b2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2d4:	b963      	cbnz	r3, 800b2f0 <_dtoa_r+0xb0>
 800b2d6:	4b97      	ldr	r3, [pc, #604]	; (800b534 <_dtoa_r+0x2f4>)
 800b2d8:	e027      	b.n	800b32a <_dtoa_r+0xea>
 800b2da:	4b97      	ldr	r3, [pc, #604]	; (800b538 <_dtoa_r+0x2f8>)
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	9800      	ldr	r0, [sp, #0]
 800b2e6:	b013      	add	sp, #76	; 0x4c
 800b2e8:	ecbd 8b04 	vpop	{d8-d9}
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	4b90      	ldr	r3, [pc, #576]	; (800b534 <_dtoa_r+0x2f4>)
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	3303      	adds	r3, #3
 800b2f6:	e7f3      	b.n	800b2e0 <_dtoa_r+0xa0>
 800b2f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	ec51 0b17 	vmov	r0, r1, d7
 800b302:	eeb0 8a47 	vmov.f32	s16, s14
 800b306:	eef0 8a67 	vmov.f32	s17, s15
 800b30a:	2300      	movs	r3, #0
 800b30c:	f7f5 fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b310:	4681      	mov	r9, r0
 800b312:	b160      	cbz	r0, 800b32e <_dtoa_r+0xee>
 800b314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b316:	2301      	movs	r3, #1
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 8568 	beq.w	800bdf2 <_dtoa_r+0xbb2>
 800b322:	4b86      	ldr	r3, [pc, #536]	; (800b53c <_dtoa_r+0x2fc>)
 800b324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	3b01      	subs	r3, #1
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	e7da      	b.n	800b2e4 <_dtoa_r+0xa4>
 800b32e:	aa10      	add	r2, sp, #64	; 0x40
 800b330:	a911      	add	r1, sp, #68	; 0x44
 800b332:	4620      	mov	r0, r4
 800b334:	eeb0 0a48 	vmov.f32	s0, s16
 800b338:	eef0 0a68 	vmov.f32	s1, s17
 800b33c:	f001 f994 	bl	800c668 <__d2b>
 800b340:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b344:	4682      	mov	sl, r0
 800b346:	2d00      	cmp	r5, #0
 800b348:	d07f      	beq.n	800b44a <_dtoa_r+0x20a>
 800b34a:	ee18 3a90 	vmov	r3, s17
 800b34e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b352:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b356:	ec51 0b18 	vmov	r0, r1, d8
 800b35a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b35e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b362:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b366:	4619      	mov	r1, r3
 800b368:	2200      	movs	r2, #0
 800b36a:	4b75      	ldr	r3, [pc, #468]	; (800b540 <_dtoa_r+0x300>)
 800b36c:	f7f4 ff94 	bl	8000298 <__aeabi_dsub>
 800b370:	a367      	add	r3, pc, #412	; (adr r3, 800b510 <_dtoa_r+0x2d0>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	f7f5 f947 	bl	8000608 <__aeabi_dmul>
 800b37a:	a367      	add	r3, pc, #412	; (adr r3, 800b518 <_dtoa_r+0x2d8>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f4 ff8c 	bl	800029c <__adddf3>
 800b384:	4606      	mov	r6, r0
 800b386:	4628      	mov	r0, r5
 800b388:	460f      	mov	r7, r1
 800b38a:	f7f5 f8d3 	bl	8000534 <__aeabi_i2d>
 800b38e:	a364      	add	r3, pc, #400	; (adr r3, 800b520 <_dtoa_r+0x2e0>)
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f5 f938 	bl	8000608 <__aeabi_dmul>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4630      	mov	r0, r6
 800b39e:	4639      	mov	r1, r7
 800b3a0:	f7f4 ff7c 	bl	800029c <__adddf3>
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	f7f5 fbde 	bl	8000b68 <__aeabi_d2iz>
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4683      	mov	fp, r0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f5 fb99 	bl	8000aec <__aeabi_dcmplt>
 800b3ba:	b148      	cbz	r0, 800b3d0 <_dtoa_r+0x190>
 800b3bc:	4658      	mov	r0, fp
 800b3be:	f7f5 f8b9 	bl	8000534 <__aeabi_i2d>
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	f7f5 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ca:	b908      	cbnz	r0, 800b3d0 <_dtoa_r+0x190>
 800b3cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3d0:	f1bb 0f16 	cmp.w	fp, #22
 800b3d4:	d857      	bhi.n	800b486 <_dtoa_r+0x246>
 800b3d6:	4b5b      	ldr	r3, [pc, #364]	; (800b544 <_dtoa_r+0x304>)
 800b3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	ec51 0b18 	vmov	r0, r1, d8
 800b3e4:	f7f5 fb82 	bl	8000aec <__aeabi_dcmplt>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d04e      	beq.n	800b48a <_dtoa_r+0x24a>
 800b3ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3f6:	1b5b      	subs	r3, r3, r5
 800b3f8:	1e5a      	subs	r2, r3, #1
 800b3fa:	bf45      	ittet	mi
 800b3fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b400:	9305      	strmi	r3, [sp, #20]
 800b402:	2300      	movpl	r3, #0
 800b404:	2300      	movmi	r3, #0
 800b406:	9206      	str	r2, [sp, #24]
 800b408:	bf54      	ite	pl
 800b40a:	9305      	strpl	r3, [sp, #20]
 800b40c:	9306      	strmi	r3, [sp, #24]
 800b40e:	f1bb 0f00 	cmp.w	fp, #0
 800b412:	db3c      	blt.n	800b48e <_dtoa_r+0x24e>
 800b414:	9b06      	ldr	r3, [sp, #24]
 800b416:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b41a:	445b      	add	r3, fp
 800b41c:	9306      	str	r3, [sp, #24]
 800b41e:	2300      	movs	r3, #0
 800b420:	9308      	str	r3, [sp, #32]
 800b422:	9b07      	ldr	r3, [sp, #28]
 800b424:	2b09      	cmp	r3, #9
 800b426:	d868      	bhi.n	800b4fa <_dtoa_r+0x2ba>
 800b428:	2b05      	cmp	r3, #5
 800b42a:	bfc4      	itt	gt
 800b42c:	3b04      	subgt	r3, #4
 800b42e:	9307      	strgt	r3, [sp, #28]
 800b430:	9b07      	ldr	r3, [sp, #28]
 800b432:	f1a3 0302 	sub.w	r3, r3, #2
 800b436:	bfcc      	ite	gt
 800b438:	2500      	movgt	r5, #0
 800b43a:	2501      	movle	r5, #1
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	f200 8085 	bhi.w	800b54c <_dtoa_r+0x30c>
 800b442:	e8df f003 	tbb	[pc, r3]
 800b446:	3b2e      	.short	0x3b2e
 800b448:	5839      	.short	0x5839
 800b44a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b44e:	441d      	add	r5, r3
 800b450:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b454:	2b20      	cmp	r3, #32
 800b456:	bfc1      	itttt	gt
 800b458:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b45c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b460:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b464:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b468:	bfd6      	itet	le
 800b46a:	f1c3 0320 	rsble	r3, r3, #32
 800b46e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b472:	fa06 f003 	lslle.w	r0, r6, r3
 800b476:	f7f5 f84d 	bl	8000514 <__aeabi_ui2d>
 800b47a:	2201      	movs	r2, #1
 800b47c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b480:	3d01      	subs	r5, #1
 800b482:	920e      	str	r2, [sp, #56]	; 0x38
 800b484:	e76f      	b.n	800b366 <_dtoa_r+0x126>
 800b486:	2301      	movs	r3, #1
 800b488:	e7b3      	b.n	800b3f2 <_dtoa_r+0x1b2>
 800b48a:	900c      	str	r0, [sp, #48]	; 0x30
 800b48c:	e7b2      	b.n	800b3f4 <_dtoa_r+0x1b4>
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	eba3 030b 	sub.w	r3, r3, fp
 800b494:	9305      	str	r3, [sp, #20]
 800b496:	f1cb 0300 	rsb	r3, fp, #0
 800b49a:	9308      	str	r3, [sp, #32]
 800b49c:	2300      	movs	r3, #0
 800b49e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a0:	e7bf      	b.n	800b422 <_dtoa_r+0x1e2>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dc52      	bgt.n	800b552 <_dtoa_r+0x312>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4b6:	e00b      	b.n	800b4d0 <_dtoa_r+0x290>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e7f3      	b.n	800b4a4 <_dtoa_r+0x264>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c2:	445b      	add	r3, fp
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	bfb8      	it	lt
 800b4ce:	2301      	movlt	r3, #1
 800b4d0:	69e0      	ldr	r0, [r4, #28]
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	2204      	movs	r2, #4
 800b4d6:	f102 0614 	add.w	r6, r2, #20
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	d93d      	bls.n	800b55a <_dtoa_r+0x31a>
 800b4de:	6041      	str	r1, [r0, #4]
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fd9f 	bl	800c024 <_Balloc>
 800b4e6:	9000      	str	r0, [sp, #0]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d139      	bne.n	800b560 <_dtoa_r+0x320>
 800b4ec:	4b16      	ldr	r3, [pc, #88]	; (800b548 <_dtoa_r+0x308>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	f240 11af 	movw	r1, #431	; 0x1af
 800b4f4:	e6bd      	b.n	800b272 <_dtoa_r+0x32>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e7e1      	b.n	800b4be <_dtoa_r+0x27e>
 800b4fa:	2501      	movs	r5, #1
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	9509      	str	r5, [sp, #36]	; 0x24
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	2200      	movs	r2, #0
 800b50c:	2312      	movs	r3, #18
 800b50e:	e7d1      	b.n	800b4b4 <_dtoa_r+0x274>
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0800d6ed 	.word	0x0800d6ed
 800b52c:	0800d704 	.word	0x0800d704
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0800d6e9 	.word	0x0800d6e9
 800b538:	0800d6e0 	.word	0x0800d6e0
 800b53c:	0800d6bd 	.word	0x0800d6bd
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0800d7f0 	.word	0x0800d7f0
 800b548:	0800d75c 	.word	0x0800d75c
 800b54c:	2301      	movs	r3, #1
 800b54e:	9309      	str	r3, [sp, #36]	; 0x24
 800b550:	e7d7      	b.n	800b502 <_dtoa_r+0x2c2>
 800b552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	e7ba      	b.n	800b4d0 <_dtoa_r+0x290>
 800b55a:	3101      	adds	r1, #1
 800b55c:	0052      	lsls	r2, r2, #1
 800b55e:	e7ba      	b.n	800b4d6 <_dtoa_r+0x296>
 800b560:	69e3      	ldr	r3, [r4, #28]
 800b562:	9a00      	ldr	r2, [sp, #0]
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	2b0e      	cmp	r3, #14
 800b56a:	f200 80a8 	bhi.w	800b6be <_dtoa_r+0x47e>
 800b56e:	2d00      	cmp	r5, #0
 800b570:	f000 80a5 	beq.w	800b6be <_dtoa_r+0x47e>
 800b574:	f1bb 0f00 	cmp.w	fp, #0
 800b578:	dd38      	ble.n	800b5ec <_dtoa_r+0x3ac>
 800b57a:	4bc0      	ldr	r3, [pc, #768]	; (800b87c <_dtoa_r+0x63c>)
 800b57c:	f00b 020f 	and.w	r2, fp, #15
 800b580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b584:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b588:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b58c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b590:	d019      	beq.n	800b5c6 <_dtoa_r+0x386>
 800b592:	4bbb      	ldr	r3, [pc, #748]	; (800b880 <_dtoa_r+0x640>)
 800b594:	ec51 0b18 	vmov	r0, r1, d8
 800b598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b59c:	f7f5 f95e 	bl	800085c <__aeabi_ddiv>
 800b5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5a4:	f008 080f 	and.w	r8, r8, #15
 800b5a8:	2503      	movs	r5, #3
 800b5aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b880 <_dtoa_r+0x640>
 800b5ae:	f1b8 0f00 	cmp.w	r8, #0
 800b5b2:	d10a      	bne.n	800b5ca <_dtoa_r+0x38a>
 800b5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	f7f5 f94e 	bl	800085c <__aeabi_ddiv>
 800b5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5c4:	e02b      	b.n	800b61e <_dtoa_r+0x3de>
 800b5c6:	2502      	movs	r5, #2
 800b5c8:	e7ef      	b.n	800b5aa <_dtoa_r+0x36a>
 800b5ca:	f018 0f01 	tst.w	r8, #1
 800b5ce:	d008      	beq.n	800b5e2 <_dtoa_r+0x3a2>
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5d8:	f7f5 f816 	bl	8000608 <__aeabi_dmul>
 800b5dc:	3501      	adds	r5, #1
 800b5de:	4606      	mov	r6, r0
 800b5e0:	460f      	mov	r7, r1
 800b5e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5e6:	f109 0908 	add.w	r9, r9, #8
 800b5ea:	e7e0      	b.n	800b5ae <_dtoa_r+0x36e>
 800b5ec:	f000 809f 	beq.w	800b72e <_dtoa_r+0x4ee>
 800b5f0:	f1cb 0600 	rsb	r6, fp, #0
 800b5f4:	4ba1      	ldr	r3, [pc, #644]	; (800b87c <_dtoa_r+0x63c>)
 800b5f6:	4fa2      	ldr	r7, [pc, #648]	; (800b880 <_dtoa_r+0x640>)
 800b5f8:	f006 020f 	and.w	r2, r6, #15
 800b5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	ec51 0b18 	vmov	r0, r1, d8
 800b608:	f7f4 fffe 	bl	8000608 <__aeabi_dmul>
 800b60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b610:	1136      	asrs	r6, r6, #4
 800b612:	2300      	movs	r3, #0
 800b614:	2502      	movs	r5, #2
 800b616:	2e00      	cmp	r6, #0
 800b618:	d17e      	bne.n	800b718 <_dtoa_r+0x4d8>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1d0      	bne.n	800b5c0 <_dtoa_r+0x380>
 800b61e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b620:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8084 	beq.w	800b732 <_dtoa_r+0x4f2>
 800b62a:	4b96      	ldr	r3, [pc, #600]	; (800b884 <_dtoa_r+0x644>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	f7f5 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	d07b      	beq.n	800b732 <_dtoa_r+0x4f2>
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d078      	beq.n	800b732 <_dtoa_r+0x4f2>
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	dd39      	ble.n	800b6ba <_dtoa_r+0x47a>
 800b646:	4b90      	ldr	r3, [pc, #576]	; (800b888 <_dtoa_r+0x648>)
 800b648:	2200      	movs	r2, #0
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 ffdb 	bl	8000608 <__aeabi_dmul>
 800b652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b656:	9e01      	ldr	r6, [sp, #4]
 800b658:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b65c:	3501      	adds	r5, #1
 800b65e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b662:	4628      	mov	r0, r5
 800b664:	f7f4 ff66 	bl	8000534 <__aeabi_i2d>
 800b668:	4642      	mov	r2, r8
 800b66a:	464b      	mov	r3, r9
 800b66c:	f7f4 ffcc 	bl	8000608 <__aeabi_dmul>
 800b670:	4b86      	ldr	r3, [pc, #536]	; (800b88c <_dtoa_r+0x64c>)
 800b672:	2200      	movs	r2, #0
 800b674:	f7f4 fe12 	bl	800029c <__adddf3>
 800b678:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	2e00      	cmp	r6, #0
 800b684:	d158      	bne.n	800b738 <_dtoa_r+0x4f8>
 800b686:	4b82      	ldr	r3, [pc, #520]	; (800b890 <_dtoa_r+0x650>)
 800b688:	2200      	movs	r2, #0
 800b68a:	4640      	mov	r0, r8
 800b68c:	4649      	mov	r1, r9
 800b68e:	f7f4 fe03 	bl	8000298 <__aeabi_dsub>
 800b692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b696:	4680      	mov	r8, r0
 800b698:	4689      	mov	r9, r1
 800b69a:	f7f5 fa45 	bl	8000b28 <__aeabi_dcmpgt>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f040 8296 	bne.w	800bbd0 <_dtoa_r+0x990>
 800b6a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f5 fa1c 	bl	8000aec <__aeabi_dcmplt>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	f040 8289 	bne.w	800bbcc <_dtoa_r+0x98c>
 800b6ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f2c0 814e 	blt.w	800b962 <_dtoa_r+0x722>
 800b6c6:	f1bb 0f0e 	cmp.w	fp, #14
 800b6ca:	f300 814a 	bgt.w	800b962 <_dtoa_r+0x722>
 800b6ce:	4b6b      	ldr	r3, [pc, #428]	; (800b87c <_dtoa_r+0x63c>)
 800b6d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f280 80dc 	bge.w	800b898 <_dtoa_r+0x658>
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f300 80d8 	bgt.w	800b898 <_dtoa_r+0x658>
 800b6e8:	f040 826f 	bne.w	800bbca <_dtoa_r+0x98a>
 800b6ec:	4b68      	ldr	r3, [pc, #416]	; (800b890 <_dtoa_r+0x650>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f4 ff88 	bl	8000608 <__aeabi_dmul>
 800b6f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6fc:	f7f5 fa0a 	bl	8000b14 <__aeabi_dcmpge>
 800b700:	9e04      	ldr	r6, [sp, #16]
 800b702:	4637      	mov	r7, r6
 800b704:	2800      	cmp	r0, #0
 800b706:	f040 8245 	bne.w	800bb94 <_dtoa_r+0x954>
 800b70a:	9d00      	ldr	r5, [sp, #0]
 800b70c:	2331      	movs	r3, #49	; 0x31
 800b70e:	f805 3b01 	strb.w	r3, [r5], #1
 800b712:	f10b 0b01 	add.w	fp, fp, #1
 800b716:	e241      	b.n	800bb9c <_dtoa_r+0x95c>
 800b718:	07f2      	lsls	r2, r6, #31
 800b71a:	d505      	bpl.n	800b728 <_dtoa_r+0x4e8>
 800b71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b720:	f7f4 ff72 	bl	8000608 <__aeabi_dmul>
 800b724:	3501      	adds	r5, #1
 800b726:	2301      	movs	r3, #1
 800b728:	1076      	asrs	r6, r6, #1
 800b72a:	3708      	adds	r7, #8
 800b72c:	e773      	b.n	800b616 <_dtoa_r+0x3d6>
 800b72e:	2502      	movs	r5, #2
 800b730:	e775      	b.n	800b61e <_dtoa_r+0x3de>
 800b732:	9e04      	ldr	r6, [sp, #16]
 800b734:	465f      	mov	r7, fp
 800b736:	e792      	b.n	800b65e <_dtoa_r+0x41e>
 800b738:	9900      	ldr	r1, [sp, #0]
 800b73a:	4b50      	ldr	r3, [pc, #320]	; (800b87c <_dtoa_r+0x63c>)
 800b73c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b740:	4431      	add	r1, r6
 800b742:	9102      	str	r1, [sp, #8]
 800b744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b746:	eeb0 9a47 	vmov.f32	s18, s14
 800b74a:	eef0 9a67 	vmov.f32	s19, s15
 800b74e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b756:	2900      	cmp	r1, #0
 800b758:	d044      	beq.n	800b7e4 <_dtoa_r+0x5a4>
 800b75a:	494e      	ldr	r1, [pc, #312]	; (800b894 <_dtoa_r+0x654>)
 800b75c:	2000      	movs	r0, #0
 800b75e:	f7f5 f87d 	bl	800085c <__aeabi_ddiv>
 800b762:	ec53 2b19 	vmov	r2, r3, d9
 800b766:	f7f4 fd97 	bl	8000298 <__aeabi_dsub>
 800b76a:	9d00      	ldr	r5, [sp, #0]
 800b76c:	ec41 0b19 	vmov	d9, r0, r1
 800b770:	4649      	mov	r1, r9
 800b772:	4640      	mov	r0, r8
 800b774:	f7f5 f9f8 	bl	8000b68 <__aeabi_d2iz>
 800b778:	4606      	mov	r6, r0
 800b77a:	f7f4 fedb 	bl	8000534 <__aeabi_i2d>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	f7f4 fd87 	bl	8000298 <__aeabi_dsub>
 800b78a:	3630      	adds	r6, #48	; 0x30
 800b78c:	f805 6b01 	strb.w	r6, [r5], #1
 800b790:	ec53 2b19 	vmov	r2, r3, d9
 800b794:	4680      	mov	r8, r0
 800b796:	4689      	mov	r9, r1
 800b798:	f7f5 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d164      	bne.n	800b86a <_dtoa_r+0x62a>
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	464b      	mov	r3, r9
 800b7a4:	4937      	ldr	r1, [pc, #220]	; (800b884 <_dtoa_r+0x644>)
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f7f4 fd76 	bl	8000298 <__aeabi_dsub>
 800b7ac:	ec53 2b19 	vmov	r2, r3, d9
 800b7b0:	f7f5 f99c 	bl	8000aec <__aeabi_dcmplt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f040 80b6 	bne.w	800b926 <_dtoa_r+0x6e6>
 800b7ba:	9b02      	ldr	r3, [sp, #8]
 800b7bc:	429d      	cmp	r5, r3
 800b7be:	f43f af7c 	beq.w	800b6ba <_dtoa_r+0x47a>
 800b7c2:	4b31      	ldr	r3, [pc, #196]	; (800b888 <_dtoa_r+0x648>)
 800b7c4:	ec51 0b19 	vmov	r0, r1, d9
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f7f4 ff1d 	bl	8000608 <__aeabi_dmul>
 800b7ce:	4b2e      	ldr	r3, [pc, #184]	; (800b888 <_dtoa_r+0x648>)
 800b7d0:	ec41 0b19 	vmov	d9, r0, r1
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 ff15 	bl	8000608 <__aeabi_dmul>
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4689      	mov	r9, r1
 800b7e2:	e7c5      	b.n	800b770 <_dtoa_r+0x530>
 800b7e4:	ec51 0b17 	vmov	r0, r1, d7
 800b7e8:	f7f4 ff0e 	bl	8000608 <__aeabi_dmul>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	9d00      	ldr	r5, [sp, #0]
 800b7f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7f2:	ec41 0b19 	vmov	d9, r0, r1
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	4640      	mov	r0, r8
 800b7fa:	f7f5 f9b5 	bl	8000b68 <__aeabi_d2iz>
 800b7fe:	4606      	mov	r6, r0
 800b800:	f7f4 fe98 	bl	8000534 <__aeabi_i2d>
 800b804:	3630      	adds	r6, #48	; 0x30
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4640      	mov	r0, r8
 800b80c:	4649      	mov	r1, r9
 800b80e:	f7f4 fd43 	bl	8000298 <__aeabi_dsub>
 800b812:	f805 6b01 	strb.w	r6, [r5], #1
 800b816:	9b02      	ldr	r3, [sp, #8]
 800b818:	429d      	cmp	r5, r3
 800b81a:	4680      	mov	r8, r0
 800b81c:	4689      	mov	r9, r1
 800b81e:	f04f 0200 	mov.w	r2, #0
 800b822:	d124      	bne.n	800b86e <_dtoa_r+0x62e>
 800b824:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <_dtoa_r+0x654>)
 800b826:	ec51 0b19 	vmov	r0, r1, d9
 800b82a:	f7f4 fd37 	bl	800029c <__adddf3>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f5 f977 	bl	8000b28 <__aeabi_dcmpgt>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d173      	bne.n	800b926 <_dtoa_r+0x6e6>
 800b83e:	ec53 2b19 	vmov	r2, r3, d9
 800b842:	4914      	ldr	r1, [pc, #80]	; (800b894 <_dtoa_r+0x654>)
 800b844:	2000      	movs	r0, #0
 800b846:	f7f4 fd27 	bl	8000298 <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f5 f94b 	bl	8000aec <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f af2f 	beq.w	800b6ba <_dtoa_r+0x47a>
 800b85c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b85e:	1e6b      	subs	r3, r5, #1
 800b860:	930f      	str	r3, [sp, #60]	; 0x3c
 800b862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b866:	2b30      	cmp	r3, #48	; 0x30
 800b868:	d0f8      	beq.n	800b85c <_dtoa_r+0x61c>
 800b86a:	46bb      	mov	fp, r7
 800b86c:	e04a      	b.n	800b904 <_dtoa_r+0x6c4>
 800b86e:	4b06      	ldr	r3, [pc, #24]	; (800b888 <_dtoa_r+0x648>)
 800b870:	f7f4 feca 	bl	8000608 <__aeabi_dmul>
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	e7bd      	b.n	800b7f6 <_dtoa_r+0x5b6>
 800b87a:	bf00      	nop
 800b87c:	0800d7f0 	.word	0x0800d7f0
 800b880:	0800d7c8 	.word	0x0800d7c8
 800b884:	3ff00000 	.word	0x3ff00000
 800b888:	40240000 	.word	0x40240000
 800b88c:	401c0000 	.word	0x401c0000
 800b890:	40140000 	.word	0x40140000
 800b894:	3fe00000 	.word	0x3fe00000
 800b898:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b89c:	9d00      	ldr	r5, [sp, #0]
 800b89e:	4642      	mov	r2, r8
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f4 ffd9 	bl	800085c <__aeabi_ddiv>
 800b8aa:	f7f5 f95d 	bl	8000b68 <__aeabi_d2iz>
 800b8ae:	9001      	str	r0, [sp, #4]
 800b8b0:	f7f4 fe40 	bl	8000534 <__aeabi_i2d>
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	464b      	mov	r3, r9
 800b8b8:	f7f4 fea6 	bl	8000608 <__aeabi_dmul>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	f7f4 fce8 	bl	8000298 <__aeabi_dsub>
 800b8c8:	9e01      	ldr	r6, [sp, #4]
 800b8ca:	9f04      	ldr	r7, [sp, #16]
 800b8cc:	3630      	adds	r6, #48	; 0x30
 800b8ce:	f805 6b01 	strb.w	r6, [r5], #1
 800b8d2:	9e00      	ldr	r6, [sp, #0]
 800b8d4:	1bae      	subs	r6, r5, r6
 800b8d6:	42b7      	cmp	r7, r6
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	d134      	bne.n	800b948 <_dtoa_r+0x708>
 800b8de:	f7f4 fcdd 	bl	800029c <__adddf3>
 800b8e2:	4642      	mov	r2, r8
 800b8e4:	464b      	mov	r3, r9
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	f7f5 f91d 	bl	8000b28 <__aeabi_dcmpgt>
 800b8ee:	b9c8      	cbnz	r0, 800b924 <_dtoa_r+0x6e4>
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	464b      	mov	r3, r9
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f5 f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8fc:	b110      	cbz	r0, 800b904 <_dtoa_r+0x6c4>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	07db      	lsls	r3, r3, #31
 800b902:	d40f      	bmi.n	800b924 <_dtoa_r+0x6e4>
 800b904:	4651      	mov	r1, sl
 800b906:	4620      	mov	r0, r4
 800b908:	f000 fbcc 	bl	800c0a4 <_Bfree>
 800b90c:	2300      	movs	r3, #0
 800b90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b910:	702b      	strb	r3, [r5, #0]
 800b912:	f10b 0301 	add.w	r3, fp, #1
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f43f ace2 	beq.w	800b2e4 <_dtoa_r+0xa4>
 800b920:	601d      	str	r5, [r3, #0]
 800b922:	e4df      	b.n	800b2e4 <_dtoa_r+0xa4>
 800b924:	465f      	mov	r7, fp
 800b926:	462b      	mov	r3, r5
 800b928:	461d      	mov	r5, r3
 800b92a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b92e:	2a39      	cmp	r2, #57	; 0x39
 800b930:	d106      	bne.n	800b940 <_dtoa_r+0x700>
 800b932:	9a00      	ldr	r2, [sp, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d1f7      	bne.n	800b928 <_dtoa_r+0x6e8>
 800b938:	9900      	ldr	r1, [sp, #0]
 800b93a:	2230      	movs	r2, #48	; 0x30
 800b93c:	3701      	adds	r7, #1
 800b93e:	700a      	strb	r2, [r1, #0]
 800b940:	781a      	ldrb	r2, [r3, #0]
 800b942:	3201      	adds	r2, #1
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	e790      	b.n	800b86a <_dtoa_r+0x62a>
 800b948:	4ba3      	ldr	r3, [pc, #652]	; (800bbd8 <_dtoa_r+0x998>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	f7f4 fe5c 	bl	8000608 <__aeabi_dmul>
 800b950:	2200      	movs	r2, #0
 800b952:	2300      	movs	r3, #0
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	f7f5 f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d09e      	beq.n	800b89e <_dtoa_r+0x65e>
 800b960:	e7d0      	b.n	800b904 <_dtoa_r+0x6c4>
 800b962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b964:	2a00      	cmp	r2, #0
 800b966:	f000 80ca 	beq.w	800bafe <_dtoa_r+0x8be>
 800b96a:	9a07      	ldr	r2, [sp, #28]
 800b96c:	2a01      	cmp	r2, #1
 800b96e:	f300 80ad 	bgt.w	800bacc <_dtoa_r+0x88c>
 800b972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b974:	2a00      	cmp	r2, #0
 800b976:	f000 80a5 	beq.w	800bac4 <_dtoa_r+0x884>
 800b97a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b97e:	9e08      	ldr	r6, [sp, #32]
 800b980:	9d05      	ldr	r5, [sp, #20]
 800b982:	9a05      	ldr	r2, [sp, #20]
 800b984:	441a      	add	r2, r3
 800b986:	9205      	str	r2, [sp, #20]
 800b988:	9a06      	ldr	r2, [sp, #24]
 800b98a:	2101      	movs	r1, #1
 800b98c:	441a      	add	r2, r3
 800b98e:	4620      	mov	r0, r4
 800b990:	9206      	str	r2, [sp, #24]
 800b992:	f000 fc3d 	bl	800c210 <__i2b>
 800b996:	4607      	mov	r7, r0
 800b998:	b165      	cbz	r5, 800b9b4 <_dtoa_r+0x774>
 800b99a:	9b06      	ldr	r3, [sp, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd09      	ble.n	800b9b4 <_dtoa_r+0x774>
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	9a05      	ldr	r2, [sp, #20]
 800b9a4:	bfa8      	it	ge
 800b9a6:	462b      	movge	r3, r5
 800b9a8:	1ad2      	subs	r2, r2, r3
 800b9aa:	9205      	str	r2, [sp, #20]
 800b9ac:	9a06      	ldr	r2, [sp, #24]
 800b9ae:	1aed      	subs	r5, r5, r3
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	9306      	str	r3, [sp, #24]
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	b1f3      	cbz	r3, 800b9f6 <_dtoa_r+0x7b6>
 800b9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 80a3 	beq.w	800bb06 <_dtoa_r+0x8c6>
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	dd10      	ble.n	800b9e6 <_dtoa_r+0x7a6>
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 fce1 	bl	800c390 <__pow5mult>
 800b9ce:	4652      	mov	r2, sl
 800b9d0:	4601      	mov	r1, r0
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 fc31 	bl	800c23c <__multiply>
 800b9da:	4651      	mov	r1, sl
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 fb60 	bl	800c0a4 <_Bfree>
 800b9e4:	46c2      	mov	sl, r8
 800b9e6:	9b08      	ldr	r3, [sp, #32]
 800b9e8:	1b9a      	subs	r2, r3, r6
 800b9ea:	d004      	beq.n	800b9f6 <_dtoa_r+0x7b6>
 800b9ec:	4651      	mov	r1, sl
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fcce 	bl	800c390 <__pow5mult>
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fc09 	bl	800c210 <__i2b>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	4606      	mov	r6, r0
 800ba04:	f340 8081 	ble.w	800bb0a <_dtoa_r+0x8ca>
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 fcbf 	bl	800c390 <__pow5mult>
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	4606      	mov	r6, r0
 800ba18:	dd7a      	ble.n	800bb10 <_dtoa_r+0x8d0>
 800ba1a:	f04f 0800 	mov.w	r8, #0
 800ba1e:	6933      	ldr	r3, [r6, #16]
 800ba20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba24:	6918      	ldr	r0, [r3, #16]
 800ba26:	f000 fba5 	bl	800c174 <__hi0bits>
 800ba2a:	f1c0 0020 	rsb	r0, r0, #32
 800ba2e:	9b06      	ldr	r3, [sp, #24]
 800ba30:	4418      	add	r0, r3
 800ba32:	f010 001f 	ands.w	r0, r0, #31
 800ba36:	f000 8094 	beq.w	800bb62 <_dtoa_r+0x922>
 800ba3a:	f1c0 0320 	rsb	r3, r0, #32
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	f340 8085 	ble.w	800bb4e <_dtoa_r+0x90e>
 800ba44:	9b05      	ldr	r3, [sp, #20]
 800ba46:	f1c0 001c 	rsb	r0, r0, #28
 800ba4a:	4403      	add	r3, r0
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	4403      	add	r3, r0
 800ba52:	4405      	add	r5, r0
 800ba54:	9306      	str	r3, [sp, #24]
 800ba56:	9b05      	ldr	r3, [sp, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dd05      	ble.n	800ba68 <_dtoa_r+0x828>
 800ba5c:	4651      	mov	r1, sl
 800ba5e:	461a      	mov	r2, r3
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fcef 	bl	800c444 <__lshift>
 800ba66:	4682      	mov	sl, r0
 800ba68:	9b06      	ldr	r3, [sp, #24]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dd05      	ble.n	800ba7a <_dtoa_r+0x83a>
 800ba6e:	4631      	mov	r1, r6
 800ba70:	461a      	mov	r2, r3
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 fce6 	bl	800c444 <__lshift>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d072      	beq.n	800bb66 <_dtoa_r+0x926>
 800ba80:	4631      	mov	r1, r6
 800ba82:	4650      	mov	r0, sl
 800ba84:	f000 fd4a 	bl	800c51c <__mcmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	da6c      	bge.n	800bb66 <_dtoa_r+0x926>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4651      	mov	r1, sl
 800ba90:	220a      	movs	r2, #10
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 fb28 	bl	800c0e8 <__multadd>
 800ba98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba9e:	4682      	mov	sl, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 81b0 	beq.w	800be06 <_dtoa_r+0xbc6>
 800baa6:	2300      	movs	r3, #0
 800baa8:	4639      	mov	r1, r7
 800baaa:	220a      	movs	r2, #10
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fb1b 	bl	800c0e8 <__multadd>
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	4607      	mov	r7, r0
 800bab8:	f300 8096 	bgt.w	800bbe8 <_dtoa_r+0x9a8>
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	dc59      	bgt.n	800bb76 <_dtoa_r+0x936>
 800bac2:	e091      	b.n	800bbe8 <_dtoa_r+0x9a8>
 800bac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baca:	e758      	b.n	800b97e <_dtoa_r+0x73e>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	1e5e      	subs	r6, r3, #1
 800bad0:	9b08      	ldr	r3, [sp, #32]
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	bfbf      	itttt	lt
 800bad6:	9b08      	ldrlt	r3, [sp, #32]
 800bad8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bada:	9608      	strlt	r6, [sp, #32]
 800badc:	1af3      	sublt	r3, r6, r3
 800bade:	bfb4      	ite	lt
 800bae0:	18d2      	addlt	r2, r2, r3
 800bae2:	1b9e      	subge	r6, r3, r6
 800bae4:	9b04      	ldr	r3, [sp, #16]
 800bae6:	bfbc      	itt	lt
 800bae8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800baea:	2600      	movlt	r6, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	bfb7      	itett	lt
 800baf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800baf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800baf8:	1a9d      	sublt	r5, r3, r2
 800bafa:	2300      	movlt	r3, #0
 800bafc:	e741      	b.n	800b982 <_dtoa_r+0x742>
 800bafe:	9e08      	ldr	r6, [sp, #32]
 800bb00:	9d05      	ldr	r5, [sp, #20]
 800bb02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb04:	e748      	b.n	800b998 <_dtoa_r+0x758>
 800bb06:	9a08      	ldr	r2, [sp, #32]
 800bb08:	e770      	b.n	800b9ec <_dtoa_r+0x7ac>
 800bb0a:	9b07      	ldr	r3, [sp, #28]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	dc19      	bgt.n	800bb44 <_dtoa_r+0x904>
 800bb10:	9b02      	ldr	r3, [sp, #8]
 800bb12:	b9bb      	cbnz	r3, 800bb44 <_dtoa_r+0x904>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb1a:	b99b      	cbnz	r3, 800bb44 <_dtoa_r+0x904>
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb22:	0d1b      	lsrs	r3, r3, #20
 800bb24:	051b      	lsls	r3, r3, #20
 800bb26:	b183      	cbz	r3, 800bb4a <_dtoa_r+0x90a>
 800bb28:	9b05      	ldr	r3, [sp, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	9b06      	ldr	r3, [sp, #24]
 800bb30:	3301      	adds	r3, #1
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	f04f 0801 	mov.w	r8, #1
 800bb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f47f af6f 	bne.w	800ba1e <_dtoa_r+0x7de>
 800bb40:	2001      	movs	r0, #1
 800bb42:	e774      	b.n	800ba2e <_dtoa_r+0x7ee>
 800bb44:	f04f 0800 	mov.w	r8, #0
 800bb48:	e7f6      	b.n	800bb38 <_dtoa_r+0x8f8>
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	e7f4      	b.n	800bb38 <_dtoa_r+0x8f8>
 800bb4e:	d082      	beq.n	800ba56 <_dtoa_r+0x816>
 800bb50:	9a05      	ldr	r2, [sp, #20]
 800bb52:	331c      	adds	r3, #28
 800bb54:	441a      	add	r2, r3
 800bb56:	9205      	str	r2, [sp, #20]
 800bb58:	9a06      	ldr	r2, [sp, #24]
 800bb5a:	441a      	add	r2, r3
 800bb5c:	441d      	add	r5, r3
 800bb5e:	9206      	str	r2, [sp, #24]
 800bb60:	e779      	b.n	800ba56 <_dtoa_r+0x816>
 800bb62:	4603      	mov	r3, r0
 800bb64:	e7f4      	b.n	800bb50 <_dtoa_r+0x910>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc37      	bgt.n	800bbdc <_dtoa_r+0x99c>
 800bb6c:	9b07      	ldr	r3, [sp, #28]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dd34      	ble.n	800bbdc <_dtoa_r+0x99c>
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	b963      	cbnz	r3, 800bb94 <_dtoa_r+0x954>
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 fab2 	bl	800c0e8 <__multadd>
 800bb84:	4601      	mov	r1, r0
 800bb86:	4606      	mov	r6, r0
 800bb88:	4650      	mov	r0, sl
 800bb8a:	f000 fcc7 	bl	800c51c <__mcmp>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f73f adbb 	bgt.w	800b70a <_dtoa_r+0x4ca>
 800bb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb96:	9d00      	ldr	r5, [sp, #0]
 800bb98:	ea6f 0b03 	mvn.w	fp, r3
 800bb9c:	f04f 0800 	mov.w	r8, #0
 800bba0:	4631      	mov	r1, r6
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 fa7e 	bl	800c0a4 <_Bfree>
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	f43f aeab 	beq.w	800b904 <_dtoa_r+0x6c4>
 800bbae:	f1b8 0f00 	cmp.w	r8, #0
 800bbb2:	d005      	beq.n	800bbc0 <_dtoa_r+0x980>
 800bbb4:	45b8      	cmp	r8, r7
 800bbb6:	d003      	beq.n	800bbc0 <_dtoa_r+0x980>
 800bbb8:	4641      	mov	r1, r8
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 fa72 	bl	800c0a4 <_Bfree>
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 fa6e 	bl	800c0a4 <_Bfree>
 800bbc8:	e69c      	b.n	800b904 <_dtoa_r+0x6c4>
 800bbca:	2600      	movs	r6, #0
 800bbcc:	4637      	mov	r7, r6
 800bbce:	e7e1      	b.n	800bb94 <_dtoa_r+0x954>
 800bbd0:	46bb      	mov	fp, r7
 800bbd2:	4637      	mov	r7, r6
 800bbd4:	e599      	b.n	800b70a <_dtoa_r+0x4ca>
 800bbd6:	bf00      	nop
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80c8 	beq.w	800bd74 <_dtoa_r+0xb34>
 800bbe4:	9b04      	ldr	r3, [sp, #16]
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	dd05      	ble.n	800bbf8 <_dtoa_r+0x9b8>
 800bbec:	4639      	mov	r1, r7
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fc27 	bl	800c444 <__lshift>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	d05b      	beq.n	800bcb6 <_dtoa_r+0xa76>
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fa0f 	bl	800c024 <_Balloc>
 800bc06:	4605      	mov	r5, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <_dtoa_r+0x9d6>
 800bc0a:	4b83      	ldr	r3, [pc, #524]	; (800be18 <_dtoa_r+0xbd8>)
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bc12:	f7ff bb2e 	b.w	800b272 <_dtoa_r+0x32>
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	3202      	adds	r2, #2
 800bc1a:	0092      	lsls	r2, r2, #2
 800bc1c:	f107 010c 	add.w	r1, r7, #12
 800bc20:	300c      	adds	r0, #12
 800bc22:	f000 ffab 	bl	800cb7c <memcpy>
 800bc26:	2201      	movs	r2, #1
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fc0a 	bl	800c444 <__lshift>
 800bc30:	9b00      	ldr	r3, [sp, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	9308      	str	r3, [sp, #32]
 800bc3e:	9b02      	ldr	r3, [sp, #8]
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	46b8      	mov	r8, r7
 800bc46:	9306      	str	r3, [sp, #24]
 800bc48:	4607      	mov	r7, r0
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4650      	mov	r0, sl
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f7ff fa69 	bl	800b12a <quorem>
 800bc58:	4641      	mov	r1, r8
 800bc5a:	9002      	str	r0, [sp, #8]
 800bc5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc60:	4650      	mov	r0, sl
 800bc62:	f000 fc5b 	bl	800c51c <__mcmp>
 800bc66:	463a      	mov	r2, r7
 800bc68:	9005      	str	r0, [sp, #20]
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 fc71 	bl	800c554 <__mdiff>
 800bc72:	68c2      	ldr	r2, [r0, #12]
 800bc74:	4605      	mov	r5, r0
 800bc76:	bb02      	cbnz	r2, 800bcba <_dtoa_r+0xa7a>
 800bc78:	4601      	mov	r1, r0
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	f000 fc4e 	bl	800c51c <__mcmp>
 800bc80:	4602      	mov	r2, r0
 800bc82:	4629      	mov	r1, r5
 800bc84:	4620      	mov	r0, r4
 800bc86:	9209      	str	r2, [sp, #36]	; 0x24
 800bc88:	f000 fa0c 	bl	800c0a4 <_Bfree>
 800bc8c:	9b07      	ldr	r3, [sp, #28]
 800bc8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc90:	9d04      	ldr	r5, [sp, #16]
 800bc92:	ea43 0102 	orr.w	r1, r3, r2
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	4319      	orrs	r1, r3
 800bc9a:	d110      	bne.n	800bcbe <_dtoa_r+0xa7e>
 800bc9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bca0:	d029      	beq.n	800bcf6 <_dtoa_r+0xab6>
 800bca2:	9b05      	ldr	r3, [sp, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dd02      	ble.n	800bcae <_dtoa_r+0xa6e>
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	f883 9000 	strb.w	r9, [r3]
 800bcb4:	e774      	b.n	800bba0 <_dtoa_r+0x960>
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	e7ba      	b.n	800bc30 <_dtoa_r+0x9f0>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	e7e1      	b.n	800bc82 <_dtoa_r+0xa42>
 800bcbe:	9b05      	ldr	r3, [sp, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	db04      	blt.n	800bcce <_dtoa_r+0xa8e>
 800bcc4:	9907      	ldr	r1, [sp, #28]
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	9906      	ldr	r1, [sp, #24]
 800bcca:	430b      	orrs	r3, r1
 800bccc:	d120      	bne.n	800bd10 <_dtoa_r+0xad0>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	dded      	ble.n	800bcae <_dtoa_r+0xa6e>
 800bcd2:	4651      	mov	r1, sl
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f000 fbb4 	bl	800c444 <__lshift>
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4682      	mov	sl, r0
 800bce0:	f000 fc1c 	bl	800c51c <__mcmp>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	dc03      	bgt.n	800bcf0 <_dtoa_r+0xab0>
 800bce8:	d1e1      	bne.n	800bcae <_dtoa_r+0xa6e>
 800bcea:	f019 0f01 	tst.w	r9, #1
 800bcee:	d0de      	beq.n	800bcae <_dtoa_r+0xa6e>
 800bcf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bcf4:	d1d8      	bne.n	800bca8 <_dtoa_r+0xa68>
 800bcf6:	9a01      	ldr	r2, [sp, #4]
 800bcf8:	2339      	movs	r3, #57	; 0x39
 800bcfa:	7013      	strb	r3, [r2, #0]
 800bcfc:	462b      	mov	r3, r5
 800bcfe:	461d      	mov	r5, r3
 800bd00:	3b01      	subs	r3, #1
 800bd02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd06:	2a39      	cmp	r2, #57	; 0x39
 800bd08:	d06c      	beq.n	800bde4 <_dtoa_r+0xba4>
 800bd0a:	3201      	adds	r2, #1
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	e747      	b.n	800bba0 <_dtoa_r+0x960>
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	dd07      	ble.n	800bd24 <_dtoa_r+0xae4>
 800bd14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd18:	d0ed      	beq.n	800bcf6 <_dtoa_r+0xab6>
 800bd1a:	9a01      	ldr	r2, [sp, #4]
 800bd1c:	f109 0301 	add.w	r3, r9, #1
 800bd20:	7013      	strb	r3, [r2, #0]
 800bd22:	e73d      	b.n	800bba0 <_dtoa_r+0x960>
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	9a08      	ldr	r2, [sp, #32]
 800bd28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d043      	beq.n	800bdb8 <_dtoa_r+0xb78>
 800bd30:	4651      	mov	r1, sl
 800bd32:	2300      	movs	r3, #0
 800bd34:	220a      	movs	r2, #10
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f9d6 	bl	800c0e8 <__multadd>
 800bd3c:	45b8      	cmp	r8, r7
 800bd3e:	4682      	mov	sl, r0
 800bd40:	f04f 0300 	mov.w	r3, #0
 800bd44:	f04f 020a 	mov.w	r2, #10
 800bd48:	4641      	mov	r1, r8
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	d107      	bne.n	800bd5e <_dtoa_r+0xb1e>
 800bd4e:	f000 f9cb 	bl	800c0e8 <__multadd>
 800bd52:	4680      	mov	r8, r0
 800bd54:	4607      	mov	r7, r0
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	e775      	b.n	800bc4a <_dtoa_r+0xa0a>
 800bd5e:	f000 f9c3 	bl	800c0e8 <__multadd>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4680      	mov	r8, r0
 800bd66:	2300      	movs	r3, #0
 800bd68:	220a      	movs	r2, #10
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 f9bc 	bl	800c0e8 <__multadd>
 800bd70:	4607      	mov	r7, r0
 800bd72:	e7f0      	b.n	800bd56 <_dtoa_r+0xb16>
 800bd74:	9b04      	ldr	r3, [sp, #16]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	9d00      	ldr	r5, [sp, #0]
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4650      	mov	r0, sl
 800bd7e:	f7ff f9d4 	bl	800b12a <quorem>
 800bd82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bd86:	9b00      	ldr	r3, [sp, #0]
 800bd88:	f805 9b01 	strb.w	r9, [r5], #1
 800bd8c:	1aea      	subs	r2, r5, r3
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	dd07      	ble.n	800bda4 <_dtoa_r+0xb64>
 800bd94:	4651      	mov	r1, sl
 800bd96:	2300      	movs	r3, #0
 800bd98:	220a      	movs	r2, #10
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 f9a4 	bl	800c0e8 <__multadd>
 800bda0:	4682      	mov	sl, r0
 800bda2:	e7ea      	b.n	800bd7a <_dtoa_r+0xb3a>
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	bfc8      	it	gt
 800bdaa:	461d      	movgt	r5, r3
 800bdac:	9b00      	ldr	r3, [sp, #0]
 800bdae:	bfd8      	it	le
 800bdb0:	2501      	movle	r5, #1
 800bdb2:	441d      	add	r5, r3
 800bdb4:	f04f 0800 	mov.w	r8, #0
 800bdb8:	4651      	mov	r1, sl
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 fb41 	bl	800c444 <__lshift>
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	f000 fba9 	bl	800c51c <__mcmp>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	dc96      	bgt.n	800bcfc <_dtoa_r+0xabc>
 800bdce:	d102      	bne.n	800bdd6 <_dtoa_r+0xb96>
 800bdd0:	f019 0f01 	tst.w	r9, #1
 800bdd4:	d192      	bne.n	800bcfc <_dtoa_r+0xabc>
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	461d      	mov	r5, r3
 800bdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdde:	2a30      	cmp	r2, #48	; 0x30
 800bde0:	d0fa      	beq.n	800bdd8 <_dtoa_r+0xb98>
 800bde2:	e6dd      	b.n	800bba0 <_dtoa_r+0x960>
 800bde4:	9a00      	ldr	r2, [sp, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d189      	bne.n	800bcfe <_dtoa_r+0xabe>
 800bdea:	f10b 0b01 	add.w	fp, fp, #1
 800bdee:	2331      	movs	r3, #49	; 0x31
 800bdf0:	e796      	b.n	800bd20 <_dtoa_r+0xae0>
 800bdf2:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <_dtoa_r+0xbdc>)
 800bdf4:	f7ff ba99 	b.w	800b32a <_dtoa_r+0xea>
 800bdf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f47f aa6d 	bne.w	800b2da <_dtoa_r+0x9a>
 800be00:	4b07      	ldr	r3, [pc, #28]	; (800be20 <_dtoa_r+0xbe0>)
 800be02:	f7ff ba92 	b.w	800b32a <_dtoa_r+0xea>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	dcb5      	bgt.n	800bd78 <_dtoa_r+0xb38>
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	f73f aeb1 	bgt.w	800bb76 <_dtoa_r+0x936>
 800be14:	e7b0      	b.n	800bd78 <_dtoa_r+0xb38>
 800be16:	bf00      	nop
 800be18:	0800d75c 	.word	0x0800d75c
 800be1c:	0800d6bc 	.word	0x0800d6bc
 800be20:	0800d6e0 	.word	0x0800d6e0

0800be24 <_free_r>:
 800be24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be26:	2900      	cmp	r1, #0
 800be28:	d044      	beq.n	800beb4 <_free_r+0x90>
 800be2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be2e:	9001      	str	r0, [sp, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f1a1 0404 	sub.w	r4, r1, #4
 800be36:	bfb8      	it	lt
 800be38:	18e4      	addlt	r4, r4, r3
 800be3a:	f000 f8e7 	bl	800c00c <__malloc_lock>
 800be3e:	4a1e      	ldr	r2, [pc, #120]	; (800beb8 <_free_r+0x94>)
 800be40:	9801      	ldr	r0, [sp, #4]
 800be42:	6813      	ldr	r3, [r2, #0]
 800be44:	b933      	cbnz	r3, 800be54 <_free_r+0x30>
 800be46:	6063      	str	r3, [r4, #4]
 800be48:	6014      	str	r4, [r2, #0]
 800be4a:	b003      	add	sp, #12
 800be4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be50:	f000 b8e2 	b.w	800c018 <__malloc_unlock>
 800be54:	42a3      	cmp	r3, r4
 800be56:	d908      	bls.n	800be6a <_free_r+0x46>
 800be58:	6825      	ldr	r5, [r4, #0]
 800be5a:	1961      	adds	r1, r4, r5
 800be5c:	428b      	cmp	r3, r1
 800be5e:	bf01      	itttt	eq
 800be60:	6819      	ldreq	r1, [r3, #0]
 800be62:	685b      	ldreq	r3, [r3, #4]
 800be64:	1949      	addeq	r1, r1, r5
 800be66:	6021      	streq	r1, [r4, #0]
 800be68:	e7ed      	b.n	800be46 <_free_r+0x22>
 800be6a:	461a      	mov	r2, r3
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	b10b      	cbz	r3, 800be74 <_free_r+0x50>
 800be70:	42a3      	cmp	r3, r4
 800be72:	d9fa      	bls.n	800be6a <_free_r+0x46>
 800be74:	6811      	ldr	r1, [r2, #0]
 800be76:	1855      	adds	r5, r2, r1
 800be78:	42a5      	cmp	r5, r4
 800be7a:	d10b      	bne.n	800be94 <_free_r+0x70>
 800be7c:	6824      	ldr	r4, [r4, #0]
 800be7e:	4421      	add	r1, r4
 800be80:	1854      	adds	r4, r2, r1
 800be82:	42a3      	cmp	r3, r4
 800be84:	6011      	str	r1, [r2, #0]
 800be86:	d1e0      	bne.n	800be4a <_free_r+0x26>
 800be88:	681c      	ldr	r4, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	6053      	str	r3, [r2, #4]
 800be8e:	440c      	add	r4, r1
 800be90:	6014      	str	r4, [r2, #0]
 800be92:	e7da      	b.n	800be4a <_free_r+0x26>
 800be94:	d902      	bls.n	800be9c <_free_r+0x78>
 800be96:	230c      	movs	r3, #12
 800be98:	6003      	str	r3, [r0, #0]
 800be9a:	e7d6      	b.n	800be4a <_free_r+0x26>
 800be9c:	6825      	ldr	r5, [r4, #0]
 800be9e:	1961      	adds	r1, r4, r5
 800bea0:	428b      	cmp	r3, r1
 800bea2:	bf04      	itt	eq
 800bea4:	6819      	ldreq	r1, [r3, #0]
 800bea6:	685b      	ldreq	r3, [r3, #4]
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	bf04      	itt	eq
 800beac:	1949      	addeq	r1, r1, r5
 800beae:	6021      	streq	r1, [r4, #0]
 800beb0:	6054      	str	r4, [r2, #4]
 800beb2:	e7ca      	b.n	800be4a <_free_r+0x26>
 800beb4:	b003      	add	sp, #12
 800beb6:	bd30      	pop	{r4, r5, pc}
 800beb8:	200005ec 	.word	0x200005ec

0800bebc <malloc>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <malloc+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f000 b823 	b.w	800bf0c <_malloc_r>
 800bec6:	bf00      	nop
 800bec8:	20000138 	.word	0x20000138

0800becc <sbrk_aligned>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	4e0e      	ldr	r6, [pc, #56]	; (800bf08 <sbrk_aligned+0x3c>)
 800bed0:	460c      	mov	r4, r1
 800bed2:	6831      	ldr	r1, [r6, #0]
 800bed4:	4605      	mov	r5, r0
 800bed6:	b911      	cbnz	r1, 800bede <sbrk_aligned+0x12>
 800bed8:	f000 fe40 	bl	800cb5c <_sbrk_r>
 800bedc:	6030      	str	r0, [r6, #0]
 800bede:	4621      	mov	r1, r4
 800bee0:	4628      	mov	r0, r5
 800bee2:	f000 fe3b 	bl	800cb5c <_sbrk_r>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d00a      	beq.n	800bf00 <sbrk_aligned+0x34>
 800beea:	1cc4      	adds	r4, r0, #3
 800beec:	f024 0403 	bic.w	r4, r4, #3
 800bef0:	42a0      	cmp	r0, r4
 800bef2:	d007      	beq.n	800bf04 <sbrk_aligned+0x38>
 800bef4:	1a21      	subs	r1, r4, r0
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 fe30 	bl	800cb5c <_sbrk_r>
 800befc:	3001      	adds	r0, #1
 800befe:	d101      	bne.n	800bf04 <sbrk_aligned+0x38>
 800bf00:	f04f 34ff 	mov.w	r4, #4294967295
 800bf04:	4620      	mov	r0, r4
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	200005f0 	.word	0x200005f0

0800bf0c <_malloc_r>:
 800bf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf10:	1ccd      	adds	r5, r1, #3
 800bf12:	f025 0503 	bic.w	r5, r5, #3
 800bf16:	3508      	adds	r5, #8
 800bf18:	2d0c      	cmp	r5, #12
 800bf1a:	bf38      	it	cc
 800bf1c:	250c      	movcc	r5, #12
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	4607      	mov	r7, r0
 800bf22:	db01      	blt.n	800bf28 <_malloc_r+0x1c>
 800bf24:	42a9      	cmp	r1, r5
 800bf26:	d905      	bls.n	800bf34 <_malloc_r+0x28>
 800bf28:	230c      	movs	r3, #12
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	2600      	movs	r6, #0
 800bf2e:	4630      	mov	r0, r6
 800bf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c008 <_malloc_r+0xfc>
 800bf38:	f000 f868 	bl	800c00c <__malloc_lock>
 800bf3c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf40:	461c      	mov	r4, r3
 800bf42:	bb5c      	cbnz	r4, 800bf9c <_malloc_r+0x90>
 800bf44:	4629      	mov	r1, r5
 800bf46:	4638      	mov	r0, r7
 800bf48:	f7ff ffc0 	bl	800becc <sbrk_aligned>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	4604      	mov	r4, r0
 800bf50:	d155      	bne.n	800bffe <_malloc_r+0xf2>
 800bf52:	f8d8 4000 	ldr.w	r4, [r8]
 800bf56:	4626      	mov	r6, r4
 800bf58:	2e00      	cmp	r6, #0
 800bf5a:	d145      	bne.n	800bfe8 <_malloc_r+0xdc>
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	d048      	beq.n	800bff2 <_malloc_r+0xe6>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	4631      	mov	r1, r6
 800bf64:	4638      	mov	r0, r7
 800bf66:	eb04 0903 	add.w	r9, r4, r3
 800bf6a:	f000 fdf7 	bl	800cb5c <_sbrk_r>
 800bf6e:	4581      	cmp	r9, r0
 800bf70:	d13f      	bne.n	800bff2 <_malloc_r+0xe6>
 800bf72:	6821      	ldr	r1, [r4, #0]
 800bf74:	1a6d      	subs	r5, r5, r1
 800bf76:	4629      	mov	r1, r5
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff ffa7 	bl	800becc <sbrk_aligned>
 800bf7e:	3001      	adds	r0, #1
 800bf80:	d037      	beq.n	800bff2 <_malloc_r+0xe6>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	442b      	add	r3, r5
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	f8d8 3000 	ldr.w	r3, [r8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d038      	beq.n	800c002 <_malloc_r+0xf6>
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	42a2      	cmp	r2, r4
 800bf94:	d12b      	bne.n	800bfee <_malloc_r+0xe2>
 800bf96:	2200      	movs	r2, #0
 800bf98:	605a      	str	r2, [r3, #4]
 800bf9a:	e00f      	b.n	800bfbc <_malloc_r+0xb0>
 800bf9c:	6822      	ldr	r2, [r4, #0]
 800bf9e:	1b52      	subs	r2, r2, r5
 800bfa0:	d41f      	bmi.n	800bfe2 <_malloc_r+0xd6>
 800bfa2:	2a0b      	cmp	r2, #11
 800bfa4:	d917      	bls.n	800bfd6 <_malloc_r+0xca>
 800bfa6:	1961      	adds	r1, r4, r5
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	6025      	str	r5, [r4, #0]
 800bfac:	bf18      	it	ne
 800bfae:	6059      	strne	r1, [r3, #4]
 800bfb0:	6863      	ldr	r3, [r4, #4]
 800bfb2:	bf08      	it	eq
 800bfb4:	f8c8 1000 	streq.w	r1, [r8]
 800bfb8:	5162      	str	r2, [r4, r5]
 800bfba:	604b      	str	r3, [r1, #4]
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f104 060b 	add.w	r6, r4, #11
 800bfc2:	f000 f829 	bl	800c018 <__malloc_unlock>
 800bfc6:	f026 0607 	bic.w	r6, r6, #7
 800bfca:	1d23      	adds	r3, r4, #4
 800bfcc:	1af2      	subs	r2, r6, r3
 800bfce:	d0ae      	beq.n	800bf2e <_malloc_r+0x22>
 800bfd0:	1b9b      	subs	r3, r3, r6
 800bfd2:	50a3      	str	r3, [r4, r2]
 800bfd4:	e7ab      	b.n	800bf2e <_malloc_r+0x22>
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	6862      	ldr	r2, [r4, #4]
 800bfda:	d1dd      	bne.n	800bf98 <_malloc_r+0x8c>
 800bfdc:	f8c8 2000 	str.w	r2, [r8]
 800bfe0:	e7ec      	b.n	800bfbc <_malloc_r+0xb0>
 800bfe2:	4623      	mov	r3, r4
 800bfe4:	6864      	ldr	r4, [r4, #4]
 800bfe6:	e7ac      	b.n	800bf42 <_malloc_r+0x36>
 800bfe8:	4634      	mov	r4, r6
 800bfea:	6876      	ldr	r6, [r6, #4]
 800bfec:	e7b4      	b.n	800bf58 <_malloc_r+0x4c>
 800bfee:	4613      	mov	r3, r2
 800bff0:	e7cc      	b.n	800bf8c <_malloc_r+0x80>
 800bff2:	230c      	movs	r3, #12
 800bff4:	603b      	str	r3, [r7, #0]
 800bff6:	4638      	mov	r0, r7
 800bff8:	f000 f80e 	bl	800c018 <__malloc_unlock>
 800bffc:	e797      	b.n	800bf2e <_malloc_r+0x22>
 800bffe:	6025      	str	r5, [r4, #0]
 800c000:	e7dc      	b.n	800bfbc <_malloc_r+0xb0>
 800c002:	605b      	str	r3, [r3, #4]
 800c004:	deff      	udf	#255	; 0xff
 800c006:	bf00      	nop
 800c008:	200005ec 	.word	0x200005ec

0800c00c <__malloc_lock>:
 800c00c:	4801      	ldr	r0, [pc, #4]	; (800c014 <__malloc_lock+0x8>)
 800c00e:	f7ff b88a 	b.w	800b126 <__retarget_lock_acquire_recursive>
 800c012:	bf00      	nop
 800c014:	200005e8 	.word	0x200005e8

0800c018 <__malloc_unlock>:
 800c018:	4801      	ldr	r0, [pc, #4]	; (800c020 <__malloc_unlock+0x8>)
 800c01a:	f7ff b885 	b.w	800b128 <__retarget_lock_release_recursive>
 800c01e:	bf00      	nop
 800c020:	200005e8 	.word	0x200005e8

0800c024 <_Balloc>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	69c6      	ldr	r6, [r0, #28]
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	b976      	cbnz	r6, 800c04c <_Balloc+0x28>
 800c02e:	2010      	movs	r0, #16
 800c030:	f7ff ff44 	bl	800bebc <malloc>
 800c034:	4602      	mov	r2, r0
 800c036:	61e0      	str	r0, [r4, #28]
 800c038:	b920      	cbnz	r0, 800c044 <_Balloc+0x20>
 800c03a:	4b18      	ldr	r3, [pc, #96]	; (800c09c <_Balloc+0x78>)
 800c03c:	4818      	ldr	r0, [pc, #96]	; (800c0a0 <_Balloc+0x7c>)
 800c03e:	216b      	movs	r1, #107	; 0x6b
 800c040:	f000 fdaa 	bl	800cb98 <__assert_func>
 800c044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c048:	6006      	str	r6, [r0, #0]
 800c04a:	60c6      	str	r6, [r0, #12]
 800c04c:	69e6      	ldr	r6, [r4, #28]
 800c04e:	68f3      	ldr	r3, [r6, #12]
 800c050:	b183      	cbz	r3, 800c074 <_Balloc+0x50>
 800c052:	69e3      	ldr	r3, [r4, #28]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c05a:	b9b8      	cbnz	r0, 800c08c <_Balloc+0x68>
 800c05c:	2101      	movs	r1, #1
 800c05e:	fa01 f605 	lsl.w	r6, r1, r5
 800c062:	1d72      	adds	r2, r6, #5
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fdb4 	bl	800cbd4 <_calloc_r>
 800c06c:	b160      	cbz	r0, 800c088 <_Balloc+0x64>
 800c06e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c072:	e00e      	b.n	800c092 <_Balloc+0x6e>
 800c074:	2221      	movs	r2, #33	; 0x21
 800c076:	2104      	movs	r1, #4
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fdab 	bl	800cbd4 <_calloc_r>
 800c07e:	69e3      	ldr	r3, [r4, #28]
 800c080:	60f0      	str	r0, [r6, #12]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e4      	bne.n	800c052 <_Balloc+0x2e>
 800c088:	2000      	movs	r0, #0
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	6802      	ldr	r2, [r0, #0]
 800c08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c092:	2300      	movs	r3, #0
 800c094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c098:	e7f7      	b.n	800c08a <_Balloc+0x66>
 800c09a:	bf00      	nop
 800c09c:	0800d6ed 	.word	0x0800d6ed
 800c0a0:	0800d76d 	.word	0x0800d76d

0800c0a4 <_Bfree>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	69c6      	ldr	r6, [r0, #28]
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	b976      	cbnz	r6, 800c0cc <_Bfree+0x28>
 800c0ae:	2010      	movs	r0, #16
 800c0b0:	f7ff ff04 	bl	800bebc <malloc>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	61e8      	str	r0, [r5, #28]
 800c0b8:	b920      	cbnz	r0, 800c0c4 <_Bfree+0x20>
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <_Bfree+0x3c>)
 800c0bc:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <_Bfree+0x40>)
 800c0be:	218f      	movs	r1, #143	; 0x8f
 800c0c0:	f000 fd6a 	bl	800cb98 <__assert_func>
 800c0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0c8:	6006      	str	r6, [r0, #0]
 800c0ca:	60c6      	str	r6, [r0, #12]
 800c0cc:	b13c      	cbz	r4, 800c0de <_Bfree+0x3a>
 800c0ce:	69eb      	ldr	r3, [r5, #28]
 800c0d0:	6862      	ldr	r2, [r4, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0d8:	6021      	str	r1, [r4, #0]
 800c0da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	0800d6ed 	.word	0x0800d6ed
 800c0e4:	0800d76d 	.word	0x0800d76d

0800c0e8 <__multadd>:
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	690d      	ldr	r5, [r1, #16]
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	461e      	mov	r6, r3
 800c0f4:	f101 0c14 	add.w	ip, r1, #20
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	f8dc 3000 	ldr.w	r3, [ip]
 800c0fe:	b299      	uxth	r1, r3
 800c100:	fb02 6101 	mla	r1, r2, r1, r6
 800c104:	0c1e      	lsrs	r6, r3, #16
 800c106:	0c0b      	lsrs	r3, r1, #16
 800c108:	fb02 3306 	mla	r3, r2, r6, r3
 800c10c:	b289      	uxth	r1, r1
 800c10e:	3001      	adds	r0, #1
 800c110:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c114:	4285      	cmp	r5, r0
 800c116:	f84c 1b04 	str.w	r1, [ip], #4
 800c11a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c11e:	dcec      	bgt.n	800c0fa <__multadd+0x12>
 800c120:	b30e      	cbz	r6, 800c166 <__multadd+0x7e>
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	42ab      	cmp	r3, r5
 800c126:	dc19      	bgt.n	800c15c <__multadd+0x74>
 800c128:	6861      	ldr	r1, [r4, #4]
 800c12a:	4638      	mov	r0, r7
 800c12c:	3101      	adds	r1, #1
 800c12e:	f7ff ff79 	bl	800c024 <_Balloc>
 800c132:	4680      	mov	r8, r0
 800c134:	b928      	cbnz	r0, 800c142 <__multadd+0x5a>
 800c136:	4602      	mov	r2, r0
 800c138:	4b0c      	ldr	r3, [pc, #48]	; (800c16c <__multadd+0x84>)
 800c13a:	480d      	ldr	r0, [pc, #52]	; (800c170 <__multadd+0x88>)
 800c13c:	21ba      	movs	r1, #186	; 0xba
 800c13e:	f000 fd2b 	bl	800cb98 <__assert_func>
 800c142:	6922      	ldr	r2, [r4, #16]
 800c144:	3202      	adds	r2, #2
 800c146:	f104 010c 	add.w	r1, r4, #12
 800c14a:	0092      	lsls	r2, r2, #2
 800c14c:	300c      	adds	r0, #12
 800c14e:	f000 fd15 	bl	800cb7c <memcpy>
 800c152:	4621      	mov	r1, r4
 800c154:	4638      	mov	r0, r7
 800c156:	f7ff ffa5 	bl	800c0a4 <_Bfree>
 800c15a:	4644      	mov	r4, r8
 800c15c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c160:	3501      	adds	r5, #1
 800c162:	615e      	str	r6, [r3, #20]
 800c164:	6125      	str	r5, [r4, #16]
 800c166:	4620      	mov	r0, r4
 800c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16c:	0800d75c 	.word	0x0800d75c
 800c170:	0800d76d 	.word	0x0800d76d

0800c174 <__hi0bits>:
 800c174:	0c03      	lsrs	r3, r0, #16
 800c176:	041b      	lsls	r3, r3, #16
 800c178:	b9d3      	cbnz	r3, 800c1b0 <__hi0bits+0x3c>
 800c17a:	0400      	lsls	r0, r0, #16
 800c17c:	2310      	movs	r3, #16
 800c17e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c182:	bf04      	itt	eq
 800c184:	0200      	lsleq	r0, r0, #8
 800c186:	3308      	addeq	r3, #8
 800c188:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c18c:	bf04      	itt	eq
 800c18e:	0100      	lsleq	r0, r0, #4
 800c190:	3304      	addeq	r3, #4
 800c192:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c196:	bf04      	itt	eq
 800c198:	0080      	lsleq	r0, r0, #2
 800c19a:	3302      	addeq	r3, #2
 800c19c:	2800      	cmp	r0, #0
 800c19e:	db05      	blt.n	800c1ac <__hi0bits+0x38>
 800c1a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1a4:	f103 0301 	add.w	r3, r3, #1
 800c1a8:	bf08      	it	eq
 800c1aa:	2320      	moveq	r3, #32
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	4770      	bx	lr
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e7e4      	b.n	800c17e <__hi0bits+0xa>

0800c1b4 <__lo0bits>:
 800c1b4:	6803      	ldr	r3, [r0, #0]
 800c1b6:	f013 0207 	ands.w	r2, r3, #7
 800c1ba:	d00c      	beq.n	800c1d6 <__lo0bits+0x22>
 800c1bc:	07d9      	lsls	r1, r3, #31
 800c1be:	d422      	bmi.n	800c206 <__lo0bits+0x52>
 800c1c0:	079a      	lsls	r2, r3, #30
 800c1c2:	bf49      	itett	mi
 800c1c4:	085b      	lsrmi	r3, r3, #1
 800c1c6:	089b      	lsrpl	r3, r3, #2
 800c1c8:	6003      	strmi	r3, [r0, #0]
 800c1ca:	2201      	movmi	r2, #1
 800c1cc:	bf5c      	itt	pl
 800c1ce:	6003      	strpl	r3, [r0, #0]
 800c1d0:	2202      	movpl	r2, #2
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4770      	bx	lr
 800c1d6:	b299      	uxth	r1, r3
 800c1d8:	b909      	cbnz	r1, 800c1de <__lo0bits+0x2a>
 800c1da:	0c1b      	lsrs	r3, r3, #16
 800c1dc:	2210      	movs	r2, #16
 800c1de:	b2d9      	uxtb	r1, r3
 800c1e0:	b909      	cbnz	r1, 800c1e6 <__lo0bits+0x32>
 800c1e2:	3208      	adds	r2, #8
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	0719      	lsls	r1, r3, #28
 800c1e8:	bf04      	itt	eq
 800c1ea:	091b      	lsreq	r3, r3, #4
 800c1ec:	3204      	addeq	r2, #4
 800c1ee:	0799      	lsls	r1, r3, #30
 800c1f0:	bf04      	itt	eq
 800c1f2:	089b      	lsreq	r3, r3, #2
 800c1f4:	3202      	addeq	r2, #2
 800c1f6:	07d9      	lsls	r1, r3, #31
 800c1f8:	d403      	bmi.n	800c202 <__lo0bits+0x4e>
 800c1fa:	085b      	lsrs	r3, r3, #1
 800c1fc:	f102 0201 	add.w	r2, r2, #1
 800c200:	d003      	beq.n	800c20a <__lo0bits+0x56>
 800c202:	6003      	str	r3, [r0, #0]
 800c204:	e7e5      	b.n	800c1d2 <__lo0bits+0x1e>
 800c206:	2200      	movs	r2, #0
 800c208:	e7e3      	b.n	800c1d2 <__lo0bits+0x1e>
 800c20a:	2220      	movs	r2, #32
 800c20c:	e7e1      	b.n	800c1d2 <__lo0bits+0x1e>
	...

0800c210 <__i2b>:
 800c210:	b510      	push	{r4, lr}
 800c212:	460c      	mov	r4, r1
 800c214:	2101      	movs	r1, #1
 800c216:	f7ff ff05 	bl	800c024 <_Balloc>
 800c21a:	4602      	mov	r2, r0
 800c21c:	b928      	cbnz	r0, 800c22a <__i2b+0x1a>
 800c21e:	4b05      	ldr	r3, [pc, #20]	; (800c234 <__i2b+0x24>)
 800c220:	4805      	ldr	r0, [pc, #20]	; (800c238 <__i2b+0x28>)
 800c222:	f240 1145 	movw	r1, #325	; 0x145
 800c226:	f000 fcb7 	bl	800cb98 <__assert_func>
 800c22a:	2301      	movs	r3, #1
 800c22c:	6144      	str	r4, [r0, #20]
 800c22e:	6103      	str	r3, [r0, #16]
 800c230:	bd10      	pop	{r4, pc}
 800c232:	bf00      	nop
 800c234:	0800d75c 	.word	0x0800d75c
 800c238:	0800d76d 	.word	0x0800d76d

0800c23c <__multiply>:
 800c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	4691      	mov	r9, r2
 800c242:	690a      	ldr	r2, [r1, #16]
 800c244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c248:	429a      	cmp	r2, r3
 800c24a:	bfb8      	it	lt
 800c24c:	460b      	movlt	r3, r1
 800c24e:	460c      	mov	r4, r1
 800c250:	bfbc      	itt	lt
 800c252:	464c      	movlt	r4, r9
 800c254:	4699      	movlt	r9, r3
 800c256:	6927      	ldr	r7, [r4, #16]
 800c258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	6861      	ldr	r1, [r4, #4]
 800c260:	eb07 060a 	add.w	r6, r7, sl
 800c264:	42b3      	cmp	r3, r6
 800c266:	b085      	sub	sp, #20
 800c268:	bfb8      	it	lt
 800c26a:	3101      	addlt	r1, #1
 800c26c:	f7ff feda 	bl	800c024 <_Balloc>
 800c270:	b930      	cbnz	r0, 800c280 <__multiply+0x44>
 800c272:	4602      	mov	r2, r0
 800c274:	4b44      	ldr	r3, [pc, #272]	; (800c388 <__multiply+0x14c>)
 800c276:	4845      	ldr	r0, [pc, #276]	; (800c38c <__multiply+0x150>)
 800c278:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c27c:	f000 fc8c 	bl	800cb98 <__assert_func>
 800c280:	f100 0514 	add.w	r5, r0, #20
 800c284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c288:	462b      	mov	r3, r5
 800c28a:	2200      	movs	r2, #0
 800c28c:	4543      	cmp	r3, r8
 800c28e:	d321      	bcc.n	800c2d4 <__multiply+0x98>
 800c290:	f104 0314 	add.w	r3, r4, #20
 800c294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c298:	f109 0314 	add.w	r3, r9, #20
 800c29c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2a0:	9202      	str	r2, [sp, #8]
 800c2a2:	1b3a      	subs	r2, r7, r4
 800c2a4:	3a15      	subs	r2, #21
 800c2a6:	f022 0203 	bic.w	r2, r2, #3
 800c2aa:	3204      	adds	r2, #4
 800c2ac:	f104 0115 	add.w	r1, r4, #21
 800c2b0:	428f      	cmp	r7, r1
 800c2b2:	bf38      	it	cc
 800c2b4:	2204      	movcc	r2, #4
 800c2b6:	9201      	str	r2, [sp, #4]
 800c2b8:	9a02      	ldr	r2, [sp, #8]
 800c2ba:	9303      	str	r3, [sp, #12]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d80c      	bhi.n	800c2da <__multiply+0x9e>
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	dd03      	ble.n	800c2cc <__multiply+0x90>
 800c2c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d05b      	beq.n	800c384 <__multiply+0x148>
 800c2cc:	6106      	str	r6, [r0, #16]
 800c2ce:	b005      	add	sp, #20
 800c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d4:	f843 2b04 	str.w	r2, [r3], #4
 800c2d8:	e7d8      	b.n	800c28c <__multiply+0x50>
 800c2da:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2de:	f1ba 0f00 	cmp.w	sl, #0
 800c2e2:	d024      	beq.n	800c32e <__multiply+0xf2>
 800c2e4:	f104 0e14 	add.w	lr, r4, #20
 800c2e8:	46a9      	mov	r9, r5
 800c2ea:	f04f 0c00 	mov.w	ip, #0
 800c2ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2f2:	f8d9 1000 	ldr.w	r1, [r9]
 800c2f6:	fa1f fb82 	uxth.w	fp, r2
 800c2fa:	b289      	uxth	r1, r1
 800c2fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c304:	f8d9 2000 	ldr.w	r2, [r9]
 800c308:	4461      	add	r1, ip
 800c30a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c30e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c316:	b289      	uxth	r1, r1
 800c318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c31c:	4577      	cmp	r7, lr
 800c31e:	f849 1b04 	str.w	r1, [r9], #4
 800c322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c326:	d8e2      	bhi.n	800c2ee <__multiply+0xb2>
 800c328:	9a01      	ldr	r2, [sp, #4]
 800c32a:	f845 c002 	str.w	ip, [r5, r2]
 800c32e:	9a03      	ldr	r2, [sp, #12]
 800c330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c334:	3304      	adds	r3, #4
 800c336:	f1b9 0f00 	cmp.w	r9, #0
 800c33a:	d021      	beq.n	800c380 <__multiply+0x144>
 800c33c:	6829      	ldr	r1, [r5, #0]
 800c33e:	f104 0c14 	add.w	ip, r4, #20
 800c342:	46ae      	mov	lr, r5
 800c344:	f04f 0a00 	mov.w	sl, #0
 800c348:	f8bc b000 	ldrh.w	fp, [ip]
 800c34c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c350:	fb09 220b 	mla	r2, r9, fp, r2
 800c354:	4452      	add	r2, sl
 800c356:	b289      	uxth	r1, r1
 800c358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c35c:	f84e 1b04 	str.w	r1, [lr], #4
 800c360:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c368:	f8be 1000 	ldrh.w	r1, [lr]
 800c36c:	fb09 110a 	mla	r1, r9, sl, r1
 800c370:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c374:	4567      	cmp	r7, ip
 800c376:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c37a:	d8e5      	bhi.n	800c348 <__multiply+0x10c>
 800c37c:	9a01      	ldr	r2, [sp, #4]
 800c37e:	50a9      	str	r1, [r5, r2]
 800c380:	3504      	adds	r5, #4
 800c382:	e799      	b.n	800c2b8 <__multiply+0x7c>
 800c384:	3e01      	subs	r6, #1
 800c386:	e79b      	b.n	800c2c0 <__multiply+0x84>
 800c388:	0800d75c 	.word	0x0800d75c
 800c38c:	0800d76d 	.word	0x0800d76d

0800c390 <__pow5mult>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	4615      	mov	r5, r2
 800c396:	f012 0203 	ands.w	r2, r2, #3
 800c39a:	4606      	mov	r6, r0
 800c39c:	460f      	mov	r7, r1
 800c39e:	d007      	beq.n	800c3b0 <__pow5mult+0x20>
 800c3a0:	4c25      	ldr	r4, [pc, #148]	; (800c438 <__pow5mult+0xa8>)
 800c3a2:	3a01      	subs	r2, #1
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3aa:	f7ff fe9d 	bl	800c0e8 <__multadd>
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	10ad      	asrs	r5, r5, #2
 800c3b2:	d03d      	beq.n	800c430 <__pow5mult+0xa0>
 800c3b4:	69f4      	ldr	r4, [r6, #28]
 800c3b6:	b97c      	cbnz	r4, 800c3d8 <__pow5mult+0x48>
 800c3b8:	2010      	movs	r0, #16
 800c3ba:	f7ff fd7f 	bl	800bebc <malloc>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	61f0      	str	r0, [r6, #28]
 800c3c2:	b928      	cbnz	r0, 800c3d0 <__pow5mult+0x40>
 800c3c4:	4b1d      	ldr	r3, [pc, #116]	; (800c43c <__pow5mult+0xac>)
 800c3c6:	481e      	ldr	r0, [pc, #120]	; (800c440 <__pow5mult+0xb0>)
 800c3c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c3cc:	f000 fbe4 	bl	800cb98 <__assert_func>
 800c3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3d4:	6004      	str	r4, [r0, #0]
 800c3d6:	60c4      	str	r4, [r0, #12]
 800c3d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3e0:	b94c      	cbnz	r4, 800c3f6 <__pow5mult+0x66>
 800c3e2:	f240 2171 	movw	r1, #625	; 0x271
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ff12 	bl	800c210 <__i2b>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	6003      	str	r3, [r0, #0]
 800c3f6:	f04f 0900 	mov.w	r9, #0
 800c3fa:	07eb      	lsls	r3, r5, #31
 800c3fc:	d50a      	bpl.n	800c414 <__pow5mult+0x84>
 800c3fe:	4639      	mov	r1, r7
 800c400:	4622      	mov	r2, r4
 800c402:	4630      	mov	r0, r6
 800c404:	f7ff ff1a 	bl	800c23c <__multiply>
 800c408:	4639      	mov	r1, r7
 800c40a:	4680      	mov	r8, r0
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff fe49 	bl	800c0a4 <_Bfree>
 800c412:	4647      	mov	r7, r8
 800c414:	106d      	asrs	r5, r5, #1
 800c416:	d00b      	beq.n	800c430 <__pow5mult+0xa0>
 800c418:	6820      	ldr	r0, [r4, #0]
 800c41a:	b938      	cbnz	r0, 800c42c <__pow5mult+0x9c>
 800c41c:	4622      	mov	r2, r4
 800c41e:	4621      	mov	r1, r4
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff ff0b 	bl	800c23c <__multiply>
 800c426:	6020      	str	r0, [r4, #0]
 800c428:	f8c0 9000 	str.w	r9, [r0]
 800c42c:	4604      	mov	r4, r0
 800c42e:	e7e4      	b.n	800c3fa <__pow5mult+0x6a>
 800c430:	4638      	mov	r0, r7
 800c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c436:	bf00      	nop
 800c438:	0800d8b8 	.word	0x0800d8b8
 800c43c:	0800d6ed 	.word	0x0800d6ed
 800c440:	0800d76d 	.word	0x0800d76d

0800c444 <__lshift>:
 800c444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c448:	460c      	mov	r4, r1
 800c44a:	6849      	ldr	r1, [r1, #4]
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	4607      	mov	r7, r0
 800c456:	4691      	mov	r9, r2
 800c458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c45c:	f108 0601 	add.w	r6, r8, #1
 800c460:	42b3      	cmp	r3, r6
 800c462:	db0b      	blt.n	800c47c <__lshift+0x38>
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff fddd 	bl	800c024 <_Balloc>
 800c46a:	4605      	mov	r5, r0
 800c46c:	b948      	cbnz	r0, 800c482 <__lshift+0x3e>
 800c46e:	4602      	mov	r2, r0
 800c470:	4b28      	ldr	r3, [pc, #160]	; (800c514 <__lshift+0xd0>)
 800c472:	4829      	ldr	r0, [pc, #164]	; (800c518 <__lshift+0xd4>)
 800c474:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c478:	f000 fb8e 	bl	800cb98 <__assert_func>
 800c47c:	3101      	adds	r1, #1
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	e7ee      	b.n	800c460 <__lshift+0x1c>
 800c482:	2300      	movs	r3, #0
 800c484:	f100 0114 	add.w	r1, r0, #20
 800c488:	f100 0210 	add.w	r2, r0, #16
 800c48c:	4618      	mov	r0, r3
 800c48e:	4553      	cmp	r3, sl
 800c490:	db33      	blt.n	800c4fa <__lshift+0xb6>
 800c492:	6920      	ldr	r0, [r4, #16]
 800c494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c498:	f104 0314 	add.w	r3, r4, #20
 800c49c:	f019 091f 	ands.w	r9, r9, #31
 800c4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4a8:	d02b      	beq.n	800c502 <__lshift+0xbe>
 800c4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800c4ae:	468a      	mov	sl, r1
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4b8:	4310      	orrs	r0, r2
 800c4ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c2:	459c      	cmp	ip, r3
 800c4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4c8:	d8f3      	bhi.n	800c4b2 <__lshift+0x6e>
 800c4ca:	ebac 0304 	sub.w	r3, ip, r4
 800c4ce:	3b15      	subs	r3, #21
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	f104 0015 	add.w	r0, r4, #21
 800c4da:	4584      	cmp	ip, r0
 800c4dc:	bf38      	it	cc
 800c4de:	2304      	movcc	r3, #4
 800c4e0:	50ca      	str	r2, [r1, r3]
 800c4e2:	b10a      	cbz	r2, 800c4e8 <__lshift+0xa4>
 800c4e4:	f108 0602 	add.w	r6, r8, #2
 800c4e8:	3e01      	subs	r6, #1
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	612e      	str	r6, [r5, #16]
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	f7ff fdd8 	bl	800c0a4 <_Bfree>
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4fe:	3301      	adds	r3, #1
 800c500:	e7c5      	b.n	800c48e <__lshift+0x4a>
 800c502:	3904      	subs	r1, #4
 800c504:	f853 2b04 	ldr.w	r2, [r3], #4
 800c508:	f841 2f04 	str.w	r2, [r1, #4]!
 800c50c:	459c      	cmp	ip, r3
 800c50e:	d8f9      	bhi.n	800c504 <__lshift+0xc0>
 800c510:	e7ea      	b.n	800c4e8 <__lshift+0xa4>
 800c512:	bf00      	nop
 800c514:	0800d75c 	.word	0x0800d75c
 800c518:	0800d76d 	.word	0x0800d76d

0800c51c <__mcmp>:
 800c51c:	b530      	push	{r4, r5, lr}
 800c51e:	6902      	ldr	r2, [r0, #16]
 800c520:	690c      	ldr	r4, [r1, #16]
 800c522:	1b12      	subs	r2, r2, r4
 800c524:	d10e      	bne.n	800c544 <__mcmp+0x28>
 800c526:	f100 0314 	add.w	r3, r0, #20
 800c52a:	3114      	adds	r1, #20
 800c52c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c534:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c538:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c53c:	42a5      	cmp	r5, r4
 800c53e:	d003      	beq.n	800c548 <__mcmp+0x2c>
 800c540:	d305      	bcc.n	800c54e <__mcmp+0x32>
 800c542:	2201      	movs	r2, #1
 800c544:	4610      	mov	r0, r2
 800c546:	bd30      	pop	{r4, r5, pc}
 800c548:	4283      	cmp	r3, r0
 800c54a:	d3f3      	bcc.n	800c534 <__mcmp+0x18>
 800c54c:	e7fa      	b.n	800c544 <__mcmp+0x28>
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	e7f7      	b.n	800c544 <__mcmp+0x28>

0800c554 <__mdiff>:
 800c554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	460c      	mov	r4, r1
 800c55a:	4606      	mov	r6, r0
 800c55c:	4611      	mov	r1, r2
 800c55e:	4620      	mov	r0, r4
 800c560:	4690      	mov	r8, r2
 800c562:	f7ff ffdb 	bl	800c51c <__mcmp>
 800c566:	1e05      	subs	r5, r0, #0
 800c568:	d110      	bne.n	800c58c <__mdiff+0x38>
 800c56a:	4629      	mov	r1, r5
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff fd59 	bl	800c024 <_Balloc>
 800c572:	b930      	cbnz	r0, 800c582 <__mdiff+0x2e>
 800c574:	4b3a      	ldr	r3, [pc, #232]	; (800c660 <__mdiff+0x10c>)
 800c576:	4602      	mov	r2, r0
 800c578:	f240 2137 	movw	r1, #567	; 0x237
 800c57c:	4839      	ldr	r0, [pc, #228]	; (800c664 <__mdiff+0x110>)
 800c57e:	f000 fb0b 	bl	800cb98 <__assert_func>
 800c582:	2301      	movs	r3, #1
 800c584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58c:	bfa4      	itt	ge
 800c58e:	4643      	movge	r3, r8
 800c590:	46a0      	movge	r8, r4
 800c592:	4630      	mov	r0, r6
 800c594:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c598:	bfa6      	itte	ge
 800c59a:	461c      	movge	r4, r3
 800c59c:	2500      	movge	r5, #0
 800c59e:	2501      	movlt	r5, #1
 800c5a0:	f7ff fd40 	bl	800c024 <_Balloc>
 800c5a4:	b920      	cbnz	r0, 800c5b0 <__mdiff+0x5c>
 800c5a6:	4b2e      	ldr	r3, [pc, #184]	; (800c660 <__mdiff+0x10c>)
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	f240 2145 	movw	r1, #581	; 0x245
 800c5ae:	e7e5      	b.n	800c57c <__mdiff+0x28>
 800c5b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5b4:	6926      	ldr	r6, [r4, #16]
 800c5b6:	60c5      	str	r5, [r0, #12]
 800c5b8:	f104 0914 	add.w	r9, r4, #20
 800c5bc:	f108 0514 	add.w	r5, r8, #20
 800c5c0:	f100 0e14 	add.w	lr, r0, #20
 800c5c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5cc:	f108 0210 	add.w	r2, r8, #16
 800c5d0:	46f2      	mov	sl, lr
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5dc:	fa11 f88b 	uxtah	r8, r1, fp
 800c5e0:	b299      	uxth	r1, r3
 800c5e2:	0c1b      	lsrs	r3, r3, #16
 800c5e4:	eba8 0801 	sub.w	r8, r8, r1
 800c5e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5f0:	fa1f f888 	uxth.w	r8, r8
 800c5f4:	1419      	asrs	r1, r3, #16
 800c5f6:	454e      	cmp	r6, r9
 800c5f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5fc:	f84a 3b04 	str.w	r3, [sl], #4
 800c600:	d8e8      	bhi.n	800c5d4 <__mdiff+0x80>
 800c602:	1b33      	subs	r3, r6, r4
 800c604:	3b15      	subs	r3, #21
 800c606:	f023 0303 	bic.w	r3, r3, #3
 800c60a:	3304      	adds	r3, #4
 800c60c:	3415      	adds	r4, #21
 800c60e:	42a6      	cmp	r6, r4
 800c610:	bf38      	it	cc
 800c612:	2304      	movcc	r3, #4
 800c614:	441d      	add	r5, r3
 800c616:	4473      	add	r3, lr
 800c618:	469e      	mov	lr, r3
 800c61a:	462e      	mov	r6, r5
 800c61c:	4566      	cmp	r6, ip
 800c61e:	d30e      	bcc.n	800c63e <__mdiff+0xea>
 800c620:	f10c 0203 	add.w	r2, ip, #3
 800c624:	1b52      	subs	r2, r2, r5
 800c626:	f022 0203 	bic.w	r2, r2, #3
 800c62a:	3d03      	subs	r5, #3
 800c62c:	45ac      	cmp	ip, r5
 800c62e:	bf38      	it	cc
 800c630:	2200      	movcc	r2, #0
 800c632:	4413      	add	r3, r2
 800c634:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c638:	b17a      	cbz	r2, 800c65a <__mdiff+0x106>
 800c63a:	6107      	str	r7, [r0, #16]
 800c63c:	e7a4      	b.n	800c588 <__mdiff+0x34>
 800c63e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c642:	fa11 f288 	uxtah	r2, r1, r8
 800c646:	1414      	asrs	r4, r2, #16
 800c648:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c64c:	b292      	uxth	r2, r2
 800c64e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c652:	f84e 2b04 	str.w	r2, [lr], #4
 800c656:	1421      	asrs	r1, r4, #16
 800c658:	e7e0      	b.n	800c61c <__mdiff+0xc8>
 800c65a:	3f01      	subs	r7, #1
 800c65c:	e7ea      	b.n	800c634 <__mdiff+0xe0>
 800c65e:	bf00      	nop
 800c660:	0800d75c 	.word	0x0800d75c
 800c664:	0800d76d 	.word	0x0800d76d

0800c668 <__d2b>:
 800c668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	460f      	mov	r7, r1
 800c66e:	2101      	movs	r1, #1
 800c670:	ec59 8b10 	vmov	r8, r9, d0
 800c674:	4616      	mov	r6, r2
 800c676:	f7ff fcd5 	bl	800c024 <_Balloc>
 800c67a:	4604      	mov	r4, r0
 800c67c:	b930      	cbnz	r0, 800c68c <__d2b+0x24>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b24      	ldr	r3, [pc, #144]	; (800c714 <__d2b+0xac>)
 800c682:	4825      	ldr	r0, [pc, #148]	; (800c718 <__d2b+0xb0>)
 800c684:	f240 310f 	movw	r1, #783	; 0x30f
 800c688:	f000 fa86 	bl	800cb98 <__assert_func>
 800c68c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c694:	bb2d      	cbnz	r5, 800c6e2 <__d2b+0x7a>
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	f1b8 0300 	subs.w	r3, r8, #0
 800c69c:	d026      	beq.n	800c6ec <__d2b+0x84>
 800c69e:	4668      	mov	r0, sp
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	f7ff fd87 	bl	800c1b4 <__lo0bits>
 800c6a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6aa:	b1e8      	cbz	r0, 800c6e8 <__d2b+0x80>
 800c6ac:	f1c0 0320 	rsb	r3, r0, #32
 800c6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	40c2      	lsrs	r2, r0
 800c6b8:	6163      	str	r3, [r4, #20]
 800c6ba:	9201      	str	r2, [sp, #4]
 800c6bc:	9b01      	ldr	r3, [sp, #4]
 800c6be:	61a3      	str	r3, [r4, #24]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bf14      	ite	ne
 800c6c4:	2202      	movne	r2, #2
 800c6c6:	2201      	moveq	r2, #1
 800c6c8:	6122      	str	r2, [r4, #16]
 800c6ca:	b1bd      	cbz	r5, 800c6fc <__d2b+0x94>
 800c6cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6d0:	4405      	add	r5, r0
 800c6d2:	603d      	str	r5, [r7, #0]
 800c6d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6d8:	6030      	str	r0, [r6, #0]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	b003      	add	sp, #12
 800c6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6e6:	e7d6      	b.n	800c696 <__d2b+0x2e>
 800c6e8:	6161      	str	r1, [r4, #20]
 800c6ea:	e7e7      	b.n	800c6bc <__d2b+0x54>
 800c6ec:	a801      	add	r0, sp, #4
 800c6ee:	f7ff fd61 	bl	800c1b4 <__lo0bits>
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	6163      	str	r3, [r4, #20]
 800c6f6:	3020      	adds	r0, #32
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	e7e5      	b.n	800c6c8 <__d2b+0x60>
 800c6fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c700:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c704:	6038      	str	r0, [r7, #0]
 800c706:	6918      	ldr	r0, [r3, #16]
 800c708:	f7ff fd34 	bl	800c174 <__hi0bits>
 800c70c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c710:	e7e2      	b.n	800c6d8 <__d2b+0x70>
 800c712:	bf00      	nop
 800c714:	0800d75c 	.word	0x0800d75c
 800c718:	0800d76d 	.word	0x0800d76d

0800c71c <__ssputs_r>:
 800c71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	688e      	ldr	r6, [r1, #8]
 800c722:	461f      	mov	r7, r3
 800c724:	42be      	cmp	r6, r7
 800c726:	680b      	ldr	r3, [r1, #0]
 800c728:	4682      	mov	sl, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	4690      	mov	r8, r2
 800c72e:	d82c      	bhi.n	800c78a <__ssputs_r+0x6e>
 800c730:	898a      	ldrh	r2, [r1, #12]
 800c732:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c736:	d026      	beq.n	800c786 <__ssputs_r+0x6a>
 800c738:	6965      	ldr	r5, [r4, #20]
 800c73a:	6909      	ldr	r1, [r1, #16]
 800c73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c740:	eba3 0901 	sub.w	r9, r3, r1
 800c744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c748:	1c7b      	adds	r3, r7, #1
 800c74a:	444b      	add	r3, r9
 800c74c:	106d      	asrs	r5, r5, #1
 800c74e:	429d      	cmp	r5, r3
 800c750:	bf38      	it	cc
 800c752:	461d      	movcc	r5, r3
 800c754:	0553      	lsls	r3, r2, #21
 800c756:	d527      	bpl.n	800c7a8 <__ssputs_r+0x8c>
 800c758:	4629      	mov	r1, r5
 800c75a:	f7ff fbd7 	bl	800bf0c <_malloc_r>
 800c75e:	4606      	mov	r6, r0
 800c760:	b360      	cbz	r0, 800c7bc <__ssputs_r+0xa0>
 800c762:	6921      	ldr	r1, [r4, #16]
 800c764:	464a      	mov	r2, r9
 800c766:	f000 fa09 	bl	800cb7c <memcpy>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	6126      	str	r6, [r4, #16]
 800c778:	6165      	str	r5, [r4, #20]
 800c77a:	444e      	add	r6, r9
 800c77c:	eba5 0509 	sub.w	r5, r5, r9
 800c780:	6026      	str	r6, [r4, #0]
 800c782:	60a5      	str	r5, [r4, #8]
 800c784:	463e      	mov	r6, r7
 800c786:	42be      	cmp	r6, r7
 800c788:	d900      	bls.n	800c78c <__ssputs_r+0x70>
 800c78a:	463e      	mov	r6, r7
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	4632      	mov	r2, r6
 800c790:	4641      	mov	r1, r8
 800c792:	f000 f9c9 	bl	800cb28 <memmove>
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	1b9b      	subs	r3, r3, r6
 800c79a:	60a3      	str	r3, [r4, #8]
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	4433      	add	r3, r6
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	f000 fa3b 	bl	800cc24 <_realloc_r>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d1e0      	bne.n	800c776 <__ssputs_r+0x5a>
 800c7b4:	6921      	ldr	r1, [r4, #16]
 800c7b6:	4650      	mov	r0, sl
 800c7b8:	f7ff fb34 	bl	800be24 <_free_r>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	f8ca 3000 	str.w	r3, [sl]
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ce:	e7e9      	b.n	800c7a4 <__ssputs_r+0x88>

0800c7d0 <_svfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4698      	mov	r8, r3
 800c7d6:	898b      	ldrh	r3, [r1, #12]
 800c7d8:	061b      	lsls	r3, r3, #24
 800c7da:	b09d      	sub	sp, #116	; 0x74
 800c7dc:	4607      	mov	r7, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	d50e      	bpl.n	800c802 <_svfiprintf_r+0x32>
 800c7e4:	690b      	ldr	r3, [r1, #16]
 800c7e6:	b963      	cbnz	r3, 800c802 <_svfiprintf_r+0x32>
 800c7e8:	2140      	movs	r1, #64	; 0x40
 800c7ea:	f7ff fb8f 	bl	800bf0c <_malloc_r>
 800c7ee:	6028      	str	r0, [r5, #0]
 800c7f0:	6128      	str	r0, [r5, #16]
 800c7f2:	b920      	cbnz	r0, 800c7fe <_svfiprintf_r+0x2e>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	e0d0      	b.n	800c9a0 <_svfiprintf_r+0x1d0>
 800c7fe:	2340      	movs	r3, #64	; 0x40
 800c800:	616b      	str	r3, [r5, #20]
 800c802:	2300      	movs	r3, #0
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	2320      	movs	r3, #32
 800c808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c810:	2330      	movs	r3, #48	; 0x30
 800c812:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9b8 <_svfiprintf_r+0x1e8>
 800c816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c81a:	f04f 0901 	mov.w	r9, #1
 800c81e:	4623      	mov	r3, r4
 800c820:	469a      	mov	sl, r3
 800c822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c826:	b10a      	cbz	r2, 800c82c <_svfiprintf_r+0x5c>
 800c828:	2a25      	cmp	r2, #37	; 0x25
 800c82a:	d1f9      	bne.n	800c820 <_svfiprintf_r+0x50>
 800c82c:	ebba 0b04 	subs.w	fp, sl, r4
 800c830:	d00b      	beq.n	800c84a <_svfiprintf_r+0x7a>
 800c832:	465b      	mov	r3, fp
 800c834:	4622      	mov	r2, r4
 800c836:	4629      	mov	r1, r5
 800c838:	4638      	mov	r0, r7
 800c83a:	f7ff ff6f 	bl	800c71c <__ssputs_r>
 800c83e:	3001      	adds	r0, #1
 800c840:	f000 80a9 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c846:	445a      	add	r2, fp
 800c848:	9209      	str	r2, [sp, #36]	; 0x24
 800c84a:	f89a 3000 	ldrb.w	r3, [sl]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 80a1 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c854:	2300      	movs	r3, #0
 800c856:	f04f 32ff 	mov.w	r2, #4294967295
 800c85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85e:	f10a 0a01 	add.w	sl, sl, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9307      	str	r3, [sp, #28]
 800c866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c86a:	931a      	str	r3, [sp, #104]	; 0x68
 800c86c:	4654      	mov	r4, sl
 800c86e:	2205      	movs	r2, #5
 800c870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c874:	4850      	ldr	r0, [pc, #320]	; (800c9b8 <_svfiprintf_r+0x1e8>)
 800c876:	f7f3 fcb3 	bl	80001e0 <memchr>
 800c87a:	9a04      	ldr	r2, [sp, #16]
 800c87c:	b9d8      	cbnz	r0, 800c8b6 <_svfiprintf_r+0xe6>
 800c87e:	06d0      	lsls	r0, r2, #27
 800c880:	bf44      	itt	mi
 800c882:	2320      	movmi	r3, #32
 800c884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c888:	0711      	lsls	r1, r2, #28
 800c88a:	bf44      	itt	mi
 800c88c:	232b      	movmi	r3, #43	; 0x2b
 800c88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d015      	beq.n	800c8c6 <_svfiprintf_r+0xf6>
 800c89a:	9a07      	ldr	r2, [sp, #28]
 800c89c:	4654      	mov	r4, sl
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f04f 0c0a 	mov.w	ip, #10
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8aa:	3b30      	subs	r3, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d94d      	bls.n	800c94c <_svfiprintf_r+0x17c>
 800c8b0:	b1b0      	cbz	r0, 800c8e0 <_svfiprintf_r+0x110>
 800c8b2:	9207      	str	r2, [sp, #28]
 800c8b4:	e014      	b.n	800c8e0 <_svfiprintf_r+0x110>
 800c8b6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	46a2      	mov	sl, r4
 800c8c4:	e7d2      	b.n	800c86c <_svfiprintf_r+0x9c>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	1d19      	adds	r1, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9103      	str	r1, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfbb      	ittet	lt
 800c8d2:	425b      	neglt	r3, r3
 800c8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d8:	9307      	strge	r3, [sp, #28]
 800c8da:	9307      	strlt	r3, [sp, #28]
 800c8dc:	bfb8      	it	lt
 800c8de:	9204      	strlt	r2, [sp, #16]
 800c8e0:	7823      	ldrb	r3, [r4, #0]
 800c8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e4:	d10c      	bne.n	800c900 <_svfiprintf_r+0x130>
 800c8e6:	7863      	ldrb	r3, [r4, #1]
 800c8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ea:	d134      	bne.n	800c956 <_svfiprintf_r+0x186>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	1d1a      	adds	r2, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	9203      	str	r2, [sp, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfb8      	it	lt
 800c8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8fc:	3402      	adds	r4, #2
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9c8 <_svfiprintf_r+0x1f8>
 800c904:	7821      	ldrb	r1, [r4, #0]
 800c906:	2203      	movs	r2, #3
 800c908:	4650      	mov	r0, sl
 800c90a:	f7f3 fc69 	bl	80001e0 <memchr>
 800c90e:	b138      	cbz	r0, 800c920 <_svfiprintf_r+0x150>
 800c910:	9b04      	ldr	r3, [sp, #16]
 800c912:	eba0 000a 	sub.w	r0, r0, sl
 800c916:	2240      	movs	r2, #64	; 0x40
 800c918:	4082      	lsls	r2, r0
 800c91a:	4313      	orrs	r3, r2
 800c91c:	3401      	adds	r4, #1
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c924:	4825      	ldr	r0, [pc, #148]	; (800c9bc <_svfiprintf_r+0x1ec>)
 800c926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c92a:	2206      	movs	r2, #6
 800c92c:	f7f3 fc58 	bl	80001e0 <memchr>
 800c930:	2800      	cmp	r0, #0
 800c932:	d038      	beq.n	800c9a6 <_svfiprintf_r+0x1d6>
 800c934:	4b22      	ldr	r3, [pc, #136]	; (800c9c0 <_svfiprintf_r+0x1f0>)
 800c936:	bb1b      	cbnz	r3, 800c980 <_svfiprintf_r+0x1b0>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	3307      	adds	r3, #7
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c946:	4433      	add	r3, r6
 800c948:	9309      	str	r3, [sp, #36]	; 0x24
 800c94a:	e768      	b.n	800c81e <_svfiprintf_r+0x4e>
 800c94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c950:	460c      	mov	r4, r1
 800c952:	2001      	movs	r0, #1
 800c954:	e7a6      	b.n	800c8a4 <_svfiprintf_r+0xd4>
 800c956:	2300      	movs	r3, #0
 800c958:	3401      	adds	r4, #1
 800c95a:	9305      	str	r3, [sp, #20]
 800c95c:	4619      	mov	r1, r3
 800c95e:	f04f 0c0a 	mov.w	ip, #10
 800c962:	4620      	mov	r0, r4
 800c964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c968:	3a30      	subs	r2, #48	; 0x30
 800c96a:	2a09      	cmp	r2, #9
 800c96c:	d903      	bls.n	800c976 <_svfiprintf_r+0x1a6>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0c6      	beq.n	800c900 <_svfiprintf_r+0x130>
 800c972:	9105      	str	r1, [sp, #20]
 800c974:	e7c4      	b.n	800c900 <_svfiprintf_r+0x130>
 800c976:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97a:	4604      	mov	r4, r0
 800c97c:	2301      	movs	r3, #1
 800c97e:	e7f0      	b.n	800c962 <_svfiprintf_r+0x192>
 800c980:	ab03      	add	r3, sp, #12
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	462a      	mov	r2, r5
 800c986:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <_svfiprintf_r+0x1f4>)
 800c988:	a904      	add	r1, sp, #16
 800c98a:	4638      	mov	r0, r7
 800c98c:	f7fd fe62 	bl	800a654 <_printf_float>
 800c990:	1c42      	adds	r2, r0, #1
 800c992:	4606      	mov	r6, r0
 800c994:	d1d6      	bne.n	800c944 <_svfiprintf_r+0x174>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	065b      	lsls	r3, r3, #25
 800c99a:	f53f af2d 	bmi.w	800c7f8 <_svfiprintf_r+0x28>
 800c99e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a0:	b01d      	add	sp, #116	; 0x74
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	ab03      	add	r3, sp, #12
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <_svfiprintf_r+0x1f4>)
 800c9ae:	a904      	add	r1, sp, #16
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7fe f8f3 	bl	800ab9c <_printf_i>
 800c9b6:	e7eb      	b.n	800c990 <_svfiprintf_r+0x1c0>
 800c9b8:	0800d8c4 	.word	0x0800d8c4
 800c9bc:	0800d8ce 	.word	0x0800d8ce
 800c9c0:	0800a655 	.word	0x0800a655
 800c9c4:	0800c71d 	.word	0x0800c71d
 800c9c8:	0800d8ca 	.word	0x0800d8ca

0800c9cc <__sflush_r>:
 800c9cc:	898a      	ldrh	r2, [r1, #12]
 800c9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	0710      	lsls	r0, r2, #28
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	d458      	bmi.n	800ca8c <__sflush_r+0xc0>
 800c9da:	684b      	ldr	r3, [r1, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	dc05      	bgt.n	800c9ec <__sflush_r+0x20>
 800c9e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dc02      	bgt.n	800c9ec <__sflush_r+0x20>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	d0f9      	beq.n	800c9e6 <__sflush_r+0x1a>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9f8:	682f      	ldr	r7, [r5, #0]
 800c9fa:	6a21      	ldr	r1, [r4, #32]
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	d032      	beq.n	800ca66 <__sflush_r+0x9a>
 800ca00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca02:	89a3      	ldrh	r3, [r4, #12]
 800ca04:	075a      	lsls	r2, r3, #29
 800ca06:	d505      	bpl.n	800ca14 <__sflush_r+0x48>
 800ca08:	6863      	ldr	r3, [r4, #4]
 800ca0a:	1ac0      	subs	r0, r0, r3
 800ca0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca0e:	b10b      	cbz	r3, 800ca14 <__sflush_r+0x48>
 800ca10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca12:	1ac0      	subs	r0, r0, r3
 800ca14:	2300      	movs	r3, #0
 800ca16:	4602      	mov	r2, r0
 800ca18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca1a:	6a21      	ldr	r1, [r4, #32]
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b0      	blx	r6
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	d106      	bne.n	800ca34 <__sflush_r+0x68>
 800ca26:	6829      	ldr	r1, [r5, #0]
 800ca28:	291d      	cmp	r1, #29
 800ca2a:	d82b      	bhi.n	800ca84 <__sflush_r+0xb8>
 800ca2c:	4a29      	ldr	r2, [pc, #164]	; (800cad4 <__sflush_r+0x108>)
 800ca2e:	410a      	asrs	r2, r1
 800ca30:	07d6      	lsls	r6, r2, #31
 800ca32:	d427      	bmi.n	800ca84 <__sflush_r+0xb8>
 800ca34:	2200      	movs	r2, #0
 800ca36:	6062      	str	r2, [r4, #4]
 800ca38:	04d9      	lsls	r1, r3, #19
 800ca3a:	6922      	ldr	r2, [r4, #16]
 800ca3c:	6022      	str	r2, [r4, #0]
 800ca3e:	d504      	bpl.n	800ca4a <__sflush_r+0x7e>
 800ca40:	1c42      	adds	r2, r0, #1
 800ca42:	d101      	bne.n	800ca48 <__sflush_r+0x7c>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b903      	cbnz	r3, 800ca4a <__sflush_r+0x7e>
 800ca48:	6560      	str	r0, [r4, #84]	; 0x54
 800ca4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca4c:	602f      	str	r7, [r5, #0]
 800ca4e:	2900      	cmp	r1, #0
 800ca50:	d0c9      	beq.n	800c9e6 <__sflush_r+0x1a>
 800ca52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca56:	4299      	cmp	r1, r3
 800ca58:	d002      	beq.n	800ca60 <__sflush_r+0x94>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f7ff f9e2 	bl	800be24 <_free_r>
 800ca60:	2000      	movs	r0, #0
 800ca62:	6360      	str	r0, [r4, #52]	; 0x34
 800ca64:	e7c0      	b.n	800c9e8 <__sflush_r+0x1c>
 800ca66:	2301      	movs	r3, #1
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b0      	blx	r6
 800ca6c:	1c41      	adds	r1, r0, #1
 800ca6e:	d1c8      	bne.n	800ca02 <__sflush_r+0x36>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0c5      	beq.n	800ca02 <__sflush_r+0x36>
 800ca76:	2b1d      	cmp	r3, #29
 800ca78:	d001      	beq.n	800ca7e <__sflush_r+0xb2>
 800ca7a:	2b16      	cmp	r3, #22
 800ca7c:	d101      	bne.n	800ca82 <__sflush_r+0xb6>
 800ca7e:	602f      	str	r7, [r5, #0]
 800ca80:	e7b1      	b.n	800c9e6 <__sflush_r+0x1a>
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	e7ad      	b.n	800c9e8 <__sflush_r+0x1c>
 800ca8c:	690f      	ldr	r7, [r1, #16]
 800ca8e:	2f00      	cmp	r7, #0
 800ca90:	d0a9      	beq.n	800c9e6 <__sflush_r+0x1a>
 800ca92:	0793      	lsls	r3, r2, #30
 800ca94:	680e      	ldr	r6, [r1, #0]
 800ca96:	bf08      	it	eq
 800ca98:	694b      	ldreq	r3, [r1, #20]
 800ca9a:	600f      	str	r7, [r1, #0]
 800ca9c:	bf18      	it	ne
 800ca9e:	2300      	movne	r3, #0
 800caa0:	eba6 0807 	sub.w	r8, r6, r7
 800caa4:	608b      	str	r3, [r1, #8]
 800caa6:	f1b8 0f00 	cmp.w	r8, #0
 800caaa:	dd9c      	ble.n	800c9e6 <__sflush_r+0x1a>
 800caac:	6a21      	ldr	r1, [r4, #32]
 800caae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cab0:	4643      	mov	r3, r8
 800cab2:	463a      	mov	r2, r7
 800cab4:	4628      	mov	r0, r5
 800cab6:	47b0      	blx	r6
 800cab8:	2800      	cmp	r0, #0
 800caba:	dc06      	bgt.n	800caca <__sflush_r+0xfe>
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cac2:	81a3      	strh	r3, [r4, #12]
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295
 800cac8:	e78e      	b.n	800c9e8 <__sflush_r+0x1c>
 800caca:	4407      	add	r7, r0
 800cacc:	eba8 0800 	sub.w	r8, r8, r0
 800cad0:	e7e9      	b.n	800caa6 <__sflush_r+0xda>
 800cad2:	bf00      	nop
 800cad4:	dfbffffe 	.word	0xdfbffffe

0800cad8 <_fflush_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	690b      	ldr	r3, [r1, #16]
 800cadc:	4605      	mov	r5, r0
 800cade:	460c      	mov	r4, r1
 800cae0:	b913      	cbnz	r3, 800cae8 <_fflush_r+0x10>
 800cae2:	2500      	movs	r5, #0
 800cae4:	4628      	mov	r0, r5
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	b118      	cbz	r0, 800caf2 <_fflush_r+0x1a>
 800caea:	6a03      	ldr	r3, [r0, #32]
 800caec:	b90b      	cbnz	r3, 800caf2 <_fflush_r+0x1a>
 800caee:	f7fe fa03 	bl	800aef8 <__sinit>
 800caf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0f3      	beq.n	800cae2 <_fflush_r+0xa>
 800cafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cafc:	07d0      	lsls	r0, r2, #31
 800cafe:	d404      	bmi.n	800cb0a <_fflush_r+0x32>
 800cb00:	0599      	lsls	r1, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_fflush_r+0x32>
 800cb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb06:	f7fe fb0e 	bl	800b126 <__retarget_lock_acquire_recursive>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	f7ff ff5d 	bl	800c9cc <__sflush_r>
 800cb12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb14:	07da      	lsls	r2, r3, #31
 800cb16:	4605      	mov	r5, r0
 800cb18:	d4e4      	bmi.n	800cae4 <_fflush_r+0xc>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	059b      	lsls	r3, r3, #22
 800cb1e:	d4e1      	bmi.n	800cae4 <_fflush_r+0xc>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f7fe fb01 	bl	800b128 <__retarget_lock_release_recursive>
 800cb26:	e7dd      	b.n	800cae4 <_fflush_r+0xc>

0800cb28 <memmove>:
 800cb28:	4288      	cmp	r0, r1
 800cb2a:	b510      	push	{r4, lr}
 800cb2c:	eb01 0402 	add.w	r4, r1, r2
 800cb30:	d902      	bls.n	800cb38 <memmove+0x10>
 800cb32:	4284      	cmp	r4, r0
 800cb34:	4623      	mov	r3, r4
 800cb36:	d807      	bhi.n	800cb48 <memmove+0x20>
 800cb38:	1e43      	subs	r3, r0, #1
 800cb3a:	42a1      	cmp	r1, r4
 800cb3c:	d008      	beq.n	800cb50 <memmove+0x28>
 800cb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb46:	e7f8      	b.n	800cb3a <memmove+0x12>
 800cb48:	4402      	add	r2, r0
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	428a      	cmp	r2, r1
 800cb4e:	d100      	bne.n	800cb52 <memmove+0x2a>
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb5a:	e7f7      	b.n	800cb4c <memmove+0x24>

0800cb5c <_sbrk_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d06      	ldr	r5, [pc, #24]	; (800cb78 <_sbrk_r+0x1c>)
 800cb60:	2300      	movs	r3, #0
 800cb62:	4604      	mov	r4, r0
 800cb64:	4608      	mov	r0, r1
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	f7f5 f8f8 	bl	8001d5c <_sbrk>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	d102      	bne.n	800cb76 <_sbrk_r+0x1a>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b103      	cbz	r3, 800cb76 <_sbrk_r+0x1a>
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	200005e4 	.word	0x200005e4

0800cb7c <memcpy>:
 800cb7c:	440a      	add	r2, r1
 800cb7e:	4291      	cmp	r1, r2
 800cb80:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb84:	d100      	bne.n	800cb88 <memcpy+0xc>
 800cb86:	4770      	bx	lr
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb92:	4291      	cmp	r1, r2
 800cb94:	d1f9      	bne.n	800cb8a <memcpy+0xe>
 800cb96:	bd10      	pop	{r4, pc}

0800cb98 <__assert_func>:
 800cb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb9a:	4614      	mov	r4, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <__assert_func+0x2c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	68d8      	ldr	r0, [r3, #12]
 800cba6:	b14c      	cbz	r4, 800cbbc <__assert_func+0x24>
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <__assert_func+0x30>)
 800cbaa:	9100      	str	r1, [sp, #0]
 800cbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbb0:	4906      	ldr	r1, [pc, #24]	; (800cbcc <__assert_func+0x34>)
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f000 f872 	bl	800cc9c <fiprintf>
 800cbb8:	f000 f882 	bl	800ccc0 <abort>
 800cbbc:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <__assert_func+0x38>)
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	e7f3      	b.n	800cbaa <__assert_func+0x12>
 800cbc2:	bf00      	nop
 800cbc4:	20000138 	.word	0x20000138
 800cbc8:	0800d8df 	.word	0x0800d8df
 800cbcc:	0800d8ec 	.word	0x0800d8ec
 800cbd0:	0800d91a 	.word	0x0800d91a

0800cbd4 <_calloc_r>:
 800cbd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbd6:	fba1 2402 	umull	r2, r4, r1, r2
 800cbda:	b94c      	cbnz	r4, 800cbf0 <_calloc_r+0x1c>
 800cbdc:	4611      	mov	r1, r2
 800cbde:	9201      	str	r2, [sp, #4]
 800cbe0:	f7ff f994 	bl	800bf0c <_malloc_r>
 800cbe4:	9a01      	ldr	r2, [sp, #4]
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	b930      	cbnz	r0, 800cbf8 <_calloc_r+0x24>
 800cbea:	4628      	mov	r0, r5
 800cbec:	b003      	add	sp, #12
 800cbee:	bd30      	pop	{r4, r5, pc}
 800cbf0:	220c      	movs	r2, #12
 800cbf2:	6002      	str	r2, [r0, #0]
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	e7f8      	b.n	800cbea <_calloc_r+0x16>
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	f7fe fa16 	bl	800b02a <memset>
 800cbfe:	e7f4      	b.n	800cbea <_calloc_r+0x16>

0800cc00 <__ascii_mbtowc>:
 800cc00:	b082      	sub	sp, #8
 800cc02:	b901      	cbnz	r1, 800cc06 <__ascii_mbtowc+0x6>
 800cc04:	a901      	add	r1, sp, #4
 800cc06:	b142      	cbz	r2, 800cc1a <__ascii_mbtowc+0x1a>
 800cc08:	b14b      	cbz	r3, 800cc1e <__ascii_mbtowc+0x1e>
 800cc0a:	7813      	ldrb	r3, [r2, #0]
 800cc0c:	600b      	str	r3, [r1, #0]
 800cc0e:	7812      	ldrb	r2, [r2, #0]
 800cc10:	1e10      	subs	r0, r2, #0
 800cc12:	bf18      	it	ne
 800cc14:	2001      	movne	r0, #1
 800cc16:	b002      	add	sp, #8
 800cc18:	4770      	bx	lr
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	e7fb      	b.n	800cc16 <__ascii_mbtowc+0x16>
 800cc1e:	f06f 0001 	mvn.w	r0, #1
 800cc22:	e7f8      	b.n	800cc16 <__ascii_mbtowc+0x16>

0800cc24 <_realloc_r>:
 800cc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc28:	4680      	mov	r8, r0
 800cc2a:	4614      	mov	r4, r2
 800cc2c:	460e      	mov	r6, r1
 800cc2e:	b921      	cbnz	r1, 800cc3a <_realloc_r+0x16>
 800cc30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc34:	4611      	mov	r1, r2
 800cc36:	f7ff b969 	b.w	800bf0c <_malloc_r>
 800cc3a:	b92a      	cbnz	r2, 800cc48 <_realloc_r+0x24>
 800cc3c:	f7ff f8f2 	bl	800be24 <_free_r>
 800cc40:	4625      	mov	r5, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc48:	f000 f841 	bl	800ccce <_malloc_usable_size_r>
 800cc4c:	4284      	cmp	r4, r0
 800cc4e:	4607      	mov	r7, r0
 800cc50:	d802      	bhi.n	800cc58 <_realloc_r+0x34>
 800cc52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc56:	d812      	bhi.n	800cc7e <_realloc_r+0x5a>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	f7ff f956 	bl	800bf0c <_malloc_r>
 800cc60:	4605      	mov	r5, r0
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0ed      	beq.n	800cc42 <_realloc_r+0x1e>
 800cc66:	42bc      	cmp	r4, r7
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	bf28      	it	cs
 800cc6e:	463a      	movcs	r2, r7
 800cc70:	f7ff ff84 	bl	800cb7c <memcpy>
 800cc74:	4631      	mov	r1, r6
 800cc76:	4640      	mov	r0, r8
 800cc78:	f7ff f8d4 	bl	800be24 <_free_r>
 800cc7c:	e7e1      	b.n	800cc42 <_realloc_r+0x1e>
 800cc7e:	4635      	mov	r5, r6
 800cc80:	e7df      	b.n	800cc42 <_realloc_r+0x1e>

0800cc82 <__ascii_wctomb>:
 800cc82:	b149      	cbz	r1, 800cc98 <__ascii_wctomb+0x16>
 800cc84:	2aff      	cmp	r2, #255	; 0xff
 800cc86:	bf85      	ittet	hi
 800cc88:	238a      	movhi	r3, #138	; 0x8a
 800cc8a:	6003      	strhi	r3, [r0, #0]
 800cc8c:	700a      	strbls	r2, [r1, #0]
 800cc8e:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc92:	bf98      	it	ls
 800cc94:	2001      	movls	r0, #1
 800cc96:	4770      	bx	lr
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4770      	bx	lr

0800cc9c <fiprintf>:
 800cc9c:	b40e      	push	{r1, r2, r3}
 800cc9e:	b503      	push	{r0, r1, lr}
 800cca0:	4601      	mov	r1, r0
 800cca2:	ab03      	add	r3, sp, #12
 800cca4:	4805      	ldr	r0, [pc, #20]	; (800ccbc <fiprintf+0x20>)
 800cca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccaa:	6800      	ldr	r0, [r0, #0]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	f000 f83f 	bl	800cd30 <_vfiprintf_r>
 800ccb2:	b002      	add	sp, #8
 800ccb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb8:	b003      	add	sp, #12
 800ccba:	4770      	bx	lr
 800ccbc:	20000138 	.word	0x20000138

0800ccc0 <abort>:
 800ccc0:	b508      	push	{r3, lr}
 800ccc2:	2006      	movs	r0, #6
 800ccc4:	f000 fa0c 	bl	800d0e0 <raise>
 800ccc8:	2001      	movs	r0, #1
 800ccca:	f7f4 ffcf 	bl	8001c6c <_exit>

0800ccce <_malloc_usable_size_r>:
 800ccce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd2:	1f18      	subs	r0, r3, #4
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfbc      	itt	lt
 800ccd8:	580b      	ldrlt	r3, [r1, r0]
 800ccda:	18c0      	addlt	r0, r0, r3
 800ccdc:	4770      	bx	lr

0800ccde <__sfputc_r>:
 800ccde:	6893      	ldr	r3, [r2, #8]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	b410      	push	{r4}
 800cce6:	6093      	str	r3, [r2, #8]
 800cce8:	da08      	bge.n	800ccfc <__sfputc_r+0x1e>
 800ccea:	6994      	ldr	r4, [r2, #24]
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	db01      	blt.n	800ccf4 <__sfputc_r+0x16>
 800ccf0:	290a      	cmp	r1, #10
 800ccf2:	d103      	bne.n	800ccfc <__sfputc_r+0x1e>
 800ccf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccf8:	f000 b934 	b.w	800cf64 <__swbuf_r>
 800ccfc:	6813      	ldr	r3, [r2, #0]
 800ccfe:	1c58      	adds	r0, r3, #1
 800cd00:	6010      	str	r0, [r2, #0]
 800cd02:	7019      	strb	r1, [r3, #0]
 800cd04:	4608      	mov	r0, r1
 800cd06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <__sfputs_r>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	4606      	mov	r6, r0
 800cd10:	460f      	mov	r7, r1
 800cd12:	4614      	mov	r4, r2
 800cd14:	18d5      	adds	r5, r2, r3
 800cd16:	42ac      	cmp	r4, r5
 800cd18:	d101      	bne.n	800cd1e <__sfputs_r+0x12>
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e007      	b.n	800cd2e <__sfputs_r+0x22>
 800cd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd22:	463a      	mov	r2, r7
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ffda 	bl	800ccde <__sfputc_r>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d1f3      	bne.n	800cd16 <__sfputs_r+0xa>
 800cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd30 <_vfiprintf_r>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	460d      	mov	r5, r1
 800cd36:	b09d      	sub	sp, #116	; 0x74
 800cd38:	4614      	mov	r4, r2
 800cd3a:	4698      	mov	r8, r3
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	b118      	cbz	r0, 800cd48 <_vfiprintf_r+0x18>
 800cd40:	6a03      	ldr	r3, [r0, #32]
 800cd42:	b90b      	cbnz	r3, 800cd48 <_vfiprintf_r+0x18>
 800cd44:	f7fe f8d8 	bl	800aef8 <__sinit>
 800cd48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd4a:	07d9      	lsls	r1, r3, #31
 800cd4c:	d405      	bmi.n	800cd5a <_vfiprintf_r+0x2a>
 800cd4e:	89ab      	ldrh	r3, [r5, #12]
 800cd50:	059a      	lsls	r2, r3, #22
 800cd52:	d402      	bmi.n	800cd5a <_vfiprintf_r+0x2a>
 800cd54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd56:	f7fe f9e6 	bl	800b126 <__retarget_lock_acquire_recursive>
 800cd5a:	89ab      	ldrh	r3, [r5, #12]
 800cd5c:	071b      	lsls	r3, r3, #28
 800cd5e:	d501      	bpl.n	800cd64 <_vfiprintf_r+0x34>
 800cd60:	692b      	ldr	r3, [r5, #16]
 800cd62:	b99b      	cbnz	r3, 800cd8c <_vfiprintf_r+0x5c>
 800cd64:	4629      	mov	r1, r5
 800cd66:	4630      	mov	r0, r6
 800cd68:	f000 f93a 	bl	800cfe0 <__swsetup_r>
 800cd6c:	b170      	cbz	r0, 800cd8c <_vfiprintf_r+0x5c>
 800cd6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd70:	07dc      	lsls	r4, r3, #31
 800cd72:	d504      	bpl.n	800cd7e <_vfiprintf_r+0x4e>
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295
 800cd78:	b01d      	add	sp, #116	; 0x74
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7e:	89ab      	ldrh	r3, [r5, #12]
 800cd80:	0598      	lsls	r0, r3, #22
 800cd82:	d4f7      	bmi.n	800cd74 <_vfiprintf_r+0x44>
 800cd84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd86:	f7fe f9cf 	bl	800b128 <__retarget_lock_release_recursive>
 800cd8a:	e7f3      	b.n	800cd74 <_vfiprintf_r+0x44>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd90:	2320      	movs	r3, #32
 800cd92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd96:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd9a:	2330      	movs	r3, #48	; 0x30
 800cd9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf50 <_vfiprintf_r+0x220>
 800cda0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cda4:	f04f 0901 	mov.w	r9, #1
 800cda8:	4623      	mov	r3, r4
 800cdaa:	469a      	mov	sl, r3
 800cdac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb0:	b10a      	cbz	r2, 800cdb6 <_vfiprintf_r+0x86>
 800cdb2:	2a25      	cmp	r2, #37	; 0x25
 800cdb4:	d1f9      	bne.n	800cdaa <_vfiprintf_r+0x7a>
 800cdb6:	ebba 0b04 	subs.w	fp, sl, r4
 800cdba:	d00b      	beq.n	800cdd4 <_vfiprintf_r+0xa4>
 800cdbc:	465b      	mov	r3, fp
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f7ff ffa2 	bl	800cd0c <__sfputs_r>
 800cdc8:	3001      	adds	r0, #1
 800cdca:	f000 80a9 	beq.w	800cf20 <_vfiprintf_r+0x1f0>
 800cdce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd0:	445a      	add	r2, fp
 800cdd2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 80a1 	beq.w	800cf20 <_vfiprintf_r+0x1f0>
 800cdde:	2300      	movs	r3, #0
 800cde0:	f04f 32ff 	mov.w	r2, #4294967295
 800cde4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cde8:	f10a 0a01 	add.w	sl, sl, #1
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	9307      	str	r3, [sp, #28]
 800cdf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdf4:	931a      	str	r3, [sp, #104]	; 0x68
 800cdf6:	4654      	mov	r4, sl
 800cdf8:	2205      	movs	r2, #5
 800cdfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfe:	4854      	ldr	r0, [pc, #336]	; (800cf50 <_vfiprintf_r+0x220>)
 800ce00:	f7f3 f9ee 	bl	80001e0 <memchr>
 800ce04:	9a04      	ldr	r2, [sp, #16]
 800ce06:	b9d8      	cbnz	r0, 800ce40 <_vfiprintf_r+0x110>
 800ce08:	06d1      	lsls	r1, r2, #27
 800ce0a:	bf44      	itt	mi
 800ce0c:	2320      	movmi	r3, #32
 800ce0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce12:	0713      	lsls	r3, r2, #28
 800ce14:	bf44      	itt	mi
 800ce16:	232b      	movmi	r3, #43	; 0x2b
 800ce18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce20:	2b2a      	cmp	r3, #42	; 0x2a
 800ce22:	d015      	beq.n	800ce50 <_vfiprintf_r+0x120>
 800ce24:	9a07      	ldr	r2, [sp, #28]
 800ce26:	4654      	mov	r4, sl
 800ce28:	2000      	movs	r0, #0
 800ce2a:	f04f 0c0a 	mov.w	ip, #10
 800ce2e:	4621      	mov	r1, r4
 800ce30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce34:	3b30      	subs	r3, #48	; 0x30
 800ce36:	2b09      	cmp	r3, #9
 800ce38:	d94d      	bls.n	800ced6 <_vfiprintf_r+0x1a6>
 800ce3a:	b1b0      	cbz	r0, 800ce6a <_vfiprintf_r+0x13a>
 800ce3c:	9207      	str	r2, [sp, #28]
 800ce3e:	e014      	b.n	800ce6a <_vfiprintf_r+0x13a>
 800ce40:	eba0 0308 	sub.w	r3, r0, r8
 800ce44:	fa09 f303 	lsl.w	r3, r9, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	46a2      	mov	sl, r4
 800ce4e:	e7d2      	b.n	800cdf6 <_vfiprintf_r+0xc6>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	1d19      	adds	r1, r3, #4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	9103      	str	r1, [sp, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bfbb      	ittet	lt
 800ce5c:	425b      	neglt	r3, r3
 800ce5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce62:	9307      	strge	r3, [sp, #28]
 800ce64:	9307      	strlt	r3, [sp, #28]
 800ce66:	bfb8      	it	lt
 800ce68:	9204      	strlt	r2, [sp, #16]
 800ce6a:	7823      	ldrb	r3, [r4, #0]
 800ce6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce6e:	d10c      	bne.n	800ce8a <_vfiprintf_r+0x15a>
 800ce70:	7863      	ldrb	r3, [r4, #1]
 800ce72:	2b2a      	cmp	r3, #42	; 0x2a
 800ce74:	d134      	bne.n	800cee0 <_vfiprintf_r+0x1b0>
 800ce76:	9b03      	ldr	r3, [sp, #12]
 800ce78:	1d1a      	adds	r2, r3, #4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	9203      	str	r2, [sp, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	bfb8      	it	lt
 800ce82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce86:	3402      	adds	r4, #2
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf60 <_vfiprintf_r+0x230>
 800ce8e:	7821      	ldrb	r1, [r4, #0]
 800ce90:	2203      	movs	r2, #3
 800ce92:	4650      	mov	r0, sl
 800ce94:	f7f3 f9a4 	bl	80001e0 <memchr>
 800ce98:	b138      	cbz	r0, 800ceaa <_vfiprintf_r+0x17a>
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	eba0 000a 	sub.w	r0, r0, sl
 800cea0:	2240      	movs	r2, #64	; 0x40
 800cea2:	4082      	lsls	r2, r0
 800cea4:	4313      	orrs	r3, r2
 800cea6:	3401      	adds	r4, #1
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceae:	4829      	ldr	r0, [pc, #164]	; (800cf54 <_vfiprintf_r+0x224>)
 800ceb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceb4:	2206      	movs	r2, #6
 800ceb6:	f7f3 f993 	bl	80001e0 <memchr>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d03f      	beq.n	800cf3e <_vfiprintf_r+0x20e>
 800cebe:	4b26      	ldr	r3, [pc, #152]	; (800cf58 <_vfiprintf_r+0x228>)
 800cec0:	bb1b      	cbnz	r3, 800cf0a <_vfiprintf_r+0x1da>
 800cec2:	9b03      	ldr	r3, [sp, #12]
 800cec4:	3307      	adds	r3, #7
 800cec6:	f023 0307 	bic.w	r3, r3, #7
 800ceca:	3308      	adds	r3, #8
 800cecc:	9303      	str	r3, [sp, #12]
 800cece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced0:	443b      	add	r3, r7
 800ced2:	9309      	str	r3, [sp, #36]	; 0x24
 800ced4:	e768      	b.n	800cda8 <_vfiprintf_r+0x78>
 800ced6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceda:	460c      	mov	r4, r1
 800cedc:	2001      	movs	r0, #1
 800cede:	e7a6      	b.n	800ce2e <_vfiprintf_r+0xfe>
 800cee0:	2300      	movs	r3, #0
 800cee2:	3401      	adds	r4, #1
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	4619      	mov	r1, r3
 800cee8:	f04f 0c0a 	mov.w	ip, #10
 800ceec:	4620      	mov	r0, r4
 800ceee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cef2:	3a30      	subs	r2, #48	; 0x30
 800cef4:	2a09      	cmp	r2, #9
 800cef6:	d903      	bls.n	800cf00 <_vfiprintf_r+0x1d0>
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0c6      	beq.n	800ce8a <_vfiprintf_r+0x15a>
 800cefc:	9105      	str	r1, [sp, #20]
 800cefe:	e7c4      	b.n	800ce8a <_vfiprintf_r+0x15a>
 800cf00:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf04:	4604      	mov	r4, r0
 800cf06:	2301      	movs	r3, #1
 800cf08:	e7f0      	b.n	800ceec <_vfiprintf_r+0x1bc>
 800cf0a:	ab03      	add	r3, sp, #12
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	462a      	mov	r2, r5
 800cf10:	4b12      	ldr	r3, [pc, #72]	; (800cf5c <_vfiprintf_r+0x22c>)
 800cf12:	a904      	add	r1, sp, #16
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7fd fb9d 	bl	800a654 <_printf_float>
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	1c78      	adds	r0, r7, #1
 800cf1e:	d1d6      	bne.n	800cece <_vfiprintf_r+0x19e>
 800cf20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf22:	07d9      	lsls	r1, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_vfiprintf_r+0x202>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	059a      	lsls	r2, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_vfiprintf_r+0x202>
 800cf2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf2e:	f7fe f8fb 	bl	800b128 <__retarget_lock_release_recursive>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	065b      	lsls	r3, r3, #25
 800cf36:	f53f af1d 	bmi.w	800cd74 <_vfiprintf_r+0x44>
 800cf3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf3c:	e71c      	b.n	800cd78 <_vfiprintf_r+0x48>
 800cf3e:	ab03      	add	r3, sp, #12
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	462a      	mov	r2, r5
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <_vfiprintf_r+0x22c>)
 800cf46:	a904      	add	r1, sp, #16
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7fd fe27 	bl	800ab9c <_printf_i>
 800cf4e:	e7e4      	b.n	800cf1a <_vfiprintf_r+0x1ea>
 800cf50:	0800d8c4 	.word	0x0800d8c4
 800cf54:	0800d8ce 	.word	0x0800d8ce
 800cf58:	0800a655 	.word	0x0800a655
 800cf5c:	0800cd0d 	.word	0x0800cd0d
 800cf60:	0800d8ca 	.word	0x0800d8ca

0800cf64 <__swbuf_r>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	460e      	mov	r6, r1
 800cf68:	4614      	mov	r4, r2
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	b118      	cbz	r0, 800cf76 <__swbuf_r+0x12>
 800cf6e:	6a03      	ldr	r3, [r0, #32]
 800cf70:	b90b      	cbnz	r3, 800cf76 <__swbuf_r+0x12>
 800cf72:	f7fd ffc1 	bl	800aef8 <__sinit>
 800cf76:	69a3      	ldr	r3, [r4, #24]
 800cf78:	60a3      	str	r3, [r4, #8]
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	071a      	lsls	r2, r3, #28
 800cf7e:	d525      	bpl.n	800cfcc <__swbuf_r+0x68>
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	b31b      	cbz	r3, 800cfcc <__swbuf_r+0x68>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	6922      	ldr	r2, [r4, #16]
 800cf88:	1a98      	subs	r0, r3, r2
 800cf8a:	6963      	ldr	r3, [r4, #20]
 800cf8c:	b2f6      	uxtb	r6, r6
 800cf8e:	4283      	cmp	r3, r0
 800cf90:	4637      	mov	r7, r6
 800cf92:	dc04      	bgt.n	800cf9e <__swbuf_r+0x3a>
 800cf94:	4621      	mov	r1, r4
 800cf96:	4628      	mov	r0, r5
 800cf98:	f7ff fd9e 	bl	800cad8 <_fflush_r>
 800cf9c:	b9e0      	cbnz	r0, 800cfd8 <__swbuf_r+0x74>
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	60a3      	str	r3, [r4, #8]
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	6022      	str	r2, [r4, #0]
 800cfaa:	701e      	strb	r6, [r3, #0]
 800cfac:	6962      	ldr	r2, [r4, #20]
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d004      	beq.n	800cfbe <__swbuf_r+0x5a>
 800cfb4:	89a3      	ldrh	r3, [r4, #12]
 800cfb6:	07db      	lsls	r3, r3, #31
 800cfb8:	d506      	bpl.n	800cfc8 <__swbuf_r+0x64>
 800cfba:	2e0a      	cmp	r6, #10
 800cfbc:	d104      	bne.n	800cfc8 <__swbuf_r+0x64>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f7ff fd89 	bl	800cad8 <_fflush_r>
 800cfc6:	b938      	cbnz	r0, 800cfd8 <__swbuf_r+0x74>
 800cfc8:	4638      	mov	r0, r7
 800cfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f000 f806 	bl	800cfe0 <__swsetup_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d0d5      	beq.n	800cf84 <__swbuf_r+0x20>
 800cfd8:	f04f 37ff 	mov.w	r7, #4294967295
 800cfdc:	e7f4      	b.n	800cfc8 <__swbuf_r+0x64>
	...

0800cfe0 <__swsetup_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4b2a      	ldr	r3, [pc, #168]	; (800d08c <__swsetup_r+0xac>)
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	6818      	ldr	r0, [r3, #0]
 800cfe8:	460c      	mov	r4, r1
 800cfea:	b118      	cbz	r0, 800cff4 <__swsetup_r+0x14>
 800cfec:	6a03      	ldr	r3, [r0, #32]
 800cfee:	b90b      	cbnz	r3, 800cff4 <__swsetup_r+0x14>
 800cff0:	f7fd ff82 	bl	800aef8 <__sinit>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cffa:	0718      	lsls	r0, r3, #28
 800cffc:	d422      	bmi.n	800d044 <__swsetup_r+0x64>
 800cffe:	06d9      	lsls	r1, r3, #27
 800d000:	d407      	bmi.n	800d012 <__swsetup_r+0x32>
 800d002:	2309      	movs	r3, #9
 800d004:	602b      	str	r3, [r5, #0]
 800d006:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295
 800d010:	e034      	b.n	800d07c <__swsetup_r+0x9c>
 800d012:	0758      	lsls	r0, r3, #29
 800d014:	d512      	bpl.n	800d03c <__swsetup_r+0x5c>
 800d016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d018:	b141      	cbz	r1, 800d02c <__swsetup_r+0x4c>
 800d01a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d01e:	4299      	cmp	r1, r3
 800d020:	d002      	beq.n	800d028 <__swsetup_r+0x48>
 800d022:	4628      	mov	r0, r5
 800d024:	f7fe fefe 	bl	800be24 <_free_r>
 800d028:	2300      	movs	r3, #0
 800d02a:	6363      	str	r3, [r4, #52]	; 0x34
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d032:	81a3      	strh	r3, [r4, #12]
 800d034:	2300      	movs	r3, #0
 800d036:	6063      	str	r3, [r4, #4]
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f043 0308 	orr.w	r3, r3, #8
 800d042:	81a3      	strh	r3, [r4, #12]
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	b94b      	cbnz	r3, 800d05c <__swsetup_r+0x7c>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d04e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d052:	d003      	beq.n	800d05c <__swsetup_r+0x7c>
 800d054:	4621      	mov	r1, r4
 800d056:	4628      	mov	r0, r5
 800d058:	f000 f884 	bl	800d164 <__smakebuf_r>
 800d05c:	89a0      	ldrh	r0, [r4, #12]
 800d05e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d062:	f010 0301 	ands.w	r3, r0, #1
 800d066:	d00a      	beq.n	800d07e <__swsetup_r+0x9e>
 800d068:	2300      	movs	r3, #0
 800d06a:	60a3      	str	r3, [r4, #8]
 800d06c:	6963      	ldr	r3, [r4, #20]
 800d06e:	425b      	negs	r3, r3
 800d070:	61a3      	str	r3, [r4, #24]
 800d072:	6923      	ldr	r3, [r4, #16]
 800d074:	b943      	cbnz	r3, 800d088 <__swsetup_r+0xa8>
 800d076:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d07a:	d1c4      	bne.n	800d006 <__swsetup_r+0x26>
 800d07c:	bd38      	pop	{r3, r4, r5, pc}
 800d07e:	0781      	lsls	r1, r0, #30
 800d080:	bf58      	it	pl
 800d082:	6963      	ldrpl	r3, [r4, #20]
 800d084:	60a3      	str	r3, [r4, #8]
 800d086:	e7f4      	b.n	800d072 <__swsetup_r+0x92>
 800d088:	2000      	movs	r0, #0
 800d08a:	e7f7      	b.n	800d07c <__swsetup_r+0x9c>
 800d08c:	20000138 	.word	0x20000138

0800d090 <_raise_r>:
 800d090:	291f      	cmp	r1, #31
 800d092:	b538      	push	{r3, r4, r5, lr}
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	d904      	bls.n	800d0a4 <_raise_r+0x14>
 800d09a:	2316      	movs	r3, #22
 800d09c:	6003      	str	r3, [r0, #0]
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d0a6:	b112      	cbz	r2, 800d0ae <_raise_r+0x1e>
 800d0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0ac:	b94b      	cbnz	r3, 800d0c2 <_raise_r+0x32>
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f000 f830 	bl	800d114 <_getpid_r>
 800d0b4:	462a      	mov	r2, r5
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0be:	f000 b817 	b.w	800d0f0 <_kill_r>
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d00a      	beq.n	800d0dc <_raise_r+0x4c>
 800d0c6:	1c59      	adds	r1, r3, #1
 800d0c8:	d103      	bne.n	800d0d2 <_raise_r+0x42>
 800d0ca:	2316      	movs	r3, #22
 800d0cc:	6003      	str	r3, [r0, #0]
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	e7e7      	b.n	800d0a2 <_raise_r+0x12>
 800d0d2:	2400      	movs	r4, #0
 800d0d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0d8:	4628      	mov	r0, r5
 800d0da:	4798      	blx	r3
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e7e0      	b.n	800d0a2 <_raise_r+0x12>

0800d0e0 <raise>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	; (800d0ec <raise+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f7ff bfd3 	b.w	800d090 <_raise_r>
 800d0ea:	bf00      	nop
 800d0ec:	20000138 	.word	0x20000138

0800d0f0 <_kill_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	; (800d110 <_kill_r+0x20>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	602b      	str	r3, [r5, #0]
 800d0fe:	f7f4 fda5 	bl	8001c4c <_kill>
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	d102      	bne.n	800d10c <_kill_r+0x1c>
 800d106:	682b      	ldr	r3, [r5, #0]
 800d108:	b103      	cbz	r3, 800d10c <_kill_r+0x1c>
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	bd38      	pop	{r3, r4, r5, pc}
 800d10e:	bf00      	nop
 800d110:	200005e4 	.word	0x200005e4

0800d114 <_getpid_r>:
 800d114:	f7f4 bd92 	b.w	8001c3c <_getpid>

0800d118 <__swhatbuf_r>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	460c      	mov	r4, r1
 800d11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d120:	2900      	cmp	r1, #0
 800d122:	b096      	sub	sp, #88	; 0x58
 800d124:	4615      	mov	r5, r2
 800d126:	461e      	mov	r6, r3
 800d128:	da0d      	bge.n	800d146 <__swhatbuf_r+0x2e>
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d130:	f04f 0100 	mov.w	r1, #0
 800d134:	bf0c      	ite	eq
 800d136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d13a:	2340      	movne	r3, #64	; 0x40
 800d13c:	2000      	movs	r0, #0
 800d13e:	6031      	str	r1, [r6, #0]
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	b016      	add	sp, #88	; 0x58
 800d144:	bd70      	pop	{r4, r5, r6, pc}
 800d146:	466a      	mov	r2, sp
 800d148:	f000 f848 	bl	800d1dc <_fstat_r>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	dbec      	blt.n	800d12a <__swhatbuf_r+0x12>
 800d150:	9901      	ldr	r1, [sp, #4]
 800d152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d15a:	4259      	negs	r1, r3
 800d15c:	4159      	adcs	r1, r3
 800d15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d162:	e7eb      	b.n	800d13c <__swhatbuf_r+0x24>

0800d164 <__smakebuf_r>:
 800d164:	898b      	ldrh	r3, [r1, #12]
 800d166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d168:	079d      	lsls	r5, r3, #30
 800d16a:	4606      	mov	r6, r0
 800d16c:	460c      	mov	r4, r1
 800d16e:	d507      	bpl.n	800d180 <__smakebuf_r+0x1c>
 800d170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	2301      	movs	r3, #1
 800d17a:	6163      	str	r3, [r4, #20]
 800d17c:	b002      	add	sp, #8
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	ab01      	add	r3, sp, #4
 800d182:	466a      	mov	r2, sp
 800d184:	f7ff ffc8 	bl	800d118 <__swhatbuf_r>
 800d188:	9900      	ldr	r1, [sp, #0]
 800d18a:	4605      	mov	r5, r0
 800d18c:	4630      	mov	r0, r6
 800d18e:	f7fe febd 	bl	800bf0c <_malloc_r>
 800d192:	b948      	cbnz	r0, 800d1a8 <__smakebuf_r+0x44>
 800d194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d198:	059a      	lsls	r2, r3, #22
 800d19a:	d4ef      	bmi.n	800d17c <__smakebuf_r+0x18>
 800d19c:	f023 0303 	bic.w	r3, r3, #3
 800d1a0:	f043 0302 	orr.w	r3, r3, #2
 800d1a4:	81a3      	strh	r3, [r4, #12]
 800d1a6:	e7e3      	b.n	800d170 <__smakebuf_r+0xc>
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	6020      	str	r0, [r4, #0]
 800d1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	9b00      	ldr	r3, [sp, #0]
 800d1b4:	6163      	str	r3, [r4, #20]
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	6120      	str	r0, [r4, #16]
 800d1ba:	b15b      	cbz	r3, 800d1d4 <__smakebuf_r+0x70>
 800d1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f000 f81d 	bl	800d200 <_isatty_r>
 800d1c6:	b128      	cbz	r0, 800d1d4 <__smakebuf_r+0x70>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	f023 0303 	bic.w	r3, r3, #3
 800d1ce:	f043 0301 	orr.w	r3, r3, #1
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	89a3      	ldrh	r3, [r4, #12]
 800d1d6:	431d      	orrs	r5, r3
 800d1d8:	81a5      	strh	r5, [r4, #12]
 800d1da:	e7cf      	b.n	800d17c <__smakebuf_r+0x18>

0800d1dc <_fstat_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	; (800d1fc <_fstat_r+0x20>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	f7f4 fd8e 	bl	8001d0a <_fstat>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	d102      	bne.n	800d1f8 <_fstat_r+0x1c>
 800d1f2:	682b      	ldr	r3, [r5, #0]
 800d1f4:	b103      	cbz	r3, 800d1f8 <_fstat_r+0x1c>
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	bf00      	nop
 800d1fc:	200005e4 	.word	0x200005e4

0800d200 <_isatty_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d06      	ldr	r5, [pc, #24]	; (800d21c <_isatty_r+0x1c>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	602b      	str	r3, [r5, #0]
 800d20c:	f7f4 fd8d 	bl	8001d2a <_isatty>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_isatty_r+0x1a>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b103      	cbz	r3, 800d21a <_isatty_r+0x1a>
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	200005e4 	.word	0x200005e4

0800d220 <exp>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	ed2d 8b02 	vpush	{d8}
 800d226:	ec55 4b10 	vmov	r4, r5, d0
 800d22a:	f000 f84d 	bl	800d2c8 <__ieee754_exp>
 800d22e:	eeb0 8a40 	vmov.f32	s16, s0
 800d232:	eef0 8a60 	vmov.f32	s17, s1
 800d236:	ec45 4b10 	vmov	d0, r4, r5
 800d23a:	f000 f839 	bl	800d2b0 <finite>
 800d23e:	b168      	cbz	r0, 800d25c <exp+0x3c>
 800d240:	a317      	add	r3, pc, #92	; (adr r3, 800d2a0 <exp+0x80>)
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	4620      	mov	r0, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	f7f3 fc6d 	bl	8000b28 <__aeabi_dcmpgt>
 800d24e:	b160      	cbz	r0, 800d26a <exp+0x4a>
 800d250:	f7fd ff3e 	bl	800b0d0 <__errno>
 800d254:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d290 <exp+0x70>
 800d258:	2322      	movs	r3, #34	; 0x22
 800d25a:	6003      	str	r3, [r0, #0]
 800d25c:	eeb0 0a48 	vmov.f32	s0, s16
 800d260:	eef0 0a68 	vmov.f32	s1, s17
 800d264:	ecbd 8b02 	vpop	{d8}
 800d268:	bd38      	pop	{r3, r4, r5, pc}
 800d26a:	a30f      	add	r3, pc, #60	; (adr r3, 800d2a8 <exp+0x88>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	4620      	mov	r0, r4
 800d272:	4629      	mov	r1, r5
 800d274:	f7f3 fc3a 	bl	8000aec <__aeabi_dcmplt>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d0ef      	beq.n	800d25c <exp+0x3c>
 800d27c:	f7fd ff28 	bl	800b0d0 <__errno>
 800d280:	2322      	movs	r3, #34	; 0x22
 800d282:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d298 <exp+0x78>
 800d286:	6003      	str	r3, [r0, #0]
 800d288:	e7e8      	b.n	800d25c <exp+0x3c>
 800d28a:	bf00      	nop
 800d28c:	f3af 8000 	nop.w
 800d290:	00000000 	.word	0x00000000
 800d294:	7ff00000 	.word	0x7ff00000
	...
 800d2a0:	fefa39ef 	.word	0xfefa39ef
 800d2a4:	40862e42 	.word	0x40862e42
 800d2a8:	d52d3051 	.word	0xd52d3051
 800d2ac:	c0874910 	.word	0xc0874910

0800d2b0 <finite>:
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	ed8d 0b00 	vstr	d0, [sp]
 800d2b6:	9801      	ldr	r0, [sp, #4]
 800d2b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d2bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d2c0:	0fc0      	lsrs	r0, r0, #31
 800d2c2:	b002      	add	sp, #8
 800d2c4:	4770      	bx	lr
	...

0800d2c8 <__ieee754_exp>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	ec55 4b10 	vmov	r4, r5, d0
 800d2d0:	49b5      	ldr	r1, [pc, #724]	; (800d5a8 <__ieee754_exp+0x2e0>)
 800d2d2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d2d6:	428a      	cmp	r2, r1
 800d2d8:	ed2d 8b04 	vpush	{d8-d9}
 800d2dc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d2e0:	d93b      	bls.n	800d35a <__ieee754_exp+0x92>
 800d2e2:	49b2      	ldr	r1, [pc, #712]	; (800d5ac <__ieee754_exp+0x2e4>)
 800d2e4:	428a      	cmp	r2, r1
 800d2e6:	d916      	bls.n	800d316 <__ieee754_exp+0x4e>
 800d2e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	ee10 2a10 	vmov	r2, s0
 800d2f2:	d007      	beq.n	800d304 <__ieee754_exp+0x3c>
 800d2f4:	462b      	mov	r3, r5
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f2 ffcf 	bl	800029c <__adddf3>
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	e002      	b.n	800d30a <__ieee754_exp+0x42>
 800d304:	b10e      	cbz	r6, 800d30a <__ieee754_exp+0x42>
 800d306:	2400      	movs	r4, #0
 800d308:	2500      	movs	r5, #0
 800d30a:	ecbd 8b04 	vpop	{d8-d9}
 800d30e:	ec45 4b10 	vmov	d0, r4, r5
 800d312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d316:	a38e      	add	r3, pc, #568	; (adr r3, 800d550 <__ieee754_exp+0x288>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	ee10 0a10 	vmov	r0, s0
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 fc01 	bl	8000b28 <__aeabi_dcmpgt>
 800d326:	4607      	mov	r7, r0
 800d328:	b130      	cbz	r0, 800d338 <__ieee754_exp+0x70>
 800d32a:	ecbd 8b04 	vpop	{d8-d9}
 800d32e:	2000      	movs	r0, #0
 800d330:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	f000 b971 	b.w	800d61a <__math_oflow>
 800d338:	a387      	add	r3, pc, #540	; (adr r3, 800d558 <__ieee754_exp+0x290>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	4620      	mov	r0, r4
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 fbd3 	bl	8000aec <__aeabi_dcmplt>
 800d346:	2800      	cmp	r0, #0
 800d348:	f000 808b 	beq.w	800d462 <__ieee754_exp+0x19a>
 800d34c:	ecbd 8b04 	vpop	{d8-d9}
 800d350:	4638      	mov	r0, r7
 800d352:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d356:	f000 b957 	b.w	800d608 <__math_uflow>
 800d35a:	4b95      	ldr	r3, [pc, #596]	; (800d5b0 <__ieee754_exp+0x2e8>)
 800d35c:	429a      	cmp	r2, r3
 800d35e:	f240 80ac 	bls.w	800d4ba <__ieee754_exp+0x1f2>
 800d362:	4b94      	ldr	r3, [pc, #592]	; (800d5b4 <__ieee754_exp+0x2ec>)
 800d364:	429a      	cmp	r2, r3
 800d366:	d87c      	bhi.n	800d462 <__ieee754_exp+0x19a>
 800d368:	4b93      	ldr	r3, [pc, #588]	; (800d5b8 <__ieee754_exp+0x2f0>)
 800d36a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d372:	ee10 0a10 	vmov	r0, s0
 800d376:	4629      	mov	r1, r5
 800d378:	f7f2 ff8e 	bl	8000298 <__aeabi_dsub>
 800d37c:	4b8f      	ldr	r3, [pc, #572]	; (800d5bc <__ieee754_exp+0x2f4>)
 800d37e:	00f7      	lsls	r7, r6, #3
 800d380:	443b      	add	r3, r7
 800d382:	ed93 7b00 	vldr	d7, [r3]
 800d386:	f1c6 0a01 	rsb	sl, r6, #1
 800d38a:	4680      	mov	r8, r0
 800d38c:	4689      	mov	r9, r1
 800d38e:	ebaa 0a06 	sub.w	sl, sl, r6
 800d392:	eeb0 8a47 	vmov.f32	s16, s14
 800d396:	eef0 8a67 	vmov.f32	s17, s15
 800d39a:	ec53 2b18 	vmov	r2, r3, d8
 800d39e:	4640      	mov	r0, r8
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	f7f2 ff79 	bl	8000298 <__aeabi_dsub>
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	460d      	mov	r5, r1
 800d3aa:	4622      	mov	r2, r4
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7f3 f929 	bl	8000608 <__aeabi_dmul>
 800d3b6:	a36a      	add	r3, pc, #424	; (adr r3, 800d560 <__ieee754_exp+0x298>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	4606      	mov	r6, r0
 800d3be:	460f      	mov	r7, r1
 800d3c0:	f7f3 f922 	bl	8000608 <__aeabi_dmul>
 800d3c4:	a368      	add	r3, pc, #416	; (adr r3, 800d568 <__ieee754_exp+0x2a0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff65 	bl	8000298 <__aeabi_dsub>
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	463b      	mov	r3, r7
 800d3d2:	f7f3 f919 	bl	8000608 <__aeabi_dmul>
 800d3d6:	a366      	add	r3, pc, #408	; (adr r3, 800d570 <__ieee754_exp+0x2a8>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f2 ff5e 	bl	800029c <__adddf3>
 800d3e0:	4632      	mov	r2, r6
 800d3e2:	463b      	mov	r3, r7
 800d3e4:	f7f3 f910 	bl	8000608 <__aeabi_dmul>
 800d3e8:	a363      	add	r3, pc, #396	; (adr r3, 800d578 <__ieee754_exp+0x2b0>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 ff53 	bl	8000298 <__aeabi_dsub>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	f7f3 f907 	bl	8000608 <__aeabi_dmul>
 800d3fa:	a361      	add	r3, pc, #388	; (adr r3, 800d580 <__ieee754_exp+0x2b8>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f2 ff4c 	bl	800029c <__adddf3>
 800d404:	4632      	mov	r2, r6
 800d406:	463b      	mov	r3, r7
 800d408:	f7f3 f8fe 	bl	8000608 <__aeabi_dmul>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4620      	mov	r0, r4
 800d412:	4629      	mov	r1, r5
 800d414:	f7f2 ff40 	bl	8000298 <__aeabi_dsub>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	4620      	mov	r0, r4
 800d422:	4629      	mov	r1, r5
 800d424:	f7f3 f8f0 	bl	8000608 <__aeabi_dmul>
 800d428:	ec41 0b19 	vmov	d9, r0, r1
 800d42c:	f1ba 0f00 	cmp.w	sl, #0
 800d430:	d15d      	bne.n	800d4ee <__ieee754_exp+0x226>
 800d432:	2200      	movs	r2, #0
 800d434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d438:	4630      	mov	r0, r6
 800d43a:	4639      	mov	r1, r7
 800d43c:	f7f2 ff2c 	bl	8000298 <__aeabi_dsub>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	ec51 0b19 	vmov	r0, r1, d9
 800d448:	f7f3 fa08 	bl	800085c <__aeabi_ddiv>
 800d44c:	4622      	mov	r2, r4
 800d44e:	462b      	mov	r3, r5
 800d450:	f7f2 ff22 	bl	8000298 <__aeabi_dsub>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	2000      	movs	r0, #0
 800d45a:	4959      	ldr	r1, [pc, #356]	; (800d5c0 <__ieee754_exp+0x2f8>)
 800d45c:	f7f2 ff1c 	bl	8000298 <__aeabi_dsub>
 800d460:	e74d      	b.n	800d2fe <__ieee754_exp+0x36>
 800d462:	4b58      	ldr	r3, [pc, #352]	; (800d5c4 <__ieee754_exp+0x2fc>)
 800d464:	4620      	mov	r0, r4
 800d466:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d46a:	4629      	mov	r1, r5
 800d46c:	a346      	add	r3, pc, #280	; (adr r3, 800d588 <__ieee754_exp+0x2c0>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	f7f3 f8c9 	bl	8000608 <__aeabi_dmul>
 800d476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d47a:	f7f2 ff0f 	bl	800029c <__adddf3>
 800d47e:	f7f3 fb73 	bl	8000b68 <__aeabi_d2iz>
 800d482:	4682      	mov	sl, r0
 800d484:	f7f3 f856 	bl	8000534 <__aeabi_i2d>
 800d488:	a341      	add	r3, pc, #260	; (adr r3, 800d590 <__ieee754_exp+0x2c8>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	4606      	mov	r6, r0
 800d490:	460f      	mov	r7, r1
 800d492:	f7f3 f8b9 	bl	8000608 <__aeabi_dmul>
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4620      	mov	r0, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	f7f2 fefb 	bl	8000298 <__aeabi_dsub>
 800d4a2:	a33d      	add	r3, pc, #244	; (adr r3, 800d598 <__ieee754_exp+0x2d0>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	4689      	mov	r9, r1
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f3 f8aa 	bl	8000608 <__aeabi_dmul>
 800d4b4:	ec41 0b18 	vmov	d8, r0, r1
 800d4b8:	e76f      	b.n	800d39a <__ieee754_exp+0xd2>
 800d4ba:	4b43      	ldr	r3, [pc, #268]	; (800d5c8 <__ieee754_exp+0x300>)
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d811      	bhi.n	800d4e4 <__ieee754_exp+0x21c>
 800d4c0:	a337      	add	r3, pc, #220	; (adr r3, 800d5a0 <__ieee754_exp+0x2d8>)
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	ee10 0a10 	vmov	r0, s0
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f2 fee6 	bl	800029c <__adddf3>
 800d4d0:	4b3b      	ldr	r3, [pc, #236]	; (800d5c0 <__ieee754_exp+0x2f8>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f7f3 fb28 	bl	8000b28 <__aeabi_dcmpgt>
 800d4d8:	b138      	cbz	r0, 800d4ea <__ieee754_exp+0x222>
 800d4da:	4b39      	ldr	r3, [pc, #228]	; (800d5c0 <__ieee754_exp+0x2f8>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	e70a      	b.n	800d2fa <__ieee754_exp+0x32>
 800d4e4:	f04f 0a00 	mov.w	sl, #0
 800d4e8:	e75f      	b.n	800d3aa <__ieee754_exp+0xe2>
 800d4ea:	4682      	mov	sl, r0
 800d4ec:	e75d      	b.n	800d3aa <__ieee754_exp+0xe2>
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d4f8:	f7f2 fece 	bl	8000298 <__aeabi_dsub>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	ec51 0b19 	vmov	r0, r1, d9
 800d504:	f7f3 f9aa 	bl	800085c <__aeabi_ddiv>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	ec51 0b18 	vmov	r0, r1, d8
 800d510:	f7f2 fec2 	bl	8000298 <__aeabi_dsub>
 800d514:	4642      	mov	r2, r8
 800d516:	464b      	mov	r3, r9
 800d518:	f7f2 febe 	bl	8000298 <__aeabi_dsub>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	2000      	movs	r0, #0
 800d522:	4927      	ldr	r1, [pc, #156]	; (800d5c0 <__ieee754_exp+0x2f8>)
 800d524:	f7f2 feb8 	bl	8000298 <__aeabi_dsub>
 800d528:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d52c:	4592      	cmp	sl, r2
 800d52e:	db02      	blt.n	800d536 <__ieee754_exp+0x26e>
 800d530:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d534:	e6e3      	b.n	800d2fe <__ieee754_exp+0x36>
 800d536:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d53a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d53e:	2200      	movs	r2, #0
 800d540:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d544:	f7f3 f860 	bl	8000608 <__aeabi_dmul>
 800d548:	e6d9      	b.n	800d2fe <__ieee754_exp+0x36>
 800d54a:	bf00      	nop
 800d54c:	f3af 8000 	nop.w
 800d550:	fefa39ef 	.word	0xfefa39ef
 800d554:	40862e42 	.word	0x40862e42
 800d558:	d52d3051 	.word	0xd52d3051
 800d55c:	c0874910 	.word	0xc0874910
 800d560:	72bea4d0 	.word	0x72bea4d0
 800d564:	3e663769 	.word	0x3e663769
 800d568:	c5d26bf1 	.word	0xc5d26bf1
 800d56c:	3ebbbd41 	.word	0x3ebbbd41
 800d570:	af25de2c 	.word	0xaf25de2c
 800d574:	3f11566a 	.word	0x3f11566a
 800d578:	16bebd93 	.word	0x16bebd93
 800d57c:	3f66c16c 	.word	0x3f66c16c
 800d580:	5555553e 	.word	0x5555553e
 800d584:	3fc55555 	.word	0x3fc55555
 800d588:	652b82fe 	.word	0x652b82fe
 800d58c:	3ff71547 	.word	0x3ff71547
 800d590:	fee00000 	.word	0xfee00000
 800d594:	3fe62e42 	.word	0x3fe62e42
 800d598:	35793c76 	.word	0x35793c76
 800d59c:	3dea39ef 	.word	0x3dea39ef
 800d5a0:	8800759c 	.word	0x8800759c
 800d5a4:	7e37e43c 	.word	0x7e37e43c
 800d5a8:	40862e41 	.word	0x40862e41
 800d5ac:	7fefffff 	.word	0x7fefffff
 800d5b0:	3fd62e42 	.word	0x3fd62e42
 800d5b4:	3ff0a2b1 	.word	0x3ff0a2b1
 800d5b8:	0800da30 	.word	0x0800da30
 800d5bc:	0800da40 	.word	0x0800da40
 800d5c0:	3ff00000 	.word	0x3ff00000
 800d5c4:	0800da20 	.word	0x0800da20
 800d5c8:	3defffff 	.word	0x3defffff

0800d5cc <with_errno>:
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	460d      	mov	r5, r1
 800d5d2:	4616      	mov	r6, r2
 800d5d4:	f7fd fd7c 	bl	800b0d0 <__errno>
 800d5d8:	4629      	mov	r1, r5
 800d5da:	6006      	str	r6, [r0, #0]
 800d5dc:	4620      	mov	r0, r4
 800d5de:	bd70      	pop	{r4, r5, r6, pc}

0800d5e0 <xflow>:
 800d5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5e2:	4614      	mov	r4, r2
 800d5e4:	461d      	mov	r5, r3
 800d5e6:	b108      	cbz	r0, 800d5ec <xflow+0xc>
 800d5e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d5ec:	e9cd 2300 	strd	r2, r3, [sp]
 800d5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	f7f3 f806 	bl	8000608 <__aeabi_dmul>
 800d5fc:	2222      	movs	r2, #34	; 0x22
 800d5fe:	b003      	add	sp, #12
 800d600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d604:	f7ff bfe2 	b.w	800d5cc <with_errno>

0800d608 <__math_uflow>:
 800d608:	b508      	push	{r3, lr}
 800d60a:	2200      	movs	r2, #0
 800d60c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d610:	f7ff ffe6 	bl	800d5e0 <xflow>
 800d614:	ec41 0b10 	vmov	d0, r0, r1
 800d618:	bd08      	pop	{r3, pc}

0800d61a <__math_oflow>:
 800d61a:	b508      	push	{r3, lr}
 800d61c:	2200      	movs	r2, #0
 800d61e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d622:	f7ff ffdd 	bl	800d5e0 <xflow>
 800d626:	ec41 0b10 	vmov	d0, r0, r1
 800d62a:	bd08      	pop	{r3, pc}

0800d62c <_init>:
 800d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62e:	bf00      	nop
 800d630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d632:	bc08      	pop	{r3}
 800d634:	469e      	mov	lr, r3
 800d636:	4770      	bx	lr

0800d638 <_fini>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	bf00      	nop
 800d63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63e:	bc08      	pop	{r3}
 800d640:	469e      	mov	lr, r3
 800d642:	4770      	bx	lr
