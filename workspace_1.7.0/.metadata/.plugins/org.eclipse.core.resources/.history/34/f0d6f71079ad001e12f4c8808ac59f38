/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "iks01a3_motion_sensors.h "
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int tim2Flag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	tim2Flag = 1; // The interrupt func is going to set the flag every 500 ms
} // The flag will be cleared in the while loop.

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char welcome_message = "the code is now running \r\n"; // Used just to be helpful during debugging

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Initialize the accelerometer sensor

  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Enable the acc sensor

  int32_t acc_axes[3]; //Array to save the data of acceleration measured in each axis of space (X Y and Z);

  /////// Variables for 5 coef M.A.F.
  int index_5coef = 0;
  bool aux0 = 0;
  int unfiltered_x[5] = {0};
  int unfiltered_y[5] = {0};
  int unfiltered_z[5] = {0};
  int filtered_xyz[3] = {0};
//////////////

  // Variables for 50 coef Moving Average Filter
  int buffer_x[50] = {0};
  int buffer_y[50] = {0};
  int buffer_z[50] = {0};

  int index_50coef = 0;

  int sum50_x = 0;
  int sum50_y = 0;
  int sum50_z = 0;

  int aux50;

  int filter50_x;
  int filter50_y;
  int filter50_z;
  ///////////////////

  // IRR FILTER COEFFICIENTS
  beta = 0.35; // Picked this value at random, just to implement the code
  // Need to change into something that makes sense
  alfa = 1 - beta;
  int IRR_xyz[3] = {0}; // In this variable I will store the filtered output for IRR in the axes x y and z
//////////////////////

  char buffer[40]; // This will help the data transmission

  HAL_TIM_Base_Start_IT(&htim2);// Start the timer; This will enable interrupts every time the timer is reloaded (every 10 milisec)
  // Print welcome message
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
  while (1)
  {
// This time, the code does not check the status of the reading of the sensor, just to simplify;

	 if(tim2Flag == 1){
		  timFlag = 0; //Clear the interrupt flag of the timer
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, acc_axes); // This function will save the data in the array gyro_axes,	 }


		  ///// 5 COEFFICIENT M.A. FILTER IMPLEMENTATION

		  //// In this implementation of the MA filter the output is stored in the variable "filtered_xyz";
		  /// The output will be transmitted, and in the next iteration of the loop, it will be overwritten


		  filtered_xyz[0] -= unfiltered_x[index_5coef]/5;
		  filtered_xyz[0] -= unfiltered_y[index_5coef]/5;
		  filtered_xyz[0] -= unfiltered_z[index_5coef]/5;
		  // With this, the oldest sample is discarded from the calculation of Y[i]
		  // Before the first loop of the  circular buffer, the value subtracted will be zero

		  unfiltered_x[index_5coef] = acc_axes[0];
		  unfiltered_y[index_5coef] = acc_axes[1];
		  unfiltered_z[index_5coef] = acc_axes[2];
		  // The new sample is stored in place of the discarded sample

		  filtered_xyz[0] += unfiltered_x[index_5coef]/5;
		  filtered_xyz[1] += unfiltered_y[index_5coef]/5;
		  filtered_xyz[2] += unfiltered_z[index_5coef]/5;
		  // The new sample is used to calculate the filtered output

		  index_5coef = (index_5coef+1) % 5; //Moves the index for the circular buffer forward. It will go from 0 to 4

		  ////////////  IRR FILTER IMPLEMENTATION
		  for(int i=0; i<3; i++){
			  IRR_xyz[i] = alfa*acc_axes[i] + beta*IRR_xyz[i];
		  }
		  //////////// Moving Average Filter with 50 coefficients

		  sum50_x -= buffer_x[index_50coef];
		  sum50_y -= buffer_y[index_50coef];
		  sum50_z -= buffer_z[index_50coef];

		  buffer_x[index_50coef] = acc_axes[0];
		  buffer_y[index_50coef] = acc_axes[1];
		  buffer_z[index_50coef] = acc_axes[2];

		  sum50_x += buffer_x[index_50coef];
		  sum50_y += buffer_y[index_50coef];
		  sum50_z += buffer_z[index_50coef];

		  if(aux50 == 1 || index_50coef == 49){  // This conditional will prevent shifts. With this, the first filtered value to be transmitted will be Y[0]
			 aux50 = 1;
			 // Since this code will only work with integers, this work-around was created to avoid dividing each sample by 50 - this could cause the samples to be lost
			 // With this, the code only performs the division by 50 once fifty samples have been summed
			 filter50_x = sum50_x / 50;
			 filter50_y = sum50_y / 50;
			 filter50_z = sum50_z / 50;

			 // Transmit data after filtering
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "50 coef filter data: %d ", filter50_x)); // Transmits acceleration in the X axis
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d ", filter50_y)); // Transmits acceleration in the Y axis
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d \r\n", filter50_z)); // Transmits acceleration in the Z axis

		  }

		  index_50coef = (index_50coef+1) % 50;


		  ////////


		  // Transmit data before filtering
		  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "Input acc data: %d ", acc_axes[0])); // Transmits acceleration in the X axis
		  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d ", acc_axes[1])); // Transmits acceleration in the Y axis
		  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d \r\n", acc_axes[2])); // Transmits acceleration in the Z axis

		  if(aux0 == 1 || index_5coef > 2){  // This conditional will prevent shifts. With this, the first filtered value to be transmitted will be Y[0]
			  aux0 = 1;
			  // Transmit data after filtering
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "5 coef filter data: %d ", filtered_xyz[0])); // Transmits acceleration in the X axis
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d ", filtered_xyz[1])); // Transmits acceleration in the Y axis
			  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%d \r\n", filtered_xyz[2])); // Transmits acceleration in the Z axis
		  }


	 }


	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 839999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
