
lab05_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f5c  08009f5c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f64  08009f64  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000130  0800a09c  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800a09c  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b5a8  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ba  00000000  00000000  0004b74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002518  00000000  00000000  0004ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d07  00000000  00000000  00051120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d77  00000000  00000000  00052e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206d4  00000000  00000000  0006bb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e314  00000000  00000000  0008c272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a728  00000000  00000000  0012a588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00134cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000130 	.word	0x20000130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ec0 	.word	0x08009ec0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000134 	.word	0x20000134
 80001dc:	08009ec0 	.word	0x08009ec0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int timFlag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	timFlag = 1; // The interrupt func is going to set the flag every 500 ms
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
} // The flag will be cleared in the while loop.
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200001dc 	.word	0x200001dc

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b09b      	sub	sp, #108	; 0x6c
 80005b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f005 fa7d 	bl	8005ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f86d 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f94f 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f923 	bl	8000808 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c2:	f000 f8d3 	bl	800076c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char welcome_message[] = "Program has started \r\n"; // Message to transmit in case of any error when reading the data
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <main+0xd4>)
 80005c8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d6:	6020      	str	r0, [r4, #0]
 80005d8:	3404      	adds	r4, #4
 80005da:	8021      	strh	r1, [r4, #0]
 80005dc:	3402      	adds	r4, #2
 80005de:	0c0b      	lsrs	r3, r1, #16
 80005e0:	7023      	strb	r3, [r4, #0]


  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO); // Initialize the gyroscope sensor
 80005e2:	2101      	movs	r1, #1
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 fed1 	bl	800538c <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Initialize the accelerometer sensor
 80005ea:	2102      	movs	r1, #2
 80005ec:	2001      	movs	r0, #1
 80005ee:	f004 fecd 	bl	800538c <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO); // Enable the gyro sensor
 80005f2:	2101      	movs	r1, #1
 80005f4:	2000      	movs	r0, #0
 80005f6:	f004 ffc5 	bl	8005584 <IKS01A3_MOTION_SENSOR_Enable>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Enable the acc sensor
 80005fa:	2102      	movs	r1, #2
 80005fc:	2001      	movs	r0, #1
 80005fe:	f004 ffc1 	bl	8005584 <IKS01A3_MOTION_SENSOR_Enable>

  HAL_TIM_Base_Start_IT(&htim3);// Start the timer; This will enable interrupts every time the timer is reloaded (every 0.5 sec)
 8000602:	4820      	ldr	r0, [pc, #128]	; (8000684 <main+0xd8>)
 8000604:	f007 fc7a 	bl	8007efc <HAL_TIM_Base_Start_IT>
  IKS01A3_MOTION_SENSOR_Axes_t gyro_axes; // Struct to save the data of angular velocity measured in each axis of space (X Y and Z);

  char buffer[40]; // This will help the data transmission

  // Print welcome message
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
 8000608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fde7 	bl	80001e0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <main+0xdc>)
 800061e:	f008 f8a7 	bl	8008770 <HAL_UART_Transmit_IT>
  while (1)
  {

	 if(timFlag == 1){
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0xe0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1fb      	bne.n	8000622 <main+0x76>
		  timFlag = 0; //Clear the interrupt flag of the timer
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <main+0xe0>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &gyro_axes); // This function will save the data in the array gyro_axes, and return a value that can be useful to finding errors;
 8000630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000634:	461a      	mov	r2, r3
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f004 ffe5 	bl	8005608 <IKS01A3_MOTION_SENSOR_GetAxes>
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &acc_axes); // This function will save the data in the array acc_axes, and return a value that can be useful to finding errors;
 800063e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000642:	461a      	mov	r2, r3
 8000644:	2102      	movs	r1, #2
 8000646:	2001      	movs	r0, #1
 8000648:	f004 ffde 	bl	8005608 <IKS01A3_MOTION_SENSOR_GetAxes>


		  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, " %d, %d, %d, %d, %d, %d; \r\n ",
 800064c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800064e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8000650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000658:	463c      	mov	r4, r7
 800065a:	9003      	str	r0, [sp, #12]
 800065c:	9102      	str	r1, [sp, #8]
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4633      	mov	r3, r6
 8000664:	462a      	mov	r2, r5
 8000666:	490a      	ldr	r1, [pc, #40]	; (8000690 <main+0xe4>)
 8000668:	4620      	mov	r0, r4
 800066a:	f008 ff85 	bl	8009578 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0xdc>)
 8000678:	f008 f87a 	bl	8008770 <HAL_UART_Transmit_IT>
	 if(timFlag == 1){
 800067c:	e7d1      	b.n	8000622 <main+0x76>
 800067e:	bf00      	nop
 8000680:	08009ef8 	.word	0x08009ef8
 8000684:	2000014c 	.word	0x2000014c
 8000688:	20000194 	.word	0x20000194
 800068c:	200001dc 	.word	0x200001dc
 8000690:	08009ed8 	.word	0x08009ed8

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 ff88 	bl	80095b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd4>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f006 ff04 	bl	800752c <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f905 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f007 f966 	bl	8007a1c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f8ef 	bl	8000938 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM3_Init+0x94>)
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_TIM3_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_TIM3_Init+0x94>)
 8000790:	f640 0233 	movw	r2, #2099	; 0x833
 8000794:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM3_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM3_Init+0x94>)
 800079e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_TIM3_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM3_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_TIM3_Init+0x94>)
 80007b2:	f007 fb53 	bl	8007e5c <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007bc:	f000 f8bc 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM3_Init+0x94>)
 80007ce:	f007 fce7 	bl	80081a0 <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f8ae 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM3_Init+0x94>)
 80007ea:	f007 feef 	bl	80085cc <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007f4:	f000 f8a0 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000014c 	.word	0x2000014c
 8000804:	40000400 	.word	0x40000400

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f007 ff46 	bl	80086d0 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f875 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000194 	.word	0x20000194
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_GPIO_Init+0xd0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <MX_GPIO_Init+0xd0>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008e8:	f005 fd84 	bl	80063f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000904:	f005 fb0e 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000920:	f005 fb00 	bl	8005f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f005 f9fa 	bl	8005d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d115      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	201d      	movs	r0, #29
 80009c8:	f005 f9e3 	bl	8005d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009cc:	201d      	movs	r0, #29
 80009ce:	f005 f9fc 	bl	8005dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40000400 	.word	0x40000400
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d133      	bne.n	8000a6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_UART_MspInit+0x9c>)
 8000a5a:	f005 fa63 	bl	8005f24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2026      	movs	r0, #38	; 0x26
 8000a64:	f005 f995 	bl	8005d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a68:	2026      	movs	r0, #38	; 0x26
 8000a6a:	f005 f9ae 	bl	8005dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f005 f840 	bl	8005b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM3_IRQHandler+0x10>)
 8000ade:	f007 fa6f 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000014c 	.word	0x2000014c

08000aec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USART2_IRQHandler+0x10>)
 8000af2:	f007 fe73 	bl	80087dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000194 	.word	0x20000194

08000b00 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <BSP_I2C1_Init+0x58>)
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <BSP_I2C1_Init+0x5c>)
 8000b0e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <BSP_I2C1_Init+0x60>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	4912      	ldr	r1, [pc, #72]	; (8000b60 <BSP_I2C1_Init+0x60>)
 8000b18:	600a      	str	r2, [r1, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d117      	bne.n	8000b4e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <BSP_I2C1_Init+0x58>)
 8000b20:	f006 f936 	bl	8006d90 <HAL_I2C_GetState>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <BSP_I2C1_Init+0x58>)
 8000b2c:	f000 f8e2 	bl	8000cf4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10b      	bne.n	8000b4e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b36:	4808      	ldr	r0, [pc, #32]	; (8000b58 <BSP_I2C1_Init+0x58>)
 8000b38:	f000 f8a8 	bl	8000c8c <MX_I2C1_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b42:	f06f 0307 	mvn.w	r3, #7
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	e001      	b.n	8000b4e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b4e:	687b      	ldr	r3, [r7, #4]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001e0 	.word	0x200001e0
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	20000234 	.word	0x20000234

08000b64 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <BSP_I2C1_DeInit+0x48>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d014      	beq.n	8000ba0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <BSP_I2C1_DeInit+0x48>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <BSP_I2C1_DeInit+0x48>)
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <BSP_I2C1_DeInit+0x48>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10b      	bne.n	8000ba0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <BSP_I2C1_DeInit+0x4c>)
 8000b8a:	f000 f8fd 	bl	8000d88 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <BSP_I2C1_DeInit+0x4c>)
 8000b90:	f005 fd8e 	bl	80066b0 <HAL_I2C_DeInit>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000b9a:	f06f 0307 	mvn.w	r3, #7
 8000b9e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000234 	.word	0x20000234
 8000bb0:	200001e0 	.word	0x200001e0

08000bb4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	60ba      	str	r2, [r7, #8]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	81fb      	strh	r3, [r7, #14]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	81bb      	strh	r3, [r7, #12]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bce:	89ba      	ldrh	r2, [r7, #12]
 8000bd0:	89f9      	ldrh	r1, [r7, #14]
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <BSP_I2C1_WriteReg+0x60>)
 8000be4:	f005 fda8 	bl	8006738 <HAL_I2C_Mem_Write>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <BSP_I2C1_WriteReg+0x60>)
 8000bf0:	f006 f8dc 	bl	8006dac <HAL_I2C_GetError>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d103      	bne.n	8000c02 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000bfa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e002      	b.n	8000c08 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c02:	f06f 0303 	mvn.w	r3, #3
 8000c06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c08:	697b      	ldr	r3, [r7, #20]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200001e0 	.word	0x200001e0

08000c18 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	60ba      	str	r2, [r7, #8]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	81fb      	strh	r3, [r7, #14]
 8000c26:	460b      	mov	r3, r1
 8000c28:	81bb      	strh	r3, [r7, #12]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c32:	89ba      	ldrh	r2, [r7, #12]
 8000c34:	89f9      	ldrh	r1, [r7, #14]
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <BSP_I2C1_ReadReg+0x60>)
 8000c48:	f005 fe70 	bl	800692c <HAL_I2C_Mem_Read>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00c      	beq.n	8000c6c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <BSP_I2C1_ReadReg+0x60>)
 8000c54:	f006 f8aa 	bl	8006dac <HAL_I2C_GetError>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d103      	bne.n	8000c66 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c5e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e002      	b.n	8000c6c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c66:	f06f 0303 	mvn.w	r3, #3
 8000c6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c6c:	697b      	ldr	r3, [r7, #20]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001e0 	.word	0x200001e0

08000c7c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c80:	f004 ff7c 	bl	8005b7c <HAL_GetTick>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <MX_I2C1_Init+0x60>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <MX_I2C1_Init+0x64>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f005 fba9 	bl	8006428 <HAL_I2C_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	00061a80 	.word	0x00061a80

08000cf4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <I2C1_MspInit+0x90>)
 8000d36:	f005 f8f5 	bl	8005f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <I2C1_MspInit+0x90>)
 8000d58:	f005 f8e4 	bl	8005f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <I2C1_MspInit+0x8c>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <I2C1_MspDeInit+0x30>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <I2C1_MspDeInit+0x30>)
 8000d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <I2C1_MspDeInit+0x34>)
 8000da2:	f005 fa43 	bl	800622c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <I2C1_MspDeInit+0x34>)
 8000dac:	f005 fa3e 	bl	800622c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f008 fbea 	bl	80095c8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20018000 	.word	0x20018000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	20000238 	.word	0x20000238
 8000e28:	20000478 	.word	0x20000478

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f008 fba9 	bl	80095d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb93 	bl	80005ac <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000e94:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 8000e98:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000e9c:	20000478 	.word	0x20000478

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d103      	bne.n	8000ec0 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e051      	b.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	7b1a      	ldrb	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <LIS2DW12_RegisterBusIO+0xcc>)
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <LIS2DW12_RegisterBusIO+0xd0>)
 8000f02:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e020      	b.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4798      	blx	r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e016      	b.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d112      	bne.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10d      	bne.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2121      	movs	r1, #33	; 0x21
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fcc1 	bl	80018da <LIS2DW12_Write_Reg>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08001c6d 	.word	0x08001c6d
 8000f74:	08001ca3 	.word	0x08001ca3

08000f78 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3320      	adds	r3, #32
 8000f84:	2101      	movs	r1, #1
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 f9ce 	bl	8002328 <lis2dw12_auto_increment_set>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e04b      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3320      	adds	r3, #32
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f8e2 	bl	8002168 <lis2dw12_block_data_update_set>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e03f      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3320      	adds	r3, #32
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f9dc 	bl	8002374 <lis2dw12_fifo_mode_set>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e033      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3320      	adds	r3, #32
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 feb2 	bl	8001d38 <lis2dw12_power_mode_set>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e027      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <LIS2DW12_Init+0xc0>)
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3320      	adds	r3, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 ffa3 	bl	8001f48 <lis2dw12_data_rate_set>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	e010      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3320      	adds	r3, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f001 f8cd 	bl	80021b4 <lis2dw12_full_scale_set>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	e004      	b.n	8001030 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	42c80000 	.word	0x42c80000

0800103c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f888 	bl	800115a <LIS2DW12_ACC_Disable>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e010      	b.n	8001078 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3320      	adds	r3, #32
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f001 f938 	bl	8002306 <lis2dw12_device_id_get>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e000      	b.n	80010a4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2210      	movs	r2, #16
 80010d8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <LIS2DW12_GetCapabilities+0x58>)
 80010ec:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	44c80000 	.word	0x44c80000

08001108 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e019      	b.n	8001152 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001130:	461a      	mov	r2, r3
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fbea 	bl	8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e004      	b.n	8001152 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e010      	b.n	8001192 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3320      	adds	r3, #32
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fee6 	bl	8001f48 <lis2dw12_data_rate_set>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e004      	b.n	8001192 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3320      	adds	r3, #32
 80011ae:	f107 020b 	add.w	r2, r7, #11
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 f823 	bl	8002200 <lis2dw12_full_scale_get>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e080      	b.n	80012c8 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3320      	adds	r3, #32
 80011ca:	f107 020a 	add.w	r2, r7, #10
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fdff 	bl	8001dd4 <lis2dw12_power_mode_get>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	e072      	b.n	80012c8 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 80011e2:	7abb      	ldrb	r3, [r7, #10]
 80011e4:	2b1b      	cmp	r3, #27
 80011e6:	bf8c      	ite	hi
 80011e8:	2201      	movhi	r2, #1
 80011ea:	2200      	movls	r2, #0
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d162      	bne.n	80012b8 <LIS2DW12_ACC_GetSensitivity+0x11c>
 80011f2:	2201      	movs	r2, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 80011fa:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d12f      	bne.n	800126c <LIS2DW12_ACC_GetSensitivity+0xd0>
 800120c:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d04c      	beq.n	80012b8 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d81b      	bhi.n	800125c <LIS2DW12_ACC_GetSensitivity+0xc0>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <LIS2DW12_ACC_GetSensitivity+0x90>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800123d 	.word	0x0800123d
 8001230:	08001245 	.word	0x08001245
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001255 	.word	0x08001255
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001240:	601a      	str	r2, [r3, #0]
          break;
 8001242:	e012      	b.n	800126a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001248:	601a      	str	r2, [r3, #0]
          break;
 800124a:	e00e      	b.n	800126a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8001250:	601a      	str	r2, [r3, #0]
          break;
 8001252:	e00a      	b.n	800126a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <LIS2DW12_ACC_GetSensitivity+0x140>)
 8001258:	601a      	str	r2, [r3, #0]
          break;
 800125a:	e006      	b.n	800126a <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001260:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	60fb      	str	r3, [r7, #12]
          break;
 8001268:	bf00      	nop
      }
      break;
 800126a:	e02c      	b.n	80012c6 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d81a      	bhi.n	80012a8 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8001272:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	08001289 	.word	0x08001289
 800127c:	08001291 	.word	0x08001291
 8001280:	08001299 	.word	0x08001299
 8001284:	080012a1 	.word	0x080012a1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <LIS2DW12_ACC_GetSensitivity+0x148>)
 800128c:	601a      	str	r2, [r3, #0]
          break;
 800128e:	e012      	b.n	80012b6 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8001294:	601a      	str	r2, [r3, #0]
          break;
 8001296:	e00e      	b.n	80012b6 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LIS2DW12_ACC_GetSensitivity+0x134>)
 800129c:	601a      	str	r2, [r3, #0]
          break;
 800129e:	e00a      	b.n	80012b6 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80012a4:	601a      	str	r2, [r3, #0]
          break;
 80012a6:	e006      	b.n	80012b6 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 80012ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	60fb      	str	r3, [r7, #12]
          break;
 80012b4:	bf00      	nop
      }
      break;
 80012b6:	e006      	b.n	80012c6 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 80012bc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	60fb      	str	r3, [r7, #12]
      break;
 80012c4:	bf00      	nop
  }

  return ret;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	3f79db23 	.word	0x3f79db23
 80012d4:	3ff9db23 	.word	0x3ff9db23
 80012d8:	4079db23 	.word	0x4079db23
 80012dc:	40f9db23 	.word	0x40f9db23
 80012e0:	bf800000 	.word	0xbf800000
 80012e4:	3e79db23 	.word	0x3e79db23
 80012e8:	3ef9db23 	.word	0x3ef9db23

080012ec <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3320      	adds	r3, #32
 80012fe:	f107 020b 	add.w	r2, r7, #11
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fe65 	bl	8001fd4 <lis2dw12_data_rate_get>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e14f      	b.n	80015b6 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3320      	adds	r3, #32
 800131a:	f107 020a 	add.w	r2, r7, #10
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fd57 	bl	8001dd4 <lis2dw12_power_mode_get>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
 8001330:	e141      	b.n	80015b6 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8001332:	7afb      	ldrb	r3, [r7, #11]
 8001334:	2b32      	cmp	r3, #50	; 0x32
 8001336:	f200 8136 	bhi.w	80015a6 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	0800140d 	.word	0x0800140d
 8001344:	08001417 	.word	0x08001417
 8001348:	08001471 	.word	0x08001471
 800134c:	08001479 	.word	0x08001479
 8001350:	08001481 	.word	0x08001481
 8001354:	08001489 	.word	0x08001489
 8001358:	08001491 	.word	0x08001491
 800135c:	08001499 	.word	0x08001499
 8001360:	080014f3 	.word	0x080014f3
 8001364:	0800154d 	.word	0x0800154d
 8001368:	080015a7 	.word	0x080015a7
 800136c:	080015a7 	.word	0x080015a7
 8001370:	080015a7 	.word	0x080015a7
 8001374:	080015a7 	.word	0x080015a7
 8001378:	080015a7 	.word	0x080015a7
 800137c:	080015a7 	.word	0x080015a7
 8001380:	080015a7 	.word	0x080015a7
 8001384:	080015a7 	.word	0x080015a7
 8001388:	0800140d 	.word	0x0800140d
 800138c:	080015a7 	.word	0x080015a7
 8001390:	080015a7 	.word	0x080015a7
 8001394:	080015a7 	.word	0x080015a7
 8001398:	080015a7 	.word	0x080015a7
 800139c:	080015a7 	.word	0x080015a7
 80013a0:	080015a7 	.word	0x080015a7
 80013a4:	080015a7 	.word	0x080015a7
 80013a8:	080015a7 	.word	0x080015a7
 80013ac:	080015a7 	.word	0x080015a7
 80013b0:	080015a7 	.word	0x080015a7
 80013b4:	080015a7 	.word	0x080015a7
 80013b8:	080015a7 	.word	0x080015a7
 80013bc:	080015a7 	.word	0x080015a7
 80013c0:	080015a7 	.word	0x080015a7
 80013c4:	080015a7 	.word	0x080015a7
 80013c8:	080015a7 	.word	0x080015a7
 80013cc:	080015a7 	.word	0x080015a7
 80013d0:	080015a7 	.word	0x080015a7
 80013d4:	080015a7 	.word	0x080015a7
 80013d8:	080015a7 	.word	0x080015a7
 80013dc:	080015a7 	.word	0x080015a7
 80013e0:	080015a7 	.word	0x080015a7
 80013e4:	080015a7 	.word	0x080015a7
 80013e8:	080015a7 	.word	0x080015a7
 80013ec:	080015a7 	.word	0x080015a7
 80013f0:	080015a7 	.word	0x080015a7
 80013f4:	080015a7 	.word	0x080015a7
 80013f8:	080015a7 	.word	0x080015a7
 80013fc:	080015a7 	.word	0x080015a7
 8001400:	080015a7 	.word	0x080015a7
 8001404:	080015a7 	.word	0x080015a7
 8001408:	0800140d 	.word	0x0800140d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
      break;
 8001414:	e0ce      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001416:	7abb      	ldrb	r3, [r7, #10]
 8001418:	2b1b      	cmp	r3, #27
 800141a:	bf8c      	ite	hi
 800141c:	2201      	movhi	r2, #1
 800141e:	2200      	movls	r2, #0
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	2a00      	cmp	r2, #0
 8001424:	d11c      	bne.n	8001460 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001430:	2a00      	cmp	r2, #0
 8001432:	bf14      	ite	ne
 8001434:	2201      	movne	r2, #1
 8001436:	2200      	moveq	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	2a00      	cmp	r2, #0
 800143c:	d10c      	bne.n	8001458 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 800143e:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8001454:	601a      	str	r2, [r3, #0]
          break;
 8001456:	e00a      	b.n	800146e <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 800145c:	601a      	str	r2, [r3, #0]
          break;
 800145e:	e006      	b.n	800146e <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a59      	ldr	r2, [pc, #356]	; (80015c8 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8001464:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	60fb      	str	r3, [r7, #12]
          break;
 800146c:	bf00      	nop
      }
      break;
 800146e:	e0a1      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4a53      	ldr	r2, [pc, #332]	; (80015c0 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8001474:	601a      	str	r2, [r3, #0]
      break;
 8001476:	e09d      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a54      	ldr	r2, [pc, #336]	; (80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 800147c:	601a      	str	r2, [r3, #0]
      break;
 800147e:	e099      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4a53      	ldr	r2, [pc, #332]	; (80015d0 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8001484:	601a      	str	r2, [r3, #0]
      break;
 8001486:	e095      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 800148c:	601a      	str	r2, [r3, #0]
      break;
 800148e:	e091      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4a51      	ldr	r2, [pc, #324]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001494:	601a      	str	r2, [r3, #0]
      break;
 8001496:	e08d      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	2b1b      	cmp	r3, #27
 800149c:	bf8c      	ite	hi
 800149e:	2201      	movhi	r2, #1
 80014a0:	2200      	movls	r2, #0
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d11c      	bne.n	80014e2 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 80014a8:	2201      	movs	r2, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2201      	movne	r2, #1
 80014b8:	2200      	moveq	r2, #0
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d10c      	bne.n	80014da <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 80014c0:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4a41      	ldr	r2, [pc, #260]	; (80015dc <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 80014d6:	601a      	str	r2, [r3, #0]
          break;
 80014d8:	e00a      	b.n	80014f0 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80014de:	601a      	str	r2, [r3, #0]
          break;
 80014e0:	e006      	b.n	80014f0 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80014e6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	60fb      	str	r3, [r7, #12]
          break;
 80014ee:	bf00      	nop
      }
      break;
 80014f0:	e060      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80014f2:	7abb      	ldrb	r3, [r7, #10]
 80014f4:	2b1b      	cmp	r3, #27
 80014f6:	bf8c      	ite	hi
 80014f8:	2201      	movhi	r2, #1
 80014fa:	2200      	movls	r2, #0
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d11c      	bne.n	800153c <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8001502:	2201      	movs	r2, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800150c:	2a00      	cmp	r2, #0
 800150e:	bf14      	ite	ne
 8001510:	2201      	movne	r2, #1
 8001512:	2200      	moveq	r2, #0
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	2a00      	cmp	r2, #0
 8001518:	d10c      	bne.n	8001534 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 800151a:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8001530:	601a      	str	r2, [r3, #0]
          break;
 8001532:	e00a      	b.n	800154a <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001538:	601a      	str	r2, [r3, #0]
          break;
 800153a:	e006      	b.n	800154a <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8001540:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	60fb      	str	r3, [r7, #12]
          break;
 8001548:	bf00      	nop
      }
      break;
 800154a:	e033      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	2b1b      	cmp	r3, #27
 8001550:	bf8c      	ite	hi
 8001552:	2201      	movhi	r2, #1
 8001554:	2200      	movls	r2, #0
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	2a00      	cmp	r2, #0
 800155a:	d11c      	bne.n	8001596 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 800155c:	2201      	movs	r2, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001566:	2a00      	cmp	r2, #0
 8001568:	bf14      	ite	ne
 800156a:	2201      	movne	r2, #1
 800156c:	2200      	moveq	r2, #0
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	2a00      	cmp	r2, #0
 8001572:	d10c      	bne.n	800158e <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8001574:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 800158a:	601a      	str	r2, [r3, #0]
          break;
 800158c:	e00a      	b.n	80015a4 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001592:	601a      	str	r2, [r3, #0]
          break;
 8001594:	e006      	b.n	80015a4 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800159a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	60fb      	str	r3, [r7, #12]
          break;
 80015a2:	bf00      	nop
      }
      break;
 80015a4:	e006      	b.n	80015b4 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80015aa:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	60fb      	str	r3, [r7, #12]
      break;
 80015b2:	bf00      	nop
  }

  return ret;
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	41480000 	.word	0x41480000
 80015c4:	3fcccccd 	.word	0x3fcccccd
 80015c8:	bf800000 	.word	0xbf800000
 80015cc:	41c80000 	.word	0x41c80000
 80015d0:	42480000 	.word	0x42480000
 80015d4:	42c80000 	.word	0x42c80000
 80015d8:	43480000 	.word	0x43480000
 80015dc:	43c80000 	.word	0x43c80000
 80015e0:	44480000 	.word	0x44480000
 80015e4:	44c80000 	.word	0x44c80000

080015e8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	ed97 0a00 	vldr	s0, [r7]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f805 	bl	800160c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	ed87 0a02 	vstr	s0, [r7, #8]
 8001618:	460b      	mov	r3, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001626:	2b01      	cmp	r3, #1
 8001628:	d109      	bne.n	800163e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800162a:	79ba      	ldrb	r2, [r7, #6]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4619      	mov	r1, r3
 8001630:	ed97 0a02 	vldr	s0, [r7, #8]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f96b 	bl	8001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800163a:	4603      	mov	r3, r0
 800163c:	e008      	b.n	8001650 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800163e:	79ba      	ldrb	r2, [r7, #6]
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4619      	mov	r1, r3
 8001644:	ed97 0a02 	vldr	s0, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fa7d 	bl	8001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800164e:	4603      	mov	r3, r0
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3320      	adds	r3, #32
 800166a:	f107 020b 	add.w	r2, r7, #11
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fdc5 	bl	8002200 <lis2dw12_full_scale_get>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e027      	b.n	80016d2 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d81b      	bhi.n	80016c0 <LIS2DW12_ACC_GetFullScale+0x68>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <LIS2DW12_ACC_GetFullScale+0x38>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a9 	.word	0x080016a9
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016b9 	.word	0x080016b9
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
      break;
 80016a6:	e013      	b.n	80016d0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2204      	movs	r2, #4
 80016ac:	601a      	str	r2, [r3, #0]
      break;
 80016ae:	e00f      	b.n	80016d0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	601a      	str	r2, [r3, #0]
      break;
 80016b6:	e00b      	b.n	80016d0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	601a      	str	r2, [r3, #0]
      break;
 80016be:	e007      	b.n	80016d0 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f04f 32ff 	mov.w	r2, #4294967295
 80016c6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	60fb      	str	r3, [r7, #12]
      break;
 80016ce:	bf00      	nop
  }

  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop

080016dc <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	dd0b      	ble.n	8001704 <LIS2DW12_ACC_SetFullScale+0x28>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	dd06      	ble.n	8001700 <LIS2DW12_ACC_SetFullScale+0x24>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	dc01      	bgt.n	80016fc <LIS2DW12_ACC_SetFullScale+0x20>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e004      	b.n	8001706 <LIS2DW12_ACC_SetFullScale+0x2a>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e002      	b.n	8001706 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001704:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001706:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3320      	adds	r3, #32
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fd4f 	bl	80021b4 <lis2dw12_full_scale_set>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	e000      	b.n	8001724 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3320      	adds	r3, #32
 800173e:	f107 020b 	add.w	r2, r7, #11
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fb45 	bl	8001dd4 <lis2dw12_power_mode_get>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	e068      	b.n	8001828 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3320      	adds	r3, #32
 800175a:	f107 020c 	add.w	r2, r7, #12
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fd85 	bl	8002270 <lis2dw12_acceleration_raw_get>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	e05a      	b.n	8001828 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b1b      	cmp	r3, #27
 8001776:	bf8c      	ite	hi
 8001778:	2201      	movhi	r2, #1
 800177a:	2200      	movls	r2, #0
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	2a00      	cmp	r2, #0
 8001780:	d14d      	bne.n	800181e <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 800178a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d124      	bne.n	80017e6 <LIS2DW12_ACC_GetAxesRaw+0xba>
 800179c:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d037      	beq.n	800181e <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80017ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da00      	bge.n	80017b8 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 80017b6:	330f      	adds	r3, #15
 80017b8:	111b      	asrs	r3, r3, #4
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80017c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da00      	bge.n	80017ca <LIS2DW12_ACC_GetAxesRaw+0x9e>
 80017c8:	330f      	adds	r3, #15
 80017ca:	111b      	asrs	r3, r3, #4
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80017d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da00      	bge.n	80017dc <LIS2DW12_ACC_GetAxesRaw+0xb0>
 80017da:	330f      	adds	r3, #15
 80017dc:	111b      	asrs	r3, r3, #4
 80017de:	b21a      	sxth	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	809a      	strh	r2, [r3, #4]
      break;
 80017e4:	e01f      	b.n	8001826 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80017e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da00      	bge.n	80017f0 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 80017ee:	3303      	adds	r3, #3
 80017f0:	109b      	asrs	r3, r3, #2
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da00      	bge.n	8001802 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8001800:	3303      	adds	r3, #3
 8001802:	109b      	asrs	r3, r3, #2
 8001804:	b21a      	sxth	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800180a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da00      	bge.n	8001814 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 8001812:	3303      	adds	r3, #3
 8001814:	109b      	asrs	r3, r3, #2
 8001816:	b21a      	sxth	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	809a      	strh	r2, [r3, #4]
      break;
 800181c:	e003      	b.n	8001826 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	617b      	str	r3, [r7, #20]
      break;
 8001824:	bf00      	nop
  }

  return ret;
 8001826:	697b      	ldr	r3, [r7, #20]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff70 	bl	800172c <LIS2DW12_ACC_GetAxesRaw>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e03c      	b.n	80018d2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fc9c 	bl	800119c <LIS2DW12_ACC_GetSensitivity>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e030      	b.n	80018d2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001870:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001888:	ee17 2a90 	vmov	r2, s15
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001890:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189c:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a8:	ee17 2a90 	vmov	r2, s15
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80018b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
 80018e6:	4613      	mov	r3, r2
 80018e8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0020 	add.w	r0, r3, #32
 80018f0:	1cba      	adds	r2, r7, #2
 80018f2:	78f9      	ldrb	r1, [r7, #3]
 80018f4:	2301      	movs	r3, #1
 80018f6:	f000 fa07 	bl	8001d08 <lis2dw12_write_reg>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	e000      	b.n	8001908 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	ed87 0a02 	vstr	s0, [r7, #8]
 800191c:	460b      	mov	r3, r1
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	4613      	mov	r3, r2
 8001922:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	3b01      	subs	r3, #1
 8001928:	2b03      	cmp	r3, #3
 800192a:	d80b      	bhi.n	8001944 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001971 	.word	0x08001971
 8001938:	0800199d 	.word	0x0800199d
 800193c:	080019c9 	.word	0x080019c9
 8001940:	080019f5 	.word	0x080019f5
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d002      	beq.n	8001950 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800194a:	2304      	movs	r3, #4
 800194c:	75fb      	strb	r3, [r7, #23]
          break;
 800194e:	e002      	b.n	8001956 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001950:	2314      	movs	r3, #20
 8001952:	75fb      	strb	r3, [r7, #23]
          break;
 8001954:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001956:	edd7 7a02 	vldr	s15, [r7, #8]
 800195a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d400      	bmi.n	800196a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001968:	e05a      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800196a:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e057      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d002      	beq.n	800197c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001976:	2303      	movs	r3, #3
 8001978:	75fb      	strb	r3, [r7, #23]
          break;
 800197a:	e002      	b.n	8001982 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800197c:	2313      	movs	r3, #19
 800197e:	75fb      	strb	r3, [r7, #23]
          break;
 8001980:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001982:	edd7 7a02 	vldr	s15, [r7, #8]
 8001986:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800198a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	dc00      	bgt.n	8001996 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001994:	e044      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001996:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e041      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d002      	beq.n	80019a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80019a2:	2302      	movs	r3, #2
 80019a4:	75fb      	strb	r3, [r7, #23]
          break;
 80019a6:	e002      	b.n	80019ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80019a8:	2312      	movs	r3, #18
 80019aa:	75fb      	strb	r3, [r7, #23]
          break;
 80019ac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80019ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	dc00      	bgt.n	80019c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80019c0:	e02e      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80019c4:	60bb      	str	r3, [r7, #8]
      break;
 80019c6:	e02b      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d002      	beq.n	80019d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
          break;
 80019d2:	e002      	b.n	80019da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80019d4:	2311      	movs	r3, #17
 80019d6:	75fb      	strb	r3, [r7, #23]
          break;
 80019d8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80019da:	edd7 7a02 	vldr	s15, [r7, #8]
 80019de:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	dc00      	bgt.n	80019ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80019ec:	e018      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80019f0:	60bb      	str	r3, [r7, #8]
      break;
 80019f2:	e015      	b.n	8001a20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d002      	beq.n	8001a00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
          break;
 80019fe:	e002      	b.n	8001a06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001a00:	2310      	movs	r3, #16
 8001a02:	75fb      	strb	r3, [r7, #23]
          break;
 8001a04:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dc00      	bgt.n	8001a1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001a18:	e001      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001a1a:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001a1c:	60bb      	str	r3, [r7, #8]
      break;
 8001a1e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a24:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001b34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	d801      	bhi.n	8001a36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e04d      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d801      	bhi.n	8001a4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e042      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d801      	bhi.n	8001a62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e037      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001b38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d801      	bhi.n	8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e02c      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	d801      	bhi.n	8001a8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e021      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a92:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	d801      	bhi.n	8001aa4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	e016      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001aa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001b40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d801      	bhi.n	8001aba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00b      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d801      	bhi.n	8001ad0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001acc:	2308      	movs	r3, #8
 8001ace:	e000      	b.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ad0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001ad2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3320      	adds	r3, #32
 8001ad8:	7dba      	ldrb	r2, [r7, #22]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa33 	bl	8001f48 <lis2dw12_data_rate_set>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e018      	b.n	8001b20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3320      	adds	r3, #32
 8001af2:	7dfa      	ldrb	r2, [r7, #23]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f91e 	bl	8001d38 <lis2dw12_power_mode_set>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e00b      	b.n	8001b20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	79ba      	ldrb	r2, [r7, #6]
 8001b1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	41480000 	.word	0x41480000
 8001b2c:	43480000 	.word	0x43480000
 8001b30:	43480000 	.word	0x43480000
 8001b34:	3fcccccd 	.word	0x3fcccccd
 8001b38:	42480000 	.word	0x42480000
 8001b3c:	42c80000 	.word	0x42c80000
 8001b40:	43c80000 	.word	0x43c80000
 8001b44:	44480000 	.word	0x44480000

08001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b54:	460b      	mov	r3, r1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	79ba      	ldrb	r2, [r7, #6]
 8001b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001c30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d801      	bhi.n	8001b82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001b80:	e04d      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	d801      	bhi.n	8001b98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001b94:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001b96:	e042      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d801      	bhi.n	8001bae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001bac:	e037      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001c40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d801      	bhi.n	8001bc4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001bc2:	e02c      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001c48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d801      	bhi.n	8001bda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001bd8:	e021      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bde:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d801      	bhi.n	8001bf0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001bee:	e016      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001c58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d801      	bhi.n	8001c06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001c04:	e00b      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	d801      	bhi.n	8001c1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001c1a:	e000      	b.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	3fcccccd 	.word	0x3fcccccd
 8001c34:	3fcccccd 	.word	0x3fcccccd
 8001c38:	41480000 	.word	0x41480000
 8001c3c:	41c80000 	.word	0x41c80000
 8001c40:	42480000 	.word	0x42480000
 8001c44:	42480000 	.word	0x42480000
 8001c48:	42c80000 	.word	0x42c80000
 8001c4c:	42c80000 	.word	0x42c80000
 8001c50:	43480000 	.word	0x43480000
 8001c54:	43480000 	.word	0x43480000
 8001c58:	43c80000 	.word	0x43c80000
 8001c5c:	43c80000 	.word	0x43c80000
 8001c60:	44480000 	.word	0x44480000
 8001c64:	44480000 	.word	0x44480000
 8001c68:	44c80000 	.word	0x44c80000

08001c6c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	72fb      	strb	r3, [r7, #11]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	695c      	ldr	r4, [r3, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	7b1b      	ldrb	r3, [r3, #12]
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	893b      	ldrh	r3, [r7, #8]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	47a0      	blx	r4
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}

08001ca2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	461a      	mov	r2, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	72fb      	strb	r3, [r7, #11]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	691c      	ldr	r4, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	7b1b      	ldrb	r3, [r3, #12]
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b299      	uxth	r1, r3
 8001cc8:	893b      	ldrh	r3, [r7, #8]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	47a0      	blx	r4
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}

08001cd8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	72fb      	strb	r3, [r7, #11]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685c      	ldr	r4, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	68d8      	ldr	r0, [r3, #12]
 8001cf4:	893b      	ldrh	r3, [r7, #8]
 8001cf6:	7af9      	ldrb	r1, [r7, #11]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	47a0      	blx	r4
 8001cfc:	6178      	str	r0, [r7, #20]

  return ret;
 8001cfe:	697b      	ldr	r3, [r7, #20]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	72fb      	strb	r3, [r7, #11]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681c      	ldr	r4, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68d8      	ldr	r0, [r3, #12]
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	7af9      	ldrb	r1, [r7, #11]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	47a0      	blx	r4
 8001d2c:	6178      	str	r0, [r7, #20]

  return ret;
 8001d2e:	697b      	ldr	r3, [r7, #20]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}

08001d38 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d44:	f107 0210 	add.w	r2, r7, #16
 8001d48:	2301      	movs	r3, #1
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffc3 	bl	8001cd8 <lis2dw12_read_reg>
 8001d52:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	7c3b      	ldrb	r3, [r7, #16]
 8001d66:	f362 0383 	bfi	r3, r2, #2, #2
 8001d6a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	7c3b      	ldrb	r3, [r7, #16]
 8001d76:	f362 0301 	bfi	r3, r2, #0, #2
 8001d7a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d7c:	f107 0210 	add.w	r2, r7, #16
 8001d80:	2301      	movs	r3, #1
 8001d82:	2120      	movs	r1, #32
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffbf 	bl	8001d08 <lis2dw12_write_reg>
 8001d8a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d107      	bne.n	8001da2 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	2301      	movs	r3, #1
 8001d98:	2125      	movs	r1, #37	; 0x25
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff9c 	bl	8001cd8 <lis2dw12_read_reg>
 8001da0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d110      	bne.n	8001dca <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	7b3b      	ldrb	r3, [r7, #12]
 8001db4:	f362 0382 	bfi	r3, r2, #2, #1
 8001db8:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2125      	movs	r1, #37	; 0x25
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa0 	bl	8001d08 <lis2dw12_write_reg>
 8001dc8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001dca:	697b      	ldr	r3, [r7, #20]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001dde:	f107 0210 	add.w	r2, r7, #16
 8001de2:	2301      	movs	r3, #1
 8001de4:	2120      	movs	r1, #32
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff76 	bl	8001cd8 <lis2dw12_read_reg>
 8001dec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 80a3 	bne.w	8001f3c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001df6:	f107 020c 	add.w	r2, r7, #12
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	2125      	movs	r1, #37	; 0x25
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff6a 	bl	8001cd8 <lis2dw12_read_reg>
 8001e04:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001e06:	7b3b      	ldrb	r3, [r7, #12]
 8001e08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	011a      	lsls	r2, r3, #4
 8001e10:	7c3b      	ldrb	r3, [r7, #16]
 8001e12:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8001e1c:	7c3a      	ldrb	r2, [r7, #16]
 8001e1e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001e22:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001e24:	4413      	add	r3, r2
 8001e26:	2b1b      	cmp	r3, #27
 8001e28:	f200 8084 	bhi.w	8001f34 <lis2dw12_power_mode_get+0x160>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <lis2dw12_power_mode_get+0x60>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001ec5 	.word	0x08001ec5
 8001e38:	08001ebd 	.word	0x08001ebd
 8001e3c:	08001eb5 	.word	0x08001eb5
 8001e40:	08001ead 	.word	0x08001ead
 8001e44:	08001ea5 	.word	0x08001ea5
 8001e48:	08001f35 	.word	0x08001f35
 8001e4c:	08001f35 	.word	0x08001f35
 8001e50:	08001f35 	.word	0x08001f35
 8001e54:	08001ee5 	.word	0x08001ee5
 8001e58:	08001edd 	.word	0x08001edd
 8001e5c:	08001ed5 	.word	0x08001ed5
 8001e60:	08001ecd 	.word	0x08001ecd
 8001e64:	08001f35 	.word	0x08001f35
 8001e68:	08001f35 	.word	0x08001f35
 8001e6c:	08001f35 	.word	0x08001f35
 8001e70:	08001f35 	.word	0x08001f35
 8001e74:	08001f0d 	.word	0x08001f0d
 8001e78:	08001f05 	.word	0x08001f05
 8001e7c:	08001efd 	.word	0x08001efd
 8001e80:	08001ef5 	.word	0x08001ef5
 8001e84:	08001eed 	.word	0x08001eed
 8001e88:	08001f35 	.word	0x08001f35
 8001e8c:	08001f35 	.word	0x08001f35
 8001e90:	08001f35 	.word	0x08001f35
 8001e94:	08001f2d 	.word	0x08001f2d
 8001e98:	08001f25 	.word	0x08001f25
 8001e9c:	08001f1d 	.word	0x08001f1d
 8001ea0:	08001f15 	.word	0x08001f15
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	701a      	strb	r2, [r3, #0]
        break;
 8001eaa:	e047      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
        break;
 8001eb2:	e043      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
        break;
 8001eba:	e03f      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
        break;
 8001ec2:	e03b      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
        break;
 8001eca:	e037      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	220b      	movs	r2, #11
 8001ed0:	701a      	strb	r2, [r3, #0]
        break;
 8001ed2:	e033      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	220a      	movs	r2, #10
 8001ed8:	701a      	strb	r2, [r3, #0]
        break;
 8001eda:	e02f      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2209      	movs	r2, #9
 8001ee0:	701a      	strb	r2, [r3, #0]
        break;
 8001ee2:	e02b      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	701a      	strb	r2, [r3, #0]
        break;
 8001eea:	e027      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2214      	movs	r2, #20
 8001ef0:	701a      	strb	r2, [r3, #0]
        break;
 8001ef2:	e023      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2213      	movs	r2, #19
 8001ef8:	701a      	strb	r2, [r3, #0]
        break;
 8001efa:	e01f      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2212      	movs	r2, #18
 8001f00:	701a      	strb	r2, [r3, #0]
        break;
 8001f02:	e01b      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2211      	movs	r2, #17
 8001f08:	701a      	strb	r2, [r3, #0]
        break;
 8001f0a:	e017      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	701a      	strb	r2, [r3, #0]
        break;
 8001f12:	e013      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	221b      	movs	r2, #27
 8001f18:	701a      	strb	r2, [r3, #0]
        break;
 8001f1a:	e00f      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	221a      	movs	r2, #26
 8001f20:	701a      	strb	r2, [r3, #0]
        break;
 8001f22:	e00b      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2219      	movs	r2, #25
 8001f28:	701a      	strb	r2, [r3, #0]
        break;
 8001f2a:	e007      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2218      	movs	r2, #24
 8001f30:	701a      	strb	r2, [r3, #0]
        break;
 8001f32:	e003      	b.n	8001f3c <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	701a      	strb	r2, [r3, #0]
        break;
 8001f3a:	bf00      	nop
    }
  }

  return ret;
 8001f3c:	697b      	ldr	r3, [r7, #20]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop

08001f48 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f54:	f107 0210 	add.w	r2, r7, #16
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff febb 	bl	8001cd8 <lis2dw12_read_reg>
 8001f62:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	7c3b      	ldrb	r3, [r7, #16]
 8001f74:	f362 1307 	bfi	r3, r2, #4, #4
 8001f78:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f7a:	f107 0210 	add.w	r2, r7, #16
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2120      	movs	r1, #32
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fec0 	bl	8001d08 <lis2dw12_write_reg>
 8001f88:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001f90:	f107 020c 	add.w	r2, r7, #12
 8001f94:	2301      	movs	r3, #1
 8001f96:	2122      	movs	r1, #34	; 0x22
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe9d 	bl	8001cd8 <lis2dw12_read_reg>
 8001f9e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d110      	bne.n	8001fc8 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	f362 0301 	bfi	r3, r2, #0, #2
 8001fb6:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001fb8:	f107 020c 	add.w	r2, r7, #12
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	2122      	movs	r1, #34	; 0x22
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fea1 	bl	8001d08 <lis2dw12_write_reg>
 8001fc6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001fc8:	697b      	ldr	r3, [r7, #20]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001fde:	f107 0210 	add.w	r2, r7, #16
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fe76 	bl	8001cd8 <lis2dw12_read_reg>
 8001fec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80b3 	bne.w	800215c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2122      	movs	r1, #34	; 0x22
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fe6a 	bl	8001cd8 <lis2dw12_read_reg>
 8002004:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	7c3a      	ldrb	r2, [r7, #16]
 8002012:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4413      	add	r3, r2
 800201a:	2b32      	cmp	r3, #50	; 0x32
 800201c:	f200 809a 	bhi.w	8002154 <lis2dw12_data_rate_get+0x180>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <lis2dw12_data_rate_get+0x54>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	080020f5 	.word	0x080020f5
 800202c:	080020fd 	.word	0x080020fd
 8002030:	08002105 	.word	0x08002105
 8002034:	0800210d 	.word	0x0800210d
 8002038:	08002115 	.word	0x08002115
 800203c:	0800211d 	.word	0x0800211d
 8002040:	08002125 	.word	0x08002125
 8002044:	0800212d 	.word	0x0800212d
 8002048:	08002135 	.word	0x08002135
 800204c:	0800213d 	.word	0x0800213d
 8002050:	08002155 	.word	0x08002155
 8002054:	08002155 	.word	0x08002155
 8002058:	08002155 	.word	0x08002155
 800205c:	08002155 	.word	0x08002155
 8002060:	08002155 	.word	0x08002155
 8002064:	08002155 	.word	0x08002155
 8002068:	08002155 	.word	0x08002155
 800206c:	08002155 	.word	0x08002155
 8002070:	0800214d 	.word	0x0800214d
 8002074:	08002155 	.word	0x08002155
 8002078:	08002155 	.word	0x08002155
 800207c:	08002155 	.word	0x08002155
 8002080:	08002155 	.word	0x08002155
 8002084:	08002155 	.word	0x08002155
 8002088:	08002155 	.word	0x08002155
 800208c:	08002155 	.word	0x08002155
 8002090:	08002155 	.word	0x08002155
 8002094:	08002155 	.word	0x08002155
 8002098:	08002155 	.word	0x08002155
 800209c:	08002155 	.word	0x08002155
 80020a0:	08002155 	.word	0x08002155
 80020a4:	08002155 	.word	0x08002155
 80020a8:	08002155 	.word	0x08002155
 80020ac:	08002155 	.word	0x08002155
 80020b0:	08002155 	.word	0x08002155
 80020b4:	08002155 	.word	0x08002155
 80020b8:	08002155 	.word	0x08002155
 80020bc:	08002155 	.word	0x08002155
 80020c0:	08002155 	.word	0x08002155
 80020c4:	08002155 	.word	0x08002155
 80020c8:	08002155 	.word	0x08002155
 80020cc:	08002155 	.word	0x08002155
 80020d0:	08002155 	.word	0x08002155
 80020d4:	08002155 	.word	0x08002155
 80020d8:	08002155 	.word	0x08002155
 80020dc:	08002155 	.word	0x08002155
 80020e0:	08002155 	.word	0x08002155
 80020e4:	08002155 	.word	0x08002155
 80020e8:	08002155 	.word	0x08002155
 80020ec:	08002155 	.word	0x08002155
 80020f0:	08002145 	.word	0x08002145
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
        break;
 80020fa:	e02f      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
        break;
 8002102:	e02b      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	701a      	strb	r2, [r3, #0]
        break;
 800210a:	e027      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2203      	movs	r2, #3
 8002110:	701a      	strb	r2, [r3, #0]
        break;
 8002112:	e023      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2204      	movs	r2, #4
 8002118:	701a      	strb	r2, [r3, #0]
        break;
 800211a:	e01f      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2205      	movs	r2, #5
 8002120:	701a      	strb	r2, [r3, #0]
        break;
 8002122:	e01b      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2206      	movs	r2, #6
 8002128:	701a      	strb	r2, [r3, #0]
        break;
 800212a:	e017      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2207      	movs	r2, #7
 8002130:	701a      	strb	r2, [r3, #0]
        break;
 8002132:	e013      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2208      	movs	r2, #8
 8002138:	701a      	strb	r2, [r3, #0]
        break;
 800213a:	e00f      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2209      	movs	r2, #9
 8002140:	701a      	strb	r2, [r3, #0]
        break;
 8002142:	e00b      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2232      	movs	r2, #50	; 0x32
 8002148:	701a      	strb	r2, [r3, #0]
        break;
 800214a:	e007      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2212      	movs	r2, #18
 8002150:	701a      	strb	r2, [r3, #0]
        break;
 8002152:	e003      	b.n	800215c <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
        break;
 800215a:	bf00      	nop
    }
  }

  return ret;
 800215c:	697b      	ldr	r3, [r7, #20]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002174:	f107 0208 	add.w	r2, r7, #8
 8002178:	2301      	movs	r3, #1
 800217a:	2121      	movs	r1, #33	; 0x21
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fdab 	bl	8001cd8 <lis2dw12_read_reg>
 8002182:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	7a3b      	ldrb	r3, [r7, #8]
 8002194:	f362 03c3 	bfi	r3, r2, #3, #1
 8002198:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800219a:	f107 0208 	add.w	r2, r7, #8
 800219e:	2301      	movs	r3, #1
 80021a0:	2121      	movs	r1, #33	; 0x21
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fdb0 	bl	8001d08 <lis2dw12_write_reg>
 80021a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80021c0:	f107 0208 	add.w	r2, r7, #8
 80021c4:	2301      	movs	r3, #1
 80021c6:	2125      	movs	r1, #37	; 0x25
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fd85 	bl	8001cd8 <lis2dw12_read_reg>
 80021ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	7a3b      	ldrb	r3, [r7, #8]
 80021e0:	f362 1305 	bfi	r3, r2, #4, #2
 80021e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80021e6:	f107 0208 	add.w	r2, r7, #8
 80021ea:	2301      	movs	r3, #1
 80021ec:	2125      	movs	r1, #37	; 0x25
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fd8a 	bl	8001d08 <lis2dw12_write_reg>
 80021f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800220a:	f107 0208 	add.w	r2, r7, #8
 800220e:	2301      	movs	r3, #1
 8002210:	2125      	movs	r1, #37	; 0x25
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fd60 	bl	8001cd8 <lis2dw12_read_reg>
 8002218:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800221a:	7a3b      	ldrb	r3, [r7, #8]
 800221c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d81a      	bhi.n	800225c <lis2dw12_full_scale_get+0x5c>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <lis2dw12_full_scale_get+0x2c>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002255 	.word	0x08002255
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e00f      	b.n	8002264 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e00b      	b.n	8002264 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	701a      	strb	r2, [r3, #0]
      break;
 8002252:	e007      	b.n	8002264 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e003      	b.n	8002264 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	bf00      	nop
  }

  return ret;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop

08002270 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800227a:	f107 020c 	add.w	r2, r7, #12
 800227e:	2306      	movs	r3, #6
 8002280:	2128      	movs	r1, #40	; 0x28
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fd28 	bl	8001cd8 <lis2dw12_read_reg>
 8002288:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	b21a      	sxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002298:	b29b      	uxth	r3, r3
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	b29a      	uxth	r2, r3
 800229e:	7b3b      	ldrb	r3, [r7, #12]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3302      	adds	r3, #2
 80022b2:	b212      	sxth	r2, r2
 80022b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	3302      	adds	r3, #2
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	3302      	adds	r3, #2
 80022d0:	b212      	sxth	r2, r2
 80022d2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80022d4:	7c7a      	ldrb	r2, [r7, #17]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	3304      	adds	r3, #4
 80022da:	b212      	sxth	r2, r2
 80022dc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	7c3b      	ldrb	r3, [r7, #16]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3304      	adds	r3, #4
 80022f8:	b212      	sxth	r2, r2
 80022fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80022fc:	697b      	ldr	r3, [r7, #20]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002310:	2301      	movs	r3, #1
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	210f      	movs	r1, #15
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fcde 	bl	8001cd8 <lis2dw12_read_reg>
 800231c:	60f8      	str	r0, [r7, #12]

  return ret;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002334:	f107 0208 	add.w	r2, r7, #8
 8002338:	2301      	movs	r3, #1
 800233a:	2121      	movs	r1, #33	; 0x21
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fccb 	bl	8001cd8 <lis2dw12_read_reg>
 8002342:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10f      	bne.n	800236a <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	7a3b      	ldrb	r3, [r7, #8]
 8002354:	f362 0382 	bfi	r3, r2, #2, #1
 8002358:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	2301      	movs	r3, #1
 8002360:	2121      	movs	r1, #33	; 0x21
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fcd0 	bl	8001d08 <lis2dw12_write_reg>
 8002368:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002380:	f107 0208 	add.w	r2, r7, #8
 8002384:	2301      	movs	r3, #1
 8002386:	212e      	movs	r1, #46	; 0x2e
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fca5 	bl	8001cd8 <lis2dw12_read_reg>
 800238e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	b2da      	uxtb	r2, r3
 800239e:	7a3b      	ldrb	r3, [r7, #8]
 80023a0:	f362 1347 	bfi	r3, r2, #5, #3
 80023a4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80023a6:	f107 0208 	add.w	r2, r7, #8
 80023aa:	2301      	movs	r3, #1
 80023ac:	212e      	movs	r1, #46	; 0x2e
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fcaa 	bl	8001d08 <lis2dw12_write_reg>
 80023b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e067      	b.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7b1a      	ldrb	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <LIS2MDL_RegisterBusIO+0xf8>)
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <LIS2MDL_RegisterBusIO+0xfc>)
 800241e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e036      	b.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4798      	blx	r3
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e02c      	b.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d028      	beq.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	d123      	bne.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10d      	bne.n	8002488 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800246c:	2334      	movs	r3, #52	; 0x34
 800246e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	461a      	mov	r2, r3
 8002474:	2162      	movs	r1, #98	; 0x62
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fb1b 	bl	8002ab2 <LIS2MDL_Write_Reg>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e012      	b.n	80024ae <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d101      	bne.n	8002494 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	e00c      	b.n	80024ae <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3320      	adds	r3, #32
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f000 ff70 	bl	8003380 <lis2mdl_i2c_interface_set>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e000      	b.n	80024ae <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	08002b09 	.word	0x08002b09
 80024bc:	08002b8b 	.word	0x08002b8b

080024c0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d144      	bne.n	800255a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80024d0:	f107 0208 	add.w	r2, r7, #8
 80024d4:	2301      	movs	r3, #1
 80024d6:	2162      	movs	r1, #98	; 0x62
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fb97 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	e06c      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80024ea:	f107 020c 	add.w	r2, r7, #12
 80024ee:	2301      	movs	r3, #1
 80024f0:	2160      	movs	r1, #96	; 0x60
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fb8a 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e05f      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8002504:	7a3b      	ldrb	r3, [r7, #8]
 8002506:	f043 0310 	orr.w	r3, r3, #16
 800250a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800250c:	7a3b      	ldrb	r3, [r7, #8]
 800250e:	f36f 0341 	bfc	r3, #1, #1
 8002512:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	2202      	movs	r2, #2
 8002518:	f362 0301 	bfi	r3, r2, #0, #2
 800251c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800251e:	7b3b      	ldrb	r3, [r7, #12]
 8002520:	f043 030c 	orr.w	r3, r3, #12
 8002524:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002526:	f107 0208 	add.w	r2, r7, #8
 800252a:	2301      	movs	r3, #1
 800252c:	2162      	movs	r1, #98	; 0x62
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fcab 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e041      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002540:	f107 020c 	add.w	r2, r7, #12
 8002544:	2301      	movs	r3, #1
 8002546:	2160      	movs	r1, #96	; 0x60
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fc9e 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d032      	beq.n	80025ba <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	e034      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3320      	adds	r3, #32
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fe65 	bl	8003230 <lis2mdl_block_data_update_set>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e028      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3320      	adds	r3, #32
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fdd4 	bl	8003126 <lis2mdl_operating_mode_set>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	e01c      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3320      	adds	r3, #32
 800258e:	2103      	movs	r1, #3
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fdee 	bl	8003172 <lis2mdl_data_rate_set>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e010      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3320      	adds	r3, #32
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fec3 	bl	8003334 <lis2mdl_self_test_set>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e004      	b.n	80025c4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8a5 	bl	8002724 <LIS2MDL_MAG_Disable>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	e004      	b.n	80025f0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d10b      	bne.n	8002622 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800260a:	2301      	movs	r3, #1
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	214f      	movs	r1, #79	; 0x4f
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fafb 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	e00c      	b.n	800263c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3320      	adds	r3, #32
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fe72 	bl	8003312 <lis2mdl_device_id_get>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	e000      	b.n	800263c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2232      	movs	r2, #50	; 0x32
 8002676:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <LIS2MDL_GetCapabilities+0x58>)
 800268c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	42c80000 	.word	0x42c80000

080026a0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e032      	b.n	800271c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d11d      	bne.n	80026fa <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026be:	f107 020c 	add.w	r2, r7, #12
 80026c2:	2301      	movs	r3, #1
 80026c4:	2160      	movs	r1, #96	; 0x60
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 faa0 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e021      	b.n	800271c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80026d8:	7b3b      	ldrb	r3, [r7, #12]
 80026da:	f36f 0301 	bfc	r3, #0, #2
 80026de:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	2301      	movs	r3, #1
 80026e6:	2160      	movs	r1, #96	; 0x60
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fbce 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	e010      	b.n	800271c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3320      	adds	r3, #32
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd10 	bl	8003126 <lis2mdl_operating_mode_set>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e004      	b.n	800271c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e033      	b.n	80027a2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d11e      	bne.n	8002780 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002742:	f107 020c 	add.w	r2, r7, #12
 8002746:	2301      	movs	r3, #1
 8002748:	2160      	movs	r1, #96	; 0x60
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa5e 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e022      	b.n	80027a2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800275c:	7b3b      	ldrb	r3, [r7, #12]
 800275e:	2202      	movs	r2, #2
 8002760:	f362 0301 	bfi	r3, r2, #0, #2
 8002764:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002766:	f107 020c 	add.w	r2, r7, #12
 800276a:	2301      	movs	r3, #1
 800276c:	2160      	movs	r1, #96	; 0x60
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb8b 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e010      	b.n	80027a2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3320      	adds	r3, #32
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fccd 	bl	8003126 <lis2mdl_operating_mode_set>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e004      	b.n	80027a2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80027ba:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3320      	adds	r3, #32
 80027de:	f107 020b 	add.w	r2, r7, #11
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fceb 	bl	80031c0 <lis2mdl_data_rate_get>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	e023      	b.n	800283e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d81b      	bhi.n	8002834 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002815 	.word	0x08002815
 8002808:	0800281d 	.word	0x0800281d
 800280c:	08002825 	.word	0x08002825
 8002810:	0800282d 	.word	0x0800282d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002818:	601a      	str	r2, [r3, #0]
      break;
 800281a:	e00f      	b.n	800283c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002820:	601a      	str	r2, [r3, #0]
      break;
 8002822:	e00b      	b.n	800283c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002828:	601a      	str	r2, [r3, #0]
      break;
 800282a:	e007      	b.n	800283c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002830:	601a      	str	r2, [r3, #0]
      break;
 8002832:	e003      	b.n	800283c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	60fb      	str	r3, [r7, #12]
      break;
 800283a:	bf00      	nop
  }

  return ret;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	41200000 	.word	0x41200000
 800284c:	41a00000 	.word	0x41a00000
 8002850:	42480000 	.word	0x42480000
 8002854:	42c80000 	.word	0x42c80000

08002858 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002864:	edd7 7a00 	vldr	s15, [r7]
 8002868:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800286c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d801      	bhi.n	800287a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002876:	2300      	movs	r3, #0
 8002878:	e016      	b.n	80028a8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800287a:	edd7 7a00 	vldr	s15, [r7]
 800287e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d801      	bhi.n	8002890 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 800288c:	2301      	movs	r3, #1
 800288e:	e00b      	b.n	80028a8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002890:	edd7 7a00 	vldr	s15, [r7]
 8002894:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800291c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d801      	bhi.n	80028a6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e000      	b.n	80028a8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80028a6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80028a8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d121      	bne.n	80028f6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80028b2:	f107 020c 	add.w	r2, r7, #12
 80028b6:	2301      	movs	r3, #1
 80028b8:	2160      	movs	r1, #96	; 0x60
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9a6 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e022      	b.n	8002912 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	7b3b      	ldrb	r3, [r7, #12]
 80028d6:	f362 0383 	bfi	r3, r2, #2, #2
 80028da:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80028dc:	f107 020c 	add.w	r2, r7, #12
 80028e0:	2301      	movs	r3, #1
 80028e2:	2160      	movs	r1, #96	; 0x60
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fad0 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e00d      	b.n	8002912 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3320      	adds	r3, #32
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fc37 	bl	8003172 <lis2mdl_data_rate_set>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e000      	b.n	8002912 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	42480000 	.word	0x42480000

08002920 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2232      	movs	r2, #50	; 0x32
 800292e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3320      	adds	r3, #32
 8002964:	f107 0208 	add.w	r2, r7, #8
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fc86 	bl	800327c <lis2mdl_magnetic_raw_get>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e00c      	b.n	8002996 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800297c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002984:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800298c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b088      	sub	sp, #32
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d137      	bne.n	8002a20 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80029b0:	f107 0218 	add.w	r2, r7, #24
 80029b4:	2306      	movs	r3, #6
 80029b6:	2168      	movs	r1, #104	; 0x68
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f927 	bl	8002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e06f      	b.n	8002aaa <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80029ca:	7e7b      	ldrb	r3, [r7, #25]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80029d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b29a      	uxth	r2, r3
 80029da:	7e3b      	ldrb	r3, [r7, #24]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4413      	add	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80029e6:	7efb      	ldrb	r3, [r7, #27]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80029ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	7ebb      	ldrb	r3, [r7, #26]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002a02:	7f7b      	ldrb	r3, [r7, #29]
 8002a04:	b21b      	sxth	r3, r3
 8002a06:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002a08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	7f3b      	ldrb	r3, [r7, #28]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	82bb      	strh	r3, [r7, #20]
 8002a1e:	e00d      	b.n	8002a3c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	f107 0210 	add.w	r2, r7, #16
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fc26 	bl	800327c <lis2mdl_magnetic_raw_get>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e036      	b.n	8002aaa <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff feb1 	bl	80027aa <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002a48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a60:	ee17 2a90 	vmov	r2, s15
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a80:	ee17 2a90 	vmov	r2, s15
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002a88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa0:	ee17 2a90 	vmov	r2, s15
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d10b      	bne.n	8002ae2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002aca:	1cba      	adds	r2, r7, #2
 8002acc:	78f9      	ldrb	r1, [r7, #3]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f9da 	bl	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002adc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae0:	e00e      	b.n	8002b00 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 0020 	add.w	r0, r3, #32
 8002ae8:	1cba      	adds	r2, r7, #2
 8002aea:	78f9      	ldrb	r1, [r7, #3]
 8002aec:	2301      	movs	r3, #1
 8002aee:	f000 fb02 	bl	80030f6 <lis2mdl_write_reg>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	e000      	b.n	8002b00 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	695c      	ldr	r4, [r3, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	7b1b      	ldrb	r3, [r3, #12]
 8002b30:	b298      	uxth	r0, r3
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	b299      	uxth	r1, r3
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	47a0      	blx	r4
 8002b42:	4603      	mov	r3, r0
 8002b44:	e01d      	b.n	8002b82 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d10b      	bne.n	8002b66 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	695c      	ldr	r4, [r3, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	7b1b      	ldrb	r3, [r3, #12]
 8002b56:	b298      	uxth	r0, r3
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	b299      	uxth	r1, r3
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	47a0      	blx	r4
 8002b62:	4603      	mov	r3, r0
 8002b64:	e00d      	b.n	8002b82 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	695c      	ldr	r4, [r3, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	7b1b      	ldrb	r3, [r3, #12]
 8002b6e:	b298      	uxth	r0, r3
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	47a0      	blx	r4
 8002b80:	4603      	mov	r3, r0
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}

08002b8a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b8a:	b590      	push	{r4, r7, lr}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	461a      	mov	r2, r3
 8002b96:	460b      	mov	r3, r1
 8002b98:	72fb      	strb	r3, [r7, #11]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	691c      	ldr	r4, [r3, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	7b1b      	ldrb	r3, [r3, #12]
 8002bb2:	b298      	uxth	r0, r3
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	47a0      	blx	r4
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e01d      	b.n	8002c04 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10b      	bne.n	8002be8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	691c      	ldr	r4, [r3, #16]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	b298      	uxth	r0, r3
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	47a0      	blx	r4
 8002be4:	4603      	mov	r3, r0
 8002be6:	e00d      	b.n	8002c04 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	7b1b      	ldrb	r3, [r3, #12]
 8002bf0:	b298      	uxth	r0, r3
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	893b      	ldrh	r3, [r7, #8]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	47a0      	blx	r4
 8002c02:	4603      	mov	r3, r0
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}

08002c0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	460b      	mov	r3, r1
 8002c1a:	72fb      	strb	r3, [r7, #11]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002c32:	233d      	movs	r3, #61	; 0x3d
 8002c34:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002c36:	2315      	movs	r3, #21
 8002c38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002c3c:	2316      	movs	r3, #22
 8002c3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002c42:	2317      	movs	r3, #23
 8002c44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002c48:	2314      	movs	r3, #20
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002c4e:	2344      	movs	r3, #68	; 0x44
 8002c50:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002c52:	2302      	movs	r3, #2
 8002c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002c58:	2339      	movs	r3, #57	; 0x39
 8002c5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002c64:	2329      	movs	r3, #41	; 0x29
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002c6a:	231e      	movs	r3, #30
 8002c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002c88:	2340      	movs	r3, #64	; 0x40
 8002c8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f103 0020 	add.w	r0, r3, #32
 8002c94:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002c98:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f000 fa2a 	bl	80030f6 <lis2mdl_write_reg>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e0e9      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f103 0020 	add.w	r0, r3, #32
 8002cb4:	f107 021f 	add.w	r2, r7, #31
 8002cb8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f000 fa1a 	bl	80030f6 <lis2mdl_write_reg>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	e0d9      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f103 0020 	add.w	r0, r3, #32
 8002cd4:	f107 020b 	add.w	r2, r7, #11
 8002cd8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f000 fa0a 	bl	80030f6 <lis2mdl_write_reg>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	e0c9      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f103 0020 	add.w	r0, r3, #32
 8002cf4:	f107 021d 	add.w	r2, r7, #29
 8002cf8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f000 f9fa 	bl	80030f6 <lis2mdl_write_reg>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	e0b9      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f103 0020 	add.w	r0, r3, #32
 8002d14:	f107 021e 	add.w	r2, r7, #30
 8002d18:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f000 f9ea 	bl	80030f6 <lis2mdl_write_reg>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e0a9      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f103 0020 	add.w	r0, r3, #32
 8002d34:	f107 0220 	add.w	r2, r7, #32
 8002d38:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f000 f9da 	bl	80030f6 <lis2mdl_write_reg>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	e099      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f103 0020 	add.w	r0, r3, #32
 8002d54:	f107 021c 	add.w	r2, r7, #28
 8002d58:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 f9b2 	bl	80030c6 <lis2mdl_read_reg>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e089      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002d6e:	7f3b      	ldrb	r3, [r7, #28]
 8002d70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d102      	bne.n	8002d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002d78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002d7c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f103 0020 	add.w	r0, r3, #32
 8002d84:	f107 021c 	add.w	r2, r7, #28
 8002d88:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f000 f9b2 	bl	80030f6 <lis2mdl_write_reg>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	e071      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f103 0020 	add.w	r0, r3, #32
 8002da4:	f107 0214 	add.w	r2, r7, #20
 8002da8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002dac:	2306      	movs	r3, #6
 8002dae:	f000 f98a 	bl	80030c6 <lis2mdl_read_reg>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	e061      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f103 0020 	add.w	r0, r3, #32
 8002dc4:	f107 021b 	add.w	r2, r7, #27
 8002dc8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f000 f97a 	bl	80030c6 <lis2mdl_read_reg>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e051      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8002dde:	7efa      	ldrb	r2, [r7, #27]
 8002de0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002de4:	4013      	ands	r3, r2
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1e6      	bne.n	8002dbe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f103 0020 	add.w	r0, r3, #32
 8002df6:	f107 021b 	add.w	r2, r7, #27
 8002dfa:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f000 f961 	bl	80030c6 <lis2mdl_read_reg>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e038      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002e10:	7efa      	ldrb	r2, [r7, #27]
 8002e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e16:	4013      	ands	r3, r2
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d1e6      	bne.n	8002df0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f103 0020 	add.w	r0, r3, #32
 8002e28:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002e2c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e30:	2301      	movs	r3, #1
 8002e32:	f000 f960 	bl	80030f6 <lis2mdl_write_reg>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e40:	e01f      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f103 0020 	add.w	r0, r3, #32
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	f000 f939 	bl	80030c6 <lis2mdl_read_reg>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e010      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f103 0020 	add.w	r0, r3, #32
 8002e66:	f107 0220 	add.w	r2, r7, #32
 8002e6a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f000 f941 	bl	80030f6 <lis2mdl_write_reg>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e000      	b.n	8002e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3730      	adds	r7, #48	; 0x30
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08c      	sub	sp, #48	; 0x30
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002eb0:	233c      	movs	r3, #60	; 0x3c
 8002eb2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002eb4:	2315      	movs	r3, #21
 8002eb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002eba:	2316      	movs	r3, #22
 8002ebc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8002eca:	2314      	movs	r3, #20
 8002ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002ed0:	2344      	movs	r3, #68	; 0x44
 8002ed2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8002ed4:	2339      	movs	r3, #57	; 0x39
 8002ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002ee0:	2329      	movs	r3, #41	; 0x29
 8002ee2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002ee6:	231e      	movs	r3, #30
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8002f04:	230e      	movs	r3, #14
 8002f06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f103 0020 	add.w	r0, r3, #32
 8002f10:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f14:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f000 f8ec 	bl	80030f6 <lis2mdl_write_reg>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	e0c9      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f103 0020 	add.w	r0, r3, #32
 8002f30:	f107 021f 	add.w	r2, r7, #31
 8002f34:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f000 f8dc 	bl	80030f6 <lis2mdl_write_reg>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e0b9      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f103 0020 	add.w	r0, r3, #32
 8002f50:	f107 020b 	add.w	r2, r7, #11
 8002f54:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f000 f8cc 	bl	80030f6 <lis2mdl_write_reg>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	e0a9      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f103 0020 	add.w	r0, r3, #32
 8002f70:	f107 021e 	add.w	r2, r7, #30
 8002f74:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f000 f8bc 	bl	80030f6 <lis2mdl_write_reg>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	e099      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f103 0020 	add.w	r0, r3, #32
 8002f90:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002f94:	2301      	movs	r3, #1
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	f000 f8ad 	bl	80030f6 <lis2mdl_write_reg>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e08a      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f103 0020 	add.w	r0, r3, #32
 8002fae:	f107 021d 	add.w	r2, r7, #29
 8002fb2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f000 f89d 	bl	80030f6 <lis2mdl_write_reg>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e07a      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f103 0020 	add.w	r0, r3, #32
 8002fce:	f107 0220 	add.w	r2, r7, #32
 8002fd2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f000 f88d 	bl	80030f6 <lis2mdl_write_reg>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	e06a      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f103 0020 	add.w	r0, r3, #32
 8002fee:	f107 021c 	add.w	r2, r7, #28
 8002ff2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f000 f865 	bl	80030c6 <lis2mdl_read_reg>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	e05a      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003008:	7f3b      	ldrb	r3, [r7, #28]
 800300a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800300e:	429a      	cmp	r2, r3
 8003010:	d102      	bne.n	8003018 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003016:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f103 0020 	add.w	r0, r3, #32
 800301e:	f107 021c 	add.w	r2, r7, #28
 8003022:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003026:	2301      	movs	r3, #1
 8003028:	f000 f865 	bl	80030f6 <lis2mdl_write_reg>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e042      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f103 0020 	add.w	r0, r3, #32
 800303e:	f107 0214 	add.w	r2, r7, #20
 8003042:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003046:	2306      	movs	r3, #6
 8003048:	f000 f83d 	bl	80030c6 <lis2mdl_read_reg>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e032      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f103 0020 	add.w	r0, r3, #32
 800305e:	f107 021b 	add.w	r2, r7, #27
 8003062:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003066:	2301      	movs	r3, #1
 8003068:	f000 f82d 	bl	80030c6 <lis2mdl_read_reg>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e022      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003078:	7efa      	ldrb	r2, [r7, #27]
 800307a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800307e:	4013      	ands	r3, r2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003086:	429a      	cmp	r2, r3
 8003088:	d1e6      	bne.n	8003058 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f103 0020 	add.w	r0, r3, #32
 8003090:	f107 021b 	add.w	r2, r7, #27
 8003094:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003098:	2301      	movs	r3, #1
 800309a:	f000 f814 	bl	80030c6 <lis2mdl_read_reg>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	e009      	b.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80030aa:	7efa      	ldrb	r2, [r7, #27]
 80030ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030b0:	4013      	ands	r3, r2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1e6      	bne.n	800308a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80030c6:	b590      	push	{r4, r7, lr}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	461a      	mov	r2, r3
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
 80030d6:	4613      	mov	r3, r2
 80030d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685c      	ldr	r4, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68d8      	ldr	r0, [r3, #12]
 80030e2:	893b      	ldrh	r3, [r7, #8]
 80030e4:	7af9      	ldrb	r1, [r7, #11]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	47a0      	blx	r4
 80030ea:	6178      	str	r0, [r7, #20]

  return ret;
 80030ec:	697b      	ldr	r3, [r7, #20]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80030f6:	b590      	push	{r4, r7, lr}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	461a      	mov	r2, r3
 8003102:	460b      	mov	r3, r1
 8003104:	72fb      	strb	r3, [r7, #11]
 8003106:	4613      	mov	r3, r2
 8003108:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681c      	ldr	r4, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	68d8      	ldr	r0, [r3, #12]
 8003112:	893b      	ldrh	r3, [r7, #8]
 8003114:	7af9      	ldrb	r1, [r7, #11]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	47a0      	blx	r4
 800311a:	6178      	str	r0, [r7, #20]

  return ret;
 800311c:	697b      	ldr	r3, [r7, #20]
}
 800311e:	4618      	mov	r0, r3
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003132:	f107 0208 	add.w	r2, r7, #8
 8003136:	2301      	movs	r3, #1
 8003138:	2160      	movs	r1, #96	; 0x60
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffc3 	bl	80030c6 <lis2mdl_read_reg>
 8003140:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10f      	bne.n	8003168 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	b2da      	uxtb	r2, r3
 8003150:	7a3b      	ldrb	r3, [r7, #8]
 8003152:	f362 0301 	bfi	r3, r2, #0, #2
 8003156:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003158:	f107 0208 	add.w	r2, r7, #8
 800315c:	2301      	movs	r3, #1
 800315e:	2160      	movs	r1, #96	; 0x60
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffc8 	bl	80030f6 <lis2mdl_write_reg>
 8003166:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800317e:	f107 0208 	add.w	r2, r7, #8
 8003182:	2301      	movs	r3, #1
 8003184:	2160      	movs	r1, #96	; 0x60
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff9d 	bl	80030c6 <lis2mdl_read_reg>
 800318c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7a3b      	ldrb	r3, [r7, #8]
 800319e:	f362 0383 	bfi	r3, r2, #2, #2
 80031a2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	2301      	movs	r3, #1
 80031aa:	2160      	movs	r1, #96	; 0x60
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffa2 	bl	80030f6 <lis2mdl_write_reg>
 80031b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80031ca:	f107 0208 	add.w	r2, r7, #8
 80031ce:	2301      	movs	r3, #1
 80031d0:	2160      	movs	r1, #96	; 0x60
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff77 	bl	80030c6 <lis2mdl_read_reg>
 80031d8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80031da:	7a3b      	ldrb	r3, [r7, #8]
 80031dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d81a      	bhi.n	800321c <lis2mdl_data_rate_get+0x5c>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <lis2mdl_data_rate_get+0x2c>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003205 	.word	0x08003205
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003215 	.word	0x08003215
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
      break;
 8003202:	e00f      	b.n	8003224 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
      break;
 800320a:	e00b      	b.n	8003224 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
      break;
 8003212:	e007      	b.n	8003224 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2203      	movs	r2, #3
 8003218:	701a      	strb	r2, [r3, #0]
      break;
 800321a:	e003      	b.n	8003224 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	bf00      	nop
  }

  return ret;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop

08003230 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800323c:	f107 0208 	add.w	r2, r7, #8
 8003240:	2301      	movs	r3, #1
 8003242:	2162      	movs	r1, #98	; 0x62
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff3e 	bl	80030c6 <lis2mdl_read_reg>
 800324a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	7a3b      	ldrb	r3, [r7, #8]
 800325c:	f362 1304 	bfi	r3, r2, #4, #1
 8003260:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003262:	f107 0208 	add.w	r2, r7, #8
 8003266:	2301      	movs	r3, #1
 8003268:	2162      	movs	r1, #98	; 0x62
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff43 	bl	80030f6 <lis2mdl_write_reg>
 8003270:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003286:	f107 020c 	add.w	r2, r7, #12
 800328a:	2306      	movs	r3, #6
 800328c:	2168      	movs	r1, #104	; 0x68
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff19 	bl	80030c6 <lis2mdl_read_reg>
 8003294:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003296:	7b7b      	ldrb	r3, [r7, #13]
 8003298:	b21a      	sxth	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	7b3b      	ldrb	r3, [r7, #12]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3302      	adds	r3, #2
 80032be:	b212      	sxth	r2, r2
 80032c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	3302      	adds	r3, #2
 80032c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	7bbb      	ldrb	r3, [r7, #14]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3302      	adds	r3, #2
 80032dc:	b212      	sxth	r2, r2
 80032de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80032e0:	7c7a      	ldrb	r2, [r7, #17]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	b212      	sxth	r2, r2
 80032e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3304      	adds	r3, #4
 80032ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	7c3b      	ldrb	r3, [r7, #16]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3304      	adds	r3, #4
 8003304:	b212      	sxth	r2, r2
 8003306:	801a      	strh	r2, [r3, #0]

  return ret;
 8003308:	697b      	ldr	r3, [r7, #20]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800331c:	2301      	movs	r3, #1
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	214f      	movs	r1, #79	; 0x4f
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fecf 	bl	80030c6 <lis2mdl_read_reg>
 8003328:	60f8      	str	r0, [r7, #12]

  return ret;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003340:	f107 0208 	add.w	r2, r7, #8
 8003344:	2301      	movs	r3, #1
 8003346:	2162      	movs	r1, #98	; 0x62
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff febc 	bl	80030c6 <lis2mdl_read_reg>
 800334e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	b2da      	uxtb	r2, r3
 800335e:	7a3b      	ldrb	r3, [r7, #8]
 8003360:	f362 0341 	bfi	r3, r2, #1, #1
 8003364:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003366:	f107 0208 	add.w	r2, r7, #8
 800336a:	2301      	movs	r3, #1
 800336c:	2162      	movs	r1, #98	; 0x62
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fec1 	bl	80030f6 <lis2mdl_write_reg>
 8003374:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800338c:	f107 0208 	add.w	r2, r7, #8
 8003390:	2301      	movs	r3, #1
 8003392:	2162      	movs	r1, #98	; 0x62
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fe96 	bl	80030c6 <lis2mdl_read_reg>
 800339a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	7a3b      	ldrb	r3, [r7, #8]
 80033ac:	f362 1345 	bfi	r3, r2, #5, #1
 80033b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80033b2:	f107 0208 	add.w	r2, r7, #8
 80033b6:	2301      	movs	r3, #1
 80033b8:	2162      	movs	r1, #98	; 0x62
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fe9b 	bl	80030f6 <lis2mdl_write_reg>
 80033c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e051      	b.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	7b1a      	ldrb	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <LSM6DSO_RegisterBusIO+0xcc>)
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <LSM6DSO_RegisterBusIO+0xd0>)
 800342a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e020      	b.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4798      	blx	r3
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e016      	b.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d112      	bne.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003470:	230c      	movs	r3, #12
 8003472:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	461a      	mov	r2, r3
 8003478:	2112      	movs	r1, #18
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 ff5d 	bl	800433a <LSM6DSO_Write_Reg>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	080047dd 	.word	0x080047dd
 800349c:	08004813 	.word	0x08004813

080034a0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d00b      	beq.n	80034c8 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3320      	adds	r3, #32
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fe8a 	bl	80051d0 <lsm6dso_i3c_disable_set>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e060      	b.n	800358a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3320      	adds	r3, #32
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fe58 	bl	8005184 <lsm6dso_auto_increment_set>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e054      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3320      	adds	r3, #32
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fd62 	bl	8004fb0 <lsm6dso_block_data_update_set>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e048      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3320      	adds	r3, #32
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 feae 	bl	8005260 <lsm6dso_fifo_mode_set>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e03c      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3320      	adds	r3, #32
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fa20 	bl	8004964 <lsm6dso_xl_data_rate_set>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	e02c      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f9b6 	bl	80048a8 <lsm6dso_xl_full_scale_set>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e020      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2204      	movs	r2, #4
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3320      	adds	r3, #32
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fbce 	bl	8004cf8 <lsm6dso_gy_data_rate_set>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	e010      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3320      	adds	r3, #32
 800356c:	2106      	movs	r1, #6
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fb5a 	bl	8004c28 <lsm6dso_gy_full_scale_set>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e004      	b.n	800358a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f888 	bl	80036b0 <LSM6DSO_ACC_Disable>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e015      	b.n	80035d8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fc2e 	bl	8003e0e <LSM6DSO_GYRO_Disable>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	e00c      	b.n	80035d8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3320      	adds	r3, #32
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fdb6 	bl	8005162 <lsm6dso_device_id_get>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	e000      	b.n	8003604 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003634:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2210      	movs	r2, #16
 800363a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <LSM6DSO_GetCapabilities+0x58>)
 8003646:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4a06      	ldr	r2, [pc, #24]	; (8003664 <LSM6DSO_GetCapabilities+0x58>)
 800364c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	45d02000 	.word	0x45d02000

08003668 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e014      	b.n	80036a8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 0220 	add.w	r2, r3, #32
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f001 f969 	bl	8004964 <lsm6dso_xl_data_rate_set>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	e004      	b.n	80036a8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e01f      	b.n	8003706 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f103 0220 	add.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3333      	adds	r3, #51	; 0x33
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f001 fa40 	bl	8004b58 <lsm6dso_xl_data_rate_get>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e010      	b.n	8003706 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3320      	adds	r3, #32
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f93a 	bl	8004964 <lsm6dso_xl_data_rate_set>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
 80036fa:	e004      	b.n	8003706 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3320      	adds	r3, #32
 8003722:	f107 020b 	add.w	r2, r7, #11
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f8e3 	bl	80048f4 <lsm6dso_xl_full_scale_get>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e023      	b.n	8003782 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d81b      	bhi.n	8003778 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	08003771 	.word	0x08003771
 8003750:	08003761 	.word	0x08003761
 8003754:	08003769 	.word	0x08003769
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800375c:	601a      	str	r2, [r3, #0]
      break;
 800375e:	e00f      	b.n	8003780 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003764:	601a      	str	r2, [r3, #0]
      break;
 8003766:	e00b      	b.n	8003780 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800376c:	601a      	str	r2, [r3, #0]
      break;
 800376e:	e007      	b.n	8003780 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003774:	601a      	str	r2, [r3, #0]
      break;
 8003776:	e003      	b.n	8003780 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	60fb      	str	r3, [r7, #12]
      break;
 800377e:	bf00      	nop
  }

  return ret;
 8003780:	68fb      	ldr	r3, [r7, #12]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	3d79db23 	.word	0x3d79db23
 8003790:	3df9db23 	.word	0x3df9db23
 8003794:	3e79db23 	.word	0x3e79db23
 8003798:	3ef9db23 	.word	0x3ef9db23

0800379c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3320      	adds	r3, #32
 80037ae:	f107 020b 	add.w	r2, r7, #11
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f9cf 	bl	8004b58 <lsm6dso_xl_data_rate_get>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	e054      	b.n	8003870 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	2b0b      	cmp	r3, #11
 80037ca:	d84c      	bhi.n	8003866 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	08003805 	.word	0x08003805
 80037d8:	08003817 	.word	0x08003817
 80037dc:	0800381f 	.word	0x0800381f
 80037e0:	08003827 	.word	0x08003827
 80037e4:	0800382f 	.word	0x0800382f
 80037e8:	08003837 	.word	0x08003837
 80037ec:	0800383f 	.word	0x0800383f
 80037f0:	08003847 	.word	0x08003847
 80037f4:	0800384f 	.word	0x0800384f
 80037f8:	08003857 	.word	0x08003857
 80037fc:	0800385f 	.word	0x0800385f
 8003800:	0800380f 	.word	0x0800380f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
      break;
 800380c:	e02f      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4a19      	ldr	r2, [pc, #100]	; (8003878 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003812:	601a      	str	r2, [r3, #0]
      break;
 8003814:	e02b      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800381a:	601a      	str	r2, [r3, #0]
      break;
 800381c:	e027      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003822:	601a      	str	r2, [r3, #0]
      break;
 8003824:	e023      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800382a:	601a      	str	r2, [r3, #0]
      break;
 800382c:	e01f      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003832:	601a      	str	r2, [r3, #0]
      break;
 8003834:	e01b      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800383a:	601a      	str	r2, [r3, #0]
      break;
 800383c:	e017      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003842:	601a      	str	r2, [r3, #0]
      break;
 8003844:	e013      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800384a:	601a      	str	r2, [r3, #0]
      break;
 800384c:	e00f      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4a11      	ldr	r2, [pc, #68]	; (8003898 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003852:	601a      	str	r2, [r3, #0]
      break;
 8003854:	e00b      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4a10      	ldr	r2, [pc, #64]	; (800389c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800385a:	601a      	str	r2, [r3, #0]
      break;
 800385c:	e007      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003862:	601a      	str	r2, [r3, #0]
      break;
 8003864:	e003      	b.n	800386e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	60fb      	str	r3, [r7, #12]
      break;
 800386c:	bf00      	nop
  }

  return ret;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	3fcccccd 	.word	0x3fcccccd
 800387c:	41480000 	.word	0x41480000
 8003880:	41d00000 	.word	0x41d00000
 8003884:	42500000 	.word	0x42500000
 8003888:	42d00000 	.word	0x42d00000
 800388c:	43500000 	.word	0x43500000
 8003890:	43d08000 	.word	0x43d08000
 8003894:	44504000 	.word	0x44504000
 8003898:	44d06000 	.word	0x44d06000
 800389c:	45505000 	.word	0x45505000
 80038a0:	45d05800 	.word	0x45d05800

080038a4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80038b0:	2100      	movs	r1, #0
 80038b2:	ed97 0a00 	vldr	s0, [r7]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f806 	bl	80038c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80038bc:	4603      	mov	r3, r0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80038d4:	460b      	mov	r3, r1
 80038d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	f000 80ea 	beq.w	8003abc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f300 8163 	bgt.w	8003bb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d074      	beq.n	80039e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80038f6:	e15d      	b.n	8003bb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f103 0020 	add.w	r0, r3, #32
 80038fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003902:	2301      	movs	r3, #1
 8003904:	2114      	movs	r1, #20
 8003906:	f000 ff9f 	bl	8004848 <lsm6dso_read_reg>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	e16c      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003916:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800391a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d025      	beq.n	8003970 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10b      	bne.n	8003946 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3320      	adds	r3, #32
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f815 	bl	8004964 <lsm6dso_xl_data_rate_set>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
 8003944:	e154      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800394a:	f36f 13c7 	bfc	r3, #7, #1
 800394e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f103 0020 	add.w	r0, r3, #32
 8003958:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800395c:	2301      	movs	r3, #1
 800395e:	2114      	movs	r1, #20
 8003960:	f000 ff8a 	bl	8004878 <lsm6dso_write_reg>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e13f      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f103 0020 	add.w	r0, r3, #32
 8003976:	f107 0220 	add.w	r2, r7, #32
 800397a:	2301      	movs	r3, #1
 800397c:	2115      	movs	r1, #21
 800397e:	f000 ff63 	bl	8004848 <lsm6dso_read_reg>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e130      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800398e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d014      	beq.n	80039c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 800399c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039a0:	f36f 1304 	bfc	r3, #4, #1
 80039a4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f103 0020 	add.w	r0, r3, #32
 80039ae:	f107 0220 	add.w	r2, r7, #32
 80039b2:	2301      	movs	r3, #1
 80039b4:	2115      	movs	r1, #21
 80039b6:	f000 ff5f 	bl	8004878 <lsm6dso_write_reg>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	e114      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80039c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039ca:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80039ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d400      	bmi.n	80039da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80039d8:	e0f0      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80039da:	4b87      	ldr	r3, [pc, #540]	; (8003bf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	e0ed      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f103 0020 	add.w	r0, r3, #32
 80039e6:	f107 021c 	add.w	r2, r7, #28
 80039ea:	2301      	movs	r3, #1
 80039ec:	2114      	movs	r1, #20
 80039ee:	f000 ff2b 	bl	8004848 <lsm6dso_read_reg>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	e0f8      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80039fe:	7f3b      	ldrb	r3, [r7, #28]
 8003a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d023      	beq.n	8003a52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10b      	bne.n	8003a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3320      	adds	r3, #32
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ffa2 	bl	8004964 <lsm6dso_xl_data_rate_set>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	e0e1      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003a2c:	7f3b      	ldrb	r3, [r7, #28]
 8003a2e:	f36f 13c7 	bfc	r3, #7, #1
 8003a32:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f103 0020 	add.w	r0, r3, #32
 8003a3a:	f107 021c 	add.w	r2, r7, #28
 8003a3e:	2301      	movs	r3, #1
 8003a40:	2114      	movs	r1, #20
 8003a42:	f000 ff19 	bl	8004878 <lsm6dso_write_reg>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	e0ce      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f103 0020 	add.w	r0, r3, #32
 8003a58:	f107 0218 	add.w	r2, r7, #24
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	2115      	movs	r1, #21
 8003a60:	f000 fef2 	bl	8004848 <lsm6dso_read_reg>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e0bf      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003a70:	7e3b      	ldrb	r3, [r7, #24]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d112      	bne.n	8003aa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003a7c:	7e3b      	ldrb	r3, [r7, #24]
 8003a7e:	f043 0310 	orr.w	r3, r3, #16
 8003a82:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f103 0020 	add.w	r0, r3, #32
 8003a8a:	f107 0218 	add.w	r2, r7, #24
 8003a8e:	2301      	movs	r3, #1
 8003a90:	2115      	movs	r1, #21
 8003a92:	f000 fef1 	bl	8004878 <lsm6dso_write_reg>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e0a6      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003aa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aa6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	dc00      	bgt.n	8003ab6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003ab4:	e082      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003ab6:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	e07f      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f103 0020 	add.w	r0, r3, #32
 8003ac2:	f107 0210 	add.w	r2, r7, #16
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	2115      	movs	r1, #21
 8003aca:	f000 febd 	bl	8004848 <lsm6dso_read_reg>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e08a      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003ada:	7c3b      	ldrb	r3, [r7, #16]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003ae6:	7c3b      	ldrb	r3, [r7, #16]
 8003ae8:	f36f 1304 	bfc	r3, #4, #1
 8003aec:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f103 0020 	add.w	r0, r3, #32
 8003af4:	f107 0210 	add.w	r2, r7, #16
 8003af8:	2301      	movs	r3, #1
 8003afa:	2115      	movs	r1, #21
 8003afc:	f000 febc 	bl	8004878 <lsm6dso_write_reg>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e071      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d108      	bne.n	8003b28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f979 	bl	8003e0e <LSM6DSO_GYRO_Disable>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	e063      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f103 0020 	add.w	r0, r3, #32
 8003b2e:	f107 0214 	add.w	r2, r7, #20
 8003b32:	2301      	movs	r3, #1
 8003b34:	2114      	movs	r1, #20
 8003b36:	f000 fe87 	bl	8004848 <lsm6dso_read_reg>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	e054      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003b46:	7d3b      	ldrb	r3, [r7, #20]
 8003b48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d123      	bne.n	8003b9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10b      	bne.n	8003b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3320      	adds	r3, #32
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fefe 	bl	8004964 <lsm6dso_xl_data_rate_set>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	e03d      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003b74:	7d3b      	ldrb	r3, [r7, #20]
 8003b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f103 0020 	add.w	r0, r3, #32
 8003b82:	f107 0214 	add.w	r2, r7, #20
 8003b86:	2301      	movs	r3, #1
 8003b88:	2114      	movs	r1, #20
 8003b8a:	f000 fe75 	bl	8004878 <lsm6dso_write_reg>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
 8003b98:	e02a      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003b9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b9e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003baa:	dc00      	bgt.n	8003bae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003bac:	e006      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	e003      	b.n	8003bbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003bba:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d102      	bne.n	8003bca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e012      	b.n	8003bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003bd4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fbc9 	bl	8004370 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003bde:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003be0:	e005      	b.n	8003bee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003be2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fc5a 	bl	80044a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003bec:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3730      	adds	r7, #48	; 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	41480000 	.word	0x41480000
 8003bfc:	43500000 	.word	0x43500000
 8003c00:	43500000 	.word	0x43500000

08003c04 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3320      	adds	r3, #32
 8003c16:	f107 020b 	add.w	r2, r7, #11
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fe69 	bl	80048f4 <lsm6dso_xl_full_scale_get>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e023      	b.n	8003c76 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d81b      	bhi.n	8003c6c <LSM6DSO_ACC_GetFullScale+0x68>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <LSM6DSO_ACC_GetFullScale+0x38>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5d 	.word	0x08003c5d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	601a      	str	r2, [r3, #0]
      break;
 8003c52:	e00f      	b.n	8003c74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2204      	movs	r2, #4
 8003c58:	601a      	str	r2, [r3, #0]
      break;
 8003c5a:	e00b      	b.n	8003c74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
      break;
 8003c62:	e007      	b.n	8003c74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	601a      	str	r2, [r3, #0]
      break;
 8003c6a:	e003      	b.n	8003c74 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	60fb      	str	r3, [r7, #12]
      break;
 8003c72:	bf00      	nop
  }

  return ret;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	dd0b      	ble.n	8003ca8 <LSM6DSO_ACC_SetFullScale+0x28>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	dd06      	ble.n	8003ca4 <LSM6DSO_ACC_SetFullScale+0x24>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	dc01      	bgt.n	8003ca0 <LSM6DSO_ACC_SetFullScale+0x20>
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e004      	b.n	8003caa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e002      	b.n	8003caa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e000      	b.n	8003caa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003ca8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003caa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3320      	adds	r3, #32
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fdf7 	bl	80048a8 <lsm6dso_xl_full_scale_set>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	e000      	b.n	8003cc8 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3320      	adds	r3, #32
 8003cde:	f107 0208 	add.w	r2, r7, #8
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f9d4 	bl	8005092 <lsm6dso_acceleration_raw_get>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	e00c      	b.n	8003d10 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003cf6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003cfe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003d06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3320      	adds	r3, #32
 8003d2c:	f107 0210 	add.w	r2, r7, #16
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f9ad 	bl	8005092 <lsm6dso_acceleration_raw_get>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	e03c      	b.n	8003dbe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fce0 	bl	8003710 <LSM6DSO_ACC_GetSensitivity>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	e030      	b.n	8003dbe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003d5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d74:	ee17 2a90 	vmov	r2, s15
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d94:	ee17 2a90 	vmov	r2, s15
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003d9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003db4:	ee17 2a90 	vmov	r2, s15
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e014      	b.n	8003e06 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f103 0220 	add.w	r2, r3, #32
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 ff84 	bl	8004cf8 <lsm6dso_gy_data_rate_set>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e004      	b.n	8003e06 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e01f      	b.n	8003e64 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0220 	add.w	r2, r3, #32
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3334      	adds	r3, #52	; 0x34
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f001 f85b 	bl	8004eec <lsm6dso_gy_data_rate_get>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e010      	b.n	8003e64 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3320      	adds	r3, #32
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff55 	bl	8004cf8 <lsm6dso_gy_data_rate_set>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e004      	b.n	8003e64 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3320      	adds	r3, #32
 8003e7e:	f107 020b 	add.w	r2, r7, #11
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fef5 	bl	8004c74 <lsm6dso_gy_full_scale_get>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	e02d      	b.n	8003ef2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	2b06      	cmp	r3, #6
 8003e9a:	d825      	bhi.n	8003ee8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ec1 	.word	0x08003ec1
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ee1 	.word	0x08003ee1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003ec4:	601a      	str	r2, [r3, #0]
      break;
 8003ec6:	e013      	b.n	8003ef0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003ecc:	601a      	str	r2, [r3, #0]
      break;
 8003ece:	e00f      	b.n	8003ef0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003ed4:	601a      	str	r2, [r3, #0]
      break;
 8003ed6:	e00b      	b.n	8003ef0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003edc:	601a      	str	r2, [r3, #0]
      break;
 8003ede:	e007      	b.n	8003ef0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003ee4:	601a      	str	r2, [r3, #0]
      break;
 8003ee6:	e003      	b.n	8003ef0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	60fb      	str	r3, [r7, #12]
      break;
 8003eee:	bf00      	nop
  }

  return ret;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	408c0000 	.word	0x408c0000
 8003f00:	410c0000 	.word	0x410c0000
 8003f04:	418c0000 	.word	0x418c0000
 8003f08:	420c0000 	.word	0x420c0000
 8003f0c:	428c0000 	.word	0x428c0000

08003f10 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3320      	adds	r3, #32
 8003f22:	f107 020b 	add.w	r2, r7, #11
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 ffdf 	bl	8004eec <lsm6dso_gy_data_rate_get>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e04e      	b.n	8003fd8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	2b0a      	cmp	r3, #10
 8003f3e:	d846      	bhi.n	8003fce <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f8f 	.word	0x08003f8f
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f9f 	.word	0x08003f9f
 8003f60:	08003fa7 	.word	0x08003fa7
 8003f64:	08003faf 	.word	0x08003faf
 8003f68:	08003fb7 	.word	0x08003fb7
 8003f6c:	08003fbf 	.word	0x08003fbf
 8003f70:	08003fc7 	.word	0x08003fc7
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
      break;
 8003f7c:	e02b      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8003f82:	601a      	str	r2, [r3, #0]
      break;
 8003f84:	e027      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8003f8a:	601a      	str	r2, [r3, #0]
      break;
 8003f8c:	e023      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8003f92:	601a      	str	r2, [r3, #0]
      break;
 8003f94:	e01f      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8003f9a:	601a      	str	r2, [r3, #0]
      break;
 8003f9c:	e01b      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8003fa2:	601a      	str	r2, [r3, #0]
      break;
 8003fa4:	e017      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8003faa:	601a      	str	r2, [r3, #0]
      break;
 8003fac:	e013      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8003fb2:	601a      	str	r2, [r3, #0]
      break;
 8003fb4:	e00f      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8003fba:	601a      	str	r2, [r3, #0]
      break;
 8003fbc:	e00b      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8003fc2:	601a      	str	r2, [r3, #0]
      break;
 8003fc4:	e007      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8003fca:	601a      	str	r2, [r3, #0]
      break;
 8003fcc:	e003      	b.n	8003fd6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	60fb      	str	r3, [r7, #12]
      break;
 8003fd4:	bf00      	nop
  }

  return ret;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	41480000 	.word	0x41480000
 8003fe4:	41d00000 	.word	0x41d00000
 8003fe8:	42500000 	.word	0x42500000
 8003fec:	42d00000 	.word	0x42d00000
 8003ff0:	43500000 	.word	0x43500000
 8003ff4:	43d08000 	.word	0x43d08000
 8003ff8:	44504000 	.word	0x44504000
 8003ffc:	44d06000 	.word	0x44d06000
 8004000:	45505000 	.word	0x45505000
 8004004:	45d05800 	.word	0x45d05800

08004008 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004014:	2100      	movs	r1, #0
 8004016:	ed97 0a00 	vldr	s0, [r7]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f806 	bl	800402c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	ed87 0a02 	vstr	s0, [r7, #8]
 8004038:	460b      	mov	r3, r1
 800403a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800404a:	2b01      	cmp	r3, #1
 800404c:	d028      	beq.n	80040a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800404e:	e05c      	b.n	800410a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f103 0020 	add.w	r0, r3, #32
 8004056:	f107 0214 	add.w	r2, r7, #20
 800405a:	2301      	movs	r3, #1
 800405c:	2116      	movs	r1, #22
 800405e:	f000 fbf3 	bl	8004848 <lsm6dso_read_reg>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	e06c      	b.n	8004148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800406e:	7d3b      	ldrb	r3, [r7, #20]
 8004070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04b      	beq.n	8004112 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800407a:	7d3b      	ldrb	r3, [r7, #20]
 800407c:	f36f 13c7 	bfc	r3, #7, #1
 8004080:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f103 0020 	add.w	r0, r3, #32
 8004088:	f107 0214 	add.w	r2, r7, #20
 800408c:	2301      	movs	r3, #1
 800408e:	2116      	movs	r1, #22
 8004090:	f000 fbf2 	bl	8004878 <lsm6dso_write_reg>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03b      	beq.n	8004112 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e053      	b.n	8004148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f103 0020 	add.w	r0, r3, #32
 80040a6:	f107 0210 	add.w	r2, r7, #16
 80040aa:	2301      	movs	r3, #1
 80040ac:	2116      	movs	r1, #22
 80040ae:	f000 fbcb 	bl	8004848 <lsm6dso_read_reg>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295
 80040bc:	e044      	b.n	8004148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80040be:	7c3b      	ldrb	r3, [r7, #16]
 80040c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d112      	bne.n	80040f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80040ca:	7c3b      	ldrb	r3, [r7, #16]
 80040cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f103 0020 	add.w	r0, r3, #32
 80040d8:	f107 0210 	add.w	r2, r7, #16
 80040dc:	2301      	movs	r3, #1
 80040de:	2116      	movs	r1, #22
 80040e0:	f000 fbca 	bl	8004878 <lsm6dso_write_reg>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e02b      	b.n	8004148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80040f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80040f4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004150 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	dc00      	bgt.n	8004104 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004102:	e007      	b.n	8004114 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e004      	b.n	8004114 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	61fb      	str	r3, [r7, #28]
      break;
 8004110:	e000      	b.n	8004114 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004112:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d102      	bne.n	8004122 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e012      	b.n	8004148 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800412c:	ed97 0a06 	vldr	s0, [r7, #24]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fa45 	bl	80045c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004136:	61f8      	str	r0, [r7, #28]
 8004138:	e005      	b.n	8004146 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800413a:	ed97 0a06 	vldr	s0, [r7, #24]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 faca 	bl	80046d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004144:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004146:	69fb      	ldr	r3, [r7, #28]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	43500000 	.word	0x43500000
 8004154:	43500000 	.word	0x43500000

08004158 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3320      	adds	r3, #32
 800416a:	f107 020b 	add.w	r2, r7, #11
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd7f 	bl	8004c74 <lsm6dso_gy_full_scale_get>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800417c:	f04f 33ff 	mov.w	r3, #4294967295
 8004180:	e030      	b.n	80041e4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d828      	bhi.n	80041da <LSM6DSO_GYRO_GetFullScale+0x82>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041c7 	.word	0x080041c7
 80041a4:	080041db 	.word	0x080041db
 80041a8:	080041d1 	.word	0x080041d1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	227d      	movs	r2, #125	; 0x7d
 80041b0:	601a      	str	r2, [r3, #0]
      break;
 80041b2:	e016      	b.n	80041e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	22fa      	movs	r2, #250	; 0xfa
 80041b8:	601a      	str	r2, [r3, #0]
      break;
 80041ba:	e012      	b.n	80041e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041c2:	601a      	str	r2, [r3, #0]
      break;
 80041c4:	e00d      	b.n	80041e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041cc:	601a      	str	r2, [r3, #0]
      break;
 80041ce:	e008      	b.n	80041e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80041d6:	601a      	str	r2, [r3, #0]
      break;
 80041d8:	e003      	b.n	80041e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	60fb      	str	r3, [r7, #12]
      break;
 80041e0:	bf00      	nop
  }

  return ret;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b7d      	cmp	r3, #125	; 0x7d
 80041fa:	dd12      	ble.n	8004222 <LSM6DSO_GYRO_SetFullScale+0x36>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2bfa      	cmp	r3, #250	; 0xfa
 8004200:	dd0d      	ble.n	800421e <LSM6DSO_GYRO_SetFullScale+0x32>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004208:	dd07      	ble.n	800421a <LSM6DSO_GYRO_SetFullScale+0x2e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004210:	dc01      	bgt.n	8004216 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004216:	2306      	movs	r3, #6
 8004218:	e004      	b.n	8004224 <LSM6DSO_GYRO_SetFullScale+0x38>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <LSM6DSO_GYRO_SetFullScale+0x38>
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004222:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004224:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3320      	adds	r3, #32
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fcfa 	bl	8004c28 <lsm6dso_gy_full_scale_set>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
 800423e:	e000      	b.n	8004242 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3320      	adds	r3, #32
 8004258:	f107 0208 	add.w	r2, r7, #8
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fecc 	bl	8004ffc <lsm6dso_angular_rate_raw_get>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	e00c      	b.n	800428a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004270:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004278:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004280:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3320      	adds	r3, #32
 80042a0:	f107 0210 	add.w	r2, r7, #16
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fea8 	bl	8004ffc <lsm6dso_angular_rate_raw_get>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	e03c      	b.n	8004332 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fdd4 	bl	8003e6c <LSM6DSO_GYRO_GetSensitivity>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e030      	b.n	8004332 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80042d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042e8:	ee17 2a90 	vmov	r2, s15
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80042f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004308:	ee17 2a90 	vmov	r2, s15
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800431c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004328:	ee17 2a90 	vmov	r2, s15
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
 8004346:	4613      	mov	r3, r2
 8004348:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 0020 	add.w	r0, r3, #32
 8004350:	1cba      	adds	r2, r7, #2
 8004352:	78f9      	ldrb	r1, [r7, #3]
 8004354:	2301      	movs	r3, #1
 8004356:	f000 fa8f 	bl	8004878 <lsm6dso_write_reg>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e000      	b.n	8004368 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800437c:	edd7 7a00 	vldr	s15, [r7]
 8004380:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004480 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	d801      	bhi.n	8004392 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800438e:	230b      	movs	r3, #11
 8004390:	e063      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004392:	edd7 7a00 	vldr	s15, [r7]
 8004396:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d801      	bhi.n	80043a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e058      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043a8:	edd7 7a00 	vldr	s15, [r7]
 80043ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80043b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	d801      	bhi.n	80043be <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e04d      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043be:	edd7 7a00 	vldr	s15, [r7]
 80043c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004484 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80043c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	d801      	bhi.n	80043d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80043d0:	2303      	movs	r3, #3
 80043d2:	e042      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043d4:	edd7 7a00 	vldr	s15, [r7]
 80043d8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004488 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80043dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	d801      	bhi.n	80043ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e037      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043ea:	edd7 7a00 	vldr	s15, [r7]
 80043ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800448c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80043f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	d801      	bhi.n	8004400 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80043fc:	2305      	movs	r3, #5
 80043fe:	e02c      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004400:	edd7 7a00 	vldr	s15, [r7]
 8004404:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004490 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	d801      	bhi.n	8004416 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004412:	2306      	movs	r3, #6
 8004414:	e021      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004416:	edd7 7a00 	vldr	s15, [r7]
 800441a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004494 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800441e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004426:	d801      	bhi.n	800442c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004428:	2307      	movs	r3, #7
 800442a:	e016      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800442c:	edd7 7a00 	vldr	s15, [r7]
 8004430:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004498 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	d801      	bhi.n	8004442 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800443e:	2308      	movs	r3, #8
 8004440:	e00b      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004442:	edd7 7a00 	vldr	s15, [r7]
 8004446:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800449c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800444a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004452:	d801      	bhi.n	8004458 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004454:	2309      	movs	r3, #9
 8004456:	e000      	b.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004458:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800445a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3320      	adds	r3, #32
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fa7d 	bl	8004964 <lsm6dso_xl_data_rate_set>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	e000      	b.n	8004478 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	3fcccccd 	.word	0x3fcccccd
 8004484:	42500000 	.word	0x42500000
 8004488:	42d00000 	.word	0x42d00000
 800448c:	43500000 	.word	0x43500000
 8004490:	43d08000 	.word	0x43d08000
 8004494:	44504000 	.word	0x44504000
 8004498:	44d06000 	.word	0x44d06000
 800449c:	45505000 	.word	0x45505000

080044a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80044ac:	edd7 7a00 	vldr	s15, [r7]
 80044b0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80045a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80044b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044bc:	d801      	bhi.n	80044c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80044be:	230b      	movs	r3, #11
 80044c0:	e063      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044c2:	edd7 7a00 	vldr	s15, [r7]
 80044c6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	d801      	bhi.n	80044d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e058      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044d8:	edd7 7a00 	vldr	s15, [r7]
 80044dc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	d801      	bhi.n	80044ee <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e04d      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044ee:	edd7 7a00 	vldr	s15, [r7]
 80044f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80045a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80044f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fe:	d801      	bhi.n	8004504 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004500:	2303      	movs	r3, #3
 8004502:	e042      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004504:	edd7 7a00 	vldr	s15, [r7]
 8004508:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80045a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800450c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d801      	bhi.n	800451a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004516:	2304      	movs	r3, #4
 8004518:	e037      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800451a:	edd7 7a00 	vldr	s15, [r7]
 800451e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80045ac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	d801      	bhi.n	8004530 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800452c:	2305      	movs	r3, #5
 800452e:	e02c      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004530:	edd7 7a00 	vldr	s15, [r7]
 8004534:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80045b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d801      	bhi.n	8004546 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004542:	2306      	movs	r3, #6
 8004544:	e021      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004546:	edd7 7a00 	vldr	s15, [r7]
 800454a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80045b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800454e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d801      	bhi.n	800455c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004558:	2307      	movs	r3, #7
 800455a:	e016      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800455c:	edd7 7a00 	vldr	s15, [r7]
 8004560:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80045b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	d801      	bhi.n	8004572 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800456e:	2308      	movs	r3, #8
 8004570:	e00b      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004572:	edd7 7a00 	vldr	s15, [r7]
 8004576:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80045bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800457a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004582:	d801      	bhi.n	8004588 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004584:	2309      	movs	r3, #9
 8004586:	e000      	b.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004588:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	3fcccccd 	.word	0x3fcccccd
 80045a4:	42500000 	.word	0x42500000
 80045a8:	42d00000 	.word	0x42d00000
 80045ac:	43500000 	.word	0x43500000
 80045b0:	43d08000 	.word	0x43d08000
 80045b4:	44504000 	.word	0x44504000
 80045b8:	44d06000 	.word	0x44d06000
 80045bc:	45505000 	.word	0x45505000

080045c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80045cc:	edd7 7a00 	vldr	s15, [r7]
 80045d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	d801      	bhi.n	80045e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80045de:	2301      	movs	r3, #1
 80045e0:	e058      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045e2:	edd7 7a00 	vldr	s15, [r7]
 80045e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	d801      	bhi.n	80045f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e04d      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045f8:	edd7 7a00 	vldr	s15, [r7]
 80045fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80046bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	d801      	bhi.n	800460e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800460a:	2303      	movs	r3, #3
 800460c:	e042      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800460e:	edd7 7a00 	vldr	s15, [r7]
 8004612:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80046c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	d801      	bhi.n	8004624 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004620:	2304      	movs	r3, #4
 8004622:	e037      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004624:	edd7 7a00 	vldr	s15, [r7]
 8004628:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800462c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	d801      	bhi.n	800463a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004636:	2305      	movs	r3, #5
 8004638:	e02c      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800463a:	edd7 7a00 	vldr	s15, [r7]
 800463e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80046c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d801      	bhi.n	8004650 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800464c:	2306      	movs	r3, #6
 800464e:	e021      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004650:	edd7 7a00 	vldr	s15, [r7]
 8004654:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d801      	bhi.n	8004666 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004662:	2307      	movs	r3, #7
 8004664:	e016      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004666:	edd7 7a00 	vldr	s15, [r7]
 800466a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80046d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800466e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d801      	bhi.n	800467c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004678:	2308      	movs	r3, #8
 800467a:	e00b      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800467c:	edd7 7a00 	vldr	s15, [r7]
 8004680:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468c:	d801      	bhi.n	8004692 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800468e:	2309      	movs	r3, #9
 8004690:	e000      	b.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004692:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004694:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3320      	adds	r3, #32
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb2a 	bl	8004cf8 <lsm6dso_gy_data_rate_set>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e000      	b.n	80046b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	42500000 	.word	0x42500000
 80046c0:	42d00000 	.word	0x42d00000
 80046c4:	43500000 	.word	0x43500000
 80046c8:	43d08000 	.word	0x43d08000
 80046cc:	44504000 	.word	0x44504000
 80046d0:	44d06000 	.word	0x44d06000
 80046d4:	45505000 	.word	0x45505000

080046d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d801      	bhi.n	80046fa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e058      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046fa:	edd7 7a00 	vldr	s15, [r7]
 80046fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	d801      	bhi.n	8004710 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800470c:	2302      	movs	r3, #2
 800470e:	e04d      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004710:	edd7 7a00 	vldr	s15, [r7]
 8004714:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80047c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	d801      	bhi.n	8004726 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004722:	2303      	movs	r3, #3
 8004724:	e042      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004726:	edd7 7a00 	vldr	s15, [r7]
 800472a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800472e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d801      	bhi.n	800473c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004738:	2304      	movs	r3, #4
 800473a:	e037      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800473c:	edd7 7a00 	vldr	s15, [r7]
 8004740:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80047c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d801      	bhi.n	8004752 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800474e:	2305      	movs	r3, #5
 8004750:	e02c      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004752:	edd7 7a00 	vldr	s15, [r7]
 8004756:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800475a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	d801      	bhi.n	8004768 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004764:	2306      	movs	r3, #6
 8004766:	e021      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004768:	edd7 7a00 	vldr	s15, [r7]
 800476c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80047d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	d801      	bhi.n	800477e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800477a:	2307      	movs	r3, #7
 800477c:	e016      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800477e:	edd7 7a00 	vldr	s15, [r7]
 8004782:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80047d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	d801      	bhi.n	8004794 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004790:	2308      	movs	r3, #8
 8004792:	e00b      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004794:	edd7 7a00 	vldr	s15, [r7]
 8004798:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80047d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800479c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	d801      	bhi.n	80047aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80047a6:	2309      	movs	r3, #9
 80047a8:	e000      	b.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80047aa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	42500000 	.word	0x42500000
 80047c4:	42d00000 	.word	0x42d00000
 80047c8:	43500000 	.word	0x43500000
 80047cc:	43d08000 	.word	0x43d08000
 80047d0:	44504000 	.word	0x44504000
 80047d4:	44d06000 	.word	0x44d06000
 80047d8:	45505000 	.word	0x45505000

080047dc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
 80047ec:	4613      	mov	r3, r2
 80047ee:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	695c      	ldr	r4, [r3, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	7b1b      	ldrb	r3, [r3, #12]
 80047fc:	b298      	uxth	r0, r3
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	b299      	uxth	r1, r3
 8004802:	893b      	ldrh	r3, [r7, #8]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	47a0      	blx	r4
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd90      	pop	{r4, r7, pc}

08004812 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004812:	b590      	push	{r4, r7, lr}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	461a      	mov	r2, r3
 800481e:	460b      	mov	r3, r1
 8004820:	72fb      	strb	r3, [r7, #11]
 8004822:	4613      	mov	r3, r2
 8004824:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	691c      	ldr	r4, [r3, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	7b1b      	ldrb	r3, [r3, #12]
 8004832:	b298      	uxth	r0, r3
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	b299      	uxth	r1, r3
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	47a0      	blx	r4
 800483e:	4603      	mov	r3, r0
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}

08004848 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	460b      	mov	r3, r1
 8004856:	72fb      	strb	r3, [r7, #11]
 8004858:	4613      	mov	r3, r2
 800485a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685c      	ldr	r4, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68d8      	ldr	r0, [r3, #12]
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	7af9      	ldrb	r1, [r7, #11]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	47a0      	blx	r4
 800486c:	6178      	str	r0, [r7, #20]

  return ret;
 800486e:	697b      	ldr	r3, [r7, #20]
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	461a      	mov	r2, r3
 8004884:	460b      	mov	r3, r1
 8004886:	72fb      	strb	r3, [r7, #11]
 8004888:	4613      	mov	r3, r2
 800488a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681c      	ldr	r4, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68d8      	ldr	r0, [r3, #12]
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	7af9      	ldrb	r1, [r7, #11]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	47a0      	blx	r4
 800489c:	6178      	str	r0, [r7, #20]

  return ret;
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd90      	pop	{r4, r7, pc}

080048a8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048b4:	f107 0208 	add.w	r2, r7, #8
 80048b8:	2301      	movs	r3, #1
 80048ba:	2110      	movs	r1, #16
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ffc3 	bl	8004848 <lsm6dso_read_reg>
 80048c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	7a3b      	ldrb	r3, [r7, #8]
 80048d4:	f362 0383 	bfi	r3, r2, #2, #2
 80048d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048da:	f107 0208 	add.w	r2, r7, #8
 80048de:	2301      	movs	r3, #1
 80048e0:	2110      	movs	r1, #16
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ffc8 	bl	8004878 <lsm6dso_write_reg>
 80048e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048fe:	f107 0208 	add.w	r2, r7, #8
 8004902:	2301      	movs	r3, #1
 8004904:	2110      	movs	r1, #16
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff9e 	bl	8004848 <lsm6dso_read_reg>
 800490c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800490e:	7a3b      	ldrb	r3, [r7, #8]
 8004910:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d81a      	bhi.n	8004950 <lsm6dso_xl_full_scale_get+0x5c>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <lsm6dso_xl_full_scale_get+0x2c>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004931 	.word	0x08004931
 8004924:	08004939 	.word	0x08004939
 8004928:	08004941 	.word	0x08004941
 800492c:	08004949 	.word	0x08004949
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
      break;
 8004936:	e00f      	b.n	8004958 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
      break;
 800493e:	e00b      	b.n	8004958 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	701a      	strb	r2, [r3, #0]
      break;
 8004946:	e007      	b.n	8004958 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2203      	movs	r2, #3
 800494c:	701a      	strb	r2, [r3, #0]
      break;
 800494e:	e003      	b.n	8004958 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
      break;
 8004956:	bf00      	nop
  }

  return ret;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fc96 	bl	80052ac <lsm6dso_fsm_enable_get>
 8004980:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <lsm6dso_xl_data_rate_set+0x28>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	e0e0      	b.n	8004b4e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800498c:	7b3b      	ldrb	r3, [r7, #12]
 800498e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004992:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004994:	7b3b      	ldrb	r3, [r7, #12]
 8004996:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800499a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800499c:	4313      	orrs	r3, r2
 800499e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80049a0:	7b3b      	ldrb	r3, [r7, #12]
 80049a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80049ac:	7b3b      	ldrb	r3, [r7, #12]
 80049ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80049b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80049b8:	7b3b      	ldrb	r3, [r7, #12]
 80049ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80049be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80049c4:	7b3b      	ldrb	r3, [r7, #12]
 80049c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80049d0:	7b3b      	ldrb	r3, [r7, #12]
 80049d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80049d8:	4313      	orrs	r3, r2
 80049da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80049dc:	7b3b      	ldrb	r3, [r7, #12]
 80049de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80049e8:	7b7b      	ldrb	r3, [r7, #13]
 80049ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80049f0:	4313      	orrs	r3, r2
 80049f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80049f4:	7b7b      	ldrb	r3, [r7, #13]
 80049f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80049fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004a00:	7b7b      	ldrb	r3, [r7, #13]
 8004a02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004a0c:	7b7b      	ldrb	r3, [r7, #13]
 8004a0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004a18:	7b7b      	ldrb	r3, [r7, #13]
 8004a1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004a24:	7b7b      	ldrb	r3, [r7, #13]
 8004a26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004a3c:	7b7b      	ldrb	r3, [r7, #13]
 8004a3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d164      	bne.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004a4c:	f107 030b 	add.w	r3, r7, #11
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fc4c 	bl	80052f0 <lsm6dso_fsm_data_rate_get>
 8004a58:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <lsm6dso_xl_data_rate_set+0x100>
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e074      	b.n	8004b4e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d852      	bhi.n	8004b10 <lsm6dso_xl_data_rate_set+0x1ac>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <lsm6dso_xl_data_rate_set+0x10c>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a93 	.word	0x08004a93
 8004a78:	08004ab1 	.word	0x08004ab1
 8004a7c:	08004adb 	.word	0x08004adb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004a8a:	e044      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	75fb      	strb	r3, [r7, #23]
        break;
 8004a90:	e041      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004a9c:	e03b      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d102      	bne.n	8004aaa <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	75fb      	strb	r3, [r7, #23]
        break;
 8004aa8:	e035      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	75fb      	strb	r3, [r7, #23]
        break;
 8004aae:	e032      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004aba:	e02c      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	75fb      	strb	r3, [r7, #23]
        break;
 8004ac6:	e026      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d102      	bne.n	8004ad4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ad2:	e020      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ad8:	e01d      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004ae4:	e017      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d102      	bne.n	8004af2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004aec:	2304      	movs	r3, #4
 8004aee:	75fb      	strb	r3, [r7, #23]
        break;
 8004af0:	e011      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d102      	bne.n	8004afe <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004af8:	2304      	movs	r3, #4
 8004afa:	75fb      	strb	r3, [r7, #23]
        break;
 8004afc:	e00b      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d102      	bne.n	8004b0a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004b04:	2304      	movs	r3, #4
 8004b06:	75fb      	strb	r3, [r7, #23]
        break;
 8004b08:	e005      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	75fb      	strb	r3, [r7, #23]
        break;
 8004b0e:	e002      	b.n	8004b16 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	75fb      	strb	r3, [r7, #23]
        break;
 8004b14:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b16:	f107 0208 	add.w	r2, r7, #8
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	2110      	movs	r1, #16
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe92 	bl	8004848 <lsm6dso_read_reg>
 8004b24:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	7a3b      	ldrb	r3, [r7, #8]
 8004b30:	f362 1307 	bfi	r3, r2, #4, #4
 8004b34:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b36:	f107 0208 	add.w	r2, r7, #8
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	2110      	movs	r1, #16
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe9a 	bl	8004878 <lsm6dso_write_reg>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  return ret;
 8004b4c:	693b      	ldr	r3, [r7, #16]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop

08004b58 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b62:	f107 0208 	add.w	r2, r7, #8
 8004b66:	2301      	movs	r3, #1
 8004b68:	2110      	movs	r1, #16
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fe6c 	bl	8004848 <lsm6dso_read_reg>
 8004b70:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004b72:	7a3b      	ldrb	r3, [r7, #8]
 8004b74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b0b      	cmp	r3, #11
 8004b7c:	d84a      	bhi.n	8004c14 <lsm6dso_xl_data_rate_get+0xbc>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <lsm6dso_xl_data_rate_get+0x2c>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004bb5 	.word	0x08004bb5
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bc5 	.word	0x08004bc5
 8004b90:	08004bcd 	.word	0x08004bcd
 8004b94:	08004bd5 	.word	0x08004bd5
 8004b98:	08004bdd 	.word	0x08004bdd
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004bed 	.word	0x08004bed
 8004ba4:	08004bf5 	.word	0x08004bf5
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c0d 	.word	0x08004c0d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
      break;
 8004bba:	e02f      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
      break;
 8004bc2:	e02b      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e027      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	701a      	strb	r2, [r3, #0]
      break;
 8004bd2:	e023      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	e01f      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2205      	movs	r2, #5
 8004be0:	701a      	strb	r2, [r3, #0]
      break;
 8004be2:	e01b      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2206      	movs	r2, #6
 8004be8:	701a      	strb	r2, [r3, #0]
      break;
 8004bea:	e017      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2207      	movs	r2, #7
 8004bf0:	701a      	strb	r2, [r3, #0]
      break;
 8004bf2:	e013      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	701a      	strb	r2, [r3, #0]
      break;
 8004bfa:	e00f      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2209      	movs	r2, #9
 8004c00:	701a      	strb	r2, [r3, #0]
      break;
 8004c02:	e00b      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	220a      	movs	r2, #10
 8004c08:	701a      	strb	r2, [r3, #0]
      break;
 8004c0a:	e007      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	220b      	movs	r2, #11
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e003      	b.n	8004c1c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	bf00      	nop
  }

  return ret;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c34:	f107 0208 	add.w	r2, r7, #8
 8004c38:	2301      	movs	r3, #1
 8004c3a:	2111      	movs	r1, #17
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fe03 	bl	8004848 <lsm6dso_read_reg>
 8004c42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	7a3b      	ldrb	r3, [r7, #8]
 8004c54:	f362 0343 	bfi	r3, r2, #1, #3
 8004c58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2111      	movs	r1, #17
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fe08 	bl	8004878 <lsm6dso_write_reg>
 8004c68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c7e:	f107 0208 	add.w	r2, r7, #8
 8004c82:	2301      	movs	r3, #1
 8004c84:	2111      	movs	r1, #17
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fdde 	bl	8004848 <lsm6dso_read_reg>
 8004c8c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004c8e:	7a3b      	ldrb	r3, [r7, #8]
 8004c90:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d824      	bhi.n	8004ce4 <lsm6dso_gy_full_scale_get+0x70>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <lsm6dso_gy_full_scale_get+0x2c>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004cdd 	.word	0x08004cdd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
      break;
 8004cc2:	e013      	b.n	8004cec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
      break;
 8004cca:	e00f      	b.n	8004cec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
      break;
 8004cd2:	e00b      	b.n	8004cec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e007      	b.n	8004cec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2206      	movs	r2, #6
 8004ce0:	701a      	strb	r2, [r3, #0]
      break;
 8004ce2:	e003      	b.n	8004cec <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
      break;
 8004cea:	bf00      	nop
  }

  return ret;
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop

08004cf8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 facc 	bl	80052ac <lsm6dso_fsm_enable_get>
 8004d14:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <lsm6dso_gy_data_rate_set+0x28>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	e0e0      	b.n	8004ee2 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d20:	7b3b      	ldrb	r3, [r7, #12]
 8004d22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d26:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004d28:	7b3b      	ldrb	r3, [r7, #12]
 8004d2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d2e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004d34:	7b3b      	ldrb	r3, [r7, #12]
 8004d36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d3a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004d40:	7b3b      	ldrb	r3, [r7, #12]
 8004d42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d46:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004d4c:	7b3b      	ldrb	r3, [r7, #12]
 8004d4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d52:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004d58:	7b3b      	ldrb	r3, [r7, #12]
 8004d5a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d5e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004d64:	7b3b      	ldrb	r3, [r7, #12]
 8004d66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004d70:	7b3b      	ldrb	r3, [r7, #12]
 8004d72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004d7c:	7b7b      	ldrb	r3, [r7, #13]
 8004d7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004d84:	4313      	orrs	r3, r2
 8004d86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004d88:	7b7b      	ldrb	r3, [r7, #13]
 8004d8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004d94:	7b7b      	ldrb	r3, [r7, #13]
 8004d96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004da0:	7b7b      	ldrb	r3, [r7, #13]
 8004da2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004da6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004dac:	7b7b      	ldrb	r3, [r7, #13]
 8004dae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004db2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004db8:	7b7b      	ldrb	r3, [r7, #13]
 8004dba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004dbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004dc4:	7b7b      	ldrb	r3, [r7, #13]
 8004dc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004dca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004dd0:	7b7b      	ldrb	r3, [r7, #13]
 8004dd2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004dd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d164      	bne.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004de0:	f107 030b 	add.w	r3, r7, #11
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa82 	bl	80052f0 <lsm6dso_fsm_data_rate_get>
 8004dec:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <lsm6dso_gy_data_rate_set+0x100>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	e074      	b.n	8004ee2 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d852      	bhi.n	8004ea4 <lsm6dso_gy_data_rate_set+0x1ac>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <lsm6dso_gy_data_rate_set+0x10c>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e27 	.word	0x08004e27
 8004e0c:	08004e45 	.word	0x08004e45
 8004e10:	08004e6f 	.word	0x08004e6f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e1e:	e044      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	75fb      	strb	r3, [r7, #23]
        break;
 8004e24:	e041      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e30:	e03b      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d102      	bne.n	8004e3e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e3c:	e035      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	75fb      	strb	r3, [r7, #23]
        break;
 8004e42:	e032      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e4e:	e02c      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e56:	2303      	movs	r3, #3
 8004e58:	75fb      	strb	r3, [r7, #23]
        break;
 8004e5a:	e026      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d102      	bne.n	8004e68 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e62:	2303      	movs	r3, #3
 8004e64:	75fb      	strb	r3, [r7, #23]
        break;
 8004e66:	e020      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e6c:	e01d      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e74:	2304      	movs	r3, #4
 8004e76:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e78:	e017      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d102      	bne.n	8004e86 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e80:	2304      	movs	r3, #4
 8004e82:	75fb      	strb	r3, [r7, #23]
        break;
 8004e84:	e011      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d102      	bne.n	8004e92 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	75fb      	strb	r3, [r7, #23]
        break;
 8004e90:	e00b      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d102      	bne.n	8004e9e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e98:	2304      	movs	r3, #4
 8004e9a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e9c:	e005      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea2:	e002      	b.n	8004eaa <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004eaa:	f107 0208 	add.w	r2, r7, #8
 8004eae:	2301      	movs	r3, #1
 8004eb0:	2111      	movs	r1, #17
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fcc8 	bl	8004848 <lsm6dso_read_reg>
 8004eb8:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	7a3b      	ldrb	r3, [r7, #8]
 8004ec4:	f362 1307 	bfi	r3, r2, #4, #4
 8004ec8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004eca:	f107 0208 	add.w	r2, r7, #8
 8004ece:	2301      	movs	r3, #1
 8004ed0:	2111      	movs	r1, #17
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fcd0 	bl	8004878 <lsm6dso_write_reg>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  return ret;
 8004ee0:	693b      	ldr	r3, [r7, #16]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004ef6:	f107 0208 	add.w	r2, r7, #8
 8004efa:	2301      	movs	r3, #1
 8004efc:	2111      	movs	r1, #17
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fca2 	bl	8004848 <lsm6dso_read_reg>
 8004f04:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8004f06:	7a3b      	ldrb	r3, [r7, #8]
 8004f08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b0a      	cmp	r3, #10
 8004f10:	d844      	bhi.n	8004f9c <lsm6dso_gy_data_rate_get+0xb0>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <lsm6dso_gy_data_rate_get+0x2c>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f4d 	.word	0x08004f4d
 8004f20:	08004f55 	.word	0x08004f55
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f65 	.word	0x08004f65
 8004f2c:	08004f6d 	.word	0x08004f6d
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f7d 	.word	0x08004f7d
 8004f38:	08004f85 	.word	0x08004f85
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f95 	.word	0x08004f95
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e02b      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e027      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2202      	movs	r2, #2
 8004f58:	701a      	strb	r2, [r3, #0]
      break;
 8004f5a:	e023      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	e01f      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2204      	movs	r2, #4
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e01b      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2205      	movs	r2, #5
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e017      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2206      	movs	r2, #6
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e013      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2207      	movs	r2, #7
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e00f      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2208      	movs	r2, #8
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e00b      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2209      	movs	r2, #9
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e007      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	220a      	movs	r2, #10
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e003      	b.n	8004fa4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	bf00      	nop
  }

  return ret;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop

08004fb0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004fbc:	f107 0208 	add.w	r2, r7, #8
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	2112      	movs	r1, #18
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fc3f 	bl	8004848 <lsm6dso_read_reg>
 8004fca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	7a3b      	ldrb	r3, [r7, #8]
 8004fdc:	f362 1386 	bfi	r3, r2, #6, #1
 8004fe0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004fe2:	f107 0208 	add.w	r2, r7, #8
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	2112      	movs	r1, #18
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fc44 	bl	8004878 <lsm6dso_write_reg>
 8004ff0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005006:	f107 020c 	add.w	r2, r7, #12
 800500a:	2306      	movs	r3, #6
 800500c:	2122      	movs	r1, #34	; 0x22
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fc1a 	bl	8004848 <lsm6dso_read_reg>
 8005014:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005016:	7b7b      	ldrb	r3, [r7, #13]
 8005018:	b21a      	sxth	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29a      	uxth	r2, r3
 800502a:	7b3b      	ldrb	r3, [r7, #12]
 800502c:	b29b      	uxth	r3, r3
 800502e:	4413      	add	r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	b21a      	sxth	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	3302      	adds	r3, #2
 800503e:	b212      	sxth	r2, r2
 8005040:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3302      	adds	r3, #2
 8005046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800504a:	b29b      	uxth	r3, r3
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	b29a      	uxth	r2, r3
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	b29b      	uxth	r3, r3
 8005054:	4413      	add	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3302      	adds	r3, #2
 800505c:	b212      	sxth	r2, r2
 800505e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005060:	7c7a      	ldrb	r2, [r7, #17]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	b212      	sxth	r2, r2
 8005068:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3304      	adds	r3, #4
 800506e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005072:	b29b      	uxth	r3, r3
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	b29a      	uxth	r2, r3
 8005078:	7c3b      	ldrb	r3, [r7, #16]
 800507a:	b29b      	uxth	r3, r3
 800507c:	4413      	add	r3, r2
 800507e:	b29a      	uxth	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	3304      	adds	r3, #4
 8005084:	b212      	sxth	r2, r2
 8005086:	801a      	strh	r2, [r3, #0]

  return ret;
 8005088:	697b      	ldr	r3, [r7, #20]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800509c:	f107 020c 	add.w	r2, r7, #12
 80050a0:	2306      	movs	r3, #6
 80050a2:	2128      	movs	r1, #40	; 0x28
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fbcf 	bl	8004848 <lsm6dso_read_reg>
 80050aa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050ac:	7b7b      	ldrb	r3, [r7, #13]
 80050ae:	b21a      	sxth	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	b29a      	uxth	r2, r3
 80050c0:	7b3b      	ldrb	r3, [r7, #12]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	b21a      	sxth	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	3302      	adds	r3, #2
 80050d4:	b212      	sxth	r2, r2
 80050d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3302      	adds	r3, #2
 80050dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	7bbb      	ldrb	r3, [r7, #14]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	3302      	adds	r3, #2
 80050f2:	b212      	sxth	r2, r2
 80050f4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80050f6:	7c7a      	ldrb	r2, [r7, #17]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3304      	adds	r3, #4
 80050fc:	b212      	sxth	r2, r2
 80050fe:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	3304      	adds	r3, #4
 8005104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005108:	b29b      	uxth	r3, r3
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	b29a      	uxth	r2, r3
 800510e:	7c3b      	ldrb	r3, [r7, #16]
 8005110:	b29b      	uxth	r3, r3
 8005112:	4413      	add	r3, r2
 8005114:	b29a      	uxth	r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	b212      	sxth	r2, r2
 800511c:	801a      	strh	r2, [r3, #0]

  return ret;
 800511e:	697b      	ldr	r3, [r7, #20]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005134:	2300      	movs	r3, #0
 8005136:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	b2da      	uxtb	r2, r3
 8005140:	7a3b      	ldrb	r3, [r7, #8]
 8005142:	f362 1387 	bfi	r3, r2, #6, #2
 8005146:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005148:	f107 0208 	add.w	r2, r7, #8
 800514c:	2301      	movs	r3, #1
 800514e:	2101      	movs	r1, #1
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fb91 	bl	8004878 <lsm6dso_write_reg>
 8005156:	60f8      	str	r0, [r7, #12]

  return ret;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800516c:	2301      	movs	r3, #1
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	210f      	movs	r1, #15
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fb68 	bl	8004848 <lsm6dso_read_reg>
 8005178:	60f8      	str	r0, [r7, #12]

  return ret;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005190:	f107 0208 	add.w	r2, r7, #8
 8005194:	2301      	movs	r3, #1
 8005196:	2112      	movs	r1, #18
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fb55 	bl	8004848 <lsm6dso_read_reg>
 800519e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	7a3b      	ldrb	r3, [r7, #8]
 80051b0:	f362 0382 	bfi	r3, r2, #2, #1
 80051b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80051b6:	f107 0208 	add.w	r2, r7, #8
 80051ba:	2301      	movs	r3, #1
 80051bc:	2112      	movs	r1, #18
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fb5a 	bl	8004878 <lsm6dso_write_reg>
 80051c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051c6:	68fb      	ldr	r3, [r7, #12]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80051dc:	f107 020c 	add.w	r2, r7, #12
 80051e0:	2301      	movs	r3, #1
 80051e2:	2118      	movs	r1, #24
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fb2f 	bl	8004848 <lsm6dso_read_reg>
 80051ea:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	7b3b      	ldrb	r3, [r7, #12]
 80051fa:	f362 0341 	bfi	r3, r2, #1, #1
 80051fe:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005200:	f107 020c 	add.w	r2, r7, #12
 8005204:	2301      	movs	r3, #1
 8005206:	2118      	movs	r1, #24
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fb35 	bl	8004878 <lsm6dso_write_reg>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <lsm6dso_i3c_disable_set+0x50>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	e01b      	b.n	8005258 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005220:	f107 0210 	add.w	r2, r7, #16
 8005224:	2301      	movs	r3, #1
 8005226:	2162      	movs	r1, #98	; 0x62
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fb0d 	bl	8004848 <lsm6dso_read_reg>
 800522e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	b2da      	uxtb	r2, r3
 8005238:	7c3b      	ldrb	r3, [r7, #16]
 800523a:	f362 03c4 	bfi	r3, r2, #3, #2
 800523e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005240:	f107 0210 	add.w	r2, r7, #16
 8005244:	2301      	movs	r3, #1
 8005246:	2162      	movs	r1, #98	; 0x62
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fb15 	bl	8004878 <lsm6dso_write_reg>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  return ret;
 8005256:	697b      	ldr	r3, [r7, #20]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800526c:	f107 0208 	add.w	r2, r7, #8
 8005270:	2301      	movs	r3, #1
 8005272:	210a      	movs	r1, #10
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fae7 	bl	8004848 <lsm6dso_read_reg>
 800527a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	b2da      	uxtb	r2, r3
 800528a:	7a3b      	ldrb	r3, [r7, #8]
 800528c:	f362 0302 	bfi	r3, r2, #0, #3
 8005290:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005292:	f107 0208 	add.w	r2, r7, #8
 8005296:	2301      	movs	r3, #1
 8005298:	210a      	movs	r1, #10
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff faec 	bl	8004878 <lsm6dso_write_reg>
 80052a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80052b6:	2102      	movs	r1, #2
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff35 	bl	8005128 <lsm6dso_mem_bank_set>
 80052be:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80052c0:	2302      	movs	r3, #2
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	2146      	movs	r1, #70	; 0x46
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fabe 	bl	8004848 <lsm6dso_read_reg>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ff26 	bl	8005128 <lsm6dso_mem_bank_set>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  return ret;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80052fa:	2102      	movs	r1, #2
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff13 	bl	8005128 <lsm6dso_mem_bank_set>
 8005302:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <lsm6dso_fsm_data_rate_get+0x1e>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e03a      	b.n	8005384 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800530e:	f107 0208 	add.w	r2, r7, #8
 8005312:	2301      	movs	r3, #1
 8005314:	215f      	movs	r1, #95	; 0x5f
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fa96 	bl	8004848 <lsm6dso_read_reg>
 800531c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d125      	bne.n	8005370 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005324:	7a3b      	ldrb	r3, [r7, #8]
 8005326:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d81b      	bhi.n	8005368 <lsm6dso_fsm_data_rate_get+0x78>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <lsm6dso_fsm_data_rate_get+0x48>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	08005349 	.word	0x08005349
 800533c:	08005351 	.word	0x08005351
 8005340:	08005359 	.word	0x08005359
 8005344:	08005361 	.word	0x08005361
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
      break;
 800534e:	e010      	b.n	8005372 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
      break;
 8005356:	e00c      	b.n	8005372 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2202      	movs	r2, #2
 800535c:	701a      	strb	r2, [r3, #0]
      break;
 800535e:	e008      	b.n	8005372 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2203      	movs	r2, #3
 8005364:	701a      	strb	r2, [r3, #0]
      break;
 8005366:	e004      	b.n	8005372 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
      break;
 800536e:	e000      	b.n	8005372 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005370:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005372:	2100      	movs	r1, #0
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fed7 	bl	8005128 <lsm6dso_mem_bank_set>
 800537a:	4602      	mov	r2, r0
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  return ret;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800539a:	2301      	movs	r3, #1
 800539c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d06e      	beq.n	8005486 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	f200 809d 	bhi.w	80054ea <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <IKS01A3_MOTION_SENSOR_Init+0x32>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d032      	beq.n	8005422 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80053bc:	e095      	b.n	80054ea <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80053be:	6838      	ldr	r0, [r7, #0]
 80053c0:	f000 f966 	bl	8005690 <LSM6DSO_0_Probe>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	e0cc      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053d0:	4a68      	ldr	r2, [pc, #416]	; (8005574 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4967      	ldr	r1, [pc, #412]	; (8005578 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053e2:	f107 010c 	add.w	r1, r7, #12
 80053e6:	4610      	mov	r0, r2
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80053f0:	f06f 0306 	mvn.w	r3, #6
 80053f4:	e0b9      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80053f6:	7b3b      	ldrb	r3, [r7, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d103      	bne.n	8005404 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	f043 0302 	orr.w	r3, r3, #2
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005404:	7b7b      	ldrb	r3, [r7, #13]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d103      	bne.n	8005412 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d16c      	bne.n	80054f2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	f043 0304 	orr.w	r3, r3, #4
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005420:	e067      	b.n	80054f2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f000 f9f4 	bl	8005810 <LIS2DW12_0_Probe>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e09a      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005434:	4a4f      	ldr	r2, [pc, #316]	; (8005574 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	494e      	ldr	r1, [pc, #312]	; (8005578 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005446:	f107 010c 	add.w	r1, r7, #12
 800544a:	4610      	mov	r0, r2
 800544c:	4798      	blx	r3
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005454:	f06f 0306 	mvn.w	r3, #6
 8005458:	e087      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800545a:	7b3b      	ldrb	r3, [r7, #12]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d103      	bne.n	8005468 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005468:	7b7b      	ldrb	r3, [r7, #13]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d103      	bne.n	8005476 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005476:	7bbb      	ldrb	r3, [r7, #14]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d13c      	bne.n	80054f6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005484:	e037      	b.n	80054f6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f000 fa6a 	bl	8005960 <LIS2MDL_0_Probe>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
 8005496:	e068      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005498:	4a36      	ldr	r2, [pc, #216]	; (8005574 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4935      	ldr	r1, [pc, #212]	; (8005578 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054aa:	f107 010c 	add.w	r1, r7, #12
 80054ae:	4610      	mov	r0, r2
 80054b0:	4798      	blx	r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80054b8:	f06f 0306 	mvn.w	r3, #6
 80054bc:	e055      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80054be:	7b3b      	ldrb	r3, [r7, #12]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d103      	bne.n	80054cc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	f043 0302 	orr.w	r3, r3, #2
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80054cc:	7b7b      	ldrb	r3, [r7, #13]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d103      	bne.n	80054da <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10c      	bne.n	80054fa <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80054e8:	e007      	b.n	80054fa <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80054ea:	f06f 0301 	mvn.w	r3, #1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80054f0:	e004      	b.n	80054fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80054fa:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	e031      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550a:	e02a      	b.n	8005562 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	4013      	ands	r3, r2
 8005512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005514:	429a      	cmp	r2, r3
 8005516:	d11e      	bne.n	8005556 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8005518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	4013      	ands	r3, r2
 800551e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005520:	429a      	cmp	r2, r3
 8005522:	d118      	bne.n	8005556 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005524:	4a15      	ldr	r2, [pc, #84]	; (800557c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800552c:	4814      	ldr	r0, [pc, #80]	; (8005580 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	440b      	add	r3, r1
 8005538:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	490e      	ldr	r1, [pc, #56]	; (8005578 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005546:	4610      	mov	r0, r2
 8005548:	4798      	blx	r3
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005550:	f06f 0304 	mvn.w	r3, #4
 8005554:	e009      	b.n	800556a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	3301      	adds	r3, #1
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	2b02      	cmp	r3, #2
 8005566:	d9d1      	bls.n	800550c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800556a:	4618      	mov	r0, r3
 800556c:	3738      	adds	r7, #56	; 0x38
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2000026c 	.word	0x2000026c
 8005578:	2000023c 	.word	0x2000023c
 800557c:	200000c4 	.word	0x200000c4
 8005580:	20000248 	.word	0x20000248

08005584 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d903      	bls.n	800559c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005594:	f06f 0301 	mvn.w	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e028      	b.n	80055ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4013      	ands	r3, r2
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d11c      	bne.n	80055e8 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055b6:	4812      	ldr	r0, [pc, #72]	; (8005600 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	440b      	add	r3, r1
 80055c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	490e      	ldr	r1, [pc, #56]	; (8005604 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055da:	f06f 0304 	mvn.w	r3, #4
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e005      	b.n	80055ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e002      	b.n	80055ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80055e8:	f06f 0301 	mvn.w	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000278 	.word	0x20000278
 80055fc:	200000c4 	.word	0x200000c4
 8005600:	20000248 	.word	0x20000248
 8005604:	2000023c 	.word	0x2000023c

08005608 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d903      	bls.n	8005622 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800561a:	f06f 0301 	mvn.w	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e029      	b.n	8005676 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	d11d      	bne.n	8005670 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800563c:	4812      	ldr	r0, [pc, #72]	; (8005688 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	440b      	add	r3, r1
 8005648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	490f      	ldr	r1, [pc, #60]	; (800568c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005662:	f06f 0304 	mvn.w	r3, #4
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e005      	b.n	8005676 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e002      	b.n	8005676 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005670:	f06f 0301 	mvn.w	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000278 	.word	0x20000278
 8005684:	200000c4 	.word	0x200000c4
 8005688:	20000248 	.word	0x20000248
 800568c:	2000023c 	.word	0x2000023c

08005690 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b094      	sub	sp, #80	; 0x50
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005698:	2300      	movs	r3, #0
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80056a0:	23d7      	movs	r3, #215	; 0xd7
 80056a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80056a6:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <LSM6DSO_0_Probe+0x144>)
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80056aa:	4b4b      	ldr	r3, [pc, #300]	; (80057d8 <LSM6DSO_0_Probe+0x148>)
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80056ae:	4b4b      	ldr	r3, [pc, #300]	; (80057dc <LSM6DSO_0_Probe+0x14c>)
 80056b0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80056b2:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <LSM6DSO_0_Probe+0x150>)
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80056b6:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <LSM6DSO_0_Probe+0x154>)
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80056ba:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <LSM6DSO_0_Probe+0x158>)
 80056bc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80056be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056c2:	4619      	mov	r1, r3
 80056c4:	4849      	ldr	r0, [pc, #292]	; (80057ec <LSM6DSO_0_Probe+0x15c>)
 80056c6:	f7fd fe81 	bl	80033cc <LSM6DSO_RegisterBusIO>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056d0:	f06f 0306 	mvn.w	r3, #6
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d6:	e077      	b.n	80057c8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80056d8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80056dc:	4619      	mov	r1, r3
 80056de:	4843      	ldr	r0, [pc, #268]	; (80057ec <LSM6DSO_0_Probe+0x15c>)
 80056e0:	f7fd ff7e 	bl	80035e0 <LSM6DSO_ReadID>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056ea:	f06f 0306 	mvn.w	r3, #6
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f0:	e06a      	b.n	80057c8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80056f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056f6:	2b6c      	cmp	r3, #108	; 0x6c
 80056f8:	d003      	beq.n	8005702 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056fa:	f06f 0306 	mvn.w	r3, #6
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	e062      	b.n	80057c8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	4619      	mov	r1, r3
 8005708:	4838      	ldr	r0, [pc, #224]	; (80057ec <LSM6DSO_0_Probe+0x15c>)
 800570a:	f7fd ff7f 	bl	800360c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800570e:	7b7b      	ldrb	r3, [r7, #13]
 8005710:	461a      	mov	r2, r3
 8005712:	7b3b      	ldrb	r3, [r7, #12]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	431a      	orrs	r2, r3
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4313      	orrs	r3, r2
 800571e:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <LSM6DSO_0_Probe+0x160>)
 8005720:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8005722:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <LSM6DSO_0_Probe+0x164>)
 8005724:	4a31      	ldr	r2, [pc, #196]	; (80057ec <LSM6DSO_0_Probe+0x15c>)
 8005726:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005728:	4b33      	ldr	r3, [pc, #204]	; (80057f8 <LSM6DSO_0_Probe+0x168>)
 800572a:	4a34      	ldr	r2, [pc, #208]	; (80057fc <LSM6DSO_0_Probe+0x16c>)
 800572c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800572e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d11d      	bne.n	8005770 <LSM6DSO_0_Probe+0xe0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <LSM6DSO_0_Probe+0xe0>
 800573e:	7b7b      	ldrb	r3, [r7, #13]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d115      	bne.n	8005770 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005744:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <LSM6DSO_0_Probe+0x170>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a2e      	ldr	r2, [pc, #184]	; (8005804 <LSM6DSO_0_Probe+0x174>)
 800574a:	492f      	ldr	r1, [pc, #188]	; (8005808 <LSM6DSO_0_Probe+0x178>)
 800574c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005750:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <LSM6DSO_0_Probe+0x168>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <LSM6DSO_0_Probe+0x164>)
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	4610      	mov	r0, r2
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005764:	f06f 0304 	mvn.w	r3, #4
 8005768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576a:	e001      	b.n	8005770 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800576c:	2300      	movs	r3, #0
 800576e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d11d      	bne.n	80057b2 <LSM6DSO_0_Probe+0x122>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d018      	beq.n	80057b2 <LSM6DSO_0_Probe+0x122>
 8005780:	7b3b      	ldrb	r3, [r7, #12]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d115      	bne.n	80057b2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005786:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <LSM6DSO_0_Probe+0x170>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <LSM6DSO_0_Probe+0x174>)
 800578c:	491f      	ldr	r1, [pc, #124]	; (800580c <LSM6DSO_0_Probe+0x17c>)
 800578e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005792:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <LSM6DSO_0_Probe+0x168>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <LSM6DSO_0_Probe+0x164>)
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057a6:	f06f 0304 	mvn.w	r3, #4
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	e001      	b.n	80057b2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <LSM6DSO_0_Probe+0x138>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80057c2:	f06f 0304 	mvn.w	r3, #4
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3750      	adds	r7, #80	; 0x50
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	08000b01 	.word	0x08000b01
 80057d8:	08000b65 	.word	0x08000b65
 80057dc:	08000c19 	.word	0x08000c19
 80057e0:	08000bb5 	.word	0x08000bb5
 80057e4:	08000c7d 	.word	0x08000c7d
 80057e8:	08005b95 	.word	0x08005b95
 80057ec:	20000284 	.word	0x20000284
 80057f0:	20000278 	.word	0x20000278
 80057f4:	2000023c 	.word	0x2000023c
 80057f8:	2000026c 	.word	0x2000026c
 80057fc:	2000006c 	.word	0x2000006c
 8005800:	200000c4 	.word	0x200000c4
 8005804:	20000248 	.word	0x20000248
 8005808:	200000a0 	.word	0x200000a0
 800580c:	2000007c 	.word	0x2000007c

08005810 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b094      	sub	sp, #80	; 0x50
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005818:	2300      	movs	r3, #0
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005820:	2333      	movs	r3, #51	; 0x33
 8005822:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005826:	4b40      	ldr	r3, [pc, #256]	; (8005928 <LIS2DW12_0_Probe+0x118>)
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800582a:	4b40      	ldr	r3, [pc, #256]	; (800592c <LIS2DW12_0_Probe+0x11c>)
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800582e:	4b40      	ldr	r3, [pc, #256]	; (8005930 <LIS2DW12_0_Probe+0x120>)
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005832:	4b40      	ldr	r3, [pc, #256]	; (8005934 <LIS2DW12_0_Probe+0x124>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005836:	4b40      	ldr	r3, [pc, #256]	; (8005938 <LIS2DW12_0_Probe+0x128>)
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <LIS2DW12_0_Probe+0x12c>)
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800583e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005842:	4619      	mov	r1, r3
 8005844:	483e      	ldr	r0, [pc, #248]	; (8005940 <LIS2DW12_0_Probe+0x130>)
 8005846:	f7fb fb2d 	bl	8000ea4 <LIS2DW12_RegisterBusIO>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005850:	f06f 0306 	mvn.w	r3, #6
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005856:	e062      	b.n	800591e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005858:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800585c:	4619      	mov	r1, r3
 800585e:	4838      	ldr	r0, [pc, #224]	; (8005940 <LIS2DW12_0_Probe+0x130>)
 8005860:	f7fb fc0e 	bl	8001080 <LIS2DW12_ReadID>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800586a:	f06f 0306 	mvn.w	r3, #6
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005870:	e055      	b.n	800591e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005872:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005876:	2b44      	cmp	r3, #68	; 0x44
 8005878:	d003      	beq.n	8005882 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800587a:	f06f 0306 	mvn.w	r3, #6
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005880:	e04d      	b.n	800591e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005882:	f107 030c 	add.w	r3, r7, #12
 8005886:	4619      	mov	r1, r3
 8005888:	482d      	ldr	r0, [pc, #180]	; (8005940 <LIS2DW12_0_Probe+0x130>)
 800588a:	f7fb fc0f 	bl	80010ac <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800588e:	7b7b      	ldrb	r3, [r7, #13]
 8005890:	461a      	mov	r2, r3
 8005892:	7b3b      	ldrb	r3, [r7, #12]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	431a      	orrs	r2, r3
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4313      	orrs	r3, r2
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <LIS2DW12_0_Probe+0x134>)
 80058a0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <LIS2DW12_0_Probe+0x138>)
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <LIS2DW12_0_Probe+0x130>)
 80058a6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80058a8:	4b28      	ldr	r3, [pc, #160]	; (800594c <LIS2DW12_0_Probe+0x13c>)
 80058aa:	4a29      	ldr	r2, [pc, #164]	; (8005950 <LIS2DW12_0_Probe+0x140>)
 80058ac:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80058ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11e      	bne.n	80058f2 <LIS2DW12_0_Probe+0xe2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d019      	beq.n	80058f2 <LIS2DW12_0_Probe+0xe2>
 80058be:	7b3b      	ldrb	r3, [r7, #12]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d116      	bne.n	80058f2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80058c4:	4b23      	ldr	r3, [pc, #140]	; (8005954 <LIS2DW12_0_Probe+0x144>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a23      	ldr	r2, [pc, #140]	; (8005958 <LIS2DW12_0_Probe+0x148>)
 80058ca:	3303      	adds	r3, #3
 80058cc:	4923      	ldr	r1, [pc, #140]	; (800595c <LIS2DW12_0_Probe+0x14c>)
 80058ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <LIS2DW12_0_Probe+0x13c>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <LIS2DW12_0_Probe+0x138>)
 80058da:	6852      	ldr	r2, [r2, #4]
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e6:	f06f 0304 	mvn.w	r3, #4
 80058ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ec:	e001      	b.n	80058f2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80058f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <LIS2DW12_0_Probe+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005902:	f06f 0304 	mvn.w	r3, #4
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <LIS2DW12_0_Probe+0x10e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005918:	f06f 0304 	mvn.w	r3, #4
 800591c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800591e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005920:	4618      	mov	r0, r3
 8005922:	3750      	adds	r7, #80	; 0x50
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08000b01 	.word	0x08000b01
 800592c:	08000b65 	.word	0x08000b65
 8005930:	08000c19 	.word	0x08000c19
 8005934:	08000bb5 	.word	0x08000bb5
 8005938:	08000c7d 	.word	0x08000c7d
 800593c:	08005b95 	.word	0x08005b95
 8005940:	200002bc 	.word	0x200002bc
 8005944:	20000278 	.word	0x20000278
 8005948:	2000023c 	.word	0x2000023c
 800594c:	2000026c 	.word	0x2000026c
 8005950:	20000004 	.word	0x20000004
 8005954:	200000c4 	.word	0x200000c4
 8005958:	20000248 	.word	0x20000248
 800595c:	20000014 	.word	0x20000014

08005960 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b094      	sub	sp, #80	; 0x50
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005968:	2300      	movs	r3, #0
 800596a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005970:	233d      	movs	r3, #61	; 0x3d
 8005972:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005976:	4b40      	ldr	r3, [pc, #256]	; (8005a78 <LIS2MDL_0_Probe+0x118>)
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <LIS2MDL_0_Probe+0x11c>)
 800597c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800597e:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <LIS2MDL_0_Probe+0x120>)
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005982:	4b40      	ldr	r3, [pc, #256]	; (8005a84 <LIS2MDL_0_Probe+0x124>)
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005986:	4b40      	ldr	r3, [pc, #256]	; (8005a88 <LIS2MDL_0_Probe+0x128>)
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800598a:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <LIS2MDL_0_Probe+0x12c>)
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800598e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005992:	4619      	mov	r1, r3
 8005994:	483e      	ldr	r0, [pc, #248]	; (8005a90 <LIS2MDL_0_Probe+0x130>)
 8005996:	f7fc fd13 	bl	80023c0 <LIS2MDL_RegisterBusIO>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059a0:	f06f 0306 	mvn.w	r3, #6
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a6:	e062      	b.n	8005a6e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80059a8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80059ac:	4619      	mov	r1, r3
 80059ae:	4838      	ldr	r0, [pc, #224]	; (8005a90 <LIS2MDL_0_Probe+0x130>)
 80059b0:	f7fc fe22 	bl	80025f8 <LIS2MDL_ReadID>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059ba:	f06f 0306 	mvn.w	r3, #6
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	e055      	b.n	8005a6e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80059c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d003      	beq.n	80059d2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059ca:	f06f 0306 	mvn.w	r3, #6
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d0:	e04d      	b.n	8005a6e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	4619      	mov	r1, r3
 80059d8:	482d      	ldr	r0, [pc, #180]	; (8005a90 <LIS2MDL_0_Probe+0x130>)
 80059da:	f7fc fe33 	bl	8002644 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80059de:	7b7b      	ldrb	r3, [r7, #13]
 80059e0:	461a      	mov	r2, r3
 80059e2:	7b3b      	ldrb	r3, [r7, #12]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4313      	orrs	r3, r2
 80059ee:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <LIS2MDL_0_Probe+0x134>)
 80059f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <LIS2MDL_0_Probe+0x138>)
 80059f4:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <LIS2MDL_0_Probe+0x130>)
 80059f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <LIS2MDL_0_Probe+0x13c>)
 80059fa:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <LIS2MDL_0_Probe+0x140>)
 80059fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11e      	bne.n	8005a42 <LIS2MDL_0_Probe+0xe2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d019      	beq.n	8005a42 <LIS2MDL_0_Probe+0xe2>
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d116      	bne.n	8005a42 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a14:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <LIS2MDL_0_Probe+0x144>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	4a23      	ldr	r2, [pc, #140]	; (8005aa8 <LIS2MDL_0_Probe+0x148>)
 8005a1a:	3306      	adds	r3, #6
 8005a1c:	4923      	ldr	r1, [pc, #140]	; (8005aac <LIS2MDL_0_Probe+0x14c>)
 8005a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005a22:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <LIS2MDL_0_Probe+0x13c>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <LIS2MDL_0_Probe+0x138>)
 8005a2a:	6892      	ldr	r2, [r2, #8]
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a36:	f06f 0304 	mvn.w	r3, #4
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	e001      	b.n	8005a42 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <LIS2MDL_0_Probe+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a52:	f06f 0304 	mvn.w	r3, #4
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d107      	bne.n	8005a6e <LIS2MDL_0_Probe+0x10e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a68:	f06f 0304 	mvn.w	r3, #4
 8005a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3750      	adds	r7, #80	; 0x50
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	08000b01 	.word	0x08000b01
 8005a7c:	08000b65 	.word	0x08000b65
 8005a80:	08000c19 	.word	0x08000c19
 8005a84:	08000bb5 	.word	0x08000bb5
 8005a88:	08000c7d 	.word	0x08000c7d
 8005a8c:	08005b95 	.word	0x08005b95
 8005a90:	200002f8 	.word	0x200002f8
 8005a94:	20000278 	.word	0x20000278
 8005a98:	2000023c 	.word	0x2000023c
 8005a9c:	2000026c 	.word	0x2000026c
 8005aa0:	20000038 	.word	0x20000038
 8005aa4:	200000c4 	.word	0x200000c4
 8005aa8:	20000248 	.word	0x20000248
 8005aac:	20000048 	.word	0x20000048

08005ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <HAL_Init+0x40>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <HAL_Init+0x40>)
 8005aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_Init+0x40>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <HAL_Init+0x40>)
 8005ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_Init+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <HAL_Init+0x40>)
 8005ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ad8:	2003      	movs	r0, #3
 8005ada:	f000 f94f 	bl	8005d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f000 f808 	bl	8005af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ae4:	f7fa ff2e 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40023c00 	.word	0x40023c00

08005af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005afc:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <HAL_InitTick+0x54>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <HAL_InitTick+0x58>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f967 	bl	8005de6 <HAL_SYSTICK_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e00e      	b.n	8005b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b0f      	cmp	r3, #15
 8005b26:	d80a      	bhi.n	8005b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	f000 f92f 	bl	8005d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b34:	4a06      	ldr	r2, [pc, #24]	; (8005b50 <HAL_InitTick+0x5c>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e000      	b.n	8005b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	200000dc 	.word	0x200000dc
 8005b50:	200000d8 	.word	0x200000d8

08005b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_IncTick+0x20>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_IncTick+0x24>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4413      	add	r3, r2
 8005b64:	4a04      	ldr	r2, [pc, #16]	; (8005b78 <HAL_IncTick+0x24>)
 8005b66:	6013      	str	r3, [r2, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200000dc 	.word	0x200000dc
 8005b78:	2000032c 	.word	0x2000032c

08005b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <HAL_GetTick+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	2000032c 	.word	0x2000032c

08005b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b9c:	f7ff ffee 	bl	8005b7c <HAL_GetTick>
 8005ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d005      	beq.n	8005bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_Delay+0x44>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005bba:	bf00      	nop
 8005bbc:	f7ff ffde 	bl	8005b7c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d8f7      	bhi.n	8005bbc <HAL_Delay+0x28>
  {
  }
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200000dc 	.word	0x200000dc

08005bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <__NVIC_SetPriorityGrouping+0x44>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <__NVIC_SetPriorityGrouping+0x44>)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	60d3      	str	r3, [r2, #12]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	e000ed00 	.word	0xe000ed00

08005c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <__NVIC_GetPriorityGrouping+0x18>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	f003 0307 	and.w	r3, r3, #7
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db0b      	blt.n	8005c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f003 021f 	and.w	r2, r3, #31
 8005c58:	4907      	ldr	r1, [pc, #28]	; (8005c78 <__NVIC_EnableIRQ+0x38>)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2001      	movs	r0, #1
 8005c62:	fa00 f202 	lsl.w	r2, r0, r2
 8005c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000e100 	.word	0xe000e100

08005c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	db0a      	blt.n	8005ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	490c      	ldr	r1, [pc, #48]	; (8005cc8 <__NVIC_SetPriority+0x4c>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	0112      	lsls	r2, r2, #4
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ca4:	e00a      	b.n	8005cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4908      	ldr	r1, [pc, #32]	; (8005ccc <__NVIC_SetPriority+0x50>)
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	3b04      	subs	r3, #4
 8005cb4:	0112      	lsls	r2, r2, #4
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	440b      	add	r3, r1
 8005cba:	761a      	strb	r2, [r3, #24]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	e000e100 	.word	0xe000e100
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f1c3 0307 	rsb	r3, r3, #7
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf28      	it	cs
 8005cee:	2304      	movcs	r3, #4
 8005cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	2b06      	cmp	r3, #6
 8005cf8:	d902      	bls.n	8005d00 <NVIC_EncodePriority+0x30>
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3b03      	subs	r3, #3
 8005cfe:	e000      	b.n	8005d02 <NVIC_EncodePriority+0x32>
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	401a      	ands	r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d18:	f04f 31ff 	mov.w	r1, #4294967295
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d22:	43d9      	mvns	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d28:	4313      	orrs	r3, r2
         );
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3724      	adds	r7, #36	; 0x24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d48:	d301      	bcc.n	8005d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e00f      	b.n	8005d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <SysTick_Config+0x40>)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d56:	210f      	movs	r1, #15
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	f7ff ff8e 	bl	8005c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <SysTick_Config+0x40>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d66:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <SysTick_Config+0x40>)
 8005d68:	2207      	movs	r2, #7
 8005d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	e000e010 	.word	0xe000e010

08005d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff29 	bl	8005bdc <__NVIC_SetPriorityGrouping>
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005da4:	f7ff ff3e 	bl	8005c24 <__NVIC_GetPriorityGrouping>
 8005da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	f7ff ff8e 	bl	8005cd0 <NVIC_EncodePriority>
 8005db4:	4602      	mov	r2, r0
 8005db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff5d 	bl	8005c7c <__NVIC_SetPriority>
}
 8005dc2:	bf00      	nop
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ff31 	bl	8005c40 <__NVIC_EnableIRQ>
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff ffa2 	bl	8005d38 <SysTick_Config>
 8005df4:	4603      	mov	r3, r0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e0c:	f7ff feb6 	bl	8005b7c <HAL_GetTick>
 8005e10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d008      	beq.n	8005e30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e052      	b.n	8005ed6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0216 	bic.w	r2, r2, #22
 8005e3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <HAL_DMA_Abort+0x62>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0208 	bic.w	r2, r2, #8
 8005e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e80:	e013      	b.n	8005eaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e82:	f7ff fe7b 	bl	8005b7c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d90c      	bls.n	8005eaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e015      	b.n	8005ed6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e4      	bne.n	8005e82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	223f      	movs	r2, #63	; 0x3f
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d004      	beq.n	8005efc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e00c      	b.n	8005f16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2205      	movs	r2, #5
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e159      	b.n	80061f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f40:	2201      	movs	r2, #1
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	f040 8148 	bne.w	80061ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d005      	beq.n	8005f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d130      	bne.n	8005fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	2203      	movs	r2, #3
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	43db      	mvns	r3, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fac:	2201      	movs	r2, #1
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 0201 	and.w	r2, r3, #1
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d017      	beq.n	8006014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2203      	movs	r2, #3
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d123      	bne.n	8006068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	08da      	lsrs	r2, r3, #3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3208      	adds	r2, #8
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	220f      	movs	r2, #15
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	4013      	ands	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	08da      	lsrs	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3208      	adds	r2, #8
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	2203      	movs	r2, #3
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0203 	and.w	r2, r3, #3
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80a2 	beq.w	80061ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4b57      	ldr	r3, [pc, #348]	; (800620c <HAL_GPIO_Init+0x2e8>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	4a56      	ldr	r2, [pc, #344]	; (800620c <HAL_GPIO_Init+0x2e8>)
 80060b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060b8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ba:	4b54      	ldr	r3, [pc, #336]	; (800620c <HAL_GPIO_Init+0x2e8>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060c6:	4a52      	ldr	r2, [pc, #328]	; (8006210 <HAL_GPIO_Init+0x2ec>)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	3302      	adds	r3, #2
 80060ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	220f      	movs	r2, #15
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a49      	ldr	r2, [pc, #292]	; (8006214 <HAL_GPIO_Init+0x2f0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d019      	beq.n	8006126 <HAL_GPIO_Init+0x202>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a48      	ldr	r2, [pc, #288]	; (8006218 <HAL_GPIO_Init+0x2f4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_GPIO_Init+0x1fe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a47      	ldr	r2, [pc, #284]	; (800621c <HAL_GPIO_Init+0x2f8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00d      	beq.n	800611e <HAL_GPIO_Init+0x1fa>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a46      	ldr	r2, [pc, #280]	; (8006220 <HAL_GPIO_Init+0x2fc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <HAL_GPIO_Init+0x1f6>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a45      	ldr	r2, [pc, #276]	; (8006224 <HAL_GPIO_Init+0x300>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_GPIO_Init+0x1f2>
 8006112:	2304      	movs	r3, #4
 8006114:	e008      	b.n	8006128 <HAL_GPIO_Init+0x204>
 8006116:	2307      	movs	r3, #7
 8006118:	e006      	b.n	8006128 <HAL_GPIO_Init+0x204>
 800611a:	2303      	movs	r3, #3
 800611c:	e004      	b.n	8006128 <HAL_GPIO_Init+0x204>
 800611e:	2302      	movs	r3, #2
 8006120:	e002      	b.n	8006128 <HAL_GPIO_Init+0x204>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <HAL_GPIO_Init+0x204>
 8006126:	2300      	movs	r3, #0
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	f002 0203 	and.w	r2, r2, #3
 800612e:	0092      	lsls	r2, r2, #2
 8006130:	4093      	lsls	r3, r2
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006138:	4935      	ldr	r1, [pc, #212]	; (8006210 <HAL_GPIO_Init+0x2ec>)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	089b      	lsrs	r3, r3, #2
 800613e:	3302      	adds	r3, #2
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <HAL_GPIO_Init+0x304>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	43db      	mvns	r3, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4013      	ands	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800616a:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <HAL_GPIO_Init+0x304>)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <HAL_GPIO_Init+0x304>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_GPIO_Init+0x304>)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800619a:	4b23      	ldr	r3, [pc, #140]	; (8006228 <HAL_GPIO_Init+0x304>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_GPIO_Init+0x304>)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061c4:	4b18      	ldr	r3, [pc, #96]	; (8006228 <HAL_GPIO_Init+0x304>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4013      	ands	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061e8:	4a0f      	ldr	r2, [pc, #60]	; (8006228 <HAL_GPIO_Init+0x304>)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	3301      	adds	r3, #1
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	f67f aea2 	bls.w	8005f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3724      	adds	r7, #36	; 0x24
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40023800 	.word	0x40023800
 8006210:	40013800 	.word	0x40013800
 8006214:	40020000 	.word	0x40020000
 8006218:	40020400 	.word	0x40020400
 800621c:	40020800 	.word	0x40020800
 8006220:	40020c00 	.word	0x40020c00
 8006224:	40021000 	.word	0x40021000
 8006228:	40013c00 	.word	0x40013c00

0800622c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e0bb      	b.n	80063c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006248:	2201      	movs	r2, #1
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4013      	ands	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	f040 80ab 	bne.w	80063ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006264:	4a5c      	ldr	r2, [pc, #368]	; (80063d8 <HAL_GPIO_DeInit+0x1ac>)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	089b      	lsrs	r3, r3, #2
 800626a:	3302      	adds	r3, #2
 800626c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006270:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	220f      	movs	r2, #15
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a54      	ldr	r2, [pc, #336]	; (80063dc <HAL_GPIO_DeInit+0x1b0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d019      	beq.n	80062c2 <HAL_GPIO_DeInit+0x96>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a53      	ldr	r2, [pc, #332]	; (80063e0 <HAL_GPIO_DeInit+0x1b4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_GPIO_DeInit+0x92>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a52      	ldr	r2, [pc, #328]	; (80063e4 <HAL_GPIO_DeInit+0x1b8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00d      	beq.n	80062ba <HAL_GPIO_DeInit+0x8e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a51      	ldr	r2, [pc, #324]	; (80063e8 <HAL_GPIO_DeInit+0x1bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <HAL_GPIO_DeInit+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a50      	ldr	r2, [pc, #320]	; (80063ec <HAL_GPIO_DeInit+0x1c0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_GPIO_DeInit+0x86>
 80062ae:	2304      	movs	r3, #4
 80062b0:	e008      	b.n	80062c4 <HAL_GPIO_DeInit+0x98>
 80062b2:	2307      	movs	r3, #7
 80062b4:	e006      	b.n	80062c4 <HAL_GPIO_DeInit+0x98>
 80062b6:	2303      	movs	r3, #3
 80062b8:	e004      	b.n	80062c4 <HAL_GPIO_DeInit+0x98>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e002      	b.n	80062c4 <HAL_GPIO_DeInit+0x98>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_GPIO_DeInit+0x98>
 80062c2:	2300      	movs	r3, #0
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	f002 0203 	and.w	r2, r2, #3
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	4093      	lsls	r3, r2
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d132      	bne.n	800633a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062d4:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	43db      	mvns	r3, r3
 80062dc:	4944      	ldr	r1, [pc, #272]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062de:	4013      	ands	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80062e2:	4b43      	ldr	r3, [pc, #268]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	4941      	ldr	r1, [pc, #260]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80062f0:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	493d      	ldr	r1, [pc, #244]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80062fe:	4b3c      	ldr	r3, [pc, #240]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	43db      	mvns	r3, r3
 8006306:	493a      	ldr	r1, [pc, #232]	; (80063f0 <HAL_GPIO_DeInit+0x1c4>)
 8006308:	4013      	ands	r3, r2
 800630a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	220f      	movs	r2, #15
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800631c:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <HAL_GPIO_DeInit+0x1ac>)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	3302      	adds	r3, #2
 8006324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	43da      	mvns	r2, r3
 800632c:	482a      	ldr	r0, [pc, #168]	; (80063d8 <HAL_GPIO_DeInit+0x1ac>)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	400a      	ands	r2, r1
 8006334:	3302      	adds	r3, #2
 8006336:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	2103      	movs	r1, #3
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	401a      	ands	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	08da      	lsrs	r2, r3, #3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3208      	adds	r2, #8
 8006358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	220f      	movs	r2, #15
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43db      	mvns	r3, r3
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	08d2      	lsrs	r2, r2, #3
 8006370:	4019      	ands	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3208      	adds	r2, #8
 8006376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	2103      	movs	r1, #3
 8006384:	fa01 f303 	lsl.w	r3, r1, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	401a      	ands	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	2101      	movs	r1, #1
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fa01 f303 	lsl.w	r3, r1, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	401a      	ands	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	2103      	movs	r1, #3
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	401a      	ands	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	f67f af40 	bls.w	8006248 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40013800 	.word	0x40013800
 80063dc:	40020000 	.word	0x40020000
 80063e0:	40020400 	.word	0x40020400
 80063e4:	40020800 	.word	0x40020800
 80063e8:	40020c00 	.word	0x40020c00
 80063ec:	40021000 	.word	0x40021000
 80063f0:	40013c00 	.word	0x40013c00

080063f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	807b      	strh	r3, [r7, #2]
 8006400:	4613      	mov	r3, r2
 8006402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006404:	787b      	ldrb	r3, [r7, #1]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006410:	e003      	b.n	800641a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	041a      	lsls	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	619a      	str	r2, [r3, #24]
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e12b      	b.n	8006692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f95d 	bl	800670e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800647a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800648a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800648c:	f001 fcbe 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8006490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4a81      	ldr	r2, [pc, #516]	; (800669c <HAL_I2C_Init+0x274>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d807      	bhi.n	80064ac <HAL_I2C_Init+0x84>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a80      	ldr	r2, [pc, #512]	; (80066a0 <HAL_I2C_Init+0x278>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bf94      	ite	ls
 80064a4:	2301      	movls	r3, #1
 80064a6:	2300      	movhi	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e006      	b.n	80064ba <HAL_I2C_Init+0x92>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a7d      	ldr	r2, [pc, #500]	; (80066a4 <HAL_I2C_Init+0x27c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf94      	ite	ls
 80064b4:	2301      	movls	r3, #1
 80064b6:	2300      	movhi	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e7      	b.n	8006692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a78      	ldr	r2, [pc, #480]	; (80066a8 <HAL_I2C_Init+0x280>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0c9b      	lsrs	r3, r3, #18
 80064cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a6a      	ldr	r2, [pc, #424]	; (800669c <HAL_I2C_Init+0x274>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <HAL_I2C_Init+0xd4>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3301      	adds	r3, #1
 80064fa:	e009      	b.n	8006510 <HAL_I2C_Init+0xe8>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	4a69      	ldr	r2, [pc, #420]	; (80066ac <HAL_I2C_Init+0x284>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	3301      	adds	r3, #1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	430b      	orrs	r3, r1
 8006516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	495c      	ldr	r1, [pc, #368]	; (800669c <HAL_I2C_Init+0x274>)
 800652c:	428b      	cmp	r3, r1
 800652e:	d819      	bhi.n	8006564 <HAL_I2C_Init+0x13c>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1e59      	subs	r1, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	fbb1 f3f3 	udiv	r3, r1, r3
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006544:	400b      	ands	r3, r1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_I2C_Init+0x138>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1e59      	subs	r1, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fbb1 f3f3 	udiv	r3, r1, r3
 8006558:	3301      	adds	r3, #1
 800655a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655e:	e051      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006560:	2304      	movs	r3, #4
 8006562:	e04f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d111      	bne.n	8006590 <HAL_I2C_Init+0x168>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1e58      	subs	r0, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	440b      	add	r3, r1
 800657a:	fbb0 f3f3 	udiv	r3, r0, r3
 800657e:	3301      	adds	r3, #1
 8006580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e012      	b.n	80065b6 <HAL_I2C_Init+0x18e>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1e58      	subs	r0, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	0099      	lsls	r1, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Init+0x196>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e022      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <HAL_I2C_Init+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1e58      	subs	r0, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	440b      	add	r3, r1
 80065d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d8:	3301      	adds	r3, #1
 80065da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	e00f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1e58      	subs	r0, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	0099      	lsls	r1, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fa:	3301      	adds	r3, #1
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	6809      	ldr	r1, [r1, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6911      	ldr	r1, [r2, #16]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	000186a0 	.word	0x000186a0
 80066a0:	001e847f 	.word	0x001e847f
 80066a4:	003d08ff 	.word	0x003d08ff
 80066a8:	431bde83 	.word	0x431bde83
 80066ac:	10624dd3 	.word	0x10624dd3

080066b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e021      	b.n	8006706 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2224      	movs	r2, #36	; 0x24
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f821 	bl	8006722 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006752:	f7ff fa13 	bl	8005b7c <HAL_GetTick>
 8006756:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b20      	cmp	r3, #32
 8006762:	f040 80d9 	bne.w	8006918 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2319      	movs	r3, #25
 800676c:	2201      	movs	r2, #1
 800676e:	496d      	ldr	r1, [pc, #436]	; (8006924 <HAL_I2C_Mem_Write+0x1ec>)
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fca5 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
 800677e:	e0cc      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_I2C_Mem_Write+0x56>
 800678a:	2302      	movs	r3, #2
 800678c:	e0c5      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d007      	beq.n	80067b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2221      	movs	r2, #33	; 0x21
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a4d      	ldr	r2, [pc, #308]	; (8006928 <HAL_I2C_Mem_Write+0x1f0>)
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067f6:	88f8      	ldrh	r0, [r7, #6]
 80067f8:	893a      	ldrh	r2, [r7, #8]
 80067fa:	8979      	ldrh	r1, [r7, #10]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4603      	mov	r3, r0
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fadc 	bl	8006dc4 <I2C_RequestMemoryWrite>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d052      	beq.n	80068b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e081      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fd6a 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b04      	cmp	r3, #4
 800682c:	d107      	bne.n	800683e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e06b      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d11b      	bne.n	80068b8 <HAL_I2C_Mem_Write+0x180>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	d017      	beq.n	80068b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1aa      	bne.n	8006816 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fd5d 	bl	8007384 <I2C_WaitOnBTFFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d107      	bne.n	80068e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e016      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	00100002 	.word	0x00100002
 8006928:	ffff0000 	.word	0xffff0000

0800692c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	; 0x30
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4603      	mov	r3, r0
 800693c:	817b      	strh	r3, [r7, #10]
 800693e:	460b      	mov	r3, r1
 8006940:	813b      	strh	r3, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006946:	f7ff f919 	bl	8005b7c <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b20      	cmp	r3, #32
 8006956:	f040 8214 	bne.w	8006d82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2319      	movs	r3, #25
 8006960:	2201      	movs	r2, #1
 8006962:	497b      	ldr	r1, [pc, #492]	; (8006b50 <HAL_I2C_Mem_Read+0x224>)
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fbab 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
 8006972:	e207      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_I2C_Mem_Read+0x56>
 800697e:	2302      	movs	r3, #2
 8006980:	e200      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d007      	beq.n	80069a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2222      	movs	r2, #34	; 0x22
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2240      	movs	r2, #64	; 0x40
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a5b      	ldr	r2, [pc, #364]	; (8006b54 <HAL_I2C_Mem_Read+0x228>)
 80069e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069ea:	88f8      	ldrh	r0, [r7, #6]
 80069ec:	893a      	ldrh	r2, [r7, #8]
 80069ee:	8979      	ldrh	r1, [r7, #10]
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4603      	mov	r3, r0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fa78 	bl	8006ef0 <I2C_RequestMemoryRead>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e1bc      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d113      	bne.n	8006a3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e190      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d11b      	bne.n	8006a7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e170      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d11b      	bne.n	8006aba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	e150      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ad0:	e144      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	f200 80f1 	bhi.w	8006cbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d123      	bne.n	8006b2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fc93 	bl	8007414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e145      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b2a:	e117      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d14e      	bne.n	8006bd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4906      	ldr	r1, [pc, #24]	; (8006b58 <HAL_I2C_Mem_Read+0x22c>)
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fabe 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e11a      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
 8006b4e:	bf00      	nop
 8006b50:	00100002 	.word	0x00100002
 8006b54:	ffff0000 	.word	0xffff0000
 8006b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bd0:	e0c4      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	2200      	movs	r2, #0
 8006bda:	496c      	ldr	r1, [pc, #432]	; (8006d8c <HAL_I2C_Mem_Read+0x460>)
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fa6f 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0cb      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	2200      	movs	r2, #0
 8006c36:	4955      	ldr	r1, [pc, #340]	; (8006d8c <HAL_I2C_Mem_Read+0x460>)
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fa41 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e09d      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cbc:	e04e      	b.n	8006d5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fba6 	bl	8007414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e058      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d124      	bne.n	8006d5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d107      	bne.n	8006d2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f aeb6 	bne.w	8006ad2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	00010004 	.word	0x00010004

08006d90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	4608      	mov	r0, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	817b      	strh	r3, [r7, #10]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	813b      	strh	r3, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f960 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e14:	d103      	bne.n	8006e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e05f      	b.n	8006ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e22:	897b      	ldrh	r3, [r7, #10]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	492d      	ldr	r1, [pc, #180]	; (8006eec <I2C_RequestMemoryWrite+0x128>)
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f9bb 	bl	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e04c      	b.n	8006ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e60:	6a39      	ldr	r1, [r7, #32]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa46 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d107      	bne.n	8006e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e02b      	b.n	8006ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d105      	bne.n	8006e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e90:	893b      	ldrh	r3, [r7, #8]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	611a      	str	r2, [r3, #16]
 8006e9a:	e021      	b.n	8006ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eac:	6a39      	ldr	r1, [r7, #32]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa20 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d107      	bne.n	8006ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e005      	b.n	8006ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ed6:	893b      	ldrh	r3, [r7, #8]
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	00010002 	.word	0x00010002

08006ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	461a      	mov	r2, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	460b      	mov	r3, r1
 8006f04:	813b      	strh	r3, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f8c2 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f50:	d103      	bne.n	8006f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e0aa      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f5e:	897b      	ldrh	r3, [r7, #10]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	4952      	ldr	r1, [pc, #328]	; (80070bc <I2C_RequestMemoryRead+0x1cc>)
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f91d 	bl	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e097      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	6a39      	ldr	r1, [r7, #32]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f9a8 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d107      	bne.n	8006fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e076      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d105      	bne.n	8006fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fcc:	893b      	ldrh	r3, [r7, #8]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	611a      	str	r2, [r3, #16]
 8006fd6:	e021      	b.n	800701c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe8:	6a39      	ldr	r1, [r7, #32]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f982 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d107      	bne.n	800700e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e050      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007012:	893b      	ldrh	r3, [r7, #8]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	6a39      	ldr	r1, [r7, #32]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f967 	bl	80072f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00d      	beq.n	8007048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	2b04      	cmp	r3, #4
 8007032:	d107      	bne.n	8007044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e035      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	2200      	movs	r2, #0
 8007060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f82b 	bl	80070c0 <I2C_WaitOnFlagUntilTimeout>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707e:	d103      	bne.n	8007088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e013      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800708c:	897b      	ldrh	r3, [r7, #10]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	4906      	ldr	r1, [pc, #24]	; (80070bc <I2C_RequestMemoryRead+0x1cc>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f886 	bl	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	00010002 	.word	0x00010002

080070c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070d0:	e048      	b.n	8007164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d044      	beq.n	8007164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fe fd4f 	bl	8005b7c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d139      	bne.n	8007164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10d      	bne.n	8007116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	43da      	mvns	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4013      	ands	r3, r2
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	e00c      	b.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	43da      	mvns	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d116      	bne.n	8007164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	f043 0220 	orr.w	r2, r3, #32
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e023      	b.n	80071ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	0c1b      	lsrs	r3, r3, #16
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10d      	bne.n	800718a <I2C_WaitOnFlagUntilTimeout+0xca>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	43da      	mvns	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	e00c      	b.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	43da      	mvns	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4013      	ands	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d093      	beq.n	80070d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071c2:	e071      	b.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d2:	d123      	bne.n	800721c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	f043 0204 	orr.w	r2, r3, #4
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e067      	b.n	80072ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d041      	beq.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007224:	f7fe fcaa 	bl	8005b7c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d136      	bne.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10c      	bne.n	800725e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	43da      	mvns	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4013      	ands	r3, r2
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e00b      	b.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	43da      	mvns	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4013      	ands	r3, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e021      	b.n	80072ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10c      	bne.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	43da      	mvns	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4013      	ands	r3, r2
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e00b      	b.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	43da      	mvns	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f47f af6d 	bne.w	80071c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007300:	e034      	b.n	800736c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f8e3 	bl	80074ce <I2C_IsAcknowledgeFailed>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e034      	b.n	800737c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d028      	beq.n	800736c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fe fc2f 	bl	8005b7c <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11d      	bne.n	800736c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d016      	beq.n	800736c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	f043 0220 	orr.w	r2, r3, #32
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e007      	b.n	800737c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d1c3      	bne.n	8007302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007390:	e034      	b.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f89b 	bl	80074ce <I2C_IsAcknowledgeFailed>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e034      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d028      	beq.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fe fbe7 	bl	8005b7c <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11d      	bne.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d016      	beq.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e007      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d1c3      	bne.n	8007392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007420:	e049      	b.n	80074b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b10      	cmp	r3, #16
 800742e:	d119      	bne.n	8007464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0210 	mvn.w	r2, #16
 8007438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e030      	b.n	80074c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007464:	f7fe fb8a 	bl	8005b7c <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d302      	bcc.n	800747a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d11d      	bne.n	80074b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d016      	beq.n	80074b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f043 0220 	orr.w	r2, r3, #32
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e007      	b.n	80074c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d1ae      	bne.n	8007422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e4:	d11b      	bne.n	800751e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e267      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d075      	beq.n	8007636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800754a:	4b88      	ldr	r3, [pc, #544]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b04      	cmp	r3, #4
 8007554:	d00c      	beq.n	8007570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007556:	4b85      	ldr	r3, [pc, #532]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800755e:	2b08      	cmp	r3, #8
 8007560:	d112      	bne.n	8007588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007562:	4b82      	ldr	r3, [pc, #520]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800756e:	d10b      	bne.n	8007588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	4b7e      	ldr	r3, [pc, #504]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d05b      	beq.n	8007634 <HAL_RCC_OscConfig+0x108>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d157      	bne.n	8007634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e242      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007590:	d106      	bne.n	80075a0 <HAL_RCC_OscConfig+0x74>
 8007592:	4b76      	ldr	r3, [pc, #472]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a75      	ldr	r2, [pc, #468]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	e01d      	b.n	80075dc <HAL_RCC_OscConfig+0xb0>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x98>
 80075aa:	4b70      	ldr	r3, [pc, #448]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6f      	ldr	r2, [pc, #444]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b6d      	ldr	r3, [pc, #436]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a6c      	ldr	r2, [pc, #432]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	e00b      	b.n	80075dc <HAL_RCC_OscConfig+0xb0>
 80075c4:	4b69      	ldr	r3, [pc, #420]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a68      	ldr	r2, [pc, #416]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	4b66      	ldr	r3, [pc, #408]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a65      	ldr	r2, [pc, #404]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e4:	f7fe faca 	bl	8005b7c <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075ec:	f7fe fac6 	bl	8005b7c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	; 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e207      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	4b5b      	ldr	r3, [pc, #364]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0xc0>
 800760a:	e014      	b.n	8007636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760c:	f7fe fab6 	bl	8005b7c <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007614:	f7fe fab2 	bl	8005b7c <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	; 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e1f3      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007626:	4b51      	ldr	r3, [pc, #324]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0xe8>
 8007632:	e000      	b.n	8007636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d063      	beq.n	800770a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007642:	4b4a      	ldr	r3, [pc, #296]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800764e:	4b47      	ldr	r3, [pc, #284]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007656:	2b08      	cmp	r3, #8
 8007658:	d11c      	bne.n	8007694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800765a:	4b44      	ldr	r3, [pc, #272]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d116      	bne.n	8007694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007666:	4b41      	ldr	r3, [pc, #260]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_RCC_OscConfig+0x152>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d001      	beq.n	800767e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e1c7      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767e:	4b3b      	ldr	r3, [pc, #236]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4937      	ldr	r1, [pc, #220]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800768e:	4313      	orrs	r3, r2
 8007690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007692:	e03a      	b.n	800770a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800769c:	4b34      	ldr	r3, [pc, #208]	; (8007770 <HAL_RCC_OscConfig+0x244>)
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a2:	f7fe fa6b 	bl	8005b7c <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076aa:	f7fe fa67 	bl	8005b7c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e1a8      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076bc:	4b2b      	ldr	r3, [pc, #172]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c8:	4b28      	ldr	r3, [pc, #160]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4925      	ldr	r1, [pc, #148]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	600b      	str	r3, [r1, #0]
 80076dc:	e015      	b.n	800770a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_RCC_OscConfig+0x244>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fe fa4a 	bl	8005b7c <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fe fa46 	bl	8005b7c <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e187      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	4b1b      	ldr	r3, [pc, #108]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d036      	beq.n	8007784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d016      	beq.n	800774c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <HAL_RCC_OscConfig+0x248>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007724:	f7fe fa2a 	bl	8005b7c <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800772c:	f7fe fa26 	bl	8005b7c <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e167      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0x200>
 800774a:	e01b      	b.n	8007784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCC_OscConfig+0x248>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007752:	f7fe fa13 	bl	8005b7c <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007758:	e00e      	b.n	8007778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800775a:	f7fe fa0f 	bl	8005b7c <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d907      	bls.n	8007778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e150      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
 800776c:	40023800 	.word	0x40023800
 8007770:	42470000 	.word	0x42470000
 8007774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1ea      	bne.n	800775a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8097 	beq.w	80078c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007796:	4b81      	ldr	r3, [pc, #516]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10f      	bne.n	80077c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	4b7d      	ldr	r3, [pc, #500]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	4a7c      	ldr	r2, [pc, #496]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6413      	str	r3, [r2, #64]	; 0x40
 80077b2:	4b7a      	ldr	r3, [pc, #488]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077c2:	4b77      	ldr	r3, [pc, #476]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d118      	bne.n	8007800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ce:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a73      	ldr	r2, [pc, #460]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077da:	f7fe f9cf 	bl	8005b7c <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077e2:	f7fe f9cb 	bl	8005b7c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e10c      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f4:	4b6a      	ldr	r3, [pc, #424]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x2ea>
 8007808:	4b64      	ldr	r3, [pc, #400]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a63      	ldr	r2, [pc, #396]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
 8007814:	e01c      	b.n	8007850 <HAL_RCC_OscConfig+0x324>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b05      	cmp	r3, #5
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x30c>
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	4a5e      	ldr	r2, [pc, #376]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007824:	f043 0304 	orr.w	r3, r3, #4
 8007828:	6713      	str	r3, [r2, #112]	; 0x70
 800782a:	4b5c      	ldr	r3, [pc, #368]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	4a5b      	ldr	r2, [pc, #364]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	6713      	str	r3, [r2, #112]	; 0x70
 8007836:	e00b      	b.n	8007850 <HAL_RCC_OscConfig+0x324>
 8007838:	4b58      	ldr	r3, [pc, #352]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	4a57      	ldr	r2, [pc, #348]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	6713      	str	r3, [r2, #112]	; 0x70
 8007844:	4b55      	ldr	r3, [pc, #340]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	4a54      	ldr	r2, [pc, #336]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800784a:	f023 0304 	bic.w	r3, r3, #4
 800784e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d015      	beq.n	8007884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fe f990 	bl	8005b7c <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785e:	e00a      	b.n	8007876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007860:	f7fe f98c 	bl	8005b7c <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e0cb      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007876:	4b49      	ldr	r3, [pc, #292]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ee      	beq.n	8007860 <HAL_RCC_OscConfig+0x334>
 8007882:	e014      	b.n	80078ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007884:	f7fe f97a 	bl	8005b7c <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800788a:	e00a      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800788c:	f7fe f976 	bl	8005b7c <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	f241 3288 	movw	r2, #5000	; 0x1388
 800789a:	4293      	cmp	r3, r2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e0b5      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a2:	4b3e      	ldr	r3, [pc, #248]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1ee      	bne.n	800788c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b4:	4b39      	ldr	r3, [pc, #228]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	4a38      	ldr	r2, [pc, #224]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80a1 	beq.w	8007a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078ca:	4b34      	ldr	r3, [pc, #208]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d05c      	beq.n	8007990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d141      	bne.n	8007962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fe f94a 	bl	8005b7c <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ec:	f7fe f946 	bl	8005b7c <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e087      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fe:	4b27      	ldr	r3, [pc, #156]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f0      	bne.n	80078ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	019b      	lsls	r3, r3, #6
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	3b01      	subs	r3, #1
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	061b      	lsls	r3, r3, #24
 800792e:	491b      	ldr	r1, [pc, #108]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007930:	4313      	orrs	r3, r2
 8007932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007934:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fe f91f 	bl	8005b7c <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007942:	f7fe f91b 	bl	8005b7c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e05c      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007954:	4b11      	ldr	r3, [pc, #68]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x416>
 8007960:	e054      	b.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007968:	f7fe f908 	bl	8005b7c <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007970:	f7fe f904 	bl	8005b7c <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e045      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007982:	4b06      	ldr	r3, [pc, #24]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f0      	bne.n	8007970 <HAL_RCC_OscConfig+0x444>
 800798e:	e03d      	b.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e038      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
 800799c:	40023800 	.word	0x40023800
 80079a0:	40007000 	.word	0x40007000
 80079a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079a8:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <HAL_RCC_OscConfig+0x4ec>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d028      	beq.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d121      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d11a      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079d8:	4013      	ands	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d111      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	3b01      	subs	r3, #1
 80079f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d107      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40023800 	.word	0x40023800

08007a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0cc      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a30:	4b68      	ldr	r3, [pc, #416]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d90c      	bls.n	8007a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a46:	4b63      	ldr	r3, [pc, #396]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d001      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0b8      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d020      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a70:	4b59      	ldr	r3, [pc, #356]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4a58      	ldr	r2, [pc, #352]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a88:	4b53      	ldr	r3, [pc, #332]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	4a52      	ldr	r2, [pc, #328]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a94:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	494d      	ldr	r1, [pc, #308]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d044      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d107      	bne.n	8007aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d119      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e07f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d003      	beq.n	8007ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d107      	bne.n	8007aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ada:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e06f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e067      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007afa:	4b37      	ldr	r3, [pc, #220]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 0203 	bic.w	r2, r3, #3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4934      	ldr	r1, [pc, #208]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b0c:	f7fe f836 	bl	8005b7c <HAL_GetTick>
 8007b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b14:	f7fe f832 	bl	8005b7c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e04f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2a:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 020c 	and.w	r2, r3, #12
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d1eb      	bne.n	8007b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d20c      	bcs.n	8007b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d001      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e032      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b70:	4b19      	ldr	r3, [pc, #100]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4916      	ldr	r1, [pc, #88]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	490e      	ldr	r1, [pc, #56]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ba2:	f000 f821 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	490a      	ldr	r1, [pc, #40]	; (8007bdc <HAL_RCC_ClockConfig+0x1c0>)
 8007bb4:	5ccb      	ldrb	r3, [r1, r3]
 8007bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bba:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd ff96 	bl	8005af4 <HAL_InitTick>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023c00 	.word	0x40023c00
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	08009f10 	.word	0x08009f10
 8007be0:	20000000 	.word	0x20000000
 8007be4:	200000d8 	.word	0x200000d8

08007be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bec:	b094      	sub	sp, #80	; 0x50
 8007bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d00d      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x40>
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	f200 80e1 	bhi.w	8007dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_RCC_GetSysClockFreq+0x34>
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d003      	beq.n	8007c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c1a:	e0db      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c1c:	4b73      	ldr	r3, [pc, #460]	; (8007dec <HAL_RCC_GetSysClockFreq+0x204>)
 8007c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007c20:	e0db      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c22:	4b73      	ldr	r3, [pc, #460]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c26:	e0d8      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c28:	4b6f      	ldr	r3, [pc, #444]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c32:	4b6d      	ldr	r3, [pc, #436]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d063      	beq.n	8007d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	099b      	lsrs	r3, r3, #6
 8007c44:	2200      	movs	r2, #0
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f04f 0000 	mov.w	r0, #0
 8007c62:	f04f 0100 	mov.w	r1, #0
 8007c66:	0159      	lsls	r1, r3, #5
 8007c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c6c:	0150      	lsls	r0, r2, #5
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4621      	mov	r1, r4
 8007c74:	1a51      	subs	r1, r2, r1
 8007c76:	6139      	str	r1, [r7, #16]
 8007c78:	4629      	mov	r1, r5
 8007c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	018b      	lsls	r3, r1, #6
 8007c90:	4651      	mov	r1, sl
 8007c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c96:	4651      	mov	r1, sl
 8007c98:	018a      	lsls	r2, r1, #6
 8007c9a:	4651      	mov	r1, sl
 8007c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cba:	4690      	mov	r8, r2
 8007cbc:	4699      	mov	r9, r3
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	eb18 0303 	adds.w	r3, r8, r3
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	eb49 0303 	adc.w	r3, r9, r3
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cda:	4629      	mov	r1, r5
 8007cdc:	024b      	lsls	r3, r1, #9
 8007cde:	4621      	mov	r1, r4
 8007ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	024a      	lsls	r2, r1, #9
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4619      	mov	r1, r3
 8007cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cee:	2200      	movs	r2, #0
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf8:	f7f8 faca 	bl	8000290 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4613      	mov	r3, r2
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d04:	e058      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d06:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	4611      	mov	r1, r2
 8007d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d16:	623b      	str	r3, [r7, #32]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	0159      	lsls	r1, r3, #5
 8007d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d32:	0150      	lsls	r0, r2, #5
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4641      	mov	r1, r8
 8007d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d3e:	4649      	mov	r1, r9
 8007d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d58:	ebb2 040a 	subs.w	r4, r2, sl
 8007d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	00eb      	lsls	r3, r5, #3
 8007d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6e:	00e2      	lsls	r2, r4, #3
 8007d70:	4614      	mov	r4, r2
 8007d72:	461d      	mov	r5, r3
 8007d74:	4643      	mov	r3, r8
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	eb45 0303 	adc.w	r3, r5, r3
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d8e:	4629      	mov	r1, r5
 8007d90:	028b      	lsls	r3, r1, #10
 8007d92:	4621      	mov	r1, r4
 8007d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d98:	4621      	mov	r1, r4
 8007d9a:	028a      	lsls	r2, r1, #10
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da2:	2200      	movs	r2, #0
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	61fa      	str	r2, [r7, #28]
 8007da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dac:	f7f8 fa70 	bl	8000290 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4613      	mov	r3, r2
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007db8:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	0c1b      	lsrs	r3, r3, #16
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3750      	adds	r7, #80	; 0x50
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de6:	bf00      	nop
 8007de8:	40023800 	.word	0x40023800
 8007dec:	00f42400 	.word	0x00f42400
 8007df0:	007a1200 	.word	0x007a1200

08007df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000000 	.word	0x20000000

08007e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e10:	f7ff fff0 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	0a9b      	lsrs	r3, r3, #10
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4903      	ldr	r1, [pc, #12]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	08009f20 	.word	0x08009f20

08007e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e38:	f7ff ffdc 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	0b5b      	lsrs	r3, r3, #13
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	; (8007e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40023800 	.word	0x40023800
 8007e58:	08009f20 	.word	0x08009f20

08007e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e041      	b.n	8007ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7f8 fd86 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f000 fa70 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d001      	beq.n	8007f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e044      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <HAL_TIM_Base_Start_IT+0xb0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x6c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3e:	d013      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x6c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x6c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x6c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x6c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <HAL_TIM_Base_Start_IT+0xc0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d111      	bne.n	8007f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d010      	beq.n	8007f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	e007      	b.n	8007f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40014000 	.word	0x40014000

08007fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d020      	beq.n	8008024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f999 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f98b 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f99c 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d020      	beq.n	8008070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0204 	mvn.w	r2, #4
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f973 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f965 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f976 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0208 	mvn.w	r2, #8
 800808c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2204      	movs	r2, #4
 8008092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f94d 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 80080a8:	e005      	b.n	80080b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f93f 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f950 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0210 	mvn.w	r2, #16
 80080d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2208      	movs	r2, #8
 80080de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f927 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f919 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f92a 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0201 	mvn.w	r2, #1
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7f8 fa30 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fab6 	bl	80086bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00c      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8fb 	bl	800836a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0220 	mvn.w	r2, #32
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa88 	bl	80086a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_ConfigClockSource+0x1c>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e0b4      	b.n	8008326 <HAL_TIM_ConfigClockSource+0x186>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f4:	d03e      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0xd4>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	f200 8087 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x16c>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	f000 8086 	beq.w	8008312 <HAL_TIM_ConfigClockSource+0x172>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820a:	d87f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b70      	cmp	r3, #112	; 0x70
 800820e:	d01a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0xa6>
 8008210:	2b70      	cmp	r3, #112	; 0x70
 8008212:	d87b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b60      	cmp	r3, #96	; 0x60
 8008216:	d050      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x11a>
 8008218:	2b60      	cmp	r3, #96	; 0x60
 800821a:	d877      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b50      	cmp	r3, #80	; 0x50
 800821e:	d03c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0xfa>
 8008220:	2b50      	cmp	r3, #80	; 0x50
 8008222:	d873      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d058      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x13a>
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d86f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d064      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d86b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d060      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d867      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d05a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	e062      	b.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	f000 f999 	bl	800858c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e04f      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	f000 f982 	bl	800858c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e03c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 f8f6 	bl	8008498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2150      	movs	r1, #80	; 0x50
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f94f 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 80082b8:	e02c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 f915 	bl	80084f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2160      	movs	r1, #96	; 0x60
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f93f 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 80082d8:	e01c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 f8d6 	bl	8008498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2140      	movs	r1, #64	; 0x40
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f92f 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 f926 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 800830a:	e003      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3a      	ldr	r2, [pc, #232]	; (800847c <TIM_Base_SetConfig+0xfc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00f      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d00b      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a37      	ldr	r2, [pc, #220]	; (8008480 <TIM_Base_SetConfig+0x100>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d007      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a36      	ldr	r2, [pc, #216]	; (8008484 <TIM_Base_SetConfig+0x104>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a35      	ldr	r2, [pc, #212]	; (8008488 <TIM_Base_SetConfig+0x108>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d108      	bne.n	80083ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2b      	ldr	r2, [pc, #172]	; (800847c <TIM_Base_SetConfig+0xfc>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01b      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d8:	d017      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a28      	ldr	r2, [pc, #160]	; (8008480 <TIM_Base_SetConfig+0x100>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a27      	ldr	r2, [pc, #156]	; (8008484 <TIM_Base_SetConfig+0x104>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a26      	ldr	r2, [pc, #152]	; (8008488 <TIM_Base_SetConfig+0x108>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a25      	ldr	r2, [pc, #148]	; (800848c <TIM_Base_SetConfig+0x10c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a24      	ldr	r2, [pc, #144]	; (8008490 <TIM_Base_SetConfig+0x110>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a23      	ldr	r2, [pc, #140]	; (8008494 <TIM_Base_SetConfig+0x114>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a0e      	ldr	r2, [pc, #56]	; (800847c <TIM_Base_SetConfig+0xfc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d103      	bne.n	8008450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b01      	cmp	r3, #1
 8008460:	d105      	bne.n	800846e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f023 0201 	bic.w	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	611a      	str	r2, [r3, #16]
  }
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40010000 	.word	0x40010000
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40014000 	.word	0x40014000
 8008490:	40014400 	.word	0x40014400
 8008494:	40014800 	.word	0x40014800

08008498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f023 030a 	bic.w	r3, r3, #10
 80084d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	621a      	str	r2, [r3, #32]
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b087      	sub	sp, #28
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f023 0210 	bic.w	r2, r3, #16
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	031b      	lsls	r3, r3, #12
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008532:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	f043 0307 	orr.w	r3, r3, #7
 8008578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	021a      	lsls	r2, r3, #8
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	431a      	orrs	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	609a      	str	r2, [r3, #8]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e050      	b.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d018      	beq.n	800865a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008630:	d013      	beq.n	800865a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00e      	beq.n	800865a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d009      	beq.n	800865a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d004      	beq.n	800865a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d10c      	bne.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	4313      	orrs	r3, r2
 800866a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	40010000 	.word	0x40010000
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40000c00 	.word	0x40000c00
 80086a4:	40014000 	.word	0x40014000

080086a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e042      	b.n	8008768 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7f8 f974 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2224      	movs	r2, #36	; 0x24
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fcbb 	bl	8009090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695a      	ldr	r2, [r3, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b20      	cmp	r3, #32
 8008788:	d121      	bne.n	80087ce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_UART_Transmit_IT+0x26>
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e01a      	b.n	80087d0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2221      	movs	r2, #33	; 0x21
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	e000      	b.n	80087d0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80087ce:	2302      	movs	r3, #2
  }
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b0ba      	sub	sp, #232	; 0xe8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008808:	2300      	movs	r3, #0
 800880a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800880e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800881a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10f      	bne.n	8008842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <HAL_UART_IRQHandler+0x66>
 800882e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb69 	bl	8008f12 <UART_Receive_IT>
      return;
 8008840:	e25b      	b.n	8008cfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80de 	beq.w	8008a08 <HAL_UART_IRQHandler+0x22c>
 800884c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 80d1 	beq.w	8008a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <HAL_UART_IRQHandler+0xae>
 8008872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008882:	f043 0201 	orr.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <HAL_UART_IRQHandler+0xd2>
 8008896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a6:	f043 0202 	orr.w	r2, r3, #2
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00b      	beq.n	80088d2 <HAL_UART_IRQHandler+0xf6>
 80088ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d005      	beq.n	80088d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f043 0204 	orr.w	r2, r3, #4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d011      	beq.n	8008902 <HAL_UART_IRQHandler+0x126>
 80088de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fa:	f043 0208 	orr.w	r2, r3, #8
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 81f2 	beq.w	8008cf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d008      	beq.n	800892a <HAL_UART_IRQHandler+0x14e>
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 faf4 	bl	8008f12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	bf0c      	ite	eq
 8008938:	2301      	moveq	r3, #1
 800893a:	2300      	movne	r3, #0
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <HAL_UART_IRQHandler+0x17a>
 800894e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d04f      	beq.n	80089f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9fc 	bl	8008d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d141      	bne.n	80089ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3314      	adds	r3, #20
 8008970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3314      	adds	r3, #20
 8008992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800899a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1d9      	bne.n	800896a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d013      	beq.n	80089e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c2:	4a7e      	ldr	r2, [pc, #504]	; (8008bbc <HAL_UART_IRQHandler+0x3e0>)
 80089c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd fa87 	bl	8005ede <HAL_DMA_Abort_IT>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d016      	beq.n	8008a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e4:	e00e      	b.n	8008a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f99e 	bl	8008d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ec:	e00a      	b.n	8008a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f99a 	bl	8008d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f4:	e006      	b.n	8008a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f996 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008a02:	e175      	b.n	8008cf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	bf00      	nop
    return;
 8008a06:	e173      	b.n	8008cf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	f040 814f 	bne.w	8008cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a16:	f003 0310 	and.w	r3, r3, #16
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 8148 	beq.w	8008cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a24:	f003 0310 	and.w	r3, r3, #16
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8141 	beq.w	8008cb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	60bb      	str	r3, [r7, #8]
 8008a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	f040 80b6 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8145 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a72:	429a      	cmp	r2, r3
 8008a74:	f080 813e 	bcs.w	8008cf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a8a:	f000 8088 	beq.w	8008b9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1d9      	bne.n	8008a8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3314      	adds	r3, #20
 8008ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aec:	f023 0301 	bic.w	r3, r3, #1
 8008af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3314      	adds	r3, #20
 8008afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e1      	bne.n	8008ada <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3314      	adds	r3, #20
 8008b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3314      	adds	r3, #20
 8008b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e3      	bne.n	8008b16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	330c      	adds	r3, #12
 8008b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6e:	f023 0310 	bic.w	r3, r3, #16
 8008b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e3      	bne.n	8008b5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fd f930 	bl	8005dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8c1 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bba:	e09b      	b.n	8008cf4 <HAL_UART_IRQHandler+0x518>
 8008bbc:	08008e1b 	.word	0x08008e1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 808e 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 8089 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c0a:	647a      	str	r2, [r7, #68]	; 0x44
 8008c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e3      	bne.n	8008be6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3314      	adds	r3, #20
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c42:	633a      	str	r2, [r7, #48]	; 0x30
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e3      	bne.n	8008c1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	330c      	adds	r3, #12
 8008c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0310 	bic.w	r3, r3, #16
 8008c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	330c      	adds	r3, #12
 8008c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c88:	61fa      	str	r2, [r7, #28]
 8008c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	69b9      	ldr	r1, [r7, #24]
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	617b      	str	r3, [r7, #20]
   return(result);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e3      	bne.n	8008c64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f847 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cae:	e023      	b.n	8008cf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d009      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x4f4>
 8008cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f8ba 	bl	8008e42 <UART_Transmit_IT>
    return;
 8008cce:	e014      	b.n	8008cfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <HAL_UART_IRQHandler+0x51e>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d008      	beq.n	8008cfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f8fa 	bl	8008ee2 <UART_EndTransmit_IT>
    return;
 8008cee:	e004      	b.n	8008cfa <HAL_UART_IRQHandler+0x51e>
    return;
 8008cf0:	bf00      	nop
 8008cf2:	e002      	b.n	8008cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8008cf4:	bf00      	nop
 8008cf6:	e000      	b.n	8008cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8008cf8:	bf00      	nop
  }
}
 8008cfa:	37e8      	adds	r7, #232	; 0xe8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b095      	sub	sp, #84	; 0x54
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e5      	bne.n	8008d5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3314      	adds	r3, #20
 8008d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f023 0301 	bic.w	r3, r3, #1
 8008da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3314      	adds	r3, #20
 8008dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d119      	bne.n	8008e00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dec:	61ba      	str	r2, [r7, #24]
 8008dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6979      	ldr	r1, [r7, #20]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e0e:	bf00      	nop
 8008e10:	3754      	adds	r7, #84	; 0x54
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff ff77 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b21      	cmp	r3, #33	; 0x21
 8008e54:	d13e      	bne.n	8008ed4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5e:	d114      	bne.n	8008e8a <UART_Transmit_IT+0x48>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d110      	bne.n	8008e8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	1c9a      	adds	r2, r3, #2
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	621a      	str	r2, [r3, #32]
 8008e88:	e008      	b.n	8008e9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6211      	str	r1, [r2, #32]
 8008e94:	781a      	ldrb	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10f      	bne.n	8008ed0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ebe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ece:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e000      	b.n	8008ed6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ed4:	2302      	movs	r3, #2
  }
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ef8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fefc 	bl	8008d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b08c      	sub	sp, #48	; 0x30
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b22      	cmp	r3, #34	; 0x22
 8008f24:	f040 80ae 	bne.w	8009084 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f30:	d117      	bne.n	8008f62 <UART_Receive_IT+0x50>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d113      	bne.n	8008f62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	1c9a      	adds	r2, r3, #2
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008f60:	e026      	b.n	8008fb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f74:	d007      	beq.n	8008f86 <UART_Receive_IT+0x74>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <UART_Receive_IT+0x82>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	e008      	b.n	8008fa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d15d      	bne.n	8009080 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0220 	bic.w	r2, r2, #32
 8008fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695a      	ldr	r2, [r3, #20]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0201 	bic.w	r2, r2, #1
 8008ff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	2b01      	cmp	r3, #1
 8009008:	d135      	bne.n	8009076 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	613b      	str	r3, [r7, #16]
   return(result);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f023 0310 	bic.w	r3, r3, #16
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009030:	623a      	str	r2, [r7, #32]
 8009032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	69f9      	ldr	r1, [r7, #28]
 8009036:	6a3a      	ldr	r2, [r7, #32]
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	61bb      	str	r3, [r7, #24]
   return(result);
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e5      	bne.n	8009010 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b10      	cmp	r3, #16
 8009050:	d10a      	bne.n	8009068 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fe64 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
 8009074:	e002      	b.n	800907c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fe4c 	bl	8008d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	e002      	b.n	8009086 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	3730      	adds	r7, #48	; 0x30
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009094:	b0c0      	sub	sp, #256	; 0x100
 8009096:	af00      	add	r7, sp, #0
 8009098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ac:	68d9      	ldr	r1, [r3, #12]
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	ea40 0301 	orr.w	r3, r0, r1
 80090b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	431a      	orrs	r2, r3
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090e8:	f021 010c 	bic.w	r1, r1, #12
 80090ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090f6:	430b      	orrs	r3, r1
 80090f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910a:	6999      	ldr	r1, [r3, #24]
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	ea40 0301 	orr.w	r3, r0, r1
 8009116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b8f      	ldr	r3, [pc, #572]	; (800935c <UART_SetConfig+0x2cc>)
 8009120:	429a      	cmp	r2, r3
 8009122:	d005      	beq.n	8009130 <UART_SetConfig+0xa0>
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b8d      	ldr	r3, [pc, #564]	; (8009360 <UART_SetConfig+0x2d0>)
 800912c:	429a      	cmp	r2, r3
 800912e:	d104      	bne.n	800913a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009130:	f7fe fe80 	bl	8007e34 <HAL_RCC_GetPCLK2Freq>
 8009134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009138:	e003      	b.n	8009142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800913a:	f7fe fe67 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 800913e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800914c:	f040 810c 	bne.w	8009368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009154:	2200      	movs	r2, #0
 8009156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800915a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800915e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	1891      	adds	r1, r2, r2
 8009168:	65b9      	str	r1, [r7, #88]	; 0x58
 800916a:	415b      	adcs	r3, r3
 800916c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800916e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009172:	4621      	mov	r1, r4
 8009174:	eb12 0801 	adds.w	r8, r2, r1
 8009178:	4629      	mov	r1, r5
 800917a:	eb43 0901 	adc.w	r9, r3, r1
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800918a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800918e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009192:	4690      	mov	r8, r2
 8009194:	4699      	mov	r9, r3
 8009196:	4623      	mov	r3, r4
 8009198:	eb18 0303 	adds.w	r3, r8, r3
 800919c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091a0:	462b      	mov	r3, r5
 80091a2:	eb49 0303 	adc.w	r3, r9, r3
 80091a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091be:	460b      	mov	r3, r1
 80091c0:	18db      	adds	r3, r3, r3
 80091c2:	653b      	str	r3, [r7, #80]	; 0x50
 80091c4:	4613      	mov	r3, r2
 80091c6:	eb42 0303 	adc.w	r3, r2, r3
 80091ca:	657b      	str	r3, [r7, #84]	; 0x54
 80091cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80091d4:	f7f7 f85c 	bl	8000290 <__aeabi_uldivmod>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4b61      	ldr	r3, [pc, #388]	; (8009364 <UART_SetConfig+0x2d4>)
 80091de:	fba3 2302 	umull	r2, r3, r3, r2
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	011c      	lsls	r4, r3, #4
 80091e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80091f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80091f8:	4642      	mov	r2, r8
 80091fa:	464b      	mov	r3, r9
 80091fc:	1891      	adds	r1, r2, r2
 80091fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8009200:	415b      	adcs	r3, r3
 8009202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009208:	4641      	mov	r1, r8
 800920a:	eb12 0a01 	adds.w	sl, r2, r1
 800920e:	4649      	mov	r1, r9
 8009210:	eb43 0b01 	adc.w	fp, r3, r1
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009228:	4692      	mov	sl, r2
 800922a:	469b      	mov	fp, r3
 800922c:	4643      	mov	r3, r8
 800922e:	eb1a 0303 	adds.w	r3, sl, r3
 8009232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009236:	464b      	mov	r3, r9
 8009238:	eb4b 0303 	adc.w	r3, fp, r3
 800923c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800924c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009254:	460b      	mov	r3, r1
 8009256:	18db      	adds	r3, r3, r3
 8009258:	643b      	str	r3, [r7, #64]	; 0x40
 800925a:	4613      	mov	r3, r2
 800925c:	eb42 0303 	adc.w	r3, r2, r3
 8009260:	647b      	str	r3, [r7, #68]	; 0x44
 8009262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800926a:	f7f7 f811 	bl	8000290 <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4611      	mov	r1, r2
 8009274:	4b3b      	ldr	r3, [pc, #236]	; (8009364 <UART_SetConfig+0x2d4>)
 8009276:	fba3 2301 	umull	r2, r3, r3, r1
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	2264      	movs	r2, #100	; 0x64
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	1acb      	subs	r3, r1, r3
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800928a:	4b36      	ldr	r3, [pc, #216]	; (8009364 <UART_SetConfig+0x2d4>)
 800928c:	fba3 2302 	umull	r2, r3, r3, r2
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009298:	441c      	add	r4, r3
 800929a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	1891      	adds	r1, r2, r2
 80092b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80092b4:	415b      	adcs	r3, r3
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092bc:	4641      	mov	r1, r8
 80092be:	1851      	adds	r1, r2, r1
 80092c0:	6339      	str	r1, [r7, #48]	; 0x30
 80092c2:	4649      	mov	r1, r9
 80092c4:	414b      	adcs	r3, r1
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80092d4:	4659      	mov	r1, fp
 80092d6:	00cb      	lsls	r3, r1, #3
 80092d8:	4651      	mov	r1, sl
 80092da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092de:	4651      	mov	r1, sl
 80092e0:	00ca      	lsls	r2, r1, #3
 80092e2:	4610      	mov	r0, r2
 80092e4:	4619      	mov	r1, r3
 80092e6:	4603      	mov	r3, r0
 80092e8:	4642      	mov	r2, r8
 80092ea:	189b      	adds	r3, r3, r2
 80092ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092f0:	464b      	mov	r3, r9
 80092f2:	460a      	mov	r2, r1
 80092f4:	eb42 0303 	adc.w	r3, r2, r3
 80092f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800930c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009310:	460b      	mov	r3, r1
 8009312:	18db      	adds	r3, r3, r3
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28
 8009316:	4613      	mov	r3, r2
 8009318:	eb42 0303 	adc.w	r3, r2, r3
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800931e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009326:	f7f6 ffb3 	bl	8000290 <__aeabi_uldivmod>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4b0d      	ldr	r3, [pc, #52]	; (8009364 <UART_SetConfig+0x2d4>)
 8009330:	fba3 1302 	umull	r1, r3, r3, r2
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	2164      	movs	r1, #100	; 0x64
 8009338:	fb01 f303 	mul.w	r3, r1, r3
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	3332      	adds	r3, #50	; 0x32
 8009342:	4a08      	ldr	r2, [pc, #32]	; (8009364 <UART_SetConfig+0x2d4>)
 8009344:	fba2 2303 	umull	r2, r3, r2, r3
 8009348:	095b      	lsrs	r3, r3, #5
 800934a:	f003 0207 	and.w	r2, r3, #7
 800934e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4422      	add	r2, r4
 8009356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009358:	e106      	b.n	8009568 <UART_SetConfig+0x4d8>
 800935a:	bf00      	nop
 800935c:	40011000 	.word	0x40011000
 8009360:	40011400 	.word	0x40011400
 8009364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800936c:	2200      	movs	r2, #0
 800936e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800937a:	4642      	mov	r2, r8
 800937c:	464b      	mov	r3, r9
 800937e:	1891      	adds	r1, r2, r2
 8009380:	6239      	str	r1, [r7, #32]
 8009382:	415b      	adcs	r3, r3
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
 8009386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800938a:	4641      	mov	r1, r8
 800938c:	1854      	adds	r4, r2, r1
 800938e:	4649      	mov	r1, r9
 8009390:	eb43 0501 	adc.w	r5, r3, r1
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	00eb      	lsls	r3, r5, #3
 800939e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093a2:	00e2      	lsls	r2, r4, #3
 80093a4:	4614      	mov	r4, r2
 80093a6:	461d      	mov	r5, r3
 80093a8:	4643      	mov	r3, r8
 80093aa:	18e3      	adds	r3, r4, r3
 80093ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093b0:	464b      	mov	r3, r9
 80093b2:	eb45 0303 	adc.w	r3, r5, r3
 80093b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80093d6:	4629      	mov	r1, r5
 80093d8:	008b      	lsls	r3, r1, #2
 80093da:	4621      	mov	r1, r4
 80093dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093e0:	4621      	mov	r1, r4
 80093e2:	008a      	lsls	r2, r1, #2
 80093e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093e8:	f7f6 ff52 	bl	8000290 <__aeabi_uldivmod>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4b60      	ldr	r3, [pc, #384]	; (8009574 <UART_SetConfig+0x4e4>)
 80093f2:	fba3 2302 	umull	r2, r3, r3, r2
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	011c      	lsls	r4, r3, #4
 80093fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800940c:	4642      	mov	r2, r8
 800940e:	464b      	mov	r3, r9
 8009410:	1891      	adds	r1, r2, r2
 8009412:	61b9      	str	r1, [r7, #24]
 8009414:	415b      	adcs	r3, r3
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800941c:	4641      	mov	r1, r8
 800941e:	1851      	adds	r1, r2, r1
 8009420:	6139      	str	r1, [r7, #16]
 8009422:	4649      	mov	r1, r9
 8009424:	414b      	adcs	r3, r1
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009434:	4659      	mov	r1, fp
 8009436:	00cb      	lsls	r3, r1, #3
 8009438:	4651      	mov	r1, sl
 800943a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800943e:	4651      	mov	r1, sl
 8009440:	00ca      	lsls	r2, r1, #3
 8009442:	4610      	mov	r0, r2
 8009444:	4619      	mov	r1, r3
 8009446:	4603      	mov	r3, r0
 8009448:	4642      	mov	r2, r8
 800944a:	189b      	adds	r3, r3, r2
 800944c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009450:	464b      	mov	r3, r9
 8009452:	460a      	mov	r2, r1
 8009454:	eb42 0303 	adc.w	r3, r2, r3
 8009458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800945c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	67bb      	str	r3, [r7, #120]	; 0x78
 8009466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009474:	4649      	mov	r1, r9
 8009476:	008b      	lsls	r3, r1, #2
 8009478:	4641      	mov	r1, r8
 800947a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800947e:	4641      	mov	r1, r8
 8009480:	008a      	lsls	r2, r1, #2
 8009482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009486:	f7f6 ff03 	bl	8000290 <__aeabi_uldivmod>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4611      	mov	r1, r2
 8009490:	4b38      	ldr	r3, [pc, #224]	; (8009574 <UART_SetConfig+0x4e4>)
 8009492:	fba3 2301 	umull	r2, r3, r3, r1
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	2264      	movs	r2, #100	; 0x64
 800949a:	fb02 f303 	mul.w	r3, r2, r3
 800949e:	1acb      	subs	r3, r1, r3
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	3332      	adds	r3, #50	; 0x32
 80094a4:	4a33      	ldr	r2, [pc, #204]	; (8009574 <UART_SetConfig+0x4e4>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094b0:	441c      	add	r4, r3
 80094b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094b6:	2200      	movs	r2, #0
 80094b8:	673b      	str	r3, [r7, #112]	; 0x70
 80094ba:	677a      	str	r2, [r7, #116]	; 0x74
 80094bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	1891      	adds	r1, r2, r2
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	415b      	adcs	r3, r3
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094d0:	4641      	mov	r1, r8
 80094d2:	1851      	adds	r1, r2, r1
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	4649      	mov	r1, r9
 80094d8:	414b      	adcs	r3, r1
 80094da:	607b      	str	r3, [r7, #4]
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	f04f 0300 	mov.w	r3, #0
 80094e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094e8:	4659      	mov	r1, fp
 80094ea:	00cb      	lsls	r3, r1, #3
 80094ec:	4651      	mov	r1, sl
 80094ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094f2:	4651      	mov	r1, sl
 80094f4:	00ca      	lsls	r2, r1, #3
 80094f6:	4610      	mov	r0, r2
 80094f8:	4619      	mov	r1, r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	4642      	mov	r2, r8
 80094fe:	189b      	adds	r3, r3, r2
 8009500:	66bb      	str	r3, [r7, #104]	; 0x68
 8009502:	464b      	mov	r3, r9
 8009504:	460a      	mov	r2, r1
 8009506:	eb42 0303 	adc.w	r3, r2, r3
 800950a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	663b      	str	r3, [r7, #96]	; 0x60
 8009516:	667a      	str	r2, [r7, #100]	; 0x64
 8009518:	f04f 0200 	mov.w	r2, #0
 800951c:	f04f 0300 	mov.w	r3, #0
 8009520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009524:	4649      	mov	r1, r9
 8009526:	008b      	lsls	r3, r1, #2
 8009528:	4641      	mov	r1, r8
 800952a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800952e:	4641      	mov	r1, r8
 8009530:	008a      	lsls	r2, r1, #2
 8009532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009536:	f7f6 feab 	bl	8000290 <__aeabi_uldivmod>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <UART_SetConfig+0x4e4>)
 8009540:	fba3 1302 	umull	r1, r3, r3, r2
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	2164      	movs	r1, #100	; 0x64
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	3332      	adds	r3, #50	; 0x32
 8009552:	4a08      	ldr	r2, [pc, #32]	; (8009574 <UART_SetConfig+0x4e4>)
 8009554:	fba2 2303 	umull	r2, r3, r2, r3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	f003 020f 	and.w	r2, r3, #15
 800955e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4422      	add	r2, r4
 8009566:	609a      	str	r2, [r3, #8]
}
 8009568:	bf00      	nop
 800956a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800956e:	46bd      	mov	sp, r7
 8009570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009574:	51eb851f 	.word	0x51eb851f

08009578 <siprintf>:
 8009578:	b40e      	push	{r1, r2, r3}
 800957a:	b500      	push	{lr}
 800957c:	b09c      	sub	sp, #112	; 0x70
 800957e:	ab1d      	add	r3, sp, #116	; 0x74
 8009580:	9002      	str	r0, [sp, #8]
 8009582:	9006      	str	r0, [sp, #24]
 8009584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009588:	4809      	ldr	r0, [pc, #36]	; (80095b0 <siprintf+0x38>)
 800958a:	9107      	str	r1, [sp, #28]
 800958c:	9104      	str	r1, [sp, #16]
 800958e:	4909      	ldr	r1, [pc, #36]	; (80095b4 <siprintf+0x3c>)
 8009590:	f853 2b04 	ldr.w	r2, [r3], #4
 8009594:	9105      	str	r1, [sp, #20]
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	a902      	add	r1, sp, #8
 800959c:	f000 f992 	bl	80098c4 <_svfiprintf_r>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	b01c      	add	sp, #112	; 0x70
 80095a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ac:	b003      	add	sp, #12
 80095ae:	4770      	bx	lr
 80095b0:	2000012c 	.word	0x2000012c
 80095b4:	ffff0208 	.word	0xffff0208

080095b8 <memset>:
 80095b8:	4402      	add	r2, r0
 80095ba:	4603      	mov	r3, r0
 80095bc:	4293      	cmp	r3, r2
 80095be:	d100      	bne.n	80095c2 <memset+0xa>
 80095c0:	4770      	bx	lr
 80095c2:	f803 1b01 	strb.w	r1, [r3], #1
 80095c6:	e7f9      	b.n	80095bc <memset+0x4>

080095c8 <__errno>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	; (80095d0 <__errno+0x8>)
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000012c 	.word	0x2000012c

080095d4 <__libc_init_array>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4d0d      	ldr	r5, [pc, #52]	; (800960c <__libc_init_array+0x38>)
 80095d8:	4c0d      	ldr	r4, [pc, #52]	; (8009610 <__libc_init_array+0x3c>)
 80095da:	1b64      	subs	r4, r4, r5
 80095dc:	10a4      	asrs	r4, r4, #2
 80095de:	2600      	movs	r6, #0
 80095e0:	42a6      	cmp	r6, r4
 80095e2:	d109      	bne.n	80095f8 <__libc_init_array+0x24>
 80095e4:	4d0b      	ldr	r5, [pc, #44]	; (8009614 <__libc_init_array+0x40>)
 80095e6:	4c0c      	ldr	r4, [pc, #48]	; (8009618 <__libc_init_array+0x44>)
 80095e8:	f000 fc6a 	bl	8009ec0 <_init>
 80095ec:	1b64      	subs	r4, r4, r5
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	2600      	movs	r6, #0
 80095f2:	42a6      	cmp	r6, r4
 80095f4:	d105      	bne.n	8009602 <__libc_init_array+0x2e>
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095fc:	4798      	blx	r3
 80095fe:	3601      	adds	r6, #1
 8009600:	e7ee      	b.n	80095e0 <__libc_init_array+0xc>
 8009602:	f855 3b04 	ldr.w	r3, [r5], #4
 8009606:	4798      	blx	r3
 8009608:	3601      	adds	r6, #1
 800960a:	e7f2      	b.n	80095f2 <__libc_init_array+0x1e>
 800960c:	08009f64 	.word	0x08009f64
 8009610:	08009f64 	.word	0x08009f64
 8009614:	08009f64 	.word	0x08009f64
 8009618:	08009f68 	.word	0x08009f68

0800961c <__retarget_lock_acquire_recursive>:
 800961c:	4770      	bx	lr

0800961e <__retarget_lock_release_recursive>:
 800961e:	4770      	bx	lr

08009620 <_free_r>:
 8009620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009622:	2900      	cmp	r1, #0
 8009624:	d044      	beq.n	80096b0 <_free_r+0x90>
 8009626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962a:	9001      	str	r0, [sp, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f1a1 0404 	sub.w	r4, r1, #4
 8009632:	bfb8      	it	lt
 8009634:	18e4      	addlt	r4, r4, r3
 8009636:	f000 f8df 	bl	80097f8 <__malloc_lock>
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <_free_r+0x94>)
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	b933      	cbnz	r3, 8009650 <_free_r+0x30>
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	6014      	str	r4, [r2, #0]
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800964c:	f000 b8da 	b.w	8009804 <__malloc_unlock>
 8009650:	42a3      	cmp	r3, r4
 8009652:	d908      	bls.n	8009666 <_free_r+0x46>
 8009654:	6825      	ldr	r5, [r4, #0]
 8009656:	1961      	adds	r1, r4, r5
 8009658:	428b      	cmp	r3, r1
 800965a:	bf01      	itttt	eq
 800965c:	6819      	ldreq	r1, [r3, #0]
 800965e:	685b      	ldreq	r3, [r3, #4]
 8009660:	1949      	addeq	r1, r1, r5
 8009662:	6021      	streq	r1, [r4, #0]
 8009664:	e7ed      	b.n	8009642 <_free_r+0x22>
 8009666:	461a      	mov	r2, r3
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	b10b      	cbz	r3, 8009670 <_free_r+0x50>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d9fa      	bls.n	8009666 <_free_r+0x46>
 8009670:	6811      	ldr	r1, [r2, #0]
 8009672:	1855      	adds	r5, r2, r1
 8009674:	42a5      	cmp	r5, r4
 8009676:	d10b      	bne.n	8009690 <_free_r+0x70>
 8009678:	6824      	ldr	r4, [r4, #0]
 800967a:	4421      	add	r1, r4
 800967c:	1854      	adds	r4, r2, r1
 800967e:	42a3      	cmp	r3, r4
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	d1e0      	bne.n	8009646 <_free_r+0x26>
 8009684:	681c      	ldr	r4, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	6053      	str	r3, [r2, #4]
 800968a:	440c      	add	r4, r1
 800968c:	6014      	str	r4, [r2, #0]
 800968e:	e7da      	b.n	8009646 <_free_r+0x26>
 8009690:	d902      	bls.n	8009698 <_free_r+0x78>
 8009692:	230c      	movs	r3, #12
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	e7d6      	b.n	8009646 <_free_r+0x26>
 8009698:	6825      	ldr	r5, [r4, #0]
 800969a:	1961      	adds	r1, r4, r5
 800969c:	428b      	cmp	r3, r1
 800969e:	bf04      	itt	eq
 80096a0:	6819      	ldreq	r1, [r3, #0]
 80096a2:	685b      	ldreq	r3, [r3, #4]
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	bf04      	itt	eq
 80096a8:	1949      	addeq	r1, r1, r5
 80096aa:	6021      	streq	r1, [r4, #0]
 80096ac:	6054      	str	r4, [r2, #4]
 80096ae:	e7ca      	b.n	8009646 <_free_r+0x26>
 80096b0:	b003      	add	sp, #12
 80096b2:	bd30      	pop	{r4, r5, pc}
 80096b4:	20000470 	.word	0x20000470

080096b8 <sbrk_aligned>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	4e0e      	ldr	r6, [pc, #56]	; (80096f4 <sbrk_aligned+0x3c>)
 80096bc:	460c      	mov	r4, r1
 80096be:	6831      	ldr	r1, [r6, #0]
 80096c0:	4605      	mov	r5, r0
 80096c2:	b911      	cbnz	r1, 80096ca <sbrk_aligned+0x12>
 80096c4:	f000 fba6 	bl	8009e14 <_sbrk_r>
 80096c8:	6030      	str	r0, [r6, #0]
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 fba1 	bl	8009e14 <_sbrk_r>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d00a      	beq.n	80096ec <sbrk_aligned+0x34>
 80096d6:	1cc4      	adds	r4, r0, #3
 80096d8:	f024 0403 	bic.w	r4, r4, #3
 80096dc:	42a0      	cmp	r0, r4
 80096de:	d007      	beq.n	80096f0 <sbrk_aligned+0x38>
 80096e0:	1a21      	subs	r1, r4, r0
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 fb96 	bl	8009e14 <_sbrk_r>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d101      	bne.n	80096f0 <sbrk_aligned+0x38>
 80096ec:	f04f 34ff 	mov.w	r4, #4294967295
 80096f0:	4620      	mov	r0, r4
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	20000474 	.word	0x20000474

080096f8 <_malloc_r>:
 80096f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096fc:	1ccd      	adds	r5, r1, #3
 80096fe:	f025 0503 	bic.w	r5, r5, #3
 8009702:	3508      	adds	r5, #8
 8009704:	2d0c      	cmp	r5, #12
 8009706:	bf38      	it	cc
 8009708:	250c      	movcc	r5, #12
 800970a:	2d00      	cmp	r5, #0
 800970c:	4607      	mov	r7, r0
 800970e:	db01      	blt.n	8009714 <_malloc_r+0x1c>
 8009710:	42a9      	cmp	r1, r5
 8009712:	d905      	bls.n	8009720 <_malloc_r+0x28>
 8009714:	230c      	movs	r3, #12
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	2600      	movs	r6, #0
 800971a:	4630      	mov	r0, r6
 800971c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097f4 <_malloc_r+0xfc>
 8009724:	f000 f868 	bl	80097f8 <__malloc_lock>
 8009728:	f8d8 3000 	ldr.w	r3, [r8]
 800972c:	461c      	mov	r4, r3
 800972e:	bb5c      	cbnz	r4, 8009788 <_malloc_r+0x90>
 8009730:	4629      	mov	r1, r5
 8009732:	4638      	mov	r0, r7
 8009734:	f7ff ffc0 	bl	80096b8 <sbrk_aligned>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	4604      	mov	r4, r0
 800973c:	d155      	bne.n	80097ea <_malloc_r+0xf2>
 800973e:	f8d8 4000 	ldr.w	r4, [r8]
 8009742:	4626      	mov	r6, r4
 8009744:	2e00      	cmp	r6, #0
 8009746:	d145      	bne.n	80097d4 <_malloc_r+0xdc>
 8009748:	2c00      	cmp	r4, #0
 800974a:	d048      	beq.n	80097de <_malloc_r+0xe6>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	4631      	mov	r1, r6
 8009750:	4638      	mov	r0, r7
 8009752:	eb04 0903 	add.w	r9, r4, r3
 8009756:	f000 fb5d 	bl	8009e14 <_sbrk_r>
 800975a:	4581      	cmp	r9, r0
 800975c:	d13f      	bne.n	80097de <_malloc_r+0xe6>
 800975e:	6821      	ldr	r1, [r4, #0]
 8009760:	1a6d      	subs	r5, r5, r1
 8009762:	4629      	mov	r1, r5
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff ffa7 	bl	80096b8 <sbrk_aligned>
 800976a:	3001      	adds	r0, #1
 800976c:	d037      	beq.n	80097de <_malloc_r+0xe6>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	442b      	add	r3, r5
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	f8d8 3000 	ldr.w	r3, [r8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d038      	beq.n	80097ee <_malloc_r+0xf6>
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	42a2      	cmp	r2, r4
 8009780:	d12b      	bne.n	80097da <_malloc_r+0xe2>
 8009782:	2200      	movs	r2, #0
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	e00f      	b.n	80097a8 <_malloc_r+0xb0>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	1b52      	subs	r2, r2, r5
 800978c:	d41f      	bmi.n	80097ce <_malloc_r+0xd6>
 800978e:	2a0b      	cmp	r2, #11
 8009790:	d917      	bls.n	80097c2 <_malloc_r+0xca>
 8009792:	1961      	adds	r1, r4, r5
 8009794:	42a3      	cmp	r3, r4
 8009796:	6025      	str	r5, [r4, #0]
 8009798:	bf18      	it	ne
 800979a:	6059      	strne	r1, [r3, #4]
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	bf08      	it	eq
 80097a0:	f8c8 1000 	streq.w	r1, [r8]
 80097a4:	5162      	str	r2, [r4, r5]
 80097a6:	604b      	str	r3, [r1, #4]
 80097a8:	4638      	mov	r0, r7
 80097aa:	f104 060b 	add.w	r6, r4, #11
 80097ae:	f000 f829 	bl	8009804 <__malloc_unlock>
 80097b2:	f026 0607 	bic.w	r6, r6, #7
 80097b6:	1d23      	adds	r3, r4, #4
 80097b8:	1af2      	subs	r2, r6, r3
 80097ba:	d0ae      	beq.n	800971a <_malloc_r+0x22>
 80097bc:	1b9b      	subs	r3, r3, r6
 80097be:	50a3      	str	r3, [r4, r2]
 80097c0:	e7ab      	b.n	800971a <_malloc_r+0x22>
 80097c2:	42a3      	cmp	r3, r4
 80097c4:	6862      	ldr	r2, [r4, #4]
 80097c6:	d1dd      	bne.n	8009784 <_malloc_r+0x8c>
 80097c8:	f8c8 2000 	str.w	r2, [r8]
 80097cc:	e7ec      	b.n	80097a8 <_malloc_r+0xb0>
 80097ce:	4623      	mov	r3, r4
 80097d0:	6864      	ldr	r4, [r4, #4]
 80097d2:	e7ac      	b.n	800972e <_malloc_r+0x36>
 80097d4:	4634      	mov	r4, r6
 80097d6:	6876      	ldr	r6, [r6, #4]
 80097d8:	e7b4      	b.n	8009744 <_malloc_r+0x4c>
 80097da:	4613      	mov	r3, r2
 80097dc:	e7cc      	b.n	8009778 <_malloc_r+0x80>
 80097de:	230c      	movs	r3, #12
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	4638      	mov	r0, r7
 80097e4:	f000 f80e 	bl	8009804 <__malloc_unlock>
 80097e8:	e797      	b.n	800971a <_malloc_r+0x22>
 80097ea:	6025      	str	r5, [r4, #0]
 80097ec:	e7dc      	b.n	80097a8 <_malloc_r+0xb0>
 80097ee:	605b      	str	r3, [r3, #4]
 80097f0:	deff      	udf	#255	; 0xff
 80097f2:	bf00      	nop
 80097f4:	20000470 	.word	0x20000470

080097f8 <__malloc_lock>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__malloc_lock+0x8>)
 80097fa:	f7ff bf0f 	b.w	800961c <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	2000046c 	.word	0x2000046c

08009804 <__malloc_unlock>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__malloc_unlock+0x8>)
 8009806:	f7ff bf0a 	b.w	800961e <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	2000046c 	.word	0x2000046c

08009810 <__ssputs_r>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	688e      	ldr	r6, [r1, #8]
 8009816:	461f      	mov	r7, r3
 8009818:	42be      	cmp	r6, r7
 800981a:	680b      	ldr	r3, [r1, #0]
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	d82c      	bhi.n	800987e <__ssputs_r+0x6e>
 8009824:	898a      	ldrh	r2, [r1, #12]
 8009826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982a:	d026      	beq.n	800987a <__ssputs_r+0x6a>
 800982c:	6965      	ldr	r5, [r4, #20]
 800982e:	6909      	ldr	r1, [r1, #16]
 8009830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009834:	eba3 0901 	sub.w	r9, r3, r1
 8009838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800983c:	1c7b      	adds	r3, r7, #1
 800983e:	444b      	add	r3, r9
 8009840:	106d      	asrs	r5, r5, #1
 8009842:	429d      	cmp	r5, r3
 8009844:	bf38      	it	cc
 8009846:	461d      	movcc	r5, r3
 8009848:	0553      	lsls	r3, r2, #21
 800984a:	d527      	bpl.n	800989c <__ssputs_r+0x8c>
 800984c:	4629      	mov	r1, r5
 800984e:	f7ff ff53 	bl	80096f8 <_malloc_r>
 8009852:	4606      	mov	r6, r0
 8009854:	b360      	cbz	r0, 80098b0 <__ssputs_r+0xa0>
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	464a      	mov	r2, r9
 800985a:	f000 faeb 	bl	8009e34 <memcpy>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	6126      	str	r6, [r4, #16]
 800986c:	6165      	str	r5, [r4, #20]
 800986e:	444e      	add	r6, r9
 8009870:	eba5 0509 	sub.w	r5, r5, r9
 8009874:	6026      	str	r6, [r4, #0]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	463e      	mov	r6, r7
 800987a:	42be      	cmp	r6, r7
 800987c:	d900      	bls.n	8009880 <__ssputs_r+0x70>
 800987e:	463e      	mov	r6, r7
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	4632      	mov	r2, r6
 8009884:	4641      	mov	r1, r8
 8009886:	f000 faab 	bl	8009de0 <memmove>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	1b9b      	subs	r3, r3, r6
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	4433      	add	r3, r6
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	2000      	movs	r0, #0
 8009898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989c:	462a      	mov	r2, r5
 800989e:	f000 fad7 	bl	8009e50 <_realloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1e0      	bne.n	800986a <__ssputs_r+0x5a>
 80098a8:	6921      	ldr	r1, [r4, #16]
 80098aa:	4650      	mov	r0, sl
 80098ac:	f7ff feb8 	bl	8009620 <_free_r>
 80098b0:	230c      	movs	r3, #12
 80098b2:	f8ca 3000 	str.w	r3, [sl]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	e7e9      	b.n	8009898 <__ssputs_r+0x88>

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	4607      	mov	r7, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	d50e      	bpl.n	80098f6 <_svfiprintf_r+0x32>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b963      	cbnz	r3, 80098f6 <_svfiprintf_r+0x32>
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	f7ff ff0b 	bl	80096f8 <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b920      	cbnz	r0, 80098f2 <_svfiprintf_r+0x2e>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	e0d0      	b.n	8009a94 <_svfiprintf_r+0x1d0>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	616b      	str	r3, [r5, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	2320      	movs	r3, #32
 80098fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009900:	f8cd 800c 	str.w	r8, [sp, #12]
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009aac <_svfiprintf_r+0x1e8>
 800990a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	4623      	mov	r3, r4
 8009914:	469a      	mov	sl, r3
 8009916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991a:	b10a      	cbz	r2, 8009920 <_svfiprintf_r+0x5c>
 800991c:	2a25      	cmp	r2, #37	; 0x25
 800991e:	d1f9      	bne.n	8009914 <_svfiprintf_r+0x50>
 8009920:	ebba 0b04 	subs.w	fp, sl, r4
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x7a>
 8009926:	465b      	mov	r3, fp
 8009928:	4622      	mov	r2, r4
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ff6f 	bl	8009810 <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80a9 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 8009938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993a:	445a      	add	r2, fp
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80a1 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 8009948:	2300      	movs	r3, #0
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009952:	f10a 0a01 	add.w	sl, sl, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
 8009960:	4654      	mov	r4, sl
 8009962:	2205      	movs	r2, #5
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	4850      	ldr	r0, [pc, #320]	; (8009aac <_svfiprintf_r+0x1e8>)
 800996a:	f7f6 fc41 	bl	80001f0 <memchr>
 800996e:	9a04      	ldr	r2, [sp, #16]
 8009970:	b9d8      	cbnz	r0, 80099aa <_svfiprintf_r+0xe6>
 8009972:	06d0      	lsls	r0, r2, #27
 8009974:	bf44      	itt	mi
 8009976:	2320      	movmi	r3, #32
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	bf44      	itt	mi
 8009980:	232b      	movmi	r3, #43	; 0x2b
 8009982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d015      	beq.n	80099ba <_svfiprintf_r+0xf6>
 800998e:	9a07      	ldr	r2, [sp, #28]
 8009990:	4654      	mov	r4, sl
 8009992:	2000      	movs	r0, #0
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4621      	mov	r1, r4
 800999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d94d      	bls.n	8009a40 <_svfiprintf_r+0x17c>
 80099a4:	b1b0      	cbz	r0, 80099d4 <_svfiprintf_r+0x110>
 80099a6:	9207      	str	r2, [sp, #28]
 80099a8:	e014      	b.n	80099d4 <_svfiprintf_r+0x110>
 80099aa:	eba0 0308 	sub.w	r3, r0, r8
 80099ae:	fa09 f303 	lsl.w	r3, r9, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	46a2      	mov	sl, r4
 80099b8:	e7d2      	b.n	8009960 <_svfiprintf_r+0x9c>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	1d19      	adds	r1, r3, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbb      	ittet	lt
 80099c6:	425b      	neglt	r3, r3
 80099c8:	f042 0202 	orrlt.w	r2, r2, #2
 80099cc:	9307      	strge	r3, [sp, #28]
 80099ce:	9307      	strlt	r3, [sp, #28]
 80099d0:	bfb8      	it	lt
 80099d2:	9204      	strlt	r2, [sp, #16]
 80099d4:	7823      	ldrb	r3, [r4, #0]
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d10c      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099da:	7863      	ldrb	r3, [r4, #1]
 80099dc:	2b2a      	cmp	r3, #42	; 0x2a
 80099de:	d134      	bne.n	8009a4a <_svfiprintf_r+0x186>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9203      	str	r2, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfb8      	it	lt
 80099ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f0:	3402      	adds	r4, #2
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009abc <_svfiprintf_r+0x1f8>
 80099f8:	7821      	ldrb	r1, [r4, #0]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	f7f6 fbf7 	bl	80001f0 <memchr>
 8009a02:	b138      	cbz	r0, 8009a14 <_svfiprintf_r+0x150>
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	2240      	movs	r2, #64	; 0x40
 8009a0c:	4082      	lsls	r2, r0
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	3401      	adds	r4, #1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	4825      	ldr	r0, [pc, #148]	; (8009ab0 <_svfiprintf_r+0x1ec>)
 8009a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1e:	2206      	movs	r2, #6
 8009a20:	f7f6 fbe6 	bl	80001f0 <memchr>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d038      	beq.n	8009a9a <_svfiprintf_r+0x1d6>
 8009a28:	4b22      	ldr	r3, [pc, #136]	; (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a2a:	bb1b      	cbnz	r3, 8009a74 <_svfiprintf_r+0x1b0>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	4433      	add	r3, r6
 8009a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3e:	e768      	b.n	8009912 <_svfiprintf_r+0x4e>
 8009a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a44:	460c      	mov	r4, r1
 8009a46:	2001      	movs	r0, #1
 8009a48:	e7a6      	b.n	8009998 <_svfiprintf_r+0xd4>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	3401      	adds	r4, #1
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	4620      	mov	r0, r4
 8009a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5c:	3a30      	subs	r2, #48	; 0x30
 8009a5e:	2a09      	cmp	r2, #9
 8009a60:	d903      	bls.n	8009a6a <_svfiprintf_r+0x1a6>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0c6      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a66:	9105      	str	r1, [sp, #20]
 8009a68:	e7c4      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7f0      	b.n	8009a56 <_svfiprintf_r+0x192>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f3af 8000 	nop.w
 8009a84:	1c42      	adds	r2, r0, #1
 8009a86:	4606      	mov	r6, r0
 8009a88:	d1d6      	bne.n	8009a38 <_svfiprintf_r+0x174>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	065b      	lsls	r3, r3, #25
 8009a8e:	f53f af2d 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a94:	b01d      	add	sp, #116	; 0x74
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f000 f879 	bl	8009b9c <_printf_i>
 8009aaa:	e7eb      	b.n	8009a84 <_svfiprintf_r+0x1c0>
 8009aac:	08009f28 	.word	0x08009f28
 8009ab0:	08009f32 	.word	0x08009f32
 8009ab4:	00000000 	.word	0x00000000
 8009ab8:	08009811 	.word	0x08009811
 8009abc:	08009f2e 	.word	0x08009f2e

08009ac0 <_printf_common>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	4699      	mov	r9, r3
 8009ac8:	688a      	ldr	r2, [r1, #8]
 8009aca:	690b      	ldr	r3, [r1, #16]
 8009acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	bfb8      	it	lt
 8009ad4:	4613      	movlt	r3, r2
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009adc:	4607      	mov	r7, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b10a      	cbz	r2, 8009ae6 <_printf_common+0x26>
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	6033      	str	r3, [r6, #0]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	0699      	lsls	r1, r3, #26
 8009aea:	bf42      	ittt	mi
 8009aec:	6833      	ldrmi	r3, [r6, #0]
 8009aee:	3302      	addmi	r3, #2
 8009af0:	6033      	strmi	r3, [r6, #0]
 8009af2:	6825      	ldr	r5, [r4, #0]
 8009af4:	f015 0506 	ands.w	r5, r5, #6
 8009af8:	d106      	bne.n	8009b08 <_printf_common+0x48>
 8009afa:	f104 0a19 	add.w	sl, r4, #25
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	6832      	ldr	r2, [r6, #0]
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dc26      	bgt.n	8009b56 <_printf_common+0x96>
 8009b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b0c:	1e13      	subs	r3, r2, #0
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	bf18      	it	ne
 8009b12:	2301      	movne	r3, #1
 8009b14:	0692      	lsls	r2, r2, #26
 8009b16:	d42b      	bmi.n	8009b70 <_printf_common+0xb0>
 8009b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4638      	mov	r0, r7
 8009b20:	47c0      	blx	r8
 8009b22:	3001      	adds	r0, #1
 8009b24:	d01e      	beq.n	8009b64 <_printf_common+0xa4>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	f003 0306 	and.w	r3, r3, #6
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	bf02      	ittt	eq
 8009b32:	68e5      	ldreq	r5, [r4, #12]
 8009b34:	6833      	ldreq	r3, [r6, #0]
 8009b36:	1aed      	subeq	r5, r5, r3
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	bf0c      	ite	eq
 8009b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b40:	2500      	movne	r5, #0
 8009b42:	4293      	cmp	r3, r2
 8009b44:	bfc4      	itt	gt
 8009b46:	1a9b      	subgt	r3, r3, r2
 8009b48:	18ed      	addgt	r5, r5, r3
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	341a      	adds	r4, #26
 8009b4e:	42b5      	cmp	r5, r6
 8009b50:	d11a      	bne.n	8009b88 <_printf_common+0xc8>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e008      	b.n	8009b68 <_printf_common+0xa8>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	47c0      	blx	r8
 8009b60:	3001      	adds	r0, #1
 8009b62:	d103      	bne.n	8009b6c <_printf_common+0xac>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	e7c6      	b.n	8009afe <_printf_common+0x3e>
 8009b70:	18e1      	adds	r1, r4, r3
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	2030      	movs	r0, #48	; 0x30
 8009b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b7a:	4422      	add	r2, r4
 8009b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b84:	3302      	adds	r3, #2
 8009b86:	e7c7      	b.n	8009b18 <_printf_common+0x58>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c0      	blx	r8
 8009b92:	3001      	adds	r0, #1
 8009b94:	d0e6      	beq.n	8009b64 <_printf_common+0xa4>
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7d9      	b.n	8009b4e <_printf_common+0x8e>
	...

08009b9c <_printf_i>:
 8009b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	7e0f      	ldrb	r7, [r1, #24]
 8009ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ba4:	2f78      	cmp	r7, #120	; 0x78
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	4680      	mov	r8, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	469a      	mov	sl, r3
 8009bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bb2:	d807      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bb4:	2f62      	cmp	r7, #98	; 0x62
 8009bb6:	d80a      	bhi.n	8009bce <_printf_i+0x32>
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	f000 80d4 	beq.w	8009d66 <_printf_i+0x1ca>
 8009bbe:	2f58      	cmp	r7, #88	; 0x58
 8009bc0:	f000 80c0 	beq.w	8009d44 <_printf_i+0x1a8>
 8009bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bcc:	e03a      	b.n	8009c44 <_printf_i+0xa8>
 8009bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bd2:	2b15      	cmp	r3, #21
 8009bd4:	d8f6      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bd6:	a101      	add	r1, pc, #4	; (adr r1, 8009bdc <_printf_i+0x40>)
 8009bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c49 	.word	0x08009c49
 8009be4:	08009bc5 	.word	0x08009bc5
 8009be8:	08009bc5 	.word	0x08009bc5
 8009bec:	08009bc5 	.word	0x08009bc5
 8009bf0:	08009bc5 	.word	0x08009bc5
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009bc5 	.word	0x08009bc5
 8009bfc:	08009bc5 	.word	0x08009bc5
 8009c00:	08009bc5 	.word	0x08009bc5
 8009c04:	08009bc5 	.word	0x08009bc5
 8009c08:	08009d4d 	.word	0x08009d4d
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009d07 	.word	0x08009d07
 8009c14:	08009bc5 	.word	0x08009bc5
 8009c18:	08009bc5 	.word	0x08009bc5
 8009c1c:	08009d6f 	.word	0x08009d6f
 8009c20:	08009bc5 	.word	0x08009bc5
 8009c24:	08009c75 	.word	0x08009c75
 8009c28:	08009bc5 	.word	0x08009bc5
 8009c2c:	08009bc5 	.word	0x08009bc5
 8009c30:	08009d0f 	.word	0x08009d0f
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	602a      	str	r2, [r5, #0]
 8009c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c44:	2301      	movs	r3, #1
 8009c46:	e09f      	b.n	8009d88 <_printf_i+0x1ec>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	0607      	lsls	r7, r0, #24
 8009c4e:	f103 0104 	add.w	r1, r3, #4
 8009c52:	6029      	str	r1, [r5, #0]
 8009c54:	d501      	bpl.n	8009c5a <_printf_i+0xbe>
 8009c56:	681e      	ldr	r6, [r3, #0]
 8009c58:	e003      	b.n	8009c62 <_printf_i+0xc6>
 8009c5a:	0646      	lsls	r6, r0, #25
 8009c5c:	d5fb      	bpl.n	8009c56 <_printf_i+0xba>
 8009c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	da03      	bge.n	8009c6e <_printf_i+0xd2>
 8009c66:	232d      	movs	r3, #45	; 0x2d
 8009c68:	4276      	negs	r6, r6
 8009c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6e:	485a      	ldr	r0, [pc, #360]	; (8009dd8 <_printf_i+0x23c>)
 8009c70:	230a      	movs	r3, #10
 8009c72:	e012      	b.n	8009c9a <_printf_i+0xfe>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	1d19      	adds	r1, r3, #4
 8009c7a:	6029      	str	r1, [r5, #0]
 8009c7c:	0605      	lsls	r5, r0, #24
 8009c7e:	d501      	bpl.n	8009c84 <_printf_i+0xe8>
 8009c80:	681e      	ldr	r6, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <_printf_i+0xee>
 8009c84:	0641      	lsls	r1, r0, #25
 8009c86:	d5fb      	bpl.n	8009c80 <_printf_i+0xe4>
 8009c88:	881e      	ldrh	r6, [r3, #0]
 8009c8a:	4853      	ldr	r0, [pc, #332]	; (8009dd8 <_printf_i+0x23c>)
 8009c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c8e:	bf0c      	ite	eq
 8009c90:	2308      	moveq	r3, #8
 8009c92:	230a      	movne	r3, #10
 8009c94:	2100      	movs	r1, #0
 8009c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c9a:	6865      	ldr	r5, [r4, #4]
 8009c9c:	60a5      	str	r5, [r4, #8]
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	bfa2      	ittt	ge
 8009ca2:	6821      	ldrge	r1, [r4, #0]
 8009ca4:	f021 0104 	bicge.w	r1, r1, #4
 8009ca8:	6021      	strge	r1, [r4, #0]
 8009caa:	b90e      	cbnz	r6, 8009cb0 <_printf_i+0x114>
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	d04b      	beq.n	8009d48 <_printf_i+0x1ac>
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cba:	5dc7      	ldrb	r7, [r0, r7]
 8009cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc0:	4637      	mov	r7, r6
 8009cc2:	42bb      	cmp	r3, r7
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	d9f4      	bls.n	8009cb2 <_printf_i+0x116>
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d10b      	bne.n	8009ce4 <_printf_i+0x148>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	07de      	lsls	r6, r3, #31
 8009cd0:	d508      	bpl.n	8009ce4 <_printf_i+0x148>
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	6861      	ldr	r1, [r4, #4]
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	bfde      	ittt	le
 8009cda:	2330      	movle	r3, #48	; 0x30
 8009cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ce4:	1b52      	subs	r2, r2, r5
 8009ce6:	6122      	str	r2, [r4, #16]
 8009ce8:	f8cd a000 	str.w	sl, [sp]
 8009cec:	464b      	mov	r3, r9
 8009cee:	aa03      	add	r2, sp, #12
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7ff fee4 	bl	8009ac0 <_printf_common>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d14a      	bne.n	8009d92 <_printf_i+0x1f6>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	b004      	add	sp, #16
 8009d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	f043 0320 	orr.w	r3, r3, #32
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	4833      	ldr	r0, [pc, #204]	; (8009ddc <_printf_i+0x240>)
 8009d10:	2778      	movs	r7, #120	; 0x78
 8009d12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	6829      	ldr	r1, [r5, #0]
 8009d1a:	061f      	lsls	r7, r3, #24
 8009d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d20:	d402      	bmi.n	8009d28 <_printf_i+0x18c>
 8009d22:	065f      	lsls	r7, r3, #25
 8009d24:	bf48      	it	mi
 8009d26:	b2b6      	uxthmi	r6, r6
 8009d28:	07df      	lsls	r7, r3, #31
 8009d2a:	bf48      	it	mi
 8009d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d30:	6029      	str	r1, [r5, #0]
 8009d32:	bf48      	it	mi
 8009d34:	6023      	strmi	r3, [r4, #0]
 8009d36:	b91e      	cbnz	r6, 8009d40 <_printf_i+0x1a4>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	f023 0320 	bic.w	r3, r3, #32
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	2310      	movs	r3, #16
 8009d42:	e7a7      	b.n	8009c94 <_printf_i+0xf8>
 8009d44:	4824      	ldr	r0, [pc, #144]	; (8009dd8 <_printf_i+0x23c>)
 8009d46:	e7e4      	b.n	8009d12 <_printf_i+0x176>
 8009d48:	4615      	mov	r5, r2
 8009d4a:	e7bd      	b.n	8009cc8 <_printf_i+0x12c>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	6826      	ldr	r6, [r4, #0]
 8009d50:	6961      	ldr	r1, [r4, #20]
 8009d52:	1d18      	adds	r0, r3, #4
 8009d54:	6028      	str	r0, [r5, #0]
 8009d56:	0635      	lsls	r5, r6, #24
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	d501      	bpl.n	8009d60 <_printf_i+0x1c4>
 8009d5c:	6019      	str	r1, [r3, #0]
 8009d5e:	e002      	b.n	8009d66 <_printf_i+0x1ca>
 8009d60:	0670      	lsls	r0, r6, #25
 8009d62:	d5fb      	bpl.n	8009d5c <_printf_i+0x1c0>
 8009d64:	8019      	strh	r1, [r3, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	e7bc      	b.n	8009ce8 <_printf_i+0x14c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	1d1a      	adds	r2, r3, #4
 8009d72:	602a      	str	r2, [r5, #0]
 8009d74:	681d      	ldr	r5, [r3, #0]
 8009d76:	6862      	ldr	r2, [r4, #4]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f7f6 fa38 	bl	80001f0 <memchr>
 8009d80:	b108      	cbz	r0, 8009d86 <_printf_i+0x1ea>
 8009d82:	1b40      	subs	r0, r0, r5
 8009d84:	6060      	str	r0, [r4, #4]
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d90:	e7aa      	b.n	8009ce8 <_printf_i+0x14c>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	462a      	mov	r2, r5
 8009d96:	4649      	mov	r1, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	47d0      	blx	sl
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d0ad      	beq.n	8009cfc <_printf_i+0x160>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	079b      	lsls	r3, r3, #30
 8009da4:	d413      	bmi.n	8009dce <_printf_i+0x232>
 8009da6:	68e0      	ldr	r0, [r4, #12]
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	4298      	cmp	r0, r3
 8009dac:	bfb8      	it	lt
 8009dae:	4618      	movlt	r0, r3
 8009db0:	e7a6      	b.n	8009d00 <_printf_i+0x164>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4632      	mov	r2, r6
 8009db6:	4649      	mov	r1, r9
 8009db8:	4640      	mov	r0, r8
 8009dba:	47d0      	blx	sl
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d09d      	beq.n	8009cfc <_printf_i+0x160>
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	9903      	ldr	r1, [sp, #12]
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	dcf2      	bgt.n	8009db2 <_printf_i+0x216>
 8009dcc:	e7eb      	b.n	8009da6 <_printf_i+0x20a>
 8009dce:	2500      	movs	r5, #0
 8009dd0:	f104 0619 	add.w	r6, r4, #25
 8009dd4:	e7f5      	b.n	8009dc2 <_printf_i+0x226>
 8009dd6:	bf00      	nop
 8009dd8:	08009f39 	.word	0x08009f39
 8009ddc:	08009f4a 	.word	0x08009f4a

08009de0 <memmove>:
 8009de0:	4288      	cmp	r0, r1
 8009de2:	b510      	push	{r4, lr}
 8009de4:	eb01 0402 	add.w	r4, r1, r2
 8009de8:	d902      	bls.n	8009df0 <memmove+0x10>
 8009dea:	4284      	cmp	r4, r0
 8009dec:	4623      	mov	r3, r4
 8009dee:	d807      	bhi.n	8009e00 <memmove+0x20>
 8009df0:	1e43      	subs	r3, r0, #1
 8009df2:	42a1      	cmp	r1, r4
 8009df4:	d008      	beq.n	8009e08 <memmove+0x28>
 8009df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dfe:	e7f8      	b.n	8009df2 <memmove+0x12>
 8009e00:	4402      	add	r2, r0
 8009e02:	4601      	mov	r1, r0
 8009e04:	428a      	cmp	r2, r1
 8009e06:	d100      	bne.n	8009e0a <memmove+0x2a>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e12:	e7f7      	b.n	8009e04 <memmove+0x24>

08009e14 <_sbrk_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_sbrk_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f6 ffce 	bl	8000dc0 <_sbrk>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_sbrk_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_sbrk_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000468 	.word	0x20000468

08009e34 <memcpy>:
 8009e34:	440a      	add	r2, r1
 8009e36:	4291      	cmp	r1, r2
 8009e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e3c:	d100      	bne.n	8009e40 <memcpy+0xc>
 8009e3e:	4770      	bx	lr
 8009e40:	b510      	push	{r4, lr}
 8009e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	d1f9      	bne.n	8009e42 <memcpy+0xe>
 8009e4e:	bd10      	pop	{r4, pc}

08009e50 <_realloc_r>:
 8009e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e54:	4680      	mov	r8, r0
 8009e56:	4614      	mov	r4, r2
 8009e58:	460e      	mov	r6, r1
 8009e5a:	b921      	cbnz	r1, 8009e66 <_realloc_r+0x16>
 8009e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	4611      	mov	r1, r2
 8009e62:	f7ff bc49 	b.w	80096f8 <_malloc_r>
 8009e66:	b92a      	cbnz	r2, 8009e74 <_realloc_r+0x24>
 8009e68:	f7ff fbda 	bl	8009620 <_free_r>
 8009e6c:	4625      	mov	r5, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	f000 f81b 	bl	8009eae <_malloc_usable_size_r>
 8009e78:	4284      	cmp	r4, r0
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	d802      	bhi.n	8009e84 <_realloc_r+0x34>
 8009e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e82:	d812      	bhi.n	8009eaa <_realloc_r+0x5a>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4640      	mov	r0, r8
 8009e88:	f7ff fc36 	bl	80096f8 <_malloc_r>
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d0ed      	beq.n	8009e6e <_realloc_r+0x1e>
 8009e92:	42bc      	cmp	r4, r7
 8009e94:	4622      	mov	r2, r4
 8009e96:	4631      	mov	r1, r6
 8009e98:	bf28      	it	cs
 8009e9a:	463a      	movcs	r2, r7
 8009e9c:	f7ff ffca 	bl	8009e34 <memcpy>
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff fbbc 	bl	8009620 <_free_r>
 8009ea8:	e7e1      	b.n	8009e6e <_realloc_r+0x1e>
 8009eaa:	4635      	mov	r5, r6
 8009eac:	e7df      	b.n	8009e6e <_realloc_r+0x1e>

08009eae <_malloc_usable_size_r>:
 8009eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb2:	1f18      	subs	r0, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfbc      	itt	lt
 8009eb8:	580b      	ldrlt	r3, [r1, r0]
 8009eba:	18c0      	addlt	r0, r0, r3
 8009ebc:	4770      	bx	lr
	...

08009ec0 <_init>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	bf00      	nop
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr

08009ecc <_fini>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr
