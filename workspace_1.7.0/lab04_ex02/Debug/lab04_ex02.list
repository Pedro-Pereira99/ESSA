
lab04_ex02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080042e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080042e0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cedb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  0002cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a2  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015676  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dac5  00000000  00000000  000457f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089c29  00000000  00000000  000532b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033e8  00000000  00000000  000dcee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e02c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800426c 	.word	0x0800426c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800426c 	.word	0x0800426c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */
volatile int CaptureCompare_FLAG = 0; // Capture compare flag
volatile int  correctlySentData = 0;
volatile int correctlyReceivedData = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	CaptureCompare_FLAG = 1;
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <HAL_TIM_IC_CaptureCallback+0x1c>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000100 	.word	0x20000100

08000500 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	  // Set Tx flag
	  correctlySentData = 1;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_UART_TxCpltCallback+0x1c>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000104 	.word	0x20000104

08000520 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	  // Set Rx flag
	  correctlyReceivedData = 1;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_UART_RxCpltCallback+0x1c>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000108 	.word	0x20000108

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fc23 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8b1 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa11 	bl	8000974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f9e5 	bl	8000920 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000556:	f000 f971 	bl	800083c <MX_TIM3_Init>
  MX_TIM2_Init();
 800055a:	f000 f915 	bl	8000788 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int Captured_Value;
  int r_edge_counter = 0; // This will help to keep track of how many times a rising edge was detected
 800055e:	2300      	movs	r3, #0
 8000560:	657b      	str	r3, [r7, #84]	; 0x54
  int f_edge_counter = 0; // The same, but for falling edges
 8000562:	2300      	movs	r3, #0
 8000564:	653b      	str	r3, [r7, #80]	; 0x50
  int rising_edge[2];
  int falling_edge[2];
  char message[] = "Test message"; // need to change this later  char received_number;
 8000566:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <main+0x154>)
 8000568:	f107 0420 	add.w	r4, r7, #32
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	c407      	stmia	r4!, {r0, r1, r2}
 8000570:	7023      	strb	r3, [r4, #0]
  char received_number;

  char welcome_message[] = "The code is now running";
 8000572:	4b49      	ldr	r3, [pc, #292]	; (8000698 <main+0x158>)
 8000574:	1d3c      	adds	r4, r7, #4
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000580:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4845      	ldr	r0, [pc, #276]	; (800069c <main+0x15c>)
 8000588:	f001 fdf6 	bl	8002178 <HAL_TIM_IC_Start_IT>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	4844      	ldr	r0, [pc, #272]	; (80006a0 <main+0x160>)
 8000590:	f001 fce8 	bl	8001f64 <HAL_TIM_OC_Start>

  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe1c 	bl	80001d4 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	483f      	ldr	r0, [pc, #252]	; (80006a4 <main+0x164>)
 80005a6:	f002 fee5 	bl	8003374 <HAL_UART_Transmit_IT>
  {

	// The following IF code was done taking into consideration the logic for interrupts presented in the previous exercise
	// In which the callback function simply sets a flag, and all the necessary operations based on this are realized in the while loop

	if(CaptureCompare_FLAG == 1){
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <main+0x168>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d121      	bne.n	80005f6 <main+0xb6>
		CaptureCompare_FLAG = 0;
 80005b2:	4b3d      	ldr	r3, [pc, #244]	; (80006a8 <main+0x168>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		Captured_Value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1); // Read the captured value
 80005b8:	2100      	movs	r1, #0
 80005ba:	4838      	ldr	r0, [pc, #224]	; (800069c <main+0x15c>)
 80005bc:	f002 f9a6 	bl	800290c <HAL_TIM_ReadCapturedValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c

		if(r_edge_counter == f_edge_counter){
 80005c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80005c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d10a      	bne.n	80005e2 <main+0xa2>
			rising_edge[r_edge_counter] = Captured_Value;
 80005cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	3358      	adds	r3, #88	; 0x58
 80005d2:	443b      	add	r3, r7
 80005d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005d6:	f843 2c20 	str.w	r2, [r3, #-32]
			r_edge_counter++;
 80005da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005dc:	3301      	adds	r3, #1
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
 80005e0:	e009      	b.n	80005f6 <main+0xb6>
		}

		else{
			falling_edge[f_edge_counter] = Captured_Value;
 80005e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	3358      	adds	r3, #88	; 0x58
 80005e8:	443b      	add	r3, r7
 80005ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005ec:	f843 2c28 	str.w	r2, [r3, #-40]
			f_edge_counter++;
 80005f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005f2:	3301      	adds	r3, #1
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	if(f_edge_counter > 1 & r_edge_counter > 1){
 80005f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	bfcc      	ite	gt
 80005fc:	2301      	movgt	r3, #1
 80005fe:	2300      	movle	r3, #0
 8000600:	b2da      	uxtb	r2, r3
 8000602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000604:	2b01      	cmp	r3, #1
 8000606:	bfcc      	ite	gt
 8000608:	2301      	movgt	r3, #1
 800060a:	2300      	movle	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4013      	ands	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01e      	beq.n	8000654 <main+0x114>
		r_edge_counter=0;
 8000616:	2300      	movs	r3, #0
 8000618:	657b      	str	r3, [r7, #84]	; 0x54
		f_edge_counter=0;
 800061a:	2300      	movs	r3, #0
 800061c:	653b      	str	r3, [r7, #80]	; 0x50

		period = abs(rising_edge[0] - rising_edge[1]); // This is the period in ticks
 800061e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	bfb8      	it	lt
 8000628:	425b      	neglt	r3, r3
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
		// ARR is 39,999 and Pre-Scaler is 2099, with internal clock 84 MHz
		// Thus, the time it takes to reload is 40,000 * 2,100 / 84,000,000 = 1 second
		// We have then that 1 tick of the counter = 1/40,000 seconds;
		// period in seconds = period in ticks /40,000
		freq = 1/period * 40000; // frequency in Hz
 800062c:	2201      	movs	r2, #1
 800062e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000630:	fb92 f3f3 	sdiv	r3, r2, r3
 8000634:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
		duty_cycle = abs(rising_edge[0] - falling_edge[0])/period;
 800063e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000648:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800064c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800064e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000652:	643b      	str	r3, [r7, #64]	; 0x40


 	}


	HAL_UART_Receive_IT(&huart2, &received_number, 1);
 8000654:	f107 031f 	add.w	r3, r7, #31
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	4811      	ldr	r0, [pc, #68]	; (80006a4 <main+0x164>)
 800065e:	f002 febf 	bl	80033e0 <HAL_UART_Receive_IT>
	// Check RX flag
   if (correctlyReceivedData == 1) {
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0x16c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d19f      	bne.n	80005aa <main+0x6a>
   correctlyReceivedData = 0;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0x16c>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
	   if(received_number == '1'){
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	2b31      	cmp	r3, #49	; 0x31
 8000674:	d199      	bne.n	80005aa <main+0x6a>
   		   HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, sizeof(char)*strlen(message));
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdaa 	bl	80001d4 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <main+0x164>)
 800068c:	f002 fe72 	bl	8003374 <HAL_UART_Transmit_IT>
	if(CaptureCompare_FLAG == 1){
 8000690:	e78b      	b.n	80005aa <main+0x6a>
 8000692:	bf00      	nop
 8000694:	08004284 	.word	0x08004284
 8000698:	08004294 	.word	0x08004294
 800069c:	20000070 	.word	0x20000070
 80006a0:	20000028 	.word	0x20000028
 80006a4:	200000b8 	.word	0x200000b8
 80006a8:	20000100 	.word	0x20000100
 80006ac:	20000108 	.word	0x20000108

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fda8 	bl	8004214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <SystemClock_Config+0xd0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd4>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fedc 	bl	80014f8 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f983 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f93e 	bl	80019e8 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000772:	f000 f96d 	bl	8000a50 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_TIM2_Init+0xac>)
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_TIM2_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_TIM2_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999;
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_TIM2_Init+0xac>)
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <MX_TIM2_Init+0xb0>)
 80007c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_TIM2_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_TIM2_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM2_Init+0xac>)
 80007d2:	f001 fb78 	bl	8001ec6 <HAL_TIM_OC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f938 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_TIM2_Init+0xac>)
 80007f0:	f002 fcee 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 f929 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007fe:	2330      	movs	r3, #48	; 0x30
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM2_Init+0xac>)
 8000816:	f001 feb9 	bl	800258c <HAL_TIM_OC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000820:	f000 f916 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM2_Init+0xac>)
 8000826:	f000 f9b1 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000028 	.word	0x20000028
 8000838:	000cd13f 	.word	0x000cd13f

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_TIM3_Init+0xdc>)
 8000868:	4a2c      	ldr	r2, [pc, #176]	; (800091c <MX_TIM3_Init+0xe0>)
 800086a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_TIM3_Init+0xdc>)
 800086e:	f640 0233 	movw	r2, #2099	; 0x833
 8000872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_TIM3_Init+0xdc>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_TIM3_Init+0xdc>)
 800087c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000880:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_TIM3_Init+0xdc>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_TIM3_Init+0xdc>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800088e:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_TIM3_Init+0xdc>)
 8000890:	f001 faca 	bl	8001e28 <HAL_TIM_Base_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800089a:	f000 f8d9 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4619      	mov	r1, r3
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_TIM3_Init+0xdc>)
 80008ac:	f001 ff66 	bl	800277c <HAL_TIM_ConfigClockSource>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008b6:	f000 f8cb 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_TIM3_Init+0xdc>)
 80008bc:	f001 fc02 	bl	80020c4 <HAL_TIM_IC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008c6:	f000 f8c3 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <MX_TIM3_Init+0xdc>)
 80008da:	f002 fc79 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80008e4:	f000 f8b4 	bl	8000a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0xdc>)
 8000900:	f001 fea0 	bl	8002644 <HAL_TIM_IC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800090a:	f000 f8a1 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000070 	.word	0x20000070
 800091c:	40000400 	.word	0x40000400

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART2_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000958:	f002 fcbc 	bl	80032d4 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f875 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000b8 	.word	0x200000b8
 8000970:	40004400 	.word	0x40004400

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a00:	f000 fd60 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0xd8>)
 8000a1c:	f000 fbce 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a38:	f000 fbc0 	bl	80011bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020800 	.word	0x40020800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 faba 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abc:	d10d      	bne.n	8000ada <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_TIM_OC_MspInit+0x3c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_TIM_OC_MspInit+0x3c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_TIM_OC_MspInit+0x3c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d133      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b56:	2302      	movs	r3, #2
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x9c>)
 8000b62:	f000 fb2b 	bl	80011bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201d      	movs	r0, #29
 8000b6c:	f000 fa5d 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b70:	201d      	movs	r0, #29
 8000b72:	f000 fa76 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d11d      	bne.n	8000bea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_TIM_MspPostInit+0x68>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_TIM_MspPostInit+0x68>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_TIM_MspPostInit+0x68>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000be6:	f000 fae9 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_UART_MspInit+0x94>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d133      	bne.n	8000c86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_UART_MspInit+0x9c>)
 8000c72:	f000 faa3 	bl	80011bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 f9d5 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c80:	2026      	movs	r0, #38	; 0x26
 8000c82:	f000 f9ee 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8a4 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM3_IRQHandler+0x10>)
 8000cf6:	f001 fb59 	bl	80023ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000070 	.word	0x20000070

08000d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f002 fb8f 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000b8 	.word	0x200000b8

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f003 fa5b 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fbe7 	bl	8000540 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d80:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8000d84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d88:	20000110 	.word	0x20000110

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe4a 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f943 	bl	800107e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	2000010c 	.word	0x2000010c

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000010c 	.word	0x2000010c

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff feda 	bl	8000e5c <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e052      	b.n	800116e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0216 	bic.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <HAL_DMA_Abort+0x62>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0208 	bic.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e013      	b.n	8001142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe9f 	bl	8000e5c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d90c      	bls.n	8001142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e015      	b.n	800116e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e4      	bne.n	800111a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d004      	beq.n	8001194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e159      	b.n	800148c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8148 	bne.w	8001486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a2 	beq.w	8001486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a49      	ldr	r2, [pc, #292]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x202>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1fe>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1fa>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x300>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1f2>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x304>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f aea2 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e267      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00c      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	2b08      	cmp	r3, #8
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e242      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b70      	ldr	r3, [pc, #448]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6f      	ldr	r2, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6c      	ldr	r2, [pc, #432]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b69      	ldr	r3, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a68      	ldr	r2, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc54 	bl	8000e5c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fc50 	bl	8000e5c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e207      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc40 	bl	8000e5c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc3c 	bl	8000e5c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1f3      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c7      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x244>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fbf5 	bl	8000e5c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fbf1 	bl	8000e5c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a8      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4925      	ldr	r1, [pc, #148]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x244>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fbd4 	bl	8000e5c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fbd0 	bl	8000e5c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e187      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d036      	beq.n	8001750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_RCC_OscConfig+0x248>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbb4 	bl	8000e5c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fbb0 	bl	8000e5c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e167      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x240>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
 8001716:	e01b      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_OscConfig+0x248>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb9d 	bl	8000e5c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e00e      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb99 	bl	8000e5c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d907      	bls.n	8001744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e150      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	42470000 	.word	0x42470000
 8001740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ea      	bne.n	8001726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8097 	beq.w	800188c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a7c      	ldr	r2, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x474>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b74      	ldr	r3, [pc, #464]	; (800196c <HAL_RCC_OscConfig+0x474>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a73      	ldr	r2, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x474>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fb59 	bl	8000e5c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff fb55 	bl	8000e5c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e10c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <HAL_RCC_OscConfig+0x474>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2ea>
 80017d4:	4b64      	ldr	r3, [pc, #400]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a63      	ldr	r2, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x30c>
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a5e      	ldr	r2, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a5b      	ldr	r2, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x324>
 8001804:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a54      	ldr	r2, [pc, #336]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 0304 	bic.w	r3, r3, #4
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d015      	beq.n	8001850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fb1a 	bl	8000e5c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fb16 	bl	8000e5c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0cb      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ee      	beq.n	800182c <HAL_RCC_OscConfig+0x334>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fb04 	bl	8000e5c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fb00 	bl	8000e5c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b5      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a1 	beq.w	80019d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d05c      	beq.n	800195c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d141      	bne.n	800192e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fad4 	bl	8000e5c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fad0 	bl	8000e5c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e087      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	491b      	ldr	r1, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff faa9 	bl	8000e5c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff faa5 	bl	8000e5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e05c      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x416>
 800192c:	e054      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fa92 	bl	8000e5c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fa8e 	bl	8000e5c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x444>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e038      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000
 8001970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d028      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d121      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d11a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f9c0 	bl	8000e5c <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f9bc 	bl	8000e5c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f920 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	080042ac 	.word	0x080042ac
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b094      	sub	sp, #80	; 0x50
 8001bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	f200 80e1 	bhi.w	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x34>
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x3a>
 8001be6:	e0db      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bec:	e0db      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf2:	e0d8      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c26:	4622      	mov	r2, r4
 8001c28:	462b      	mov	r3, r5
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0159      	lsls	r1, r3, #5
 8001c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c38:	0150      	lsls	r0, r2, #5
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4621      	mov	r1, r4
 8001c40:	1a51      	subs	r1, r2, r1
 8001c42:	6139      	str	r1, [r7, #16]
 8001c44:	4629      	mov	r1, r5
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c58:	4659      	mov	r1, fp
 8001c5a:	018b      	lsls	r3, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c62:	4651      	mov	r1, sl
 8001c64:	018a      	lsls	r2, r1, #6
 8001c66:	4651      	mov	r1, sl
 8001c68:	ebb2 0801 	subs.w	r8, r2, r1
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	eb18 0303 	adds.w	r3, r8, r3
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	462b      	mov	r3, r5
 8001c94:	eb49 0303 	adc.w	r3, r9, r3
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	024b      	lsls	r3, r1, #9
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	024a      	lsls	r2, r1, #9
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cc4:	f7fe fa8e 	bl	80001e4 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cd0:	e058      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4611      	mov	r1, r2
 8001cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cec:	4642      	mov	r2, r8
 8001cee:	464b      	mov	r3, r9
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0159      	lsls	r1, r3, #5
 8001cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfe:	0150      	lsls	r0, r2, #5
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4641      	mov	r1, r8
 8001d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d24:	ebb2 040a 	subs.w	r4, r2, sl
 8001d28:	eb63 050b 	sbc.w	r5, r3, fp
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	00eb      	lsls	r3, r5, #3
 8001d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3a:	00e2      	lsls	r2, r4, #3
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	18e3      	adds	r3, r4, r3
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	464b      	mov	r3, r9
 8001d48:	eb45 0303 	adc.w	r3, r5, r3
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	028b      	lsls	r3, r1, #10
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d64:	4621      	mov	r1, r4
 8001d66:	028a      	lsls	r2, r1, #10
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	61fa      	str	r2, [r7, #28]
 8001d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d78:	f7fe fa34 	bl	80001e4 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3750      	adds	r7, #80	; 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a9b      	lsrs	r3, r3, #10
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	080042bc 	.word	0x080042bc

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e04:	f7ff ffdc 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0b5b      	lsrs	r3, r3, #13
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	080042bc 	.word	0x080042bc

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e041      	b.n	8001ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fe4c 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 fdbc 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e041      	b.n	8001f5c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7fe fddd 	bl	8000aac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f000 fd6d 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_TIM_OC_Start+0x24>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e022      	b.n	8001fce <HAL_TIM_OC_Start+0x6a>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d109      	bne.n	8001fa2 <HAL_TIM_OC_Start+0x3e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	e015      	b.n	8001fce <HAL_TIM_OC_Start+0x6a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d109      	bne.n	8001fbc <HAL_TIM_OC_Start+0x58>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e008      	b.n	8001fce <HAL_TIM_OC_Start+0x6a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e068      	b.n	80020a8 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_OC_Start+0x82>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe4:	e013      	b.n	800200e <HAL_TIM_OC_Start+0xaa>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_OC_Start+0x92>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff4:	e00b      	b.n	800200e <HAL_TIM_OC_Start+0xaa>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_OC_Start+0xa2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002004:	e003      	b.n	800200e <HAL_TIM_OC_Start+0xaa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f001 f8b4 	bl	8003184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_TIM_OC_Start+0x14c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d107      	bne.n	8002036 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_TIM_OC_Start+0x14c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_TIM_OC_Start+0x10e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002048:	d013      	beq.n	8002072 <HAL_TIM_OC_Start+0x10e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_TIM_OC_Start+0x150>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_TIM_OC_Start+0x10e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_TIM_OC_Start+0x154>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_TIM_OC_Start+0x10e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_TIM_OC_Start+0x158>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_TIM_OC_Start+0x10e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_TIM_OC_Start+0x15c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d111      	bne.n	8002096 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d010      	beq.n	80020a6 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	e007      	b.n	80020a6 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40014000 	.word	0x40014000

080020c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f839 	bl	8002162 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 fc6e 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <HAL_TIM_IC_Start_IT+0x1e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e013      	b.n	80021be <HAL_TIM_IC_Start_IT+0x46>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_IC_Start_IT+0x2e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e00b      	b.n	80021be <HAL_TIM_IC_Start_IT+0x46>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d104      	bne.n	80021b6 <HAL_TIM_IC_Start_IT+0x3e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e003      	b.n	80021be <HAL_TIM_IC_Start_IT+0x46>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_TIM_IC_Start_IT+0x58>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e013      	b.n	80021f8 <HAL_TIM_IC_Start_IT+0x80>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d104      	bne.n	80021e0 <HAL_TIM_IC_Start_IT+0x68>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e00b      	b.n	80021f8 <HAL_TIM_IC_Start_IT+0x80>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d104      	bne.n	80021f0 <HAL_TIM_IC_Start_IT+0x78>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e003      	b.n	80021f8 <HAL_TIM_IC_Start_IT+0x80>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002200:	7b7b      	ldrb	r3, [r7, #13]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0c2      	b.n	8002390 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_TIM_IC_Start_IT+0xa2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002218:	e013      	b.n	8002242 <HAL_TIM_IC_Start_IT+0xca>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d104      	bne.n	800222a <HAL_TIM_IC_Start_IT+0xb2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	e00b      	b.n	8002242 <HAL_TIM_IC_Start_IT+0xca>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d104      	bne.n	800223a <HAL_TIM_IC_Start_IT+0xc2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002238:	e003      	b.n	8002242 <HAL_TIM_IC_Start_IT+0xca>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2202      	movs	r2, #2
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_TIM_IC_Start_IT+0xda>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002250:	e013      	b.n	800227a <HAL_TIM_IC_Start_IT+0x102>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d104      	bne.n	8002262 <HAL_TIM_IC_Start_IT+0xea>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002260:	e00b      	b.n	800227a <HAL_TIM_IC_Start_IT+0x102>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d104      	bne.n	8002272 <HAL_TIM_IC_Start_IT+0xfa>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002270:	e003      	b.n	800227a <HAL_TIM_IC_Start_IT+0x102>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d841      	bhi.n	8002304 <HAL_TIM_IC_Start_IT+0x18c>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_TIM_IC_Start_IT+0x110>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022bd 	.word	0x080022bd
 800228c:	08002305 	.word	0x08002305
 8002290:	08002305 	.word	0x08002305
 8002294:	08002305 	.word	0x08002305
 8002298:	080022cf 	.word	0x080022cf
 800229c:	08002305 	.word	0x08002305
 80022a0:	08002305 	.word	0x08002305
 80022a4:	08002305 	.word	0x08002305
 80022a8:	080022e1 	.word	0x080022e1
 80022ac:	08002305 	.word	0x08002305
 80022b0:	08002305 	.word	0x08002305
 80022b4:	08002305 	.word	0x08002305
 80022b8:	080022f3 	.word	0x080022f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0202 	orr.w	r2, r2, #2
 80022ca:	60da      	str	r2, [r3, #12]
      break;
 80022cc:	e01d      	b.n	800230a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0204 	orr.w	r2, r2, #4
 80022dc:	60da      	str	r2, [r3, #12]
      break;
 80022de:	e014      	b.n	800230a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	60da      	str	r2, [r3, #12]
      break;
 80022f0:	e00b      	b.n	800230a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0210 	orr.w	r2, r2, #16
 8002300:	60da      	str	r2, [r3, #12]
      break;
 8002302:	e002      	b.n	800230a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      break;
 8002308:	bf00      	nop
  }

  if (status == HAL_OK)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d13e      	bne.n	800238e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 ff33 	bl	8003184 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_TIM_IC_Start_IT+0x220>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_TIM_IC_Start_IT+0x1e2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d013      	beq.n	800235a <HAL_TIM_IC_Start_IT+0x1e2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_TIM_IC_Start_IT+0x224>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_TIM_IC_Start_IT+0x1e2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_TIM_IC_Start_IT+0x228>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_TIM_IC_Start_IT+0x1e2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIM_IC_Start_IT+0x22c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_TIM_IC_Start_IT+0x1e2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_TIM_IC_Start_IT+0x230>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d111      	bne.n	800237e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d010      	beq.n	800238e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237c:	e007      	b.n	800238e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800
 80023a4:	40000c00 	.word	0x40000c00
 80023a8:	40014000 	.word	0x40014000

080023ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d020      	beq.n	8002410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0202 	mvn.w	r2, #2
 80023e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe f872 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fad2 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fad9 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d020      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0204 	mvn.w	r2, #4
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe f84c 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 faac 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fab3 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d020      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0208 	mvn.w	r2, #8
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2204      	movs	r2, #4
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f826 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa86 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fa8d 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d020      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0210 	mvn.w	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe f800 	bl	80004e0 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa60 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fa67 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0201 	mvn.w	r2, #1
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa3e 	bl	8002994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fec2 	bl	80032c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa38 	bl	80029d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0220 	mvn.w	r2, #32
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fe94 	bl	80032ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e048      	b.n	800263c <HAL_TIM_OC_ConfigChannel+0xb0>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d839      	bhi.n	800262c <HAL_TIM_OC_ConfigChannel+0xa0>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	080025f5 	.word	0x080025f5
 80025c4:	0800262d 	.word	0x0800262d
 80025c8:	0800262d 	.word	0x0800262d
 80025cc:	0800262d 	.word	0x0800262d
 80025d0:	08002603 	.word	0x08002603
 80025d4:	0800262d 	.word	0x0800262d
 80025d8:	0800262d 	.word	0x0800262d
 80025dc:	0800262d 	.word	0x0800262d
 80025e0:	08002611 	.word	0x08002611
 80025e4:	0800262d 	.word	0x0800262d
 80025e8:	0800262d 	.word	0x0800262d
 80025ec:	0800262d 	.word	0x0800262d
 80025f0:	0800261f 	.word	0x0800261f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fa7e 	bl	8002afc <TIM_OC1_SetConfig>
      break;
 8002600:	e017      	b.n	8002632 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fadd 	bl	8002bc8 <TIM_OC2_SetConfig>
      break;
 800260e:	e010      	b.n	8002632 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb42 	bl	8002ca0 <TIM_OC3_SetConfig>
      break;
 800261c:	e009      	b.n	8002632 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fba5 	bl	8002d74 <TIM_OC4_SetConfig>
      break;
 800262a:	e002      	b.n	8002632 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
      break;
 8002630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_TIM_IC_ConfigChannel+0x1e>
 800265e:	2302      	movs	r3, #2
 8002660:	e088      	b.n	8002774 <HAL_TIM_IC_ConfigChannel+0x130>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002680:	f000 fbc8 	bl	8002e14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020c 	bic.w	r2, r2, #12
 8002692:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6999      	ldr	r1, [r3, #24]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e060      	b.n	800276a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d11c      	bne.n	80026e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026be:	f000 fc40 	bl	8002f42 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6999      	ldr	r1, [r3, #24]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	021a      	lsls	r2, r3, #8
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]
 80026e6:	e040      	b.n	800276a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11b      	bne.n	8002726 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80026fe:	f000 fc8d 	bl	800301c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 020c 	bic.w	r2, r2, #12
 8002710:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	61da      	str	r2, [r3, #28]
 8002724:	e021      	b.n	800276a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d11c      	bne.n	8002766 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800273c:	f000 fcaa 	bl	8003094 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800274e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69d9      	ldr	r1, [r3, #28]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
 8002764:	e001      	b.n	800276a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIM_ConfigClockSource+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e0b4      	b.n	8002902 <HAL_TIM_ConfigClockSource+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d0:	d03e      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0xd4>
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	f200 8087 	bhi.w	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	f000 8086 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x172>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	d87f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d01a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xa6>
 80027ec:	2b70      	cmp	r3, #112	; 0x70
 80027ee:	d87b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d050      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x11a>
 80027f4:	2b60      	cmp	r3, #96	; 0x60
 80027f6:	d877      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d03c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xfa>
 80027fc:	2b50      	cmp	r3, #80	; 0x50
 80027fe:	d873      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d058      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d86f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d064      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b30      	cmp	r3, #48	; 0x30
 800280e:	d86b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d060      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d867      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d05c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	2b10      	cmp	r3, #16
 800281e:	d05a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	e062      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002832:	f000 fc87 	bl	8003144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
      break;
 800284e:	e04f      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002860:	f000 fc70 	bl	8003144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e03c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	461a      	mov	r2, r3
 8002884:	f000 fb2e 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fc3d 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002894:	e02c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 fb8a 	bl	8002fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2160      	movs	r1, #96	; 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fc2d 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 80028b4:	e01c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fb0e 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fc1d 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 80028d4:	e00c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 fc14 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 80028e6:	e003      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      break;
 80028ec:	e000      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d831      	bhi.n	8002984 <HAL_TIM_ReadCapturedValue+0x78>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800295d 	.word	0x0800295d
 800292c:	08002985 	.word	0x08002985
 8002930:	08002985 	.word	0x08002985
 8002934:	08002985 	.word	0x08002985
 8002938:	08002967 	.word	0x08002967
 800293c:	08002985 	.word	0x08002985
 8002940:	08002985 	.word	0x08002985
 8002944:	08002985 	.word	0x08002985
 8002948:	08002971 	.word	0x08002971
 800294c:	08002985 	.word	0x08002985
 8002950:	08002985 	.word	0x08002985
 8002954:	08002985 	.word	0x08002985
 8002958:	0800297b 	.word	0x0800297b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	60fb      	str	r3, [r7, #12]

      break;
 8002964:	e00f      	b.n	8002986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	60fb      	str	r3, [r7, #12]

      break;
 800296e:	e00a      	b.n	8002986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	60fb      	str	r3, [r7, #12]

      break;
 8002978:	e005      	b.n	8002986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	60fb      	str	r3, [r7, #12]

      break;
 8002982:	e000      	b.n	8002986 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002984:	bf00      	nop
  }

  return tmpreg;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <TIM_Base_SetConfig+0xfc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <TIM_Base_SetConfig+0x100>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <TIM_Base_SetConfig+0x104>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a35      	ldr	r2, [pc, #212]	; (8002aec <TIM_Base_SetConfig+0x108>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <TIM_Base_SetConfig+0xfc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <TIM_Base_SetConfig+0x100>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <TIM_Base_SetConfig+0x104>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <TIM_Base_SetConfig+0x108>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <TIM_Base_SetConfig+0x10c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <TIM_Base_SetConfig+0x110>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <TIM_Base_SetConfig+0xfc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800

08002afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f023 0201 	bic.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0302 	bic.w	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <TIM_OC1_SetConfig+0xc8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10c      	bne.n	8002b72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0308 	bic.w	r3, r3, #8
 8002b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <TIM_OC1_SetConfig+0xc8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d111      	bne.n	8002b9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40010000 	.word	0x40010000

08002bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 0210 	bic.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0320 	bic.w	r3, r3, #32
 8002c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <TIM_OC2_SetConfig+0xd4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10d      	bne.n	8002c44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <TIM_OC2_SetConfig+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d113      	bne.n	8002c74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000

08002ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <TIM_OC3_SetConfig+0xd0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10d      	bne.n	8002d1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <TIM_OC3_SetConfig+0xd0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40010000 	.word	0x40010000

08002d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	031b      	lsls	r3, r3, #12
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <TIM_OC4_SetConfig+0x9c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d109      	bne.n	8002de8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	621a      	str	r2, [r3, #32]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000

08002e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 0201 	bic.w	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <TIM_TI1_SetConfig+0xbc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <TIM_TI1_SetConfig+0x56>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d00f      	beq.n	8002e6a <TIM_TI1_SetConfig+0x56>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <TIM_TI1_SetConfig+0xc0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <TIM_TI1_SetConfig+0x56>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <TIM_TI1_SetConfig+0xc4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <TIM_TI1_SetConfig+0x56>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <TIM_TI1_SetConfig+0xc8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <TIM_TI1_SetConfig+0x56>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <TIM_TI1_SetConfig+0xcc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <TIM_TI1_SetConfig+0x5a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <TIM_TI1_SetConfig+0x5c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e003      	b.n	8002e8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 030a 	bic.w	r3, r3, #10
 8002ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 030a 	and.w	r3, r3, #10
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40014000 	.word	0x40014000

08002ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0210 	bic.w	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	031b      	lsls	r3, r3, #12
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0210 	bic.w	r2, r3, #16
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	031b      	lsls	r3, r3, #12
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003058:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	b2db      	uxtb	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	031b      	lsls	r3, r3, #12
 80030d8:	b29b      	uxth	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	031b      	lsls	r3, r3, #12
 80030ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	f043 0307 	orr.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	021a      	lsls	r2, r3, #8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	431a      	orrs	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2201      	movs	r2, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e050      	b.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d013      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10c      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000

080032ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e042      	b.n	800336c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fc7e 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fd07 	bl	8003d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800334c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	d121      	bne.n	80033d2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_Transmit_IT+0x26>
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01a      	b.n	80033d4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2221      	movs	r2, #33	; 0x21
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d112      	bne.n	8003420 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_UART_Receive_IT+0x26>
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00b      	b.n	8003422 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	461a      	mov	r2, r3
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fab0 	bl	800397c <UART_Start_Receive_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	e000      	b.n	8003422 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ba      	sub	sp, #232	; 0xe8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800346a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_UART_IRQHandler+0x66>
 800347e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb8f 	bl	8003bae <UART_Receive_IT>
      return;
 8003490:	e25b      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80de 	beq.w	8003658 <HAL_UART_IRQHandler+0x22c>
 800349c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80d1 	beq.w	8003658 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_UART_IRQHandler+0xae>
 80034c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_UART_IRQHandler+0xd2>
 80034e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_UART_IRQHandler+0xf6>
 800350a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_UART_IRQHandler+0x126>
 800352e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800353a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0208 	orr.w	r2, r3, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 81f2 	beq.w	8003940 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_UART_IRQHandler+0x14e>
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb1a 	bl	8003bae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_UART_IRQHandler+0x17a>
 800359e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d04f      	beq.n	8003646 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa22 	bl	80039f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d141      	bne.n	800363e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1d9      	bne.n	80035ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d013      	beq.n	8003636 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_UART_IRQHandler+0x3e0>)
 8003614:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fdab 	bl	8001176 <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e00e      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f98a 	bl	8003950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	e00a      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f986 	bl	8003950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e006      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f982 	bl	8003950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003652:	e175      	b.n	8003940 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	bf00      	nop
    return;
 8003656:	e173      	b.n	8003940 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 814f 	bne.w	8003900 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8148 	beq.w	8003900 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8141 	beq.w	8003900 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	f040 80b6 	bne.w	8003810 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8145 	beq.w	8003944 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036c2:	429a      	cmp	r2, r3
 80036c4:	f080 813e 	bcs.w	8003944 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	f000 8088 	beq.w	80037ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800370a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800370e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003716:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1d9      	bne.n	80036de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800373a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800374e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003752:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003756:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e1      	bne.n	800372a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800378a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800378c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e3      	bne.n	8003766 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80037d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e3      	bne.n	80037ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fc54 	bl	8001096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8ad 	bl	8003964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380a:	e09b      	b.n	8003944 <HAL_UART_IRQHandler+0x518>
 800380c:	08003ab7 	.word	0x08003ab7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 808e 	beq.w	8003948 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800382c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8089 	beq.w	8003948 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800384c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800385a:	647a      	str	r2, [r7, #68]	; 0x44
 800385c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e3      	bne.n	8003836 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	623b      	str	r3, [r7, #32]
   return(result);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003892:	633a      	str	r2, [r7, #48]	; 0x30
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e3      	bne.n	800386e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0310 	bic.w	r3, r3, #16
 80038ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	617b      	str	r3, [r7, #20]
   return(result);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e3      	bne.n	80038b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f833 	bl	8003964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038fe:	e023      	b.n	8003948 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_UART_IRQHandler+0x4f4>
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8e0 	bl	8003ade <UART_Transmit_IT>
    return;
 800391e:	e014      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <HAL_UART_IRQHandler+0x51e>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f920 	bl	8003b7e <UART_EndTransmit_IT>
    return;
 800393e:	e004      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
    return;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
      return;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
      return;
 8003948:	bf00      	nop
  }
}
 800394a:	37e8      	adds	r7, #232	; 0xe8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2222      	movs	r2, #34	; 0x22
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0220 	orr.w	r2, r2, #32
 80039e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b095      	sub	sp, #84	; 0x54
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a18:	643a      	str	r2, [r7, #64]	; 0x40
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d119      	bne.n	8003a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a88:	61ba      	str	r2, [r7, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	613b      	str	r3, [r7, #16]
   return(result);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aaa:	bf00      	nop
 8003aac:	3754      	adds	r7, #84	; 0x54
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ff3d 	bl	8003950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b21      	cmp	r3, #33	; 0x21
 8003af0:	d13e      	bne.n	8003b70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d114      	bne.n	8003b26 <UART_Transmit_IT+0x48>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d110      	bne.n	8003b26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	1c9a      	adds	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]
 8003b24:	e008      	b.n	8003b38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6211      	str	r1, [r2, #32]
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4619      	mov	r1, r3
 8003b46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fc fcae 	bl	8000500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08c      	sub	sp, #48	; 0x30
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b22      	cmp	r3, #34	; 0x22
 8003bc0:	f040 80ae 	bne.w	8003d20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	d117      	bne.n	8003bfe <UART_Receive_IT+0x50>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003bfc:	e026      	b.n	8003c4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c10:	d007      	beq.n	8003c22 <UART_Receive_IT+0x74>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <UART_Receive_IT+0x82>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e008      	b.n	8003c42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d15d      	bne.n	8003d1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0220 	bic.w	r2, r2, #32
 8003c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d135      	bne.n	8003d12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f023 0310 	bic.w	r3, r3, #16
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	623a      	str	r2, [r7, #32]
 8003cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d10a      	bne.n	8003d04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fe2a 	bl	8003964 <HAL_UARTEx_RxEventCallback>
 8003d10:	e002      	b.n	8003d18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fc fc04 	bl	8000520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e002      	b.n	8003d22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	; 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b0c0      	sub	sp, #256	; 0x100
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	68d9      	ldr	r1, [r3, #12]
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	ea40 0301 	orr.w	r3, r0, r1
 8003d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d84:	f021 010c 	bic.w	r1, r1, #12
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d92:	430b      	orrs	r3, r1
 8003d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	6999      	ldr	r1, [r3, #24]
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	ea40 0301 	orr.w	r3, r0, r1
 8003db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0xa0>
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <UART_SetConfig+0x2d0>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d104      	bne.n	8003dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe f818 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dd4:	e003      	b.n	8003dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dd6:	f7fd ffff 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8003dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	f040 810c 	bne.w	8004004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	1891      	adds	r1, r2, r2
 8003e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e06:	415b      	adcs	r3, r3
 8003e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e0e:	4621      	mov	r1, r4
 8003e10:	eb12 0801 	adds.w	r8, r2, r1
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb43 0901 	adc.w	r9, r3, r1
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2e:	4690      	mov	r8, r2
 8003e30:	4699      	mov	r9, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	eb18 0303 	adds.w	r3, r8, r3
 8003e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	eb49 0303 	adc.w	r3, r9, r3
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	18db      	adds	r3, r3, r3
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e60:	4613      	mov	r3, r2
 8003e62:	eb42 0303 	adc.w	r3, r2, r3
 8003e66:	657b      	str	r3, [r7, #84]	; 0x54
 8003e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e70:	f7fc f9b8 	bl	80001e4 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b61      	ldr	r3, [pc, #388]	; (8004000 <UART_SetConfig+0x2d4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec4:	4692      	mov	sl, r2
 8003ec6:	469b      	mov	fp, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	eb1a 0303 	adds.w	r3, sl, r3
 8003ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	18db      	adds	r3, r3, r3
 8003ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f06:	f7fc f96d 	bl	80001e4 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <UART_SetConfig+0x2d4>)
 8003f12:	fba3 2301 	umull	r2, r3, r3, r1
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2264      	movs	r2, #100	; 0x64
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	1acb      	subs	r3, r1, r3
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <UART_SetConfig+0x2d4>)
 8003f28:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f34:	441c      	add	r4, r3
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f50:	415b      	adcs	r3, r3
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	460a      	mov	r2, r1
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fac:	460b      	mov	r3, r1
 8003fae:	18db      	adds	r3, r3, r3
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	eb42 0303 	adc.w	r3, r2, r3
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fc2:	f7fc f90f 	bl	80001e4 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <UART_SetConfig+0x2d4>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <UART_SetConfig+0x2d4>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 0207 	and.w	r2, r3, #7
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4422      	add	r2, r4
 8003ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff4:	e106      	b.n	8004204 <UART_SetConfig+0x4d8>
 8003ff6:	bf00      	nop
 8003ff8:	40011000 	.word	0x40011000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800400e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004016:	4642      	mov	r2, r8
 8004018:	464b      	mov	r3, r9
 800401a:	1891      	adds	r1, r2, r2
 800401c:	6239      	str	r1, [r7, #32]
 800401e:	415b      	adcs	r3, r3
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004026:	4641      	mov	r1, r8
 8004028:	1854      	adds	r4, r2, r1
 800402a:	4649      	mov	r1, r9
 800402c:	eb43 0501 	adc.w	r5, r3, r1
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	00eb      	lsls	r3, r5, #3
 800403a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403e:	00e2      	lsls	r2, r4, #3
 8004040:	4614      	mov	r4, r2
 8004042:	461d      	mov	r5, r3
 8004044:	4643      	mov	r3, r8
 8004046:	18e3      	adds	r3, r4, r3
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800404c:	464b      	mov	r3, r9
 800404e:	eb45 0303 	adc.w	r3, r5, r3
 8004052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004072:	4629      	mov	r1, r5
 8004074:	008b      	lsls	r3, r1, #2
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800407c:	4621      	mov	r1, r4
 800407e:	008a      	lsls	r2, r1, #2
 8004080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004084:	f7fc f8ae 	bl	80001e4 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4b60      	ldr	r3, [pc, #384]	; (8004210 <UART_SetConfig+0x4e4>)
 800408e:	fba3 2302 	umull	r2, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	011c      	lsls	r4, r3, #4
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	61b9      	str	r1, [r7, #24]
 80040b0:	415b      	adcs	r3, r3
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b8:	4641      	mov	r1, r8
 80040ba:	1851      	adds	r1, r2, r1
 80040bc:	6139      	str	r1, [r7, #16]
 80040be:	4649      	mov	r1, r9
 80040c0:	414b      	adcs	r3, r1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d0:	4659      	mov	r1, fp
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4651      	mov	r1, sl
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4642      	mov	r2, r8
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040ec:	464b      	mov	r3, r9
 80040ee:	460a      	mov	r2, r1
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	67bb      	str	r3, [r7, #120]	; 0x78
 8004102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004110:	4649      	mov	r1, r9
 8004112:	008b      	lsls	r3, r1, #2
 8004114:	4641      	mov	r1, r8
 8004116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411a:	4641      	mov	r1, r8
 800411c:	008a      	lsls	r2, r1, #2
 800411e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004122:	f7fc f85f 	bl	80001e4 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4611      	mov	r1, r2
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <UART_SetConfig+0x4e4>)
 800412e:	fba3 2301 	umull	r2, r3, r3, r1
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2264      	movs	r2, #100	; 0x64
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	1acb      	subs	r3, r1, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	3332      	adds	r3, #50	; 0x32
 8004140:	4a33      	ldr	r2, [pc, #204]	; (8004210 <UART_SetConfig+0x4e4>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	441c      	add	r4, r3
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	673b      	str	r3, [r7, #112]	; 0x70
 8004156:	677a      	str	r2, [r7, #116]	; 0x74
 8004158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	415b      	adcs	r3, r3
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416c:	4641      	mov	r1, r8
 800416e:	1851      	adds	r1, r2, r1
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	4649      	mov	r1, r9
 8004174:	414b      	adcs	r3, r1
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004184:	4659      	mov	r1, fp
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4651      	mov	r1, sl
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4642      	mov	r2, r8
 800419a:	189b      	adds	r3, r3, r2
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	464b      	mov	r3, r9
 80041a0:	460a      	mov	r2, r1
 80041a2:	eb42 0303 	adc.w	r3, r2, r3
 80041a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	663b      	str	r3, [r7, #96]	; 0x60
 80041b2:	667a      	str	r2, [r7, #100]	; 0x64
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041c0:	4649      	mov	r1, r9
 80041c2:	008b      	lsls	r3, r1, #2
 80041c4:	4641      	mov	r1, r8
 80041c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ca:	4641      	mov	r1, r8
 80041cc:	008a      	lsls	r2, r1, #2
 80041ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041d2:	f7fc f807 	bl	80001e4 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <UART_SetConfig+0x4e4>)
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2164      	movs	r1, #100	; 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	3332      	adds	r3, #50	; 0x32
 80041ee:	4a08      	ldr	r2, [pc, #32]	; (8004210 <UART_SetConfig+0x4e4>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4422      	add	r2, r4
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004210:	51eb851f 	.word	0x51eb851f

08004214 <memset>:
 8004214:	4402      	add	r2, r0
 8004216:	4603      	mov	r3, r0
 8004218:	4293      	cmp	r3, r2
 800421a:	d100      	bne.n	800421e <memset+0xa>
 800421c:	4770      	bx	lr
 800421e:	f803 1b01 	strb.w	r1, [r3], #1
 8004222:	e7f9      	b.n	8004218 <memset+0x4>

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4d0d      	ldr	r5, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1b64      	subs	r4, r4, r5
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2600      	movs	r6, #0
 8004230:	42a6      	cmp	r6, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4d0b      	ldr	r5, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f000 f818 	bl	800426c <_init>
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2600      	movs	r6, #0
 8004242:	42a6      	cmp	r6, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f855 3b04 	ldr.w	r3, [r5], #4
 800424c:	4798      	blx	r3
 800424e:	3601      	adds	r6, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f855 3b04 	ldr.w	r3, [r5], #4
 8004256:	4798      	blx	r3
 8004258:	3601      	adds	r6, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	080042cc 	.word	0x080042cc
 8004260:	080042cc 	.word	0x080042cc
 8004264:	080042cc 	.word	0x080042cc
 8004268:	080042d0 	.word	0x080042d0

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
