
lab05_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800ab50  0800ab50  0001ab50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeec  0800aeec  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeec  0800aeec  0001aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef4  0800aef4  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800aefc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000028c  0800b188  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800b188  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018919  00000000  00000000  000202ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003348  00000000  00000000  00038c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0003bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c6  00000000  00000000  0003d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001916d  00000000  00000000  0003ea5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019197  00000000  00000000  00057bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000967fb  00000000  00000000  00070d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078a8  00000000  00000000  00107560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab38 	.word	0x0800ab38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	0800ab38 	.word	0x0800ab38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int tim2Flag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	tim2Flag = 1; // The interrupt func is going to set the flag every 500 ms
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
} // The flag will be cleared in the while loop.
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000338 	.word	0x20000338

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ed8:	b094      	sub	sp, #80	; 0x50
 8000eda:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f003 fa66 	bl	80043ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f86a 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f94c 	bl	8001180 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee8:	f000 f920 	bl	800112c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000eec:	f000 f8d0 	bl	8001090 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY); // Initialize the humidity sensor
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f002 fe82 	bl	8003bfc <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE); // Initialize the temperature sensor
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2002      	movs	r0, #2
 8000efc:	f002 fe7e 	bl	8003bfc <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE); // Initialize the pressure sensor
 8000f00:	2102      	movs	r1, #2
 8000f02:	2001      	movs	r0, #1
 8000f04:	f002 fe7a 	bl	8003bfc <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY); // Enable the humidity sensor
 8000f08:	2104      	movs	r1, #4
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f002 ff84 	bl	8003e18 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE); // Enable the temperature sensor
 8000f10:	2101      	movs	r1, #1
 8000f12:	2002      	movs	r0, #2
 8000f14:	f002 ff80 	bl	8003e18 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE); // Enable the pressure sensor
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f002 ff7c 	bl	8003e18 <IKS01A3_ENV_SENSOR_Enable>
  float pressure;
  	//

  char buffer[50]; // This will help the data transmission

 	HAL_TIM_Base_Start_IT(&htim3);// Start the timer; This will enable interrupts every time the timer is reloaded (every 0.5 sec)
 8000f20:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <main+0xd4>)
 8000f22:	f005 fc45 	bl	80067b0 <HAL_TIM_Base_Start_IT>

	while (1)
	{
	 if(tim2Flag == 1){
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <main+0xd8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1fb      	bne.n	8000f26 <main+0x52>
	  tim2Flag = 0; //Clear the interrupt flag of the timer
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <main+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity); // Saves the output in the "humidity" variable, and returns a value useful to find errors
 8000f34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f002 ffab 	bl	8003e98 <IKS01A3_ENV_SENSOR_GetValue>
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &temperature); // Saves the output in the "temperature" variable, and returns a value useful to find errors
 8000f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f46:	461a      	mov	r2, r3
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f002 ffa4 	bl	8003e98 <IKS01A3_ENV_SENSOR_GetValue>
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure); // Saves the output in the "pressure" variable, and returns a value useful to find errors
 8000f50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f54:	461a      	mov	r2, r3
 8000f56:	2102      	movs	r1, #2
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f002 ff9d 	bl	8003e98 <IKS01A3_ENV_SENSOR_GetValue>

	  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%f, %f, %f; \r\n", temperature, humidity, pressure)); // Transmits humidity data
 8000f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff faf9 	bl	8000558 <__aeabi_f2d>
 8000f66:	4680      	mov	r8, r0
 8000f68:	4689      	mov	r9, r1
 8000f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faf3 	bl	8000558 <__aeabi_f2d>
 8000f72:	4604      	mov	r4, r0
 8000f74:	460d      	mov	r5, r1
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff faed 	bl	8000558 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4638      	mov	r0, r7
 8000f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f88:	e9cd 4500 	strd	r4, r5, [sp]
 8000f8c:	4642      	mov	r2, r8
 8000f8e:	464b      	mov	r3, r9
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <main+0xdc>)
 8000f92:	f007 fc73 	bl	800887c <siprintf>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <main+0xe0>)
 8000fa0:	f006 f840 	bl	8007024 <HAL_UART_Transmit_IT>
	 if(tim2Flag == 1){
 8000fa4:	e7bf      	b.n	8000f26 <main+0x52>
 8000fa6:	bf00      	nop
 8000fa8:	200002a8 	.word	0x200002a8
 8000fac:	20000338 	.word	0x20000338
 8000fb0:	0800ab50 	.word	0x0800ab50
 8000fb4:	200002f0 	.word	0x200002f0

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fcbb 	bl	8008942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <SystemClock_Config+0xd0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <SystemClock_Config+0xd0>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <SystemClock_Config+0xd0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <SystemClock_Config+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemClock_Config+0xd4>)
 8001006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800102c:	2310      	movs	r3, #16
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001030:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001036:	2304      	movs	r3, #4
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800103a:	2307      	movs	r3, #7
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fecc 	bl	8005de0 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800104e:	f000 f905 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f005 f92e 	bl	80062d0 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800107a:	f000 f8ef 	bl	800125c <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_TIM3_Init+0x94>)
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <MX_TIM3_Init+0x98>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_TIM3_Init+0x94>)
 80010b4:	f640 0233 	movw	r2, #2099	; 0x833
 80010b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_TIM3_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_TIM3_Init+0x94>)
 80010c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_TIM3_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_TIM3_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_TIM3_Init+0x94>)
 80010d6:	f005 fb1b 	bl	8006710 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 f8bc 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_TIM3_Init+0x94>)
 80010f2:	f005 fcaf 	bl	8006a54 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010fc:	f000 f8ae 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_TIM3_Init+0x94>)
 800110e:	f005 feb7 	bl	8006e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f8a0 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200002a8 	.word	0x200002a8
 8001128:	40000400 	.word	0x40000400

0800112c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART2_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001164:	f005 ff0e 	bl	8006f84 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f875 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002f0 	.word	0x200002f0
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_GPIO_Init+0xd0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a25      	ldr	r2, [pc, #148]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2120      	movs	r1, #32
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <MX_GPIO_Init+0xd4>)
 800120c:	f003 fd4c 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001216:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_GPIO_Init+0xd8>)
 8001228:	f003 fad6 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800122c:	2320      	movs	r3, #32
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0xd4>)
 8001244:	f003 fac8 	bl	80047d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020800 	.word	0x40020800

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f003 f9c2 	bl	8004630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_TIM_Base_MspInit+0x48>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d115      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_TIM_Base_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <HAL_TIM_Base_MspInit+0x4c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201d      	movs	r0, #29
 80012ec:	f003 f9ab 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f0:	201d      	movs	r0, #29
 80012f2:	f003 f9c4 	bl	800467e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40000400 	.word	0x40000400
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_UART_MspInit+0x94>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d133      	bne.n	8001392 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x98>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001362:	230c      	movs	r3, #12
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_UART_MspInit+0x9c>)
 800137e:	f003 fa2b 	bl	80047d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2026      	movs	r0, #38	; 0x26
 8001388:	f003 f95d 	bl	8004646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800138c:	2026      	movs	r0, #38	; 0x26
 800138e:	f003 f976 	bl	800467e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f003 f82c 	bl	8004450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM3_IRQHandler+0x10>)
 8001402:	f005 fa37 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002a8 	.word	0x200002a8

08001410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART2_IRQHandler+0x10>)
 8001416:	f005 fe3b 	bl	8007090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002f0 	.word	0x200002f0

08001424 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <BSP_I2C1_Init+0x58>)
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BSP_I2C1_Init+0x5c>)
 8001432:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <BSP_I2C1_Init+0x60>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4912      	ldr	r1, [pc, #72]	; (8001484 <BSP_I2C1_Init+0x60>)
 800143c:	600a      	str	r2, [r1, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d117      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <BSP_I2C1_Init+0x58>)
 8001444:	f004 f8fe 	bl	8005644 <HAL_I2C_GetState>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d111      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <BSP_I2C1_Init+0x58>)
 8001450:	f000 f8e2 	bl	8001618 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10b      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <BSP_I2C1_Init+0x58>)
 800145c:	f000 f8a8 	bl	80015b0 <MX_I2C1_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001466:	f06f 0307 	mvn.w	r3, #7
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000033c 	.word	0x2000033c
 8001480:	40005400 	.word	0x40005400
 8001484:	20000390 	.word	0x20000390

08001488 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <BSP_I2C1_DeInit+0x48>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d014      	beq.n	80014c4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <BSP_I2C1_DeInit+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <BSP_I2C1_DeInit+0x48>)
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <BSP_I2C1_DeInit+0x48>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <BSP_I2C1_DeInit+0x4c>)
 80014ae:	f000 f8fd 	bl	80016ac <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <BSP_I2C1_DeInit+0x4c>)
 80014b4:	f003 fd56 	bl	8004f64 <HAL_I2C_DeInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80014be:	f06f 0307 	mvn.w	r3, #7
 80014c2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000390 	.word	0x20000390
 80014d4:	2000033c 	.word	0x2000033c

080014d8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af04      	add	r7, sp, #16
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	81fb      	strh	r3, [r7, #14]
 80014e6:	460b      	mov	r3, r1
 80014e8:	81bb      	strh	r3, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80014f2:	89ba      	ldrh	r2, [r7, #12]
 80014f4:	89f9      	ldrh	r1, [r7, #14]
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <BSP_I2C1_WriteReg+0x60>)
 8001508:	f003 fd70 	bl	8004fec <HAL_I2C_Mem_Write>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00c      	beq.n	800152c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <BSP_I2C1_WriteReg+0x60>)
 8001514:	f004 f8a4 	bl	8005660 <HAL_I2C_GetError>
 8001518:	4603      	mov	r3, r0
 800151a:	2b04      	cmp	r3, #4
 800151c:	d103      	bne.n	8001526 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800151e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e002      	b.n	800152c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001526:	f06f 0303 	mvn.w	r3, #3
 800152a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800152c:	697b      	ldr	r3, [r7, #20]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000033c 	.word	0x2000033c

0800153c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af04      	add	r7, sp, #16
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	81fb      	strh	r3, [r7, #14]
 800154a:	460b      	mov	r3, r1
 800154c:	81bb      	strh	r3, [r7, #12]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001556:	89ba      	ldrh	r2, [r7, #12]
 8001558:	89f9      	ldrh	r1, [r7, #14]
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <BSP_I2C1_ReadReg+0x60>)
 800156c:	f003 fe38 	bl	80051e0 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00c      	beq.n	8001590 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <BSP_I2C1_ReadReg+0x60>)
 8001578:	f004 f872 	bl	8005660 <HAL_I2C_GetError>
 800157c:	4603      	mov	r3, r0
 800157e:	2b04      	cmp	r3, #4
 8001580:	d103      	bne.n	800158a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001582:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e002      	b.n	8001590 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800158a:	f06f 0303 	mvn.w	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001590:	697b      	ldr	r3, [r7, #20]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000033c 	.word	0x2000033c

080015a0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80015a4:	f002 ff68 	bl	8004478 <HAL_GetTick>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <MX_I2C1_Init+0x60>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <MX_I2C1_Init+0x64>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015da:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f003 fb71 	bl	8004cdc <HAL_I2C_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40005400 	.word	0x40005400
 8001614:	00061a80 	.word	0x00061a80

08001618 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <I2C1_MspInit+0x8c>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <I2C1_MspInit+0x8c>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <I2C1_MspInit+0x8c>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800163c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800164e:	2304      	movs	r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <I2C1_MspInit+0x90>)
 800165a:	f003 f8bd 	bl	80047d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800165e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001670:	2304      	movs	r3, #4
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <I2C1_MspInit+0x90>)
 800167c:	f003 f8ac 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <I2C1_MspInit+0x8c>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <I2C1_MspInit+0x8c>)
 800168a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <I2C1_MspInit+0x8c>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <I2C1_MspDeInit+0x30>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <I2C1_MspDeInit+0x30>)
 80016ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <I2C1_MspDeInit+0x34>)
 80016c6:	f003 fa0b 	bl	8004ae0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80016ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <I2C1_MspDeInit+0x34>)
 80016d0:	f003 fa06 	bl	8004ae0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400

080016e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return 1;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_kill>:

int _kill(int pid, int sig)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016fe:	f007 f973 	bl	80089e8 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2216      	movs	r2, #22
 8001706:	601a      	str	r2, [r3, #0]
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_exit>:

void _exit (int status)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffe7 	bl	80016f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001726:	e7fe      	b.n	8001726 <_exit+0x12>

08001728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e00a      	b.n	8001750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800173a:	f3af 8000 	nop.w
 800173e:	4601      	mov	r1, r0
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	60ba      	str	r2, [r7, #8]
 8001746:	b2ca      	uxtb	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf0      	blt.n	800173a <_read+0x12>
  }

  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e009      	b.n	8001788 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf1      	blt.n	8001774 <_write+0x12>
  }
  return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_close>:

int _close(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c2:	605a      	str	r2, [r3, #4]
  return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_isatty>:

int _isatty(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f007 f8d8 	bl	80089e8 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20018000 	.word	0x20018000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000394 	.word	0x20000394
 800186c:	200005e0 	.word	0x200005e0

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001898:	f7ff ffea 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	; (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f007 f897 	bl	80089f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fb05 	bl	8000ed4 <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80018d8:	0800aefc 	.word	0x0800aefc
  ldr r2, =_sbss
 80018dc:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80018e0:	200005dc 	.word	0x200005dc

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e034      	b.n	800196a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b1a      	ldrb	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HTS221_RegisterBusIO+0x8c>)
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HTS221_RegisterBusIO+0x90>)
 8001942:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4798      	blx	r3
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	e002      	b.n	800196a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08001fb7 	.word	0x08001fb7
 8001978:	08002019 	.word	0x08002019

0800197c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 faac 	bl	8001eec <HTS221_Initialize>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e004      	b.n	80019aa <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d111      	bne.n	80019e8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f880 	bl	8001aca <HTS221_HUM_Disable>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	e00d      	b.n	80019f2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f967 	bl	8001caa <HTS221_TEMP_Disable>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e004      	b.n	80019f2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3320      	adds	r3, #32
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc30 	bl	8002270 <hts221_device_id_get>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e000      	b.n	8001a1e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HTS221_GetCapabilities+0x54>)
 8001a54:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HTS221_GetCapabilities+0x54>)
 8001a5a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	41480000 	.word	0x41480000

08001a80 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e015      	b.n	8001ac2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fbf3 	bl	8002292 <hts221_power_on_set>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e004      	b.n	8001ac2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e015      	b.n	8001b0c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10b      	bne.n	8001b02 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3320      	adds	r3, #32
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fbce 	bl	8002292 <hts221_power_on_set>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	e004      	b.n	8001b0c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f96f 	bl	8001e04 <HTS221_GetOutputDataRate>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001b3c:	ed97 0a00 	vldr	s0, [r7]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f9a3 	bl	8001e8c <HTS221_SetOutputDataRate>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	f107 020c 	add.w	r2, r7, #12
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fc58 	bl	800241a <hts221_hum_adc_point_0_get>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e06b      	b.n	8001c4e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 0220 	add.w	r2, r3, #32
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	3304      	adds	r3, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f000 fbaa 	bl	80022de <hts221_hum_rh_point_0_get>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	e05b      	b.n	8001c4e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f103 0220 	add.w	r2, r3, #32
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 fc5c 	bl	8002462 <hts221_hum_adc_point_1_get>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e04b      	b.n	8001c4e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 0220 	add.w	r2, r3, #32
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f000 fba8 	bl	800231a <hts221_hum_rh_point_1_get>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e03b      	b.n	8001c4e <HTS221_HUM_GetHumidity+0xfe>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3320      	adds	r3, #32
 8001bde:	f107 021c 	add.w	r2, r7, #28
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fafd 	bl	80021e4 <hts221_humidity_raw_get>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e02b      	b.n	8001c4e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001bf6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f99a 	bl	8001f44 <Linear_Interpolation>
 8001c10:	eef0 7a40 	vmov.f32	s15, s0
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d503      	bpl.n	8001c32 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c58 <HTS221_HUM_GetHumidity+0x108>
 8001c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	dd02      	ble.n	8001c4c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HTS221_HUM_GetHumidity+0x10c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	42c80000 	.word	0x42c80000
 8001c5c:	42c80000 	.word	0x42c80000

08001c60 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e015      	b.n	8001ca2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10b      	bne.n	8001c98 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3320      	adds	r3, #32
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fb03 	bl	8002292 <hts221_power_on_set>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e004      	b.n	8001ca2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e015      	b.n	8001cec <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10b      	bne.n	8001ce2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3320      	adds	r3, #32
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fade 	bl	8002292 <hts221_power_on_set>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e004      	b.n	8001cec <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f87f 	bl	8001e04 <HTS221_GetOutputDataRate>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001d1c:	ed97 0a00 	vldr	s0, [r7]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8b3 	bl	8001e8c <HTS221_SetOutputDataRate>
 8001d26:	4603      	mov	r3, r0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fbb0 	bl	80024aa <hts221_temp_adc_point_0_get>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	e052      	b.n	8001dfc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f103 0220 	add.w	r2, r3, #32
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	3304      	adds	r3, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 faf6 	bl	8002356 <hts221_temp_deg_point_0_get>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e042      	b.n	8001dfc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 0220 	add.w	r2, r3, #32
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	3308      	adds	r3, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 fbb4 	bl	80024f2 <hts221_temp_adc_point_1_get>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e032      	b.n	8001dfc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f103 0220 	add.w	r2, r3, #32
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	330c      	adds	r3, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f000 fb07 	bl	80023b8 <hts221_temp_deg_point_1_get>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e022      	b.n	8001dfc <HTS221_TEMP_GetTemperature+0xcc>
 8001db6:	2300      	movs	r3, #0
 8001db8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	f107 021c 	add.w	r2, r7, #28
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fa30 	bl	800222a <hts221_temperature_raw_get>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e012      	b.n	8001dfc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001dd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f8aa 	bl	8001f44 <Linear_Interpolation>
 8001df0:	eef0 7a40 	vmov.f32	s15, s0
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3320      	adds	r3, #32
 8001e16:	f107 020b 	add.w	r2, r7, #11
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f983 	bl	8002128 <hts221_data_rate_get>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	e025      	b.n	8001e7a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d81d      	bhi.n	8001e70 <HTS221_GetOutputDataRate+0x6c>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HTS221_GetOutputDataRate+0x38>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e57 	.word	0x08001e57
 8001e44:	08001e61 	.word	0x08001e61
 8001e48:	08001e69 	.word	0x08001e69
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
      break;
 8001e54:	e010      	b.n	8001e78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e5c:	601a      	str	r2, [r3, #0]
      break;
 8001e5e:	e00b      	b.n	8001e78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HTS221_GetOutputDataRate+0x80>)
 8001e64:	601a      	str	r2, [r3, #0]
      break;
 8001e66:	e007      	b.n	8001e78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HTS221_GetOutputDataRate+0x84>)
 8001e6c:	601a      	str	r2, [r3, #0]
      break;
 8001e6e:	e003      	b.n	8001e78 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	60fb      	str	r3, [r7, #12]
      break;
 8001e76:	bf00      	nop
  }

  return ret;
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40e00000 	.word	0x40e00000
 8001e88:	41480000 	.word	0x41480000

08001e8c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001e98:	edd7 7a00 	vldr	s15, [r7]
 8001e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	d801      	bhi.n	8001eae <HTS221_SetOutputDataRate+0x22>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00b      	b.n	8001ec6 <HTS221_SetOutputDataRate+0x3a>
 8001eae:	edd7 7a00 	vldr	s15, [r7]
 8001eb2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d801      	bhi.n	8001ec4 <HTS221_SetOutputDataRate+0x38>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e000      	b.n	8001ec6 <HTS221_SetOutputDataRate+0x3a>
 8001ec4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001ec6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3320      	adds	r3, #32
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f902 	bl	80020da <hts221_data_rate_set>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	e000      	b.n	8001ee4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3320      	adds	r3, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9c9 	bl	8002292 <hts221_power_on_set>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e017      	b.n	8001f3c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2101      	movs	r1, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f940 	bl	8002198 <hts221_block_data_update_set>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e00b      	b.n	8001f3c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001f24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffaf 	bl	8001e8c <HTS221_SetOutputDataRate>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	e000      	b.n	8001f3c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f60:	edd7 7a00 	vldr	s15, [r7]
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	ed93 6a00 	vldr	s12, [r3]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fa4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	72fb      	strb	r3, [r7, #11]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10e      	bne.n	8001ff4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	695c      	ldr	r4, [r3, #20]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	b299      	uxth	r1, r3
 8001fea:	893b      	ldrh	r3, [r7, #8]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	47a0      	blx	r4
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	e00d      	b.n	8002010 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	695c      	ldr	r4, [r3, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002004:	b2db      	uxtb	r3, r3
 8002006:	b299      	uxth	r1, r3
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	47a0      	blx	r4
 800200e:	4603      	mov	r3, r0
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}

08002018 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	461a      	mov	r2, r3
 8002024:	460b      	mov	r3, r1
 8002026:	72fb      	strb	r3, [r7, #11]
 8002028:	4613      	mov	r3, r2
 800202a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10e      	bne.n	8002056 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	691c      	ldr	r4, [r3, #16]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	7b1b      	ldrb	r3, [r3, #12]
 8002040:	b298      	uxth	r0, r3
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002048:	b2db      	uxtb	r3, r3
 800204a:	b299      	uxth	r1, r3
 800204c:	893b      	ldrh	r3, [r7, #8]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	47a0      	blx	r4
 8002052:	4603      	mov	r3, r0
 8002054:	e00d      	b.n	8002072 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	691c      	ldr	r4, [r3, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	7b1b      	ldrb	r3, [r3, #12]
 800205e:	b298      	uxth	r0, r3
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002066:	b2db      	uxtb	r3, r3
 8002068:	b299      	uxth	r1, r3
 800206a:	893b      	ldrh	r3, [r7, #8]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	47a0      	blx	r4
 8002070:	4603      	mov	r3, r0
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}

0800207a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800207a:	b590      	push	{r4, r7, lr}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	461a      	mov	r2, r3
 8002086:	460b      	mov	r3, r1
 8002088:	72fb      	strb	r3, [r7, #11]
 800208a:	4613      	mov	r3, r2
 800208c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685c      	ldr	r4, [r3, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68d8      	ldr	r0, [r3, #12]
 8002096:	893b      	ldrh	r3, [r7, #8]
 8002098:	7af9      	ldrb	r1, [r7, #11]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	47a0      	blx	r4
 800209e:	6178      	str	r0, [r7, #20]

  return ret;
 80020a0:	697b      	ldr	r3, [r7, #20]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}

080020aa <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	461a      	mov	r2, r3
 80020b6:	460b      	mov	r3, r1
 80020b8:	72fb      	strb	r3, [r7, #11]
 80020ba:	4613      	mov	r3, r2
 80020bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681c      	ldr	r4, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68d8      	ldr	r0, [r3, #12]
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	7af9      	ldrb	r1, [r7, #11]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	47a0      	blx	r4
 80020ce:	6178      	str	r0, [r7, #20]

  return ret;
 80020d0:	697b      	ldr	r3, [r7, #20]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}

080020da <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80020e6:	f107 0208 	add.w	r2, r7, #8
 80020ea:	2301      	movs	r3, #1
 80020ec:	2120      	movs	r1, #32
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffc3 	bl	800207a <hts221_read_reg>
 80020f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	b2da      	uxtb	r2, r3
 8002104:	7a3b      	ldrb	r3, [r7, #8]
 8002106:	f362 0301 	bfi	r3, r2, #0, #2
 800210a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	2301      	movs	r3, #1
 8002112:	2120      	movs	r1, #32
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffc8 	bl	80020aa <hts221_write_reg>
 800211a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800211c:	68fb      	ldr	r3, [r7, #12]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002132:	f107 0208 	add.w	r2, r7, #8
 8002136:	2301      	movs	r3, #1
 8002138:	2120      	movs	r1, #32
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ff9d 	bl	800207a <hts221_read_reg>
 8002140:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d81a      	bhi.n	8002184 <hts221_data_rate_get+0x5c>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <hts221_data_rate_get+0x2c>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	0800216d 	.word	0x0800216d
 800215c:	08002175 	.word	0x08002175
 8002160:	0800217d 	.word	0x0800217d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e00f      	b.n	800218c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
      break;
 8002172:	e00b      	b.n	800218c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
      break;
 800217a:	e007      	b.n	800218c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2203      	movs	r2, #3
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e003      	b.n	800218c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
      break;
 800218a:	bf00      	nop
  }

  return ret;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80021a4:	f107 0208 	add.w	r2, r7, #8
 80021a8:	2301      	movs	r3, #1
 80021aa:	2120      	movs	r1, #32
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff64 	bl	800207a <hts221_read_reg>
 80021b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	7a3b      	ldrb	r3, [r7, #8]
 80021c4:	f362 0382 	bfi	r3, r2, #2, #1
 80021c8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80021ca:	f107 0208 	add.w	r2, r7, #8
 80021ce:	2301      	movs	r3, #1
 80021d0:	2120      	movs	r1, #32
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff69 	bl	80020aa <hts221_write_reg>
 80021d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80021ee:	f107 0208 	add.w	r2, r7, #8
 80021f2:	2302      	movs	r3, #2
 80021f4:	2128      	movs	r1, #40	; 0x28
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff3f 	bl	800207a <hts221_read_reg>
 80021fc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80021fe:	7a7b      	ldrb	r3, [r7, #9]
 8002200:	b21a      	sxth	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220c:	b29b      	uxth	r3, r3
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b29a      	uxth	r2, r3
 8002212:	7a3b      	ldrb	r3, [r7, #8]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29b      	uxth	r3, r3
 800221a:	b21a      	sxth	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	2302      	movs	r3, #2
 800223a:	212a      	movs	r1, #42	; 0x2a
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff1c 	bl	800207a <hts221_read_reg>
 8002242:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002244:	7a7b      	ldrb	r3, [r7, #9]
 8002246:	b21a      	sxth	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	b29b      	uxth	r3, r3
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b29a      	uxth	r2, r3
 8002258:	7a3b      	ldrb	r3, [r7, #8]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4413      	add	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	b21a      	sxth	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	801a      	strh	r2, [r3, #0]

  return ret;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800227a:	2301      	movs	r3, #1
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	210f      	movs	r1, #15
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fefa 	bl	800207a <hts221_read_reg>
 8002286:	60f8      	str	r0, [r7, #12]

  return ret;
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800229e:	f107 0208 	add.w	r2, r7, #8
 80022a2:	2301      	movs	r3, #1
 80022a4:	2120      	movs	r1, #32
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fee7 	bl	800207a <hts221_read_reg>
 80022ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	7a3b      	ldrb	r3, [r7, #8]
 80022be:	f362 13c7 	bfi	r3, r2, #7, #1
 80022c2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80022c4:	f107 0208 	add.w	r2, r7, #8
 80022c8:	2301      	movs	r3, #1
 80022ca:	2120      	movs	r1, #32
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff feec 	bl	80020aa <hts221_write_reg>
 80022d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022d4:	68fb      	ldr	r3, [r7, #12]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80022e8:	f107 020b 	add.w	r2, r7, #11
 80022ec:	2301      	movs	r3, #1
 80022ee:	2130      	movs	r1, #48	; 0x30
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fec2 	bl	800207a <hts221_read_reg>
 80022f6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002324:	f107 020b 	add.w	r2, r7, #11
 8002328:	2301      	movs	r3, #1
 800232a:	2131      	movs	r1, #49	; 0x31
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fea4 	bl	800207a <hts221_read_reg>
 8002332:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002360:	f107 020f 	add.w	r2, r7, #15
 8002364:	2301      	movs	r3, #1
 8002366:	2132      	movs	r1, #50	; 0x32
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fe86 	bl	800207a <hts221_read_reg>
 800236e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11b      	bne.n	80023ae <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002376:	f107 0210 	add.w	r2, r7, #16
 800237a:	2301      	movs	r3, #1
 800237c:	2135      	movs	r1, #53	; 0x35
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe7b 	bl	800207a <hts221_read_reg>
 8002384:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002386:	7c3b      	ldrb	r3, [r7, #16]
 8002388:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	4413      	add	r3, r2
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80023a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80023c2:	f107 020f 	add.w	r2, r7, #15
 80023c6:	2301      	movs	r3, #1
 80023c8:	2133      	movs	r1, #51	; 0x33
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fe55 	bl	800207a <hts221_read_reg>
 80023d0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11b      	bne.n	8002410 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80023d8:	f107 0210 	add.w	r2, r7, #16
 80023dc:	2301      	movs	r3, #1
 80023de:	2135      	movs	r1, #53	; 0x35
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fe4a 	bl	800207a <hts221_read_reg>
 80023e6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80023e8:	7c3b      	ldrb	r3, [r7, #16]
 80023ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	4413      	add	r3, r2
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002402:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002410:	697b      	ldr	r3, [r7, #20]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	2302      	movs	r3, #2
 800242a:	2136      	movs	r1, #54	; 0x36
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fe24 	bl	800207a <hts221_read_reg>
 8002432:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002434:	7a7b      	ldrb	r3, [r7, #9]
 8002436:	b29b      	uxth	r3, r3
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b29a      	uxth	r2, r3
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	b29b      	uxth	r3, r3
 8002440:	4413      	add	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002446:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002458:	68fb      	ldr	r3, [r7, #12]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800246c:	f107 0208 	add.w	r2, r7, #8
 8002470:	2302      	movs	r3, #2
 8002472:	213a      	movs	r1, #58	; 0x3a
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fe00 	bl	800207a <hts221_read_reg>
 800247a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800247c:	7a7b      	ldrb	r3, [r7, #9]
 800247e:	b29b      	uxth	r3, r3
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b29a      	uxth	r2, r3
 8002484:	7a3b      	ldrb	r3, [r7, #8]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800248e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80024b4:	f107 0208 	add.w	r2, r7, #8
 80024b8:	2302      	movs	r3, #2
 80024ba:	213c      	movs	r1, #60	; 0x3c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fddc 	bl	800207a <hts221_read_reg>
 80024c2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80024c4:	7a7b      	ldrb	r3, [r7, #9]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	7a3b      	ldrb	r3, [r7, #8]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80024d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80024fc:	f107 0208 	add.w	r2, r7, #8
 8002500:	2302      	movs	r3, #2
 8002502:	213e      	movs	r1, #62	; 0x3e
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fdb8 	bl	800207a <hts221_read_reg>
 800250a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800250c:	7a7b      	ldrb	r3, [r7, #9]
 800250e:	b29b      	uxth	r3, r3
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b29a      	uxth	r2, r3
 8002514:	7a3b      	ldrb	r3, [r7, #8]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4413      	add	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800251e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e051      	b.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7b1a      	ldrb	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <LPS22HH_RegisterBusIO+0xcc>)
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <LPS22HH_RegisterBusIO+0xd0>)
 800259a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e020      	b.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4798      	blx	r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e016      	b.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d112      	bne.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80025e0:	2301      	movs	r3, #1
 80025e2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	461a      	mov	r2, r3
 80025e8:	2110      	movs	r1, #16
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9e7 	bl	80029be <LPS22HH_Write_Reg>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80025fc:	68fb      	ldr	r3, [r7, #12]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08002cef 	.word	0x08002cef
 800260c:	08002d25 	.word	0x08002d25

08002610 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fb16 	bl	8002c54 <LPS22HH_Initialize>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e004      	b.n	800263e <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	d111      	bne.n	800267c <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f87f 	bl	800275c <LPS22HH_PRESS_Disable>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e00d      	b.n	8002686 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f920 	bl	80028b0 <LPS22HH_TEMP_Disable>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e004      	b.n	8002686 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3320      	adds	r3, #32
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fd26 	bl	80030f0 <lps22hh_device_id_get>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e000      	b.n	80026b2 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <LPS22HH_GetCapabilities+0x54>)
 80026f0:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <LPS22HH_GetCapabilities+0x54>)
 80026f6:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	43480000 	.word	0x43480000

08002714 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e014      	b.n	8002754 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0220 	add.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f000 fb97 	bl	8002e6c <lps22hh_data_rate_set>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	e004      	b.n	8002754 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e024      	b.n	80027bc <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11a      	bne.n	80027b2 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0220 	add.w	r2, r3, #32
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3333      	adds	r3, #51	; 0x33
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fbbd 	bl	8002f08 <lps22hh_data_rate_get>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
 8002798:	e010      	b.n	80027bc <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3320      	adds	r3, #32
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fb63 	bl	8002e6c <lps22hh_data_rate_set>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
 80027b0:	e004      	b.n	80027bc <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f90f 	bl	80029f4 <LPS22HH_GetOutputDataRate>
 80027d6:	4603      	mov	r3, r0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80027f6:	ed97 0a00 	vldr	s0, [r7]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f95e 	bl	8002abc <LPS22HH_SetOutputDataRate_When_Enabled>
 8002800:	4603      	mov	r3, r0
 8002802:	e005      	b.n	8002810 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002804:	ed97 0a00 	vldr	s0, [r7]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9c9 	bl	8002ba0 <LPS22HH_SetOutputDataRate_When_Disabled>
 800280e:	4603      	mov	r3, r0
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	2204      	movs	r2, #4
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f889 	bl	8008942 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3320      	adds	r3, #32
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fc0c 	bl	8003058 <lps22hh_pressure_raw_get>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fab4 	bl	8002dbc <lps22hh_from_lsb_to_hpa>
 8002854:	eef0 7a40 	vmov.f32	s15, s0
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e014      	b.n	80028a8 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 0220 	add.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 faed 	bl	8002e6c <lps22hh_data_rate_set>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	e004      	b.n	80028a8 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e024      	b.n	8002910 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11a      	bne.n	8002906 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0220 	add.w	r2, r3, #32
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3333      	adds	r3, #51	; 0x33
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 fb13 	bl	8002f08 <lps22hh_data_rate_get>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	e010      	b.n	8002910 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3320      	adds	r3, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fab9 	bl	8002e6c <lps22hh_data_rate_set>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e004      	b.n	8002910 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f865 	bl	80029f4 <LPS22HH_GetOutputDataRate>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002946:	2b01      	cmp	r3, #1
 8002948:	d106      	bne.n	8002958 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800294a:	ed97 0a00 	vldr	s0, [r7]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8b4 	bl	8002abc <LPS22HH_SetOutputDataRate_When_Enabled>
 8002954:	4603      	mov	r3, r0
 8002956:	e005      	b.n	8002964 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002958:	ed97 0a00 	vldr	s0, [r7]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f91f 	bl	8002ba0 <LPS22HH_SetOutputDataRate_When_Disabled>
 8002962:	4603      	mov	r3, r0
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2202      	movs	r2, #2
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f005 ffdf 	bl	8008942 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3320      	adds	r3, #32
 8002988:	f107 020c 	add.w	r2, r7, #12
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb8b 	bl	80030aa <lps22hh_temperature_raw_get>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e00a      	b.n	80029b6 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80029a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fa21 	bl	8002dec <lps22hh_from_lsb_to_celsius>
 80029aa:	eef0 7a40 	vmov.f32	s15, s0
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
 80029ca:	4613      	mov	r3, r2
 80029cc:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f103 0020 	add.w	r0, r3, #32
 80029d4:	1cba      	adds	r2, r7, #2
 80029d6:	78f9      	ldrb	r1, [r7, #3]
 80029d8:	2301      	movs	r3, #1
 80029da:	f000 f9d6 	bl	8002d8a <lps22hh_write_reg>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	e000      	b.n	80029ec <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3320      	adds	r3, #32
 8002a06:	f107 020b 	add.w	r2, r7, #11
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fa7b 	bl	8002f08 <lps22hh_data_rate_get>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	e03d      	b.n	8002a9a <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	d835      	bhi.n	8002a90 <LPS22HH_GetOutputDataRate+0x9c>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <LPS22HH_GetOutputDataRate+0x38>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a4d 	.word	0x08002a4d
 8002a30:	08002a57 	.word	0x08002a57
 8002a34:	08002a61 	.word	0x08002a61
 8002a38:	08002a69 	.word	0x08002a69
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a81 	.word	0x08002a81
 8002a48:	08002a89 	.word	0x08002a89
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
      break;
 8002a54:	e020      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a5c:	601a      	str	r2, [r3, #0]
      break;
 8002a5e:	e01b      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <LPS22HH_GetOutputDataRate+0xb0>)
 8002a64:	601a      	str	r2, [r3, #0]
      break;
 8002a66:	e017      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <LPS22HH_GetOutputDataRate+0xb4>)
 8002a6c:	601a      	str	r2, [r3, #0]
      break;
 8002a6e:	e013      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <LPS22HH_GetOutputDataRate+0xb8>)
 8002a74:	601a      	str	r2, [r3, #0]
      break;
 8002a76:	e00f      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <LPS22HH_GetOutputDataRate+0xbc>)
 8002a7c:	601a      	str	r2, [r3, #0]
      break;
 8002a7e:	e00b      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <LPS22HH_GetOutputDataRate+0xc0>)
 8002a84:	601a      	str	r2, [r3, #0]
      break;
 8002a86:	e007      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LPS22HH_GetOutputDataRate+0xc4>)
 8002a8c:	601a      	str	r2, [r3, #0]
      break;
 8002a8e:	e003      	b.n	8002a98 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	60fb      	str	r3, [r7, #12]
      break;
 8002a96:	bf00      	nop
  }

  return ret;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	41200000 	.word	0x41200000
 8002aa8:	41c80000 	.word	0x41c80000
 8002aac:	42480000 	.word	0x42480000
 8002ab0:	42960000 	.word	0x42960000
 8002ab4:	42c80000 	.word	0x42c80000
 8002ab8:	43480000 	.word	0x43480000

08002abc <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8002ac8:	edd7 7a00 	vldr	s15, [r7]
 8002acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d801      	bhi.n	8002ade <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e037      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002ade:	edd7 7a00 	vldr	s15, [r7]
 8002ae2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	d801      	bhi.n	8002af4 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e02c      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002af4:	edd7 7a00 	vldr	s15, [r7]
 8002af8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	d801      	bhi.n	8002b0a <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e021      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b0a:	edd7 7a00 	vldr	s15, [r7]
 8002b0e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b94 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8002b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d801      	bhi.n	8002b20 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e016      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b20:	edd7 7a00 	vldr	s15, [r7]
 8002b24:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b98 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8002b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d801      	bhi.n	8002b36 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8002b32:	2305      	movs	r3, #5
 8002b34:	e00b      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b36:	edd7 7a00 	vldr	s15, [r7]
 8002b3a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002b9c <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8002b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b46:	d801      	bhi.n	8002b4c <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8002b48:	2306      	movs	r3, #6
 8002b4a:	e000      	b.n	8002b4e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b4c:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002b4e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3320      	adds	r3, #32
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f987 	bl	8002e6c <lps22hh_data_rate_set>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	e00f      	b.n	8002b8a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0220 	add.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3333      	adds	r3, #51	; 0x33
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 f9c6 	bl	8002f08 <lps22hh_data_rate_get>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e000      	b.n	8002b8a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	42480000 	.word	0x42480000
 8002b98:	42960000 	.word	0x42960000
 8002b9c:	42c80000 	.word	0x42c80000

08002ba0 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8002bac:	edd7 7a00 	vldr	s15, [r7]
 8002bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	d801      	bhi.n	8002bc2 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e037      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002bc2:	edd7 7a00 	vldr	s15, [r7]
 8002bc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d801      	bhi.n	8002bd8 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e02c      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002bd8:	edd7 7a00 	vldr	s15, [r7]
 8002bdc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d801      	bhi.n	8002bee <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e021      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002bee:	edd7 7a00 	vldr	s15, [r7]
 8002bf2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c48 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d801      	bhi.n	8002c04 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8002c00:	2304      	movs	r3, #4
 8002c02:	e016      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c04:	edd7 7a00 	vldr	s15, [r7]
 8002c08:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002c4c <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d801      	bhi.n	8002c1a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e00b      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c1a:	edd7 7a00 	vldr	s15, [r7]
 8002c1e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002c50 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8002c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d801      	bhi.n	8002c30 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e000      	b.n	8002c32 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c30:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	42480000 	.word	0x42480000
 8002c4c:	42960000 	.word	0x42960000
 8002c50:	42c80000 	.word	0x42c80000

08002c54 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d00b      	beq.n	8002c7c <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3320      	adds	r3, #32
 8002c68:	2111      	movs	r1, #17
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fa9d 	bl	80031aa <lps22hh_i3c_interface_set>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	e034      	b.n	8002ce6 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	2110      	movs	r1, #16
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f8f2 	bl	8002e6c <lps22hh_data_rate_set>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	e028      	b.n	8002ce6 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3320      	adds	r3, #32
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa5f 	bl	800315e <lps22hh_lp_bandwidth_set>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e01c      	b.n	8002ce6 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8b4 	bl	8002e20 <lps22hh_block_data_update_set>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e010      	b.n	8002ce6 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fa21 	bl	8003112 <lps22hh_auto_increment_set>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e004      	b.n	8002ce6 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cee:	b590      	push	{r4, r7, lr}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	72fb      	strb	r3, [r7, #11]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	695c      	ldr	r4, [r3, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	7b1b      	ldrb	r3, [r3, #12]
 8002d0e:	b298      	uxth	r0, r3
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	b299      	uxth	r1, r3
 8002d14:	893b      	ldrh	r3, [r7, #8]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	47a0      	blx	r4
 8002d1a:	4603      	mov	r3, r0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	72fb      	strb	r3, [r7, #11]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	691c      	ldr	r4, [r3, #16]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	7b1b      	ldrb	r3, [r3, #12]
 8002d44:	b298      	uxth	r0, r3
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	893b      	ldrh	r3, [r7, #8]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	47a0      	blx	r4
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}

08002d5a <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002d5a:	b590      	push	{r4, r7, lr}
 8002d5c:	b087      	sub	sp, #28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	461a      	mov	r2, r3
 8002d66:	460b      	mov	r3, r1
 8002d68:	72fb      	strb	r3, [r7, #11]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685c      	ldr	r4, [r3, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68d8      	ldr	r0, [r3, #12]
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	7af9      	ldrb	r1, [r7, #11]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	47a0      	blx	r4
 8002d7e:	6178      	str	r0, [r7, #20]

  return ret;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002d8a:	b590      	push	{r4, r7, lr}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	461a      	mov	r2, r3
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681c      	ldr	r4, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68d8      	ldr	r0, [r3, #12]
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	7af9      	ldrb	r1, [r7, #11]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	47a0      	blx	r4
 8002dae:	6178      	str	r0, [r7, #20]

  return ret;
 8002db0:	697b      	ldr	r3, [r7, #20]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
	...

08002dbc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002de8 <lps22hh_from_lsb_to_hpa+0x2c>
 8002dd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002dd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	49800000 	.word	0x49800000

08002dec <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8002df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e02:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002e1c <lps22hh_from_lsb_to_celsius+0x30>
 8002e06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e0a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	42c80000 	.word	0x42c80000

08002e20 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e2c:	f107 0208 	add.w	r2, r7, #8
 8002e30:	2301      	movs	r3, #1
 8002e32:	2110      	movs	r1, #16
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff90 	bl	8002d5a <lps22hh_read_reg>
 8002e3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	7a3b      	ldrb	r3, [r7, #8]
 8002e4c:	f362 0341 	bfi	r3, r2, #1, #1
 8002e50:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e52:	f107 0208 	add.w	r2, r7, #8
 8002e56:	2301      	movs	r3, #1
 8002e58:	2110      	movs	r1, #16
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff95 	bl	8002d8a <lps22hh_write_reg>
 8002e60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002e78:	f107 0210 	add.w	r2, r7, #16
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	2110      	movs	r1, #16
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff6a 	bl	8002d5a <lps22hh_read_reg>
 8002e86:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002e8e:	f107 020c 	add.w	r2, r7, #12
 8002e92:	2301      	movs	r3, #1
 8002e94:	2111      	movs	r1, #17
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff5f 	bl	8002d5a <lps22hh_read_reg>
 8002e9c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	7c3b      	ldrb	r3, [r7, #16]
 8002eae:	f362 1306 	bfi	r3, r2, #4, #3
 8002eb2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002eb4:	f107 0210 	add.w	r2, r7, #16
 8002eb8:	2301      	movs	r3, #1
 8002eba:	2110      	movs	r1, #16
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff64 	bl	8002d8a <lps22hh_write_reg>
 8002ec2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	7b3b      	ldrb	r3, [r7, #12]
 8002ed6:	f362 0341 	bfi	r3, r2, #1, #1
 8002eda:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	08db      	lsrs	r3, r3, #3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	7b3b      	ldrb	r3, [r7, #12]
 8002ee8:	f362 0300 	bfi	r3, r2, #0, #1
 8002eec:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002eee:	f107 020c 	add.w	r2, r7, #12
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2111      	movs	r1, #17
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff47 	bl	8002d8a <lps22hh_write_reg>
 8002efc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002f12:	f107 0210 	add.w	r2, r7, #16
 8002f16:	2301      	movs	r3, #1
 8002f18:	2110      	movs	r1, #16
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff1d 	bl	8002d5a <lps22hh_read_reg>
 8002f20:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002f28:	f107 020c 	add.w	r2, r7, #12
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	2111      	movs	r1, #17
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff12 	bl	8002d5a <lps22hh_read_reg>
 8002f36:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 8086 	bne.w	800304c <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002f40:	f107 020c 	add.w	r2, r7, #12
 8002f44:	2301      	movs	r3, #1
 8002f46:	2111      	movs	r1, #17
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff06 	bl	8002d5a <lps22hh_read_reg>
 8002f4e:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002f50:	7b3b      	ldrb	r3, [r7, #12]
 8002f52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	011a      	lsls	r2, r3, #4
 8002f5a:	7b3b      	ldrb	r3, [r7, #12]
 8002f5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8002f66:	7c3a      	ldrb	r2, [r7, #16]
 8002f68:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002f6c:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002f6e:	4413      	add	r3, r2
 8002f70:	2b15      	cmp	r3, #21
 8002f72:	d867      	bhi.n	8003044 <lps22hh_data_rate_get+0x13c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <lps22hh_data_rate_get+0x74>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	08002fed 	.word	0x08002fed
 8002f88:	08002ff5 	.word	0x08002ff5
 8002f8c:	08002ffd 	.word	0x08002ffd
 8002f90:	08003005 	.word	0x08003005
 8002f94:	08003035 	.word	0x08003035
 8002f98:	0800303d 	.word	0x0800303d
 8002f9c:	08002fdd 	.word	0x08002fdd
 8002fa0:	08003045 	.word	0x08003045
 8002fa4:	08003045 	.word	0x08003045
 8002fa8:	08003045 	.word	0x08003045
 8002fac:	08003045 	.word	0x08003045
 8002fb0:	08003045 	.word	0x08003045
 8002fb4:	08003045 	.word	0x08003045
 8002fb8:	08003045 	.word	0x08003045
 8002fbc:	08003045 	.word	0x08003045
 8002fc0:	0800300d 	.word	0x0800300d
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	08003025 	.word	0x08003025
 8002fd0:	0800302d 	.word	0x0800302d
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
        break;
 8002fda:	e037      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	701a      	strb	r2, [r3, #0]
        break;
 8002fe2:	e033      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
        break;
 8002fea:	e02f      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]
        break;
 8002ff2:	e02b      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
        break;
 8002ffa:	e027      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]
        break;
 8003002:	e023      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2205      	movs	r2, #5
 8003008:	701a      	strb	r2, [r3, #0]
        break;
 800300a:	e01f      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2211      	movs	r2, #17
 8003010:	701a      	strb	r2, [r3, #0]
        break;
 8003012:	e01b      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2212      	movs	r2, #18
 8003018:	701a      	strb	r2, [r3, #0]
        break;
 800301a:	e017      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2213      	movs	r2, #19
 8003020:	701a      	strb	r2, [r3, #0]
        break;
 8003022:	e013      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2214      	movs	r2, #20
 8003028:	701a      	strb	r2, [r3, #0]
        break;
 800302a:	e00f      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2215      	movs	r2, #21
 8003030:	701a      	strb	r2, [r3, #0]
        break;
 8003032:	e00b      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2206      	movs	r2, #6
 8003038:	701a      	strb	r2, [r3, #0]
        break;
 800303a:	e007      	b.n	800304c <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2207      	movs	r2, #7
 8003040:	701a      	strb	r2, [r3, #0]
        break;
 8003042:	e003      	b.n	800304c <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
        break;
 800304a:	bf00      	nop
    }
  }

  return ret;
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop

08003058 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003062:	f107 0208 	add.w	r2, r7, #8
 8003066:	2303      	movs	r3, #3
 8003068:	2128      	movs	r1, #40	; 0x28
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe75 	bl	8002d5a <lps22hh_read_reg>
 8003070:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003072:	7abb      	ldrb	r3, [r7, #10]
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	7a7a      	ldrb	r2, [r7, #9]
 8003082:	441a      	add	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	7a3a      	ldrb	r2, [r7, #8]
 8003090:	441a      	add	r2, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	021a      	lsls	r2, r3, #8
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	601a      	str	r2, [r3, #0]

  return ret;
 80030a0:	68fb      	ldr	r3, [r7, #12]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80030b4:	f107 0208 	add.w	r2, r7, #8
 80030b8:	2302      	movs	r3, #2
 80030ba:	212b      	movs	r1, #43	; 0x2b
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fe4c 	bl	8002d5a <lps22hh_read_reg>
 80030c2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80030c4:	7a7b      	ldrb	r3, [r7, #9]
 80030c6:	b21a      	sxth	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	7a3b      	ldrb	r3, [r7, #8]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4413      	add	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b21a      	sxth	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80030fa:	2301      	movs	r3, #1
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	210f      	movs	r1, #15
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fe2a 	bl	8002d5a <lps22hh_read_reg>
 8003106:	60f8      	str	r0, [r7, #12]

  return ret;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800311e:	f107 0208 	add.w	r2, r7, #8
 8003122:	2301      	movs	r3, #1
 8003124:	2111      	movs	r1, #17
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fe17 	bl	8002d5a <lps22hh_read_reg>
 800312c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7a3b      	ldrb	r3, [r7, #8]
 800313e:	f362 1304 	bfi	r3, r2, #4, #1
 8003142:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003144:	f107 0208 	add.w	r2, r7, #8
 8003148:	2301      	movs	r3, #1
 800314a:	2111      	movs	r1, #17
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fe1c 	bl	8002d8a <lps22hh_write_reg>
 8003152:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800316a:	f107 0208 	add.w	r2, r7, #8
 800316e:	2301      	movs	r3, #1
 8003170:	2110      	movs	r1, #16
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fdf1 	bl	8002d5a <lps22hh_read_reg>
 8003178:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10f      	bne.n	80031a0 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	b2da      	uxtb	r2, r3
 8003188:	7a3b      	ldrb	r3, [r7, #8]
 800318a:	f362 0383 	bfi	r3, r2, #2, #2
 800318e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003190:	f107 0208 	add.w	r2, r7, #8
 8003194:	2301      	movs	r3, #1
 8003196:	2110      	movs	r1, #16
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fdf6 	bl	8002d8a <lps22hh_write_reg>
 800319e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80031b6:	f107 0208 	add.w	r2, r7, #8
 80031ba:	2301      	movs	r3, #1
 80031bc:	210e      	movs	r1, #14
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fdcb 	bl	8002d5a <lps22hh_read_reg>
 80031c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d118      	bne.n	80031fe <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	7a3b      	ldrb	r3, [r7, #8]
 80031d6:	f362 0341 	bfi	r3, r2, #1, #1
 80031da:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	7a3b      	ldrb	r3, [r7, #8]
 80031e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80031ec:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80031ee:	f107 0208 	add.w	r2, r7, #8
 80031f2:	2301      	movs	r3, #1
 80031f4:	210e      	movs	r1, #14
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fdc7 	bl	8002d8a <lps22hh_write_reg>
 80031fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e034      	b.n	800328a <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	7b1a      	ldrb	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <STTS751_RegisterBusIO+0x8c>)
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <STTS751_RegisterBusIO+0x90>)
 8003262:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4798      	blx	r3
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	e002      	b.n	800328a <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800372d 	.word	0x0800372d
 8003298:	0800379b 	.word	0x0800379b

0800329c <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d127      	bne.n	80032fe <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3320      	adds	r3, #32
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fc54 	bl	8003b62 <stts751_pin_event_route_set>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e020      	b.n	8003308 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3320      	adds	r3, #32
 80032d2:	2103      	movs	r1, #3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fbb7 	bl	8003a48 <stts751_resolution_set>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
 80032e4:	e010      	b.n	8003308 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fad5 	bl	800389c <stts751_temp_data_rate_set>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	e004      	b.n	8003308 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f877 	bl	8003416 <STTS751_TEMP_Disable>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e004      	b.n	800333e <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3320      	adds	r3, #32
 8003354:	f107 020c 	add.w	r2, r7, #12
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fc27 	bl	8003bae <stts751_device_id_get>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e003      	b.n	8003374 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800336c:	7b7a      	ldrb	r2, [r7, #13]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2200      	movs	r2, #0
 800338a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80033b2:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e012      	b.n	800340e <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80033ee:	eeb0 0a67 	vmov.f32	s0, s15
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8b6 	bl	8003564 <STTS751_TEMP_SetOutputDataRate>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e004      	b.n	800340e <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e01c      	b.n	8003466 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3334      	adds	r3, #52	; 0x34
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f81c 	bl	8003470 <STTS751_TEMP_GetOutputDataRate>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e010      	b.n	8003466 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3320      	adds	r3, #32
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fa26 	bl	800389c <stts751_temp_data_rate_set>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e004      	b.n	8003466 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3320      	adds	r3, #32
 8003482:	f107 020b 	add.w	r2, r7, #11
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa5d 	bl	8003948 <stts751_temp_data_rate_get>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	e060      	b.n	800355c <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	2b90      	cmp	r3, #144	; 0x90
 800349e:	d021      	beq.n	80034e4 <STTS751_TEMP_GetOutputDataRate+0x74>
 80034a0:	2b90      	cmp	r3, #144	; 0x90
 80034a2:	dc56      	bgt.n	8003552 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	dc1b      	bgt.n	80034e0 <STTS751_TEMP_GetOutputDataRate+0x70>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db52      	blt.n	8003552 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d850      	bhi.n	8003552 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <STTS751_TEMP_GetOutputDataRate+0x48>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034f9 	.word	0x080034f9
 80034c0:	08003503 	.word	0x08003503
 80034c4:	0800350d 	.word	0x0800350d
 80034c8:	08003517 	.word	0x08003517
 80034cc:	08003521 	.word	0x08003521
 80034d0:	0800352b 	.word	0x0800352b
 80034d4:	08003535 	.word	0x08003535
 80034d8:	0800353f 	.word	0x0800353f
 80034dc:	08003549 	.word	0x08003549
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d136      	bne.n	8003552 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
      break;
 80034ec:	e035      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80034f4:	601a      	str	r2, [r3, #0]
      break;
 80034f6:	e030      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80034fe:	601a      	str	r2, [r3, #0]
      break;
 8003500:	e02b      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003508:	601a      	str	r2, [r3, #0]
      break;
 800350a:	e026      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003512:	601a      	str	r2, [r3, #0]
      break;
 8003514:	e021      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800351c:	601a      	str	r2, [r3, #0]
      break;
 800351e:	e01c      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003526:	601a      	str	r2, [r3, #0]
      break;
 8003528:	e017      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003530:	601a      	str	r2, [r3, #0]
      break;
 8003532:	e012      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800353a:	601a      	str	r2, [r3, #0]
      break;
 800353c:	e00d      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8003544:	601a      	str	r2, [r3, #0]
      break;
 8003546:	e008      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800354e:	601a      	str	r2, [r3, #0]
      break;
 8003550:	e003      	b.n	800355a <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	60fb      	str	r3, [r7, #12]
      break;
 8003558:	bf00      	nop
  }

  return ret;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3320      	adds	r3, #32
 8003574:	f107 020e 	add.w	r2, r7, #14
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa8a 	bl	8003a94 <stts751_resolution_get>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e0a5      	b.n	80036d8 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800358c:	edd7 7a00 	vldr	s15, [r7]
 8003590:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003594:	eef4 7a47 	vcmp.f32	s15, s14
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	d10e      	bne.n	80035bc <STTS751_TEMP_SetOutputDataRate+0x58>
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d10b      	bne.n	80035bc <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3320      	adds	r3, #32
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa4c 	bl	8003a48 <stts751_resolution_set>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e08d      	b.n	80036d8 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80035bc:	edd7 7a00 	vldr	s15, [r7]
 80035c0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80036e0 <STTS751_TEMP_SetOutputDataRate+0x17c>
 80035c4:	eef4 7a47 	vcmp.f32	s15, s14
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d111      	bne.n	80035f2 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80035ce:	7bbb      	ldrb	r3, [r7, #14]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d002      	beq.n	80035da <STTS751_TEMP_SetOutputDataRate+0x76>
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10b      	bne.n	80035f2 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3320      	adds	r3, #32
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa31 	bl	8003a48 <stts751_resolution_set>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	e072      	b.n	80036d8 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80035f2:	edd7 7a00 	vldr	s15, [r7]
 80035f6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80036e4 <STTS751_TEMP_SetOutputDataRate+0x180>
 80035fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	d801      	bhi.n	8003608 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8003604:	2300      	movs	r3, #0
 8003606:	e058      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 8003608:	edd7 7a00 	vldr	s15, [r7]
 800360c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d801      	bhi.n	800361e <STTS751_TEMP_SetOutputDataRate+0xba>
 800361a:	2301      	movs	r3, #1
 800361c:	e04d      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 800361e:	edd7 7a00 	vldr	s15, [r7]
 8003622:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	d801      	bhi.n	8003634 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8003630:	2302      	movs	r3, #2
 8003632:	e042      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 8003634:	edd7 7a00 	vldr	s15, [r7]
 8003638:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800363c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	d801      	bhi.n	800364a <STTS751_TEMP_SetOutputDataRate+0xe6>
 8003646:	2303      	movs	r3, #3
 8003648:	e037      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 800364a:	edd7 7a00 	vldr	s15, [r7]
 800364e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	d801      	bhi.n	8003660 <STTS751_TEMP_SetOutputDataRate+0xfc>
 800365c:	2304      	movs	r3, #4
 800365e:	e02c      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 8003660:	edd7 7a00 	vldr	s15, [r7]
 8003664:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d801      	bhi.n	8003676 <STTS751_TEMP_SetOutputDataRate+0x112>
 8003672:	2305      	movs	r3, #5
 8003674:	e021      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 8003676:	edd7 7a00 	vldr	s15, [r7]
 800367a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d801      	bhi.n	800368c <STTS751_TEMP_SetOutputDataRate+0x128>
 8003688:	2306      	movs	r3, #6
 800368a:	e016      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 800368c:	edd7 7a00 	vldr	s15, [r7]
 8003690:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	d801      	bhi.n	80036a2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 800369e:	2307      	movs	r3, #7
 80036a0:	e00b      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 80036a2:	edd7 7a00 	vldr	s15, [r7]
 80036a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80036aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	d801      	bhi.n	80036b8 <STTS751_TEMP_SetOutputDataRate+0x154>
 80036b4:	2308      	movs	r3, #8
 80036b6:	e000      	b.n	80036ba <STTS751_TEMP_SetOutputDataRate+0x156>
 80036b8:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80036ba:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3320      	adds	r3, #32
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f8e9 	bl	800389c <stts751_temp_data_rate_set>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e000      	b.n	80036d8 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	42000000 	.word	0x42000000
 80036e4:	3d800000 	.word	0x3d800000

080036e8 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3320      	adds	r3, #32
 80036f6:	f107 020e 	add.w	r2, r7, #14
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa01 	bl	8003b04 <stts751_temperature_raw_get>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	e00a      	b.n	8003724 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800370e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f8a8 	bl	8003868 <stts751_from_lsb_to_celsius>
 8003718:	eef0 7a40 	vmov.f32	s15, s0
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	461a      	mov	r2, r3
 8003738:	460b      	mov	r3, r1
 800373a:	72fb      	strb	r3, [r7, #11]
 800373c:	4613      	mov	r3, r2
 800373e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11f      	bne.n	8003790 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	83fb      	strh	r3, [r7, #30]
 8003754:	e018      	b.n	8003788 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	695c      	ldr	r4, [r3, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	7b1b      	ldrb	r3, [r3, #12]
 800375e:	b298      	uxth	r0, r3
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	b29a      	uxth	r2, r3
 8003764:	8bfb      	ldrh	r3, [r7, #30]
 8003766:	4413      	add	r3, r2
 8003768:	b299      	uxth	r1, r3
 800376a:	8bfb      	ldrh	r3, [r7, #30]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	441a      	add	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	47a0      	blx	r4
 8003774:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	e007      	b.n	8003792 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8003782:	8bfb      	ldrh	r3, [r7, #30]
 8003784:	3301      	adds	r3, #1
 8003786:	83fb      	strh	r3, [r7, #30]
 8003788:	8bfa      	ldrh	r2, [r7, #30]
 800378a:	893b      	ldrh	r3, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3e2      	bcc.n	8003756 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003790:	69bb      	ldr	r3, [r7, #24]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b089      	sub	sp, #36	; 0x24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	461a      	mov	r2, r3
 80037a6:	460b      	mov	r3, r1
 80037a8:	72fb      	strb	r3, [r7, #11]
 80037aa:	4613      	mov	r3, r2
 80037ac:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11f      	bne.n	80037fe <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	83fb      	strh	r3, [r7, #30]
 80037c2:	e018      	b.n	80037f6 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	691c      	ldr	r4, [r3, #16]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	7b1b      	ldrb	r3, [r3, #12]
 80037cc:	b298      	uxth	r0, r3
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	8bfb      	ldrh	r3, [r7, #30]
 80037d4:	4413      	add	r3, r2
 80037d6:	b299      	uxth	r1, r3
 80037d8:	8bfb      	ldrh	r3, [r7, #30]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	441a      	add	r2, r3
 80037de:	2301      	movs	r3, #1
 80037e0:	47a0      	blx	r4
 80037e2:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e007      	b.n	8003800 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80037f0:	8bfb      	ldrh	r3, [r7, #30]
 80037f2:	3301      	adds	r3, #1
 80037f4:	83fb      	strh	r3, [r7, #30]
 80037f6:	8bfa      	ldrh	r2, [r7, #30]
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3e2      	bcc.n	80037c4 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80037fe:	69bb      	ldr	r3, [r7, #24]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3724      	adds	r7, #36	; 0x24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	460b      	mov	r3, r1
 8003816:	72fb      	strb	r3, [r7, #11]
 8003818:	4613      	mov	r3, r2
 800381a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685c      	ldr	r4, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68d8      	ldr	r0, [r3, #12]
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	7af9      	ldrb	r1, [r7, #11]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	47a0      	blx	r4
 800382c:	6178      	str	r0, [r7, #20]

  return ret;
 800382e:	697b      	ldr	r3, [r7, #20]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd90      	pop	{r4, r7, pc}

08003838 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	461a      	mov	r2, r3
 8003844:	460b      	mov	r3, r1
 8003846:	72fb      	strb	r3, [r7, #11]
 8003848:	4613      	mov	r3, r2
 800384a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681c      	ldr	r4, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68d8      	ldr	r0, [r3, #12]
 8003854:	893b      	ldrh	r3, [r7, #8]
 8003856:	7af9      	ldrb	r1, [r7, #11]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	47a0      	blx	r4
 800385c:	6178      	str	r0, [r7, #20]

  return ret;
 800385e:	697b      	ldr	r3, [r7, #20]
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003898 <stts751_from_lsb_to_celsius+0x30>
 8003882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003886:	eef0 7a66 	vmov.f32	s15, s13
}
 800388a:	eeb0 0a67 	vmov.f32	s0, s15
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	43800000 	.word	0x43800000

0800389c <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80038a8:	23aa      	movs	r3, #170	; 0xaa
 80038aa:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80038ac:	f107 020c 	add.w	r2, r7, #12
 80038b0:	2301      	movs	r3, #1
 80038b2:	2104      	movs	r1, #4
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffa7 	bl	8003808 <stts751_read_reg>
 80038ba:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	7b3b      	ldrb	r3, [r7, #12]
 80038cc:	f362 0303 	bfi	r3, r2, #0, #4
 80038d0:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80038d2:	f107 020c 	add.w	r2, r7, #12
 80038d6:	2301      	movs	r3, #1
 80038d8:	2104      	movs	r1, #4
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ffac 	bl	8003838 <stts751_write_reg>
 80038e0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80038e8:	f107 0210 	add.w	r2, r7, #16
 80038ec:	2301      	movs	r3, #1
 80038ee:	2103      	movs	r1, #3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff89 	bl	8003808 <stts751_read_reg>
 80038f6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d111      	bne.n	8003922 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	09db      	lsrs	r3, r3, #7
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	7c3b      	ldrb	r3, [r7, #16]
 800390c:	f362 1386 	bfi	r3, r2, #6, #1
 8003910:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8003912:	f107 0210 	add.w	r2, r7, #16
 8003916:	2301      	movs	r3, #1
 8003918:	2103      	movs	r1, #3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff8c 	bl	8003838 <stts751_write_reg>
 8003920:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <stts751_temp_data_rate_set+0xa2>
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2b90      	cmp	r3, #144	; 0x90
 800392c:	d107      	bne.n	800393e <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800392e:	f107 020b 	add.w	r2, r7, #11
 8003932:	2301      	movs	r3, #1
 8003934:	210f      	movs	r1, #15
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff7e 	bl	8003838 <stts751_write_reg>
 800393c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8003952:	f107 0210 	add.w	r2, r7, #16
 8003956:	2301      	movs	r3, #1
 8003958:	2104      	movs	r1, #4
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff54 	bl	8003808 <stts751_read_reg>
 8003960:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003968:	f107 020c 	add.w	r2, r7, #12
 800396c:	2301      	movs	r3, #1
 800396e:	2103      	movs	r1, #3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff49 	bl	8003808 <stts751_read_reg>
 8003976:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8003978:	7b3b      	ldrb	r3, [r7, #12]
 800397a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	01db      	lsls	r3, r3, #7
 8003982:	7c3a      	ldrb	r2, [r7, #16]
 8003984:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	4413      	add	r3, r2
 800398c:	2b90      	cmp	r3, #144	; 0x90
 800398e:	d025      	beq.n	80039dc <stts751_temp_data_rate_get+0x94>
 8003990:	2b90      	cmp	r3, #144	; 0x90
 8003992:	dc4f      	bgt.n	8003a34 <stts751_temp_data_rate_get+0xec>
 8003994:	2b09      	cmp	r3, #9
 8003996:	dc1b      	bgt.n	80039d0 <stts751_temp_data_rate_get+0x88>
 8003998:	2b00      	cmp	r3, #0
 800399a:	db4b      	blt.n	8003a34 <stts751_temp_data_rate_get+0xec>
 800399c:	2b09      	cmp	r3, #9
 800399e:	d849      	bhi.n	8003a34 <stts751_temp_data_rate_get+0xec>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <stts751_temp_data_rate_get+0x60>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039f5 	.word	0x080039f5
 80039b4:	080039fd 	.word	0x080039fd
 80039b8:	08003a05 	.word	0x08003a05
 80039bc:	08003a0d 	.word	0x08003a0d
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003a1d 	.word	0x08003a1d
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	08003a2d 	.word	0x08003a2d
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d12f      	bne.n	8003a34 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	701a      	strb	r2, [r3, #0]
      break;
 80039da:	e02f      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2290      	movs	r2, #144	; 0x90
 80039e0:	701a      	strb	r2, [r3, #0]
      break;
 80039e2:	e02b      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e027      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
      break;
 80039f2:	e023      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2202      	movs	r2, #2
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e01f      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2203      	movs	r2, #3
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	e01b      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2204      	movs	r2, #4
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	e017      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2205      	movs	r2, #5
 8003a10:	701a      	strb	r2, [r3, #0]
      break;
 8003a12:	e013      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2206      	movs	r2, #6
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e00f      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2207      	movs	r2, #7
 8003a20:	701a      	strb	r2, [r3, #0]
      break;
 8003a22:	e00b      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	701a      	strb	r2, [r3, #0]
      break;
 8003a2a:	e007      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2209      	movs	r2, #9
 8003a30:	701a      	strb	r2, [r3, #0]
      break;
 8003a32:	e003      	b.n	8003a3c <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	701a      	strb	r2, [r3, #0]
      break;
 8003a3a:	bf00      	nop
  }

  return ret;
 8003a3c:	697b      	ldr	r3, [r7, #20]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003a54:	f107 0208 	add.w	r2, r7, #8
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fed3 	bl	8003808 <stts751_read_reg>
 8003a62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	f362 0383 	bfi	r3, r2, #2, #2
 8003a78:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003a7a:	f107 0208 	add.w	r2, r7, #8
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2103      	movs	r1, #3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fed8 	bl	8003838 <stts751_write_reg>
 8003a88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003a9e:	f107 0208 	add.w	r2, r7, #8
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	2103      	movs	r1, #3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff feae 	bl	8003808 <stts751_read_reg>
 8003aac:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8003aae:	7a3b      	ldrb	r3, [r7, #8]
 8003ab0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d81a      	bhi.n	8003af0 <stts751_resolution_get+0x5c>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <stts751_resolution_get+0x2c>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003ae9 	.word	0x08003ae9
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
      break;
 8003ad6:	e00f      	b.n	8003af8 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
      break;
 8003ade:	e00b      	b.n	8003af8 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e007      	b.n	8003af8 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
      break;
 8003aee:	e003      	b.n	8003af8 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	bf00      	nop
  }

  return ret;
 8003af8:	68fb      	ldr	r3, [r7, #12]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop

08003b04 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	2301      	movs	r3, #1
 8003b16:	2100      	movs	r1, #0
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fe75 	bl	8003808 <stts751_read_reg>
 8003b1e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8003b26:	f107 0208 	add.w	r2, r7, #8
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fe6a 	bl	8003808 <stts751_read_reg>
 8003b34:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8003b36:	7a7b      	ldrb	r3, [r7, #9]
 8003b38:	b21a      	sxth	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	7a3b      	ldrb	r3, [r7, #8]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b21a      	sxth	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003b6e:	f107 0208 	add.w	r2, r7, #8
 8003b72:	2301      	movs	r3, #1
 8003b74:	2103      	movs	r1, #3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fe46 	bl	8003808 <stts751_read_reg>
 8003b7c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	7a3b      	ldrb	r3, [r7, #8]
 8003b8e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003b92:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003b94:	f107 0208 	add.w	r2, r7, #8
 8003b98:	2301      	movs	r3, #1
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fe4b 	bl	8003838 <stts751_write_reg>
 8003ba2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	21fd      	movs	r1, #253	; 0xfd
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe22 	bl	8003808 <stts751_read_reg>
 8003bc4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	21fe      	movs	r1, #254	; 0xfe
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fe17 	bl	8003808 <stts751_read_reg>
 8003bda:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	2301      	movs	r3, #1
 8003be8:	21ff      	movs	r1, #255	; 0xff
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fe0c 	bl	8003808 <stts751_read_reg>
 8003bf0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d07c      	beq.n	8003d12 <IKS01A3_ENV_SENSOR_Init+0x116>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	f200 80b2 	bhi.w	8003d84 <IKS01A3_ENV_SENSOR_Init+0x188>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <IKS01A3_ENV_SENSOR_Init+0x32>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d039      	beq.n	8003ca0 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8003c2c:	e0aa      	b.n	8003d84 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 f974 	bl	8003f1c <HTS221_0_Probe>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e0df      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003c40:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4970      	ldr	r1, [pc, #448]	; (8003e0c <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c52:	f107 0108 	add.w	r1, r7, #8
 8003c56:	4610      	mov	r0, r2
 8003c58:	4798      	blx	r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003c60:	f06f 0306 	mvn.w	r3, #6
 8003c64:	e0cc      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003c66:	7a3b      	ldrb	r3, [r7, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d103      	bne.n	8003c74 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003c74:	7abb      	ldrb	r3, [r7, #10]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d103      	bne.n	8003c82 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f043 0304 	orr.w	r3, r3, #4
 8003c80:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003c82:	7a7b      	ldrb	r3, [r7, #9]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d103      	bne.n	8003c90 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d17a      	bne.n	8003d8c <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	623b      	str	r3, [r7, #32]
      }
      break;
 8003c9e:	e075      	b.n	8003d8c <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	f000 fa05 	bl	80040b0 <LPS22HH_0_Probe>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	e0a6      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003cb2:	4a55      	ldr	r2, [pc, #340]	; (8003e08 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4953      	ldr	r1, [pc, #332]	; (8003e0c <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003cc4:	f107 0108 	add.w	r1, r7, #8
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4798      	blx	r3
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003cd2:	f06f 0306 	mvn.w	r3, #6
 8003cd6:	e093      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003cd8:	7a3b      	ldrb	r3, [r7, #8]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d103      	bne.n	8003ce6 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003ce6:	7abb      	ldrb	r3, [r7, #10]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d103      	bne.n	8003cf4 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003cf4:	7a7b      	ldrb	r3, [r7, #9]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d103      	bne.n	8003d02 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003d02:	7afb      	ldrb	r3, [r7, #11]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d143      	bne.n	8003d90 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f043 0308 	orr.w	r3, r3, #8
 8003d0e:	623b      	str	r3, [r7, #32]
      }
      break;
 8003d10:	e03e      	b.n	8003d90 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f000 fa98 	bl	8004248 <STTS751_0_Probe>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	e06d      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003d24:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4937      	ldr	r1, [pc, #220]	; (8003e0c <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d36:	f107 0108 	add.w	r1, r7, #8
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4798      	blx	r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003d44:	f06f 0306 	mvn.w	r3, #6
 8003d48:	e05a      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003d4a:	7a3b      	ldrb	r3, [r7, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d103      	bne.n	8003d58 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003d58:	7abb      	ldrb	r3, [r7, #10]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d103      	bne.n	8003d66 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003d66:	7a7b      	ldrb	r3, [r7, #9]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d103      	bne.n	8003d74 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d10c      	bne.n	8003d94 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	623b      	str	r3, [r7, #32]
      }
      break;
 8003d82:	e007      	b.n	8003d94 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003d84:	f06f 0301 	mvn.w	r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003d8a:	e004      	b.n	8003d96 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e002      	b.n	8003d96 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003d94:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	e02f      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	e028      	b.n	8003df8 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	4013      	ands	r3, r2
 8003dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11c      	bne.n	8003dec <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	4013      	ands	r3, r2
 8003db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d116      	bne.n	8003dec <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003dbe:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	4913      	ldr	r1, [pc, #76]	; (8003e14 <IKS01A3_ENV_SENSOR_Init+0x218>)
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	490d      	ldr	r1, [pc, #52]	; (8003e0c <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8003de6:	f06f 0304 	mvn.w	r3, #4
 8003dea:	e009      	b.n	8003e00 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3301      	adds	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d9d3      	bls.n	8003da6 <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200003d4 	.word	0x200003d4
 8003e0c:	20000398 	.word	0x20000398
 8003e10:	20000098 	.word	0x20000098
 8003e14:	200003a4 	.word	0x200003a4

08003e18 <IKS01A3_ENV_SENSOR_Enable>:
  * @param  Instance environmental sensor instance to be used
  * @param  Function Environmental sensor function
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d903      	bls.n	8003e30 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e28:	f06f 0301 	mvn.w	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e026      	b.n	8003e7e <IKS01A3_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <IKS01A3_ENV_SENSOR_Enable+0x70>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d11a      	bne.n	8003e78 <IKS01A3_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <IKS01A3_ENV_SENSOR_Enable+0x74>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	4911      	ldr	r1, [pc, #68]	; (8003e90 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	0092      	lsls	r2, r2, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	490e      	ldr	r1, [pc, #56]	; (8003e94 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <IKS01A3_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e6a:	f06f 0304 	mvn.w	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e005      	b.n	8003e7e <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e002      	b.n	8003e7e <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003e78:	f06f 0301 	mvn.w	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200003e0 	.word	0x200003e0
 8003e8c:	20000098 	.word	0x20000098
 8003e90:	200003a4 	.word	0x200003a4
 8003e94:	20000398 	.word	0x20000398

08003e98 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d903      	bls.n	8003eb2 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003eaa:	f06f 0301 	mvn.w	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e027      	b.n	8003f02 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d11b      	bne.n	8003efc <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8003ec4:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	4911      	ldr	r1, [pc, #68]	; (8003f14 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	490f      	ldr	r1, [pc, #60]	; (8003f18 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4798      	blx	r3
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003eee:	f06f 0304 	mvn.w	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e005      	b.n	8003f02 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e002      	b.n	8003f02 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003efc:	f06f 0301 	mvn.w	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003f02:	697b      	ldr	r3, [r7, #20]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200003e0 	.word	0x200003e0
 8003f10:	20000098 	.word	0x20000098
 8003f14:	200003a4 	.word	0x200003a4
 8003f18:	20000398 	.word	0x20000398

08003f1c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b092      	sub	sp, #72	; 0x48
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003f2c:	23bf      	movs	r3, #191	; 0xbf
 8003f2e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <HTS221_0_Probe+0x15c>)
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <HTS221_0_Probe+0x160>)
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003f3a:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HTS221_0_Probe+0x164>)
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003f3e:	4b51      	ldr	r3, [pc, #324]	; (8004084 <HTS221_0_Probe+0x168>)
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003f42:	4b51      	ldr	r3, [pc, #324]	; (8004088 <HTS221_0_Probe+0x16c>)
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8003f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	484f      	ldr	r0, [pc, #316]	; (800408c <HTS221_0_Probe+0x170>)
 8003f4e:	f7fd fccb 	bl	80018e8 <HTS221_RegisterBusIO>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f58:	f06f 0306 	mvn.w	r3, #6
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5e:	e085      	b.n	800406c <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003f60:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003f64:	4619      	mov	r1, r3
 8003f66:	4849      	ldr	r0, [pc, #292]	; (800408c <HTS221_0_Probe+0x170>)
 8003f68:	f7fd fd47 	bl	80019fa <HTS221_ReadID>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f72:	f06f 0306 	mvn.w	r3, #6
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
 8003f78:	e078      	b.n	800406c <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8003f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7e:	2bbc      	cmp	r3, #188	; 0xbc
 8003f80:	d003      	beq.n	8003f8a <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f82:	f06f 0306 	mvn.w	r3, #6
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44
 8003f88:	e070      	b.n	800406c <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4619      	mov	r1, r3
 8003f90:	483e      	ldr	r0, [pc, #248]	; (800408c <HTS221_0_Probe+0x170>)
 8003f92:	f7fd fd49 	bl	8001a28 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8003f96:	7a3b      	ldrb	r3, [r7, #8]
 8003f98:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8003f9a:	7a7b      	ldrb	r3, [r7, #9]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8003fa0:	7abb      	ldrb	r3, [r7, #10]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8003fac:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HTS221_0_Probe+0x174>)
 8003fae:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8003fb0:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HTS221_0_Probe+0x178>)
 8003fb2:	4a36      	ldr	r2, [pc, #216]	; (800408c <HTS221_0_Probe+0x170>)
 8003fb4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8003fb6:	4b38      	ldr	r3, [pc, #224]	; (8004098 <HTS221_0_Probe+0x17c>)
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HTS221_0_Probe+0x180>)
 8003fba:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11d      	bne.n	8003ffe <HTS221_0_Probe+0xe2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d018      	beq.n	8003ffe <HTS221_0_Probe+0xe2>
 8003fcc:	7a3b      	ldrb	r3, [r7, #8]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d115      	bne.n	8003ffe <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HTS221_0_Probe+0x184>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HTS221_0_Probe+0x188>)
 8003fd8:	4933      	ldr	r1, [pc, #204]	; (80040a8 <HTS221_0_Probe+0x18c>)
 8003fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <HTS221_0_Probe+0x17c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <HTS221_0_Probe+0x178>)
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ff2:	f06f 0304 	mvn.w	r3, #4
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	e001      	b.n	8003ffe <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8003ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11d      	bne.n	8004040 <HTS221_0_Probe+0x124>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d018      	beq.n	8004040 <HTS221_0_Probe+0x124>
 800400e:	7abb      	ldrb	r3, [r7, #10]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d115      	bne.n	8004040 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <HTS221_0_Probe+0x184>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <HTS221_0_Probe+0x188>)
 800401a:	4924      	ldr	r1, [pc, #144]	; (80040ac <HTS221_0_Probe+0x190>)
 800401c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HTS221_0_Probe+0x17c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HTS221_0_Probe+0x178>)
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4610      	mov	r0, r2
 800402c:	4798      	blx	r3
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004034:	f06f 0304 	mvn.w	r3, #4
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
 800403a:	e001      	b.n	8004040 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800403c:	2300      	movs	r3, #0
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8004040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HTS221_0_Probe+0x13a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004050:	f06f 0304 	mvn.w	r3, #4
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HTS221_0_Probe+0x150>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004066:	f06f 0304 	mvn.w	r3, #4
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800406e:	4618      	mov	r0, r3
 8004070:	3748      	adds	r7, #72	; 0x48
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08001425 	.word	0x08001425
 800407c:	08001489 	.word	0x08001489
 8004080:	0800153d 	.word	0x0800153d
 8004084:	080014d9 	.word	0x080014d9
 8004088:	080015a1 	.word	0x080015a1
 800408c:	200003ec 	.word	0x200003ec
 8004090:	200003e0 	.word	0x200003e0
 8004094:	20000398 	.word	0x20000398
 8004098:	200003d4 	.word	0x200003d4
 800409c:	20000004 	.word	0x20000004
 80040a0:	20000098 	.word	0x20000098
 80040a4:	200003a4 	.word	0x200003a4
 80040a8:	20000028 	.word	0x20000028
 80040ac:	20000014 	.word	0x20000014

080040b0 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b092      	sub	sp, #72	; 0x48
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80040c0:	23bb      	movs	r3, #187	; 0xbb
 80040c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80040c6:	4b52      	ldr	r3, [pc, #328]	; (8004210 <LPS22HH_0_Probe+0x160>)
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80040ca:	4b52      	ldr	r3, [pc, #328]	; (8004214 <LPS22HH_0_Probe+0x164>)
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80040ce:	4b52      	ldr	r3, [pc, #328]	; (8004218 <LPS22HH_0_Probe+0x168>)
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <LPS22HH_0_Probe+0x16c>)
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80040d6:	4b52      	ldr	r3, [pc, #328]	; (8004220 <LPS22HH_0_Probe+0x170>)
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80040da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040de:	4619      	mov	r1, r3
 80040e0:	4850      	ldr	r0, [pc, #320]	; (8004224 <LPS22HH_0_Probe+0x174>)
 80040e2:	f7fe fa2b 	bl	800253c <LPS22HH_RegisterBusIO>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80040ec:	f06f 0306 	mvn.w	r3, #6
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
 80040f2:	e087      	b.n	8004204 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80040f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80040f8:	4619      	mov	r1, r3
 80040fa:	484a      	ldr	r0, [pc, #296]	; (8004224 <LPS22HH_0_Probe+0x174>)
 80040fc:	f7fe fac7 	bl	800268e <LPS22HH_ReadID>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004106:	f06f 0306 	mvn.w	r3, #6
 800410a:	647b      	str	r3, [r7, #68]	; 0x44
 800410c:	e07a      	b.n	8004204 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 800410e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004112:	2bb3      	cmp	r3, #179	; 0xb3
 8004114:	d003      	beq.n	800411e <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004116:	f06f 0306 	mvn.w	r3, #6
 800411a:	647b      	str	r3, [r7, #68]	; 0x44
 800411c:	e072      	b.n	8004204 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800411e:	f107 0308 	add.w	r3, r7, #8
 8004122:	4619      	mov	r1, r3
 8004124:	483f      	ldr	r0, [pc, #252]	; (8004224 <LPS22HH_0_Probe+0x174>)
 8004126:	f7fe fac9 	bl	80026bc <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800412a:	7a3b      	ldrb	r3, [r7, #8]
 800412c:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800412e:	7a7b      	ldrb	r3, [r7, #9]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8004134:	7abb      	ldrb	r3, [r7, #10]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8004140:	4a39      	ldr	r2, [pc, #228]	; (8004228 <LPS22HH_0_Probe+0x178>)
 8004142:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8004144:	4b39      	ldr	r3, [pc, #228]	; (800422c <LPS22HH_0_Probe+0x17c>)
 8004146:	4a37      	ldr	r2, [pc, #220]	; (8004224 <LPS22HH_0_Probe+0x174>)
 8004148:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <LPS22HH_0_Probe+0x180>)
 800414c:	4a39      	ldr	r2, [pc, #228]	; (8004234 <LPS22HH_0_Probe+0x184>)
 800414e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11e      	bne.n	8004194 <LPS22HH_0_Probe+0xe4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d019      	beq.n	8004194 <LPS22HH_0_Probe+0xe4>
 8004160:	7a3b      	ldrb	r3, [r7, #8]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d116      	bne.n	8004194 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <LPS22HH_0_Probe+0x188>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a34      	ldr	r2, [pc, #208]	; (800423c <LPS22HH_0_Probe+0x18c>)
 800416c:	3304      	adds	r3, #4
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <LPS22HH_0_Probe+0x190>)
 8004170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8004174:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <LPS22HH_0_Probe+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <LPS22HH_0_Probe+0x17c>)
 800417c:	6852      	ldr	r2, [r2, #4]
 800417e:	4610      	mov	r0, r2
 8004180:	4798      	blx	r3
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004188:	f06f 0304 	mvn.w	r3, #4
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
 800418e:	e001      	b.n	8004194 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004190:	2300      	movs	r3, #0
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8004194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11e      	bne.n	80041d8 <LPS22HH_0_Probe+0x128>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d019      	beq.n	80041d8 <LPS22HH_0_Probe+0x128>
 80041a4:	7a7b      	ldrb	r3, [r7, #9]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d116      	bne.n	80041d8 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <LPS22HH_0_Probe+0x188>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4a23      	ldr	r2, [pc, #140]	; (800423c <LPS22HH_0_Probe+0x18c>)
 80041b0:	3304      	adds	r3, #4
 80041b2:	4924      	ldr	r1, [pc, #144]	; (8004244 <LPS22HH_0_Probe+0x194>)
 80041b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <LPS22HH_0_Probe+0x180>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1b      	ldr	r2, [pc, #108]	; (800422c <LPS22HH_0_Probe+0x17c>)
 80041c0:	6852      	ldr	r2, [r2, #4]
 80041c2:	4610      	mov	r0, r2
 80041c4:	4798      	blx	r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041cc:	f06f 0304 	mvn.w	r3, #4
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	e001      	b.n	80041d8 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80041d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <LPS22HH_0_Probe+0x13e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80041e8:	f06f 0304 	mvn.w	r3, #4
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <LPS22HH_0_Probe+0x154>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80041fe:	f06f 0304 	mvn.w	r3, #4
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004206:	4618      	mov	r0, r3
 8004208:	3748      	adds	r7, #72	; 0x48
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08001425 	.word	0x08001425
 8004214:	08001489 	.word	0x08001489
 8004218:	0800153d 	.word	0x0800153d
 800421c:	080014d9 	.word	0x080014d9
 8004220:	080015a1 	.word	0x080015a1
 8004224:	20000420 	.word	0x20000420
 8004228:	200003e0 	.word	0x200003e0
 800422c:	20000398 	.word	0x20000398
 8004230:	200003d4 	.word	0x200003d4
 8004234:	2000003c 	.word	0x2000003c
 8004238:	20000098 	.word	0x20000098
 800423c:	200003a4 	.word	0x200003a4
 8004240:	20000060 	.word	0x20000060
 8004244:	2000004c 	.word	0x2000004c

08004248 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b092      	sub	sp, #72	; 0x48
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
 8004252:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8004258:	2395      	movs	r3, #149	; 0x95
 800425a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800425e:	4b46      	ldr	r3, [pc, #280]	; (8004378 <STTS751_0_Probe+0x130>)
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004262:	4b46      	ldr	r3, [pc, #280]	; (800437c <STTS751_0_Probe+0x134>)
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004266:	4b46      	ldr	r3, [pc, #280]	; (8004380 <STTS751_0_Probe+0x138>)
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800426a:	4b46      	ldr	r3, [pc, #280]	; (8004384 <STTS751_0_Probe+0x13c>)
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800426e:	4b46      	ldr	r3, [pc, #280]	; (8004388 <STTS751_0_Probe+0x140>)
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8004272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004276:	4619      	mov	r1, r3
 8004278:	4844      	ldr	r0, [pc, #272]	; (800438c <STTS751_0_Probe+0x144>)
 800427a:	f7fe ffc5 	bl	8003208 <STTS751_RegisterBusIO>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004284:	f06f 0306 	mvn.w	r3, #6
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	e070      	b.n	800436e <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800428c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004290:	4619      	mov	r1, r3
 8004292:	483e      	ldr	r0, [pc, #248]	; (800438c <STTS751_0_Probe+0x144>)
 8004294:	f7ff f857 	bl	8003346 <STTS751_ReadID>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800429e:	f06f 0306 	mvn.w	r3, #6
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	e063      	b.n	800436e <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 80042a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042aa:	2b53      	cmp	r3, #83	; 0x53
 80042ac:	d003      	beq.n	80042b6 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042ae:	f06f 0306 	mvn.w	r3, #6
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	e05b      	b.n	800436e <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80042b6:	f107 0308 	add.w	r3, r7, #8
 80042ba:	4619      	mov	r1, r3
 80042bc:	4833      	ldr	r0, [pc, #204]	; (800438c <STTS751_0_Probe+0x144>)
 80042be:	f7ff f85d 	bl	800337c <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80042c2:	7a3b      	ldrb	r3, [r7, #8]
 80042c4:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80042c6:	7a7b      	ldrb	r3, [r7, #9]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80042cc:	7abb      	ldrb	r3, [r7, #10]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80042d8:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <STTS751_0_Probe+0x148>)
 80042da:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <STTS751_0_Probe+0x14c>)
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <STTS751_0_Probe+0x144>)
 80042e0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <STTS751_0_Probe+0x150>)
 80042e4:	4a2d      	ldr	r2, [pc, #180]	; (800439c <STTS751_0_Probe+0x154>)
 80042e6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80042e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11e      	bne.n	800432c <STTS751_0_Probe+0xe4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d019      	beq.n	800432c <STTS751_0_Probe+0xe4>
 80042f8:	7a3b      	ldrb	r3, [r7, #8]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d116      	bne.n	800432c <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80042fe:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <STTS751_0_Probe+0x158>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a28      	ldr	r2, [pc, #160]	; (80043a4 <STTS751_0_Probe+0x15c>)
 8004304:	3308      	adds	r3, #8
 8004306:	4928      	ldr	r1, [pc, #160]	; (80043a8 <STTS751_0_Probe+0x160>)
 8004308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <STTS751_0_Probe+0x150>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a20      	ldr	r2, [pc, #128]	; (8004394 <STTS751_0_Probe+0x14c>)
 8004314:	6892      	ldr	r2, [r2, #8]
 8004316:	4610      	mov	r0, r2
 8004318:	4798      	blx	r3
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004320:	f06f 0304 	mvn.w	r3, #4
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	e001      	b.n	800432c <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004328:	2300      	movs	r3, #0
 800432a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <STTS751_0_Probe+0xfa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800433c:	f06f 0304 	mvn.w	r3, #4
 8004340:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8004342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <STTS751_0_Probe+0x110>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004352:	f06f 0304 	mvn.w	r3, #4
 8004356:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2b00      	cmp	r3, #0
 800435c:	d107      	bne.n	800436e <STTS751_0_Probe+0x126>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004368:	f06f 0304 	mvn.w	r3, #4
 800436c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800436e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004370:	4618      	mov	r0, r3
 8004372:	3748      	adds	r7, #72	; 0x48
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	08001425 	.word	0x08001425
 800437c:	08001489 	.word	0x08001489
 8004380:	0800153d 	.word	0x0800153d
 8004384:	080014d9 	.word	0x080014d9
 8004388:	080015a1 	.word	0x080015a1
 800438c:	20000454 	.word	0x20000454
 8004390:	200003e0 	.word	0x200003e0
 8004394:	20000398 	.word	0x20000398
 8004398:	200003d4 	.word	0x200003d4
 800439c:	20000074 	.word	0x20000074
 80043a0:	20000098 	.word	0x20000098
 80043a4:	200003a4 	.word	0x200003a4
 80043a8:	20000084 	.word	0x20000084

080043ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_Init+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <HAL_Init+0x40>)
 80043b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <HAL_Init+0x40>)
 80043c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	; (80043ec <HAL_Init+0x40>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d4:	2003      	movs	r0, #3
 80043d6:	f000 f92b 	bl	8004630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043da:	2000      	movs	r0, #0
 80043dc:	f000 f808 	bl	80043f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e0:	f7fc ff42 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00

080043f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <HAL_InitTick+0x54>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_InitTick+0x58>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004406:	fbb3 f3f1 	udiv	r3, r3, r1
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f943 	bl	800469a <HAL_SYSTICK_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e00e      	b.n	800443c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d80a      	bhi.n	800443a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004424:	2200      	movs	r2, #0
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f000 f90b 	bl	8004646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004430:	4a06      	ldr	r2, [pc, #24]	; (800444c <HAL_InitTick+0x5c>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000000 	.word	0x20000000
 8004448:	200000c0 	.word	0x200000c0
 800444c:	200000bc 	.word	0x200000bc

08004450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_IncTick+0x20>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_IncTick+0x24>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4413      	add	r3, r2
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_IncTick+0x24>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	200000c0 	.word	0x200000c0
 8004474:	2000048c 	.word	0x2000048c

08004478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_GetTick+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000048c 	.word	0x2000048c

08004490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044ac:	4013      	ands	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	60d3      	str	r3, [r2, #12]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <__NVIC_GetPriorityGrouping+0x18>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f003 0307 	and.w	r3, r3, #7
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	db0b      	blt.n	800451e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	4907      	ldr	r1, [pc, #28]	; (800452c <__NVIC_EnableIRQ+0x38>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2001      	movs	r0, #1
 8004516:	fa00 f202 	lsl.w	r2, r0, r2
 800451a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000e100 	.word	0xe000e100

08004530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	db0a      	blt.n	800455a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	490c      	ldr	r1, [pc, #48]	; (800457c <__NVIC_SetPriority+0x4c>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	440b      	add	r3, r1
 8004554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004558:	e00a      	b.n	8004570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4908      	ldr	r1, [pc, #32]	; (8004580 <__NVIC_SetPriority+0x50>)
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	3b04      	subs	r3, #4
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	440b      	add	r3, r1
 800456e:	761a      	strb	r2, [r3, #24]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000e100 	.word	0xe000e100
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004584:	b480      	push	{r7}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f1c3 0307 	rsb	r3, r3, #7
 800459e:	2b04      	cmp	r3, #4
 80045a0:	bf28      	it	cs
 80045a2:	2304      	movcs	r3, #4
 80045a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3304      	adds	r3, #4
 80045aa:	2b06      	cmp	r3, #6
 80045ac:	d902      	bls.n	80045b4 <NVIC_EncodePriority+0x30>
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3b03      	subs	r3, #3
 80045b2:	e000      	b.n	80045b6 <NVIC_EncodePriority+0x32>
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43da      	mvns	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	401a      	ands	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045cc:	f04f 31ff 	mov.w	r1, #4294967295
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	43d9      	mvns	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	4313      	orrs	r3, r2
         );
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3724      	adds	r7, #36	; 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045fc:	d301      	bcc.n	8004602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fe:	2301      	movs	r3, #1
 8004600:	e00f      	b.n	8004622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <SysTick_Config+0x40>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800460a:	210f      	movs	r1, #15
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	f7ff ff8e 	bl	8004530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <SysTick_Config+0x40>)
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <SysTick_Config+0x40>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	e000e010 	.word	0xe000e010

08004630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff29 	bl	8004490 <__NVIC_SetPriorityGrouping>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004658:	f7ff ff3e 	bl	80044d8 <__NVIC_GetPriorityGrouping>
 800465c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff8e 	bl	8004584 <NVIC_EncodePriority>
 8004668:	4602      	mov	r2, r0
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff5d 	bl	8004530 <__NVIC_SetPriority>
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff31 	bl	80044f4 <__NVIC_EnableIRQ>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ffa2 	bl	80045ec <SysTick_Config>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046c0:	f7ff feda 	bl	8004478 <HAL_GetTick>
 80046c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e052      	b.n	800478a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0216 	bic.w	r2, r2, #22
 80046f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004702:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <HAL_DMA_Abort+0x62>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0208 	bic.w	r2, r2, #8
 8004722:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004734:	e013      	b.n	800475e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004736:	f7ff fe9f 	bl	8004478 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d90c      	bls.n	800475e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e015      	b.n	800478a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e4      	bne.n	8004736 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	223f      	movs	r2, #63	; 0x3f
 8004772:	409a      	lsls	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d004      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e00c      	b.n	80047ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2205      	movs	r2, #5
 80047b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	; 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e159      	b.n	8004aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047f4:	2201      	movs	r2, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	f040 8148 	bne.w	8004aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d005      	beq.n	800482a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004826:	2b02      	cmp	r3, #2
 8004828:	d130      	bne.n	800488c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0201 	and.w	r2, r3, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d017      	beq.n	80048c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d123      	bne.n	800491c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	2203      	movs	r2, #3
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a2 	beq.w	8004aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <HAL_GPIO_Init+0x2e8>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a56      	ldr	r2, [pc, #344]	; (8004ac0 <HAL_GPIO_Init+0x2e8>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b54      	ldr	r3, [pc, #336]	; (8004ac0 <HAL_GPIO_Init+0x2e8>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800497a:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_GPIO_Init+0x2ec>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a49      	ldr	r2, [pc, #292]	; (8004ac8 <HAL_GPIO_Init+0x2f0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_GPIO_Init+0x202>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a48      	ldr	r2, [pc, #288]	; (8004acc <HAL_GPIO_Init+0x2f4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_GPIO_Init+0x1fe>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a47      	ldr	r2, [pc, #284]	; (8004ad0 <HAL_GPIO_Init+0x2f8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00d      	beq.n	80049d2 <HAL_GPIO_Init+0x1fa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a46      	ldr	r2, [pc, #280]	; (8004ad4 <HAL_GPIO_Init+0x2fc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_Init+0x1f6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a45      	ldr	r2, [pc, #276]	; (8004ad8 <HAL_GPIO_Init+0x300>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_GPIO_Init+0x1f2>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e008      	b.n	80049dc <HAL_GPIO_Init+0x204>
 80049ca:	2307      	movs	r3, #7
 80049cc:	e006      	b.n	80049dc <HAL_GPIO_Init+0x204>
 80049ce:	2303      	movs	r3, #3
 80049d0:	e004      	b.n	80049dc <HAL_GPIO_Init+0x204>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e002      	b.n	80049dc <HAL_GPIO_Init+0x204>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_GPIO_Init+0x204>
 80049da:	2300      	movs	r3, #0
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	f002 0203 	and.w	r2, r2, #3
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	4093      	lsls	r3, r2
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ec:	4935      	ldr	r1, [pc, #212]	; (8004ac4 <HAL_GPIO_Init+0x2ec>)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	3302      	adds	r3, #2
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049fa:	4b38      	ldr	r3, [pc, #224]	; (8004adc <HAL_GPIO_Init+0x304>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a24:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a48:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a4e:	4b23      	ldr	r3, [pc, #140]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a72:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a78:	4b18      	ldr	r3, [pc, #96]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	; (8004adc <HAL_GPIO_Init+0x304>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b0f      	cmp	r3, #15
 8004aac:	f67f aea2 	bls.w	80047f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3724      	adds	r7, #36	; 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40013800 	.word	0x40013800
 8004ac8:	40020000 	.word	0x40020000
 8004acc:	40020400 	.word	0x40020400
 8004ad0:	40020800 	.word	0x40020800
 8004ad4:	40020c00 	.word	0x40020c00
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40013c00 	.word	0x40013c00

08004ae0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e0bb      	b.n	8004c74 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004afc:	2201      	movs	r2, #1
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	f040 80ab 	bne.w	8004c6e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b18:	4a5c      	ldr	r2, [pc, #368]	; (8004c8c <HAL_GPIO_DeInit+0x1ac>)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	3302      	adds	r3, #2
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	220f      	movs	r2, #15
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_GPIO_DeInit+0x1b0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d019      	beq.n	8004b76 <HAL_GPIO_DeInit+0x96>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a53      	ldr	r2, [pc, #332]	; (8004c94 <HAL_GPIO_DeInit+0x1b4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_GPIO_DeInit+0x92>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <HAL_GPIO_DeInit+0x1b8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00d      	beq.n	8004b6e <HAL_GPIO_DeInit+0x8e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_GPIO_DeInit+0x1bc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d007      	beq.n	8004b6a <HAL_GPIO_DeInit+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a50      	ldr	r2, [pc, #320]	; (8004ca0 <HAL_GPIO_DeInit+0x1c0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <HAL_GPIO_DeInit+0x86>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e008      	b.n	8004b78 <HAL_GPIO_DeInit+0x98>
 8004b66:	2307      	movs	r3, #7
 8004b68:	e006      	b.n	8004b78 <HAL_GPIO_DeInit+0x98>
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e004      	b.n	8004b78 <HAL_GPIO_DeInit+0x98>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e002      	b.n	8004b78 <HAL_GPIO_DeInit+0x98>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_GPIO_DeInit+0x98>
 8004b76:	2300      	movs	r3, #0
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	f002 0203 	and.w	r2, r2, #3
 8004b7e:	0092      	lsls	r2, r2, #2
 8004b80:	4093      	lsls	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d132      	bne.n	8004bee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b88:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	4944      	ldr	r1, [pc, #272]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b96:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	4941      	ldr	r1, [pc, #260]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ba4:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	493d      	ldr	r1, [pc, #244]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bb2:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	493a      	ldr	r1, [pc, #232]	; (8004ca4 <HAL_GPIO_DeInit+0x1c4>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004bd0:	4a2e      	ldr	r2, [pc, #184]	; (8004c8c <HAL_GPIO_DeInit+0x1ac>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	43da      	mvns	r2, r3
 8004be0:	482a      	ldr	r0, [pc, #168]	; (8004c8c <HAL_GPIO_DeInit+0x1ac>)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	400a      	ands	r2, r1
 8004be8:	3302      	adds	r3, #2
 8004bea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	08da      	lsrs	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3208      	adds	r2, #8
 8004c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	220f      	movs	r2, #15
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	08d2      	lsrs	r2, r2, #3
 8004c24:	4019      	ands	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3208      	adds	r2, #8
 8004c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2103      	movs	r1, #3
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	2101      	movs	r1, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2103      	movs	r1, #3
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	401a      	ands	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3301      	adds	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	f67f af40 	bls.w	8004afc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40013800 	.word	0x40013800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	40020400 	.word	0x40020400
 8004c98:	40020800 	.word	0x40020800
 8004c9c:	40020c00 	.word	0x40020c00
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cbe:	887a      	ldrh	r2, [r7, #2]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc4:	e003      	b.n	8004cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc6:	887b      	ldrh	r3, [r7, #2]
 8004cc8:	041a      	lsls	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	619a      	str	r2, [r3, #24]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e12b      	b.n	8004f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f95d 	bl	8004fc2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d40:	f001 fcbe 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 8004d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a81      	ldr	r2, [pc, #516]	; (8004f50 <HAL_I2C_Init+0x274>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d807      	bhi.n	8004d60 <HAL_I2C_Init+0x84>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a80      	ldr	r2, [pc, #512]	; (8004f54 <HAL_I2C_Init+0x278>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bf94      	ite	ls
 8004d58:	2301      	movls	r3, #1
 8004d5a:	2300      	movhi	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e006      	b.n	8004d6e <HAL_I2C_Init+0x92>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a7d      	ldr	r2, [pc, #500]	; (8004f58 <HAL_I2C_Init+0x27c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	bf94      	ite	ls
 8004d68:	2301      	movls	r3, #1
 8004d6a:	2300      	movhi	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0e7      	b.n	8004f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a78      	ldr	r2, [pc, #480]	; (8004f5c <HAL_I2C_Init+0x280>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0c9b      	lsrs	r3, r3, #18
 8004d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a6a      	ldr	r2, [pc, #424]	; (8004f50 <HAL_I2C_Init+0x274>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d802      	bhi.n	8004db0 <HAL_I2C_Init+0xd4>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3301      	adds	r3, #1
 8004dae:	e009      	b.n	8004dc4 <HAL_I2C_Init+0xe8>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	4a69      	ldr	r2, [pc, #420]	; (8004f60 <HAL_I2C_Init+0x284>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	495c      	ldr	r1, [pc, #368]	; (8004f50 <HAL_I2C_Init+0x274>)
 8004de0:	428b      	cmp	r3, r1
 8004de2:	d819      	bhi.n	8004e18 <HAL_I2C_Init+0x13c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e59      	subs	r1, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004df8:	400b      	ands	r3, r1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_I2C_Init+0x138>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1e59      	subs	r1, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e12:	e051      	b.n	8004eb8 <HAL_I2C_Init+0x1dc>
 8004e14:	2304      	movs	r3, #4
 8004e16:	e04f      	b.n	8004eb8 <HAL_I2C_Init+0x1dc>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d111      	bne.n	8004e44 <HAL_I2C_Init+0x168>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1e58      	subs	r0, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6859      	ldr	r1, [r3, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	440b      	add	r3, r1
 8004e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e012      	b.n	8004e6a <HAL_I2C_Init+0x18e>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1e58      	subs	r0, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	0099      	lsls	r1, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Init+0x196>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e022      	b.n	8004eb8 <HAL_I2C_Init+0x1dc>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10e      	bne.n	8004e98 <HAL_I2C_Init+0x1bc>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1e58      	subs	r0, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	440b      	add	r3, r1
 8004e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	e00f      	b.n	8004eb8 <HAL_I2C_Init+0x1dc>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1e58      	subs	r0, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	0099      	lsls	r1, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	6809      	ldr	r1, [r1, #0]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6911      	ldr	r1, [r2, #16]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	000186a0 	.word	0x000186a0
 8004f54:	001e847f 	.word	0x001e847f
 8004f58:	003d08ff 	.word	0x003d08ff
 8004f5c:	431bde83 	.word	0x431bde83
 8004f60:	10624dd3 	.word	0x10624dd3

08004f64 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e021      	b.n	8004fba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2224      	movs	r2, #36	; 0x24
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f821 	bl	8004fd6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005006:	f7ff fa37 	bl	8004478 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b20      	cmp	r3, #32
 8005016:	f040 80d9 	bne.w	80051cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2319      	movs	r3, #25
 8005020:	2201      	movs	r2, #1
 8005022:	496d      	ldr	r1, [pc, #436]	; (80051d8 <HAL_I2C_Mem_Write+0x1ec>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fca5 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
 8005032:	e0cc      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_I2C_Mem_Write+0x56>
 800503e:	2302      	movs	r3, #2
 8005040:	e0c5      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d007      	beq.n	8005068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2221      	movs	r2, #33	; 0x21
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2240      	movs	r2, #64	; 0x40
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a4d      	ldr	r2, [pc, #308]	; (80051dc <HAL_I2C_Mem_Write+0x1f0>)
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050aa:	88f8      	ldrh	r0, [r7, #6]
 80050ac:	893a      	ldrh	r2, [r7, #8]
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4603      	mov	r3, r0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fadc 	bl	8005678 <I2C_RequestMemoryWrite>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d052      	beq.n	800516c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e081      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fd6a 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00d      	beq.n	80050f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d107      	bne.n	80050f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e06b      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_I2C_Mem_Write+0x180>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d017      	beq.n	800516c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1aa      	bne.n	80050ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fd5d 	bl	8005c38 <I2C_WaitOnBTFFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	2b04      	cmp	r3, #4
 800518a:	d107      	bne.n	800519c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e016      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	00100002 	.word	0x00100002
 80051dc:	ffff0000 	.word	0xffff0000

080051e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	817b      	strh	r3, [r7, #10]
 80051f2:	460b      	mov	r3, r1
 80051f4:	813b      	strh	r3, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051fa:	f7ff f93d 	bl	8004478 <HAL_GetTick>
 80051fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b20      	cmp	r3, #32
 800520a:	f040 8214 	bne.w	8005636 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	2319      	movs	r3, #25
 8005214:	2201      	movs	r2, #1
 8005216:	497b      	ldr	r1, [pc, #492]	; (8005404 <HAL_I2C_Mem_Read+0x224>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fbab 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e207      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_I2C_Mem_Read+0x56>
 8005232:	2302      	movs	r3, #2
 8005234:	e200      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d007      	beq.n	800525c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2222      	movs	r2, #34	; 0x22
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a5b      	ldr	r2, [pc, #364]	; (8005408 <HAL_I2C_Mem_Read+0x228>)
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800529e:	88f8      	ldrh	r0, [r7, #6]
 80052a0:	893a      	ldrh	r2, [r7, #8]
 80052a2:	8979      	ldrh	r1, [r7, #10]
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4603      	mov	r3, r0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa78 	bl	80057a4 <I2C_RequestMemoryRead>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e1bc      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d113      	bne.n	80052ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e190      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d11b      	bne.n	800532e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e170      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b02      	cmp	r3, #2
 8005334:	d11b      	bne.n	800536e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005344:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	e150      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005384:	e144      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	2b03      	cmp	r3, #3
 800538c:	f200 80f1 	bhi.w	8005572 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	2b01      	cmp	r3, #1
 8005396:	d123      	bne.n	80053e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fc93 	bl	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e145      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053de:	e117      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d14e      	bne.n	8005486 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2200      	movs	r2, #0
 80053f0:	4906      	ldr	r1, [pc, #24]	; (800540c <HAL_I2C_Mem_Read+0x22c>)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fabe 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e11a      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
 8005402:	bf00      	nop
 8005404:	00100002 	.word	0x00100002
 8005408:	ffff0000 	.word	0xffff0000
 800540c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005484:	e0c4      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2200      	movs	r2, #0
 800548e:	496c      	ldr	r1, [pc, #432]	; (8005640 <HAL_I2C_Mem_Read+0x460>)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fa6f 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0cb      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2200      	movs	r2, #0
 80054ea:	4955      	ldr	r1, [pc, #340]	; (8005640 <HAL_I2C_Mem_Read+0x460>)
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fa41 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e09d      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005570:	e04e      	b.n	8005610 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fba6 	bl	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e058      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d124      	bne.n	8005610 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d107      	bne.n	80055de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	f47f aeb6 	bne.w	8005386 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e000      	b.n	8005638 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005636:	2302      	movs	r3, #2
  }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3728      	adds	r7, #40	; 0x28
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	00010004 	.word	0x00010004

08005644 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f960 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d103      	bne.n	80056d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e05f      	b.n	8005796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056d6:	897b      	ldrh	r3, [r7, #10]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	6a3a      	ldr	r2, [r7, #32]
 80056ea:	492d      	ldr	r1, [pc, #180]	; (80057a0 <I2C_RequestMemoryWrite+0x128>)
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f9bb 	bl	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e04c      	b.n	8005796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005714:	6a39      	ldr	r1, [r7, #32]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa46 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b04      	cmp	r3, #4
 8005728:	d107      	bne.n	800573a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005738:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e02b      	b.n	8005796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005744:	893b      	ldrh	r3, [r7, #8]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	611a      	str	r2, [r3, #16]
 800574e:	e021      	b.n	8005794 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	b29b      	uxth	r3, r3
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005760:	6a39      	ldr	r1, [r7, #32]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa20 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b04      	cmp	r3, #4
 8005774:	d107      	bne.n	8005786 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005784:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e005      	b.n	8005796 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800578a:	893b      	ldrh	r3, [r7, #8]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	00010002 	.word	0x00010002

080057a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	4608      	mov	r0, r1
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	817b      	strh	r3, [r7, #10]
 80057b6:	460b      	mov	r3, r1
 80057b8:	813b      	strh	r3, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8c2 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005804:	d103      	bne.n	800580e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e0aa      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	4952      	ldr	r1, [pc, #328]	; (8005970 <I2C_RequestMemoryRead+0x1cc>)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f91d 	bl	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e097      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	6a39      	ldr	r1, [r7, #32]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f9a8 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b04      	cmp	r3, #4
 8005864:	d107      	bne.n	8005876 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e076      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d105      	bne.n	800588c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005880:	893b      	ldrh	r3, [r7, #8]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]
 800588a:	e021      	b.n	80058d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6a39      	ldr	r1, [r7, #32]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f982 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d107      	bne.n	80058c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e050      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	6a39      	ldr	r1, [r7, #32]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f967 	bl	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00d      	beq.n	80058fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d107      	bne.n	80058f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e035      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800590a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2200      	movs	r2, #0
 8005914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f82b 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00d      	beq.n	8005940 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005932:	d103      	bne.n	800593c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e013      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005940:	897b      	ldrh	r3, [r7, #10]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	6a3a      	ldr	r2, [r7, #32]
 8005954:	4906      	ldr	r1, [pc, #24]	; (8005970 <I2C_RequestMemoryRead+0x1cc>)
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f886 	bl	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	00010002 	.word	0x00010002

08005974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005984:	e048      	b.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d044      	beq.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fe fd73 	bl	8004478 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d139      	bne.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10d      	bne.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	43da      	mvns	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	e00c      	b.n	80059e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	43da      	mvns	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d116      	bne.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	f043 0220 	orr.w	r2, r3, #32
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e023      	b.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10d      	bne.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	43da      	mvns	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	e00c      	b.n	8005a58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	43da      	mvns	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d093      	beq.n	8005986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a76:	e071      	b.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d123      	bne.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e067      	b.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d041      	beq.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	f7fe fcce 	bl	8004478 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d302      	bcc.n	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d136      	bne.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	0c1b      	lsrs	r3, r3, #16
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d10c      	bne.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	43da      	mvns	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	e00b      	b.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	43da      	mvns	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e021      	b.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10c      	bne.n	8005b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e00b      	b.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	43da      	mvns	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bf14      	ite	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2300      	moveq	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af6d 	bne.w	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bb4:	e034      	b.n	8005c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f8e3 	bl	8005d82 <I2C_IsAcknowledgeFailed>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e034      	b.n	8005c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d028      	beq.n	8005c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fe fc53 	bl	8004478 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d016      	beq.n	8005c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e007      	b.n	8005c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d1c3      	bne.n	8005bb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c44:	e034      	b.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f89b 	bl	8005d82 <I2C_IsAcknowledgeFailed>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e034      	b.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d028      	beq.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7fe fc0b 	bl	8004478 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d016      	beq.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	f043 0220 	orr.w	r2, r3, #32
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e007      	b.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d1c3      	bne.n	8005c46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cd4:	e049      	b.n	8005d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d119      	bne.n	8005d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0210 	mvn.w	r2, #16
 8005cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e030      	b.n	8005d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d18:	f7fe fbae 	bl	8004478 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11d      	bne.n	8005d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d016      	beq.n	8005d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e007      	b.n	8005d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d1ae      	bne.n	8005cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d98:	d11b      	bne.n	8005dd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005da2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e267      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d075      	beq.n	8005eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dfe:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4b85      	ldr	r3, [pc, #532]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d112      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e16:	4b82      	ldr	r3, [pc, #520]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05b      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d157      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e242      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x74>
 8005e46:	4b76      	ldr	r3, [pc, #472]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a75      	ldr	r2, [pc, #468]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b70      	ldr	r3, [pc, #448]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6f      	ldr	r2, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6c      	ldr	r2, [pc, #432]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e78:	4b69      	ldr	r3, [pc, #420]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a68      	ldr	r2, [pc, #416]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b66      	ldr	r3, [pc, #408]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a65      	ldr	r2, [pc, #404]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fe faee 	bl	8004478 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fe faea 	bl	8004478 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e207      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	4b5b      	ldr	r3, [pc, #364]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0xc0>
 8005ebe:	e014      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fada 	bl	8004478 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fe fad6 	bl	8004478 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1f3      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	4b51      	ldr	r3, [pc, #324]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xe8>
 8005ee6:	e000      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d063      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ef6:	4b4a      	ldr	r3, [pc, #296]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b47      	ldr	r3, [pc, #284]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d11c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0e:	4b44      	ldr	r3, [pc, #272]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d116      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	4b41      	ldr	r3, [pc, #260]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e1c7      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f32:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4937      	ldr	r1, [pc, #220]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	e03a      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f50:	4b34      	ldr	r3, [pc, #208]	; (8006024 <HAL_RCC_OscConfig+0x244>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fe fa8f 	bl	8004478 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fe fa8b 	bl	8004478 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1a8      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b28      	ldr	r3, [pc, #160]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4925      	ldr	r1, [pc, #148]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f92:	4b24      	ldr	r3, [pc, #144]	; (8006024 <HAL_RCC_OscConfig+0x244>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe fa6e 	bl	8004478 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fe fa6a 	bl	8004478 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e187      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d036      	beq.n	8006038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <HAL_RCC_OscConfig+0x248>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fe fa4e 	bl	8004478 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe0:	f7fe fa4a 	bl	8004478 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e167      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x200>
 8005ffe:	e01b      	b.n	8006038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCC_OscConfig+0x248>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006006:	f7fe fa37 	bl	8004478 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	e00e      	b.n	800602c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600e:	f7fe fa33 	bl	8004478 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d907      	bls.n	800602c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e150      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
 8006020:	40023800 	.word	0x40023800
 8006024:	42470000 	.word	0x42470000
 8006028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	4b88      	ldr	r3, [pc, #544]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800602e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1ea      	bne.n	800600e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8097 	beq.w	8006174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604a:	4b81      	ldr	r3, [pc, #516]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	4b7d      	ldr	r3, [pc, #500]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	4a7c      	ldr	r2, [pc, #496]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006064:	6413      	str	r3, [r2, #64]	; 0x40
 8006066:	4b7a      	ldr	r3, [pc, #488]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006076:	4b77      	ldr	r3, [pc, #476]	; (8006254 <HAL_RCC_OscConfig+0x474>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d118      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006082:	4b74      	ldr	r3, [pc, #464]	; (8006254 <HAL_RCC_OscConfig+0x474>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a73      	ldr	r2, [pc, #460]	; (8006254 <HAL_RCC_OscConfig+0x474>)
 8006088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608e:	f7fe f9f3 	bl	8004478 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006096:	f7fe f9ef 	bl	8004478 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e10c      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a8:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <HAL_RCC_OscConfig+0x474>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <HAL_RCC_OscConfig+0x2ea>
 80060bc:	4b64      	ldr	r3, [pc, #400]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4a63      	ldr	r2, [pc, #396]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6713      	str	r3, [r2, #112]	; 0x70
 80060c8:	e01c      	b.n	8006104 <HAL_RCC_OscConfig+0x324>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0x30c>
 80060d2:	4b5f      	ldr	r3, [pc, #380]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a5e      	ldr	r2, [pc, #376]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060d8:	f043 0304 	orr.w	r3, r3, #4
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70
 80060de:	4b5c      	ldr	r3, [pc, #368]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	4a5b      	ldr	r2, [pc, #364]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6713      	str	r3, [r2, #112]	; 0x70
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0x324>
 80060ec:	4b58      	ldr	r3, [pc, #352]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	4a57      	ldr	r2, [pc, #348]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6713      	str	r3, [r2, #112]	; 0x70
 80060f8:	4b55      	ldr	r3, [pc, #340]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fc:	4a54      	ldr	r2, [pc, #336]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80060fe:	f023 0304 	bic.w	r3, r3, #4
 8006102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fe f9b4 	bl	8004478 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006112:	e00a      	b.n	800612a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fe f9b0 	bl	8004478 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e0cb      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612a:	4b49      	ldr	r3, [pc, #292]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0ee      	beq.n	8006114 <HAL_RCC_OscConfig+0x334>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006138:	f7fe f99e 	bl	8004478 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fe f99a 	bl	8004478 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0b5      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006156:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ee      	bne.n	8006140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b39      	ldr	r3, [pc, #228]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	4a38      	ldr	r2, [pc, #224]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80a1 	beq.w	80062c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800617e:	4b34      	ldr	r3, [pc, #208]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b08      	cmp	r3, #8
 8006188:	d05c      	beq.n	8006244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d141      	bne.n	8006216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006192:	4b31      	ldr	r3, [pc, #196]	; (8006258 <HAL_RCC_OscConfig+0x478>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fe f96e 	bl	8004478 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fe f96a 	bl	8004478 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e087      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	4b27      	ldr	r3, [pc, #156]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69da      	ldr	r2, [r3, #28]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	3b01      	subs	r3, #1
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	491b      	ldr	r1, [pc, #108]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_RCC_OscConfig+0x478>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ee:	f7fe f943 	bl	8004478 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fe f93f 	bl	8004478 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e05c      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x416>
 8006214:	e054      	b.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006216:	4b10      	ldr	r3, [pc, #64]	; (8006258 <HAL_RCC_OscConfig+0x478>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fe f92c 	bl	8004478 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006224:	f7fe f928 	bl	8004478 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e045      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_RCC_OscConfig+0x470>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
 8006242:	e03d      	b.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e038      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
 8006250:	40023800 	.word	0x40023800
 8006254:	40007000 	.word	0x40007000
 8006258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625c:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <HAL_RCC_OscConfig+0x4ec>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d028      	beq.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d121      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d11a      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006294:	4293      	cmp	r3, r2
 8006296:	d111      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	3b01      	subs	r3, #1
 80062a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d107      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40023800 	.word	0x40023800

080062d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0cc      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b68      	ldr	r3, [pc, #416]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90c      	bls.n	800630c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b65      	ldr	r3, [pc, #404]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b63      	ldr	r3, [pc, #396]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0b8      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b59      	ldr	r3, [pc, #356]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a58      	ldr	r2, [pc, #352]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800632e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800633c:	4b53      	ldr	r3, [pc, #332]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4a52      	ldr	r2, [pc, #328]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006348:	4b50      	ldr	r3, [pc, #320]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	494d      	ldr	r1, [pc, #308]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d044      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b47      	ldr	r3, [pc, #284]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d119      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d003      	beq.n	800638e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3b      	ldr	r3, [pc, #236]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e067      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b37      	ldr	r3, [pc, #220]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4934      	ldr	r1, [pc, #208]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fe f85a 	bl	8004478 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fe f856 	bl	8004478 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2b      	ldr	r3, [pc, #172]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20c      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e032      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4916      	ldr	r1, [pc, #88]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	490e      	ldr	r1, [pc, #56]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006456:	f000 f821 	bl	800649c <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	490a      	ldr	r1, [pc, #40]	; (8006490 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fd ffba 	bl	80043f0 <HAL_InitTick>

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023c00 	.word	0x40023c00
 800648c:	40023800 	.word	0x40023800
 8006490:	0800ab60 	.word	0x0800ab60
 8006494:	20000000 	.word	0x20000000
 8006498:	200000bc 	.word	0x200000bc

0800649c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800649c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a0:	b094      	sub	sp, #80	; 0x50
 80064a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	647b      	str	r3, [r7, #68]	; 0x44
 80064a8:	2300      	movs	r3, #0
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ac:	2300      	movs	r3, #0
 80064ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b4:	4b79      	ldr	r3, [pc, #484]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d00d      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0x40>
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	f200 80e1 	bhi.w	8006688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x34>
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d003      	beq.n	80064d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ce:	e0db      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d0:	4b73      	ldr	r3, [pc, #460]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064d4:	e0db      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d6:	4b73      	ldr	r3, [pc, #460]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80064d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064da:	e0d8      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e6:	4b6d      	ldr	r3, [pc, #436]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f2:	4b6a      	ldr	r3, [pc, #424]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	2200      	movs	r2, #0
 80064fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	633b      	str	r3, [r7, #48]	; 0x30
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	0159      	lsls	r1, r3, #5
 800651c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006520:	0150      	lsls	r0, r2, #5
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4621      	mov	r1, r4
 8006528:	1a51      	subs	r1, r2, r1
 800652a:	6139      	str	r1, [r7, #16]
 800652c:	4629      	mov	r1, r5
 800652e:	eb63 0301 	sbc.w	r3, r3, r1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006540:	4659      	mov	r1, fp
 8006542:	018b      	lsls	r3, r1, #6
 8006544:	4651      	mov	r1, sl
 8006546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800654a:	4651      	mov	r1, sl
 800654c:	018a      	lsls	r2, r1, #6
 800654e:	4651      	mov	r1, sl
 8006550:	ebb2 0801 	subs.w	r8, r2, r1
 8006554:	4659      	mov	r1, fp
 8006556:	eb63 0901 	sbc.w	r9, r3, r1
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800656a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800656e:	4690      	mov	r8, r2
 8006570:	4699      	mov	r9, r3
 8006572:	4623      	mov	r3, r4
 8006574:	eb18 0303 	adds.w	r3, r8, r3
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	462b      	mov	r3, r5
 800657c:	eb49 0303 	adc.w	r3, r9, r3
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800658e:	4629      	mov	r1, r5
 8006590:	024b      	lsls	r3, r1, #9
 8006592:	4621      	mov	r1, r4
 8006594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006598:	4621      	mov	r1, r4
 800659a:	024a      	lsls	r2, r1, #9
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	2200      	movs	r2, #0
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ac:	f7fa fb04 	bl	8000bb8 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4613      	mov	r3, r2
 80065b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b8:	e058      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ba:	4b38      	ldr	r3, [pc, #224]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	099b      	lsrs	r3, r3, #6
 80065c0:	2200      	movs	r2, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	4611      	mov	r1, r2
 80065c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	f04f 0000 	mov.w	r0, #0
 80065dc:	f04f 0100 	mov.w	r1, #0
 80065e0:	0159      	lsls	r1, r3, #5
 80065e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e6:	0150      	lsls	r0, r2, #5
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4641      	mov	r1, r8
 80065ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80065f2:	4649      	mov	r1, r9
 80065f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800660c:	ebb2 040a 	subs.w	r4, r2, sl
 8006610:	eb63 050b 	sbc.w	r5, r3, fp
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	00eb      	lsls	r3, r5, #3
 800661e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006622:	00e2      	lsls	r2, r4, #3
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	4643      	mov	r3, r8
 800662a:	18e3      	adds	r3, r4, r3
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	464b      	mov	r3, r9
 8006630:	eb45 0303 	adc.w	r3, r5, r3
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006642:	4629      	mov	r1, r5
 8006644:	028b      	lsls	r3, r1, #10
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800664c:	4621      	mov	r1, r4
 800664e:	028a      	lsls	r2, r1, #10
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006656:	2200      	movs	r2, #0
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	61fa      	str	r2, [r7, #28]
 800665c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006660:	f7fa faaa 	bl	8000bb8 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800667c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800667e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006686:	e002      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800668a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800668c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006690:	4618      	mov	r0, r3
 8006692:	3750      	adds	r7, #80	; 0x50
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	007a1200 	.word	0x007a1200

080066a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000000 	.word	0x20000000

080066c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066c4:	f7ff fff0 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0a9b      	lsrs	r3, r3, #10
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	; (80066e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	0800ab70 	.word	0x0800ab70

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066ec:	f7ff ffdc 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	0b5b      	lsrs	r3, r3, #13
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	4903      	ldr	r1, [pc, #12]	; (800670c <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40023800 	.word	0x40023800
 800670c:	0800ab70 	.word	0x0800ab70

08006710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e041      	b.n	80067a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fa fdbe 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f000 fa70 	bl	8006c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d001      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e044      	b.n	8006852 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_TIM_Base_Start_IT+0xb0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x6c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f2:	d013      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x6c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <HAL_TIM_Base_Start_IT+0xb4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x6c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a19      	ldr	r2, [pc, #100]	; (8006868 <HAL_TIM_Base_Start_IT+0xb8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x6c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a17      	ldr	r2, [pc, #92]	; (800686c <HAL_TIM_Base_Start_IT+0xbc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x6c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a16      	ldr	r2, [pc, #88]	; (8006870 <HAL_TIM_Base_Start_IT+0xc0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d111      	bne.n	8006840 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b06      	cmp	r3, #6
 800682c:	d010      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683e:	e007      	b.n	8006850 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40014000 	.word	0x40014000

08006874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0202 	mvn.w	r2, #2
 80068a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f999 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f98b 	bl	8006be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f99c 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0204 	mvn.w	r2, #4
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f973 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f965 	bl	8006be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f976 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0208 	mvn.w	r2, #8
 8006940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2204      	movs	r2, #4
 8006946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f94d 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f93f 	bl	8006be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f950 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0210 	mvn.w	r2, #16
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2208      	movs	r2, #8
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f927 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f919 	bl	8006be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f92a 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00c      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0201 	mvn.w	r2, #1
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fa fa6a 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00c      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fab6 	bl	8006f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8fb 	bl	8006c1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0220 	mvn.w	r2, #32
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa88 	bl	8006f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_ConfigClockSource+0x1c>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0b4      	b.n	8006bda <HAL_TIM_ConfigClockSource+0x186>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa8:	d03e      	beq.n	8006b28 <HAL_TIM_ConfigClockSource+0xd4>
 8006aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aae:	f200 8087 	bhi.w	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab6:	f000 8086 	beq.w	8006bc6 <HAL_TIM_ConfigClockSource+0x172>
 8006aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abe:	d87f      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b70      	cmp	r3, #112	; 0x70
 8006ac2:	d01a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xa6>
 8006ac4:	2b70      	cmp	r3, #112	; 0x70
 8006ac6:	d87b      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b60      	cmp	r3, #96	; 0x60
 8006aca:	d050      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x11a>
 8006acc:	2b60      	cmp	r3, #96	; 0x60
 8006ace:	d877      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b50      	cmp	r3, #80	; 0x50
 8006ad2:	d03c      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0xfa>
 8006ad4:	2b50      	cmp	r3, #80	; 0x50
 8006ad6:	d873      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d058      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x13a>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d86f      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d064      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006ae4:	2b30      	cmp	r3, #48	; 0x30
 8006ae6:	d86b      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d060      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d867      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d05c      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d05a      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006af8:	e062      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b0a:	f000 f999 	bl	8006e40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
      break;
 8006b26:	e04f      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	f000 f982 	bl	8006e40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4a:	609a      	str	r2, [r3, #8]
      break;
 8006b4c:	e03c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f000 f8f6 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2150      	movs	r1, #80	; 0x50
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f94f 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 8006b6c:	e02c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f000 f915 	bl	8006daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2160      	movs	r1, #96	; 0x60
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 f93f 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 8006b8c:	e01c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f000 f8d6 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2140      	movs	r1, #64	; 0x40
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 f92f 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f000 f926 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 8006bbe:	e003      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e000      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a3a      	ldr	r2, [pc, #232]	; (8006d30 <TIM_Base_SetConfig+0xfc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00f      	beq.n	8006c6c <TIM_Base_SetConfig+0x38>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d00b      	beq.n	8006c6c <TIM_Base_SetConfig+0x38>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a37      	ldr	r2, [pc, #220]	; (8006d34 <TIM_Base_SetConfig+0x100>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_Base_SetConfig+0x38>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a36      	ldr	r2, [pc, #216]	; (8006d38 <TIM_Base_SetConfig+0x104>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_Base_SetConfig+0x38>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a35      	ldr	r2, [pc, #212]	; (8006d3c <TIM_Base_SetConfig+0x108>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <TIM_Base_SetConfig+0xfc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01b      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8c:	d017      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <TIM_Base_SetConfig+0x100>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a27      	ldr	r2, [pc, #156]	; (8006d38 <TIM_Base_SetConfig+0x104>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00f      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <TIM_Base_SetConfig+0x108>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00b      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <TIM_Base_SetConfig+0x10c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d007      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a24      	ldr	r2, [pc, #144]	; (8006d44 <TIM_Base_SetConfig+0x110>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d003      	beq.n	8006cbe <TIM_Base_SetConfig+0x8a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <TIM_Base_SetConfig+0x114>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d108      	bne.n	8006cd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a0e      	ldr	r2, [pc, #56]	; (8006d30 <TIM_Base_SetConfig+0xfc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d103      	bne.n	8006d04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]
  }
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 030a 	bic.w	r3, r3, #10
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f023 0210 	bic.w	r2, r3, #16
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006de6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	621a      	str	r2, [r3, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f043 0307 	orr.w	r3, r3, #7
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	609a      	str	r2, [r3, #8]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e050      	b.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d018      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee4:	d013      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00e      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d009      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d10c      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40014000 	.word	0x40014000

08006f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e042      	b.n	800701c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa f9ac 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2224      	movs	r2, #36	; 0x24
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fcbb 	bl	8007944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b20      	cmp	r3, #32
 800703c:	d121      	bne.n	8007082 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_UART_Transmit_IT+0x26>
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e01a      	b.n	8007084 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2221      	movs	r2, #33	; 0x21
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800707c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b0ba      	sub	sp, #232	; 0xe8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070bc:	2300      	movs	r3, #0
 80070be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_UART_IRQHandler+0x66>
 80070e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb69 	bl	80077c6 <UART_Receive_IT>
      return;
 80070f4:	e25b      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80de 	beq.w	80072bc <HAL_UART_IRQHandler+0x22c>
 8007100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80d1 	beq.w	80072bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xae>
 8007126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f043 0201 	orr.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_UART_IRQHandler+0xd2>
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	f043 0202 	orr.w	r2, r3, #2
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <HAL_UART_IRQHandler+0xf6>
 800716e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	f043 0204 	orr.w	r2, r3, #4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d011      	beq.n	80071b6 <HAL_UART_IRQHandler+0x126>
 8007192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800719e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	f043 0208 	orr.w	r2, r3, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81f2 	beq.w	80075a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_UART_IRQHandler+0x14e>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 faf4 	bl	80077c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	bf0c      	ite	eq
 80071ec:	2301      	moveq	r3, #1
 80071ee:	2300      	movne	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <HAL_UART_IRQHandler+0x17a>
 8007202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d04f      	beq.n	80072aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9fc 	bl	8007608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d141      	bne.n	80072a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3314      	adds	r3, #20
 8007246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800724a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800724e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1d9      	bne.n	800721e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d013      	beq.n	800729a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	4a7e      	ldr	r2, [pc, #504]	; (8007470 <HAL_UART_IRQHandler+0x3e0>)
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	4618      	mov	r0, r3
 8007280:	f7fd fa87 	bl	8004792 <HAL_DMA_Abort_IT>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	e00e      	b.n	80072b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f99e 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a0:	e00a      	b.n	80072b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f99a 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	e006      	b.n	80072b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f996 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072b6:	e175      	b.n	80075a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b8:	bf00      	nop
    return;
 80072ba:	e173      	b.n	80075a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	f040 814f 	bne.w	8007564 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8148 	beq.w	8007564 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8141 	beq.w	8007564 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	f040 80b6 	bne.w	8007474 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8145 	beq.w	80075a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007326:	429a      	cmp	r2, r3
 8007328:	f080 813e 	bcs.w	80075a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007332:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733e:	f000 8088 	beq.w	8007452 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800735c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800736e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800737a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1d9      	bne.n	8007342 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800739e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3314      	adds	r3, #20
 80073ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e1      	bne.n	800738e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3314      	adds	r3, #20
 80073ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e3      	bne.n	80073ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	330c      	adds	r3, #12
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007422:	f023 0310 	bic.w	r3, r3, #16
 8007426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007434:	65ba      	str	r2, [r7, #88]	; 0x58
 8007436:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800743a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e3      	bne.n	8007410 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd f930 	bl	80046b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2202      	movs	r2, #2
 8007456:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007460:	b29b      	uxth	r3, r3
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	b29b      	uxth	r3, r3
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8c1 	bl	80075f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800746e:	e09b      	b.n	80075a8 <HAL_UART_IRQHandler+0x518>
 8007470:	080076cf 	.word	0x080076cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800747c:	b29b      	uxth	r3, r3
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 808e 	beq.w	80075ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8089 	beq.w	80075ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074be:	647a      	str	r2, [r7, #68]	; 0x44
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e3      	bne.n	800749a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	623b      	str	r3, [r7, #32]
   return(result);
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3314      	adds	r3, #20
 80074f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074f6:	633a      	str	r2, [r7, #48]	; 0x30
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e3      	bne.n	80074d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	60fb      	str	r3, [r7, #12]
   return(result);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0310 	bic.w	r3, r3, #16
 800752e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800753c:	61fa      	str	r2, [r7, #28]
 800753e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	617b      	str	r3, [r7, #20]
   return(result);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f847 	bl	80075f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007562:	e023      	b.n	80075ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <HAL_UART_IRQHandler+0x4f4>
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f8ba 	bl	80076f6 <UART_Transmit_IT>
    return;
 8007582:	e014      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <HAL_UART_IRQHandler+0x51e>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f8fa 	bl	8007796 <UART_EndTransmit_IT>
    return;
 80075a2:	e004      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
    return;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
      return;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
      return;
 80075ac:	bf00      	nop
  }
}
 80075ae:	37e8      	adds	r7, #232	; 0xe8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b095      	sub	sp, #84	; 0x54
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007630:	643a      	str	r2, [r7, #64]	; 0x40
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3314      	adds	r3, #20
 800764a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	61fb      	str	r3, [r7, #28]
   return(result);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	64bb      	str	r3, [r7, #72]	; 0x48
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3314      	adds	r3, #20
 8007662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	2b01      	cmp	r3, #1
 800767e:	d119      	bne.n	80076b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0310 	bic.w	r3, r3, #16
 8007696:	647b      	str	r3, [r7, #68]	; 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a0:	61ba      	str	r2, [r7, #24]
 80076a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e5      	bne.n	8007680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076c2:	bf00      	nop
 80076c4:	3754      	adds	r7, #84	; 0x54
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff ff77 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b21      	cmp	r3, #33	; 0x21
 8007708:	d13e      	bne.n	8007788 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007712:	d114      	bne.n	800773e <UART_Transmit_IT+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d110      	bne.n	800773e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007730:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	621a      	str	r2, [r3, #32]
 800773c:	e008      	b.n	8007750 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6211      	str	r1, [r2, #32]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4619      	mov	r1, r3
 800775e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007772:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007782:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fefc 	bl	80075b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b08c      	sub	sp, #48	; 0x30
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b22      	cmp	r3, #34	; 0x22
 80077d8:	f040 80ae 	bne.w	8007938 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d117      	bne.n	8007816 <UART_Receive_IT+0x50>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d113      	bne.n	8007816 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	b29a      	uxth	r2, r3
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	1c9a      	adds	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	; 0x28
 8007814:	e026      	b.n	8007864 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d007      	beq.n	800783a <UART_Receive_IT+0x74>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <UART_Receive_IT+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e008      	b.n	800785a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007854:	b2da      	uxtb	r2, r3
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4619      	mov	r1, r3
 8007872:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007874:	2b00      	cmp	r3, #0
 8007876:	d15d      	bne.n	8007934 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0220 	bic.w	r2, r2, #32
 8007886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d135      	bne.n	800792a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	613b      	str	r3, [r7, #16]
   return(result);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e4:	623a      	str	r2, [r7, #32]
 80078e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69f9      	ldr	r1, [r7, #28]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e5      	bne.n	80078c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d10a      	bne.n	800791c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fe64 	bl	80075f0 <HAL_UARTEx_RxEventCallback>
 8007928:	e002      	b.n	8007930 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fe4c 	bl	80075c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e002      	b.n	800793a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3730      	adds	r7, #48	; 0x30
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007948:	b0c0      	sub	sp, #256	; 0x100
 800794a:	af00      	add	r7, sp, #0
 800794c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	68d9      	ldr	r1, [r3, #12]
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	ea40 0301 	orr.w	r3, r0, r1
 800796c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	431a      	orrs	r2, r3
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800799c:	f021 010c 	bic.w	r1, r1, #12
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079aa:	430b      	orrs	r3, r1
 80079ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	6999      	ldr	r1, [r3, #24]
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	ea40 0301 	orr.w	r3, r0, r1
 80079ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b8f      	ldr	r3, [pc, #572]	; (8007c10 <UART_SetConfig+0x2cc>)
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d005      	beq.n	80079e4 <UART_SetConfig+0xa0>
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <UART_SetConfig+0x2d0>)
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d104      	bne.n	80079ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fe fe80 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 80079e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079ec:	e003      	b.n	80079f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ee:	f7fe fe67 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 80079f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	f040 810c 	bne.w	8007c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	1891      	adds	r1, r2, r2
 8007a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a1e:	415b      	adcs	r3, r3
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a26:	4621      	mov	r1, r4
 8007a28:	eb12 0801 	adds.w	r8, r2, r1
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	eb43 0901 	adc.w	r9, r3, r1
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a46:	4690      	mov	r8, r2
 8007a48:	4699      	mov	r9, r3
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	eb18 0303 	adds.w	r3, r8, r3
 8007a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a54:	462b      	mov	r3, r5
 8007a56:	eb49 0303 	adc.w	r3, r9, r3
 8007a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a72:	460b      	mov	r3, r1
 8007a74:	18db      	adds	r3, r3, r3
 8007a76:	653b      	str	r3, [r7, #80]	; 0x50
 8007a78:	4613      	mov	r3, r2
 8007a7a:	eb42 0303 	adc.w	r3, r2, r3
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a88:	f7f9 f896 	bl	8000bb8 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b61      	ldr	r3, [pc, #388]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011c      	lsls	r4, r3, #4
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007abc:	4641      	mov	r1, r8
 8007abe:	eb12 0a01 	adds.w	sl, r2, r1
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007adc:	4692      	mov	sl, r2
 8007ade:	469b      	mov	fp, r3
 8007ae0:	4643      	mov	r3, r8
 8007ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aea:	464b      	mov	r3, r9
 8007aec:	eb4b 0303 	adc.w	r3, fp, r3
 8007af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	18db      	adds	r3, r3, r3
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0e:	4613      	mov	r3, r2
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b1e:	f7f9 f84b 	bl	8000bb8 <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	4b3b      	ldr	r3, [pc, #236]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2264      	movs	r2, #100	; 0x64
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	1acb      	subs	r3, r1, r3
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007b40:	fba3 2302 	umull	r2, r3, r3, r2
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b4c:	441c      	add	r4, r3
 8007b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	1891      	adds	r1, r2, r2
 8007b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b70:	4641      	mov	r1, r8
 8007b72:	1851      	adds	r1, r2, r1
 8007b74:	6339      	str	r1, [r7, #48]	; 0x30
 8007b76:	4649      	mov	r1, r9
 8007b78:	414b      	adcs	r3, r1
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b88:	4659      	mov	r1, fp
 8007b8a:	00cb      	lsls	r3, r1, #3
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b92:	4651      	mov	r1, sl
 8007b94:	00ca      	lsls	r2, r1, #3
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	18db      	adds	r3, r3, r3
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bca:	4613      	mov	r3, r2
 8007bcc:	eb42 0303 	adc.w	r3, r2, r3
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bda:	f7f8 ffed 	bl	8000bb8 <__aeabi_uldivmod>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007be4:	fba3 1302 	umull	r1, r3, r3, r2
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	2164      	movs	r1, #100	; 0x64
 8007bec:	fb01 f303 	mul.w	r3, r1, r3
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	3332      	adds	r3, #50	; 0x32
 8007bf6:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	f003 0207 	and.w	r2, r3, #7
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4422      	add	r2, r4
 8007c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c0c:	e106      	b.n	8007e1c <UART_SetConfig+0x4d8>
 8007c0e:	bf00      	nop
 8007c10:	40011000 	.word	0x40011000
 8007c14:	40011400 	.word	0x40011400
 8007c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	1891      	adds	r1, r2, r2
 8007c34:	6239      	str	r1, [r7, #32]
 8007c36:	415b      	adcs	r3, r3
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c3e:	4641      	mov	r1, r8
 8007c40:	1854      	adds	r4, r2, r1
 8007c42:	4649      	mov	r1, r9
 8007c44:	eb43 0501 	adc.w	r5, r3, r1
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	00eb      	lsls	r3, r5, #3
 8007c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c56:	00e2      	lsls	r2, r4, #3
 8007c58:	4614      	mov	r4, r2
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	4643      	mov	r3, r8
 8007c5e:	18e3      	adds	r3, r4, r3
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c64:	464b      	mov	r3, r9
 8007c66:	eb45 0303 	adc.w	r3, r5, r3
 8007c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	008b      	lsls	r3, r1, #2
 8007c8e:	4621      	mov	r1, r4
 8007c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c94:	4621      	mov	r1, r4
 8007c96:	008a      	lsls	r2, r1, #2
 8007c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c9c:	f7f8 ff8c 	bl	8000bb8 <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	011c      	lsls	r4, r3, #4
 8007cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	1891      	adds	r1, r2, r2
 8007cc6:	61b9      	str	r1, [r7, #24]
 8007cc8:	415b      	adcs	r3, r3
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	1851      	adds	r1, r2, r1
 8007cd4:	6139      	str	r1, [r7, #16]
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	414b      	adcs	r3, r1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ce8:	4659      	mov	r1, fp
 8007cea:	00cb      	lsls	r3, r1, #3
 8007cec:	4651      	mov	r1, sl
 8007cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	00ca      	lsls	r2, r1, #3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d04:	464b      	mov	r3, r9
 8007d06:	460a      	mov	r2, r1
 8007d08:	eb42 0303 	adc.w	r3, r2, r3
 8007d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d28:	4649      	mov	r1, r9
 8007d2a:	008b      	lsls	r3, r1, #2
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d32:	4641      	mov	r1, r8
 8007d34:	008a      	lsls	r2, r1, #2
 8007d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d3a:	f7f8 ff3d 	bl	8000bb8 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	4b38      	ldr	r3, [pc, #224]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007d46:	fba3 2301 	umull	r2, r3, r3, r1
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	2264      	movs	r2, #100	; 0x64
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	1acb      	subs	r3, r1, r3
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	3332      	adds	r3, #50	; 0x32
 8007d58:	4a33      	ldr	r2, [pc, #204]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d64:	441c      	add	r4, r3
 8007d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8007d6e:	677a      	str	r2, [r7, #116]	; 0x74
 8007d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	1891      	adds	r1, r2, r2
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	415b      	adcs	r3, r3
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d84:	4641      	mov	r1, r8
 8007d86:	1851      	adds	r1, r2, r1
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	414b      	adcs	r3, r1
 8007d8e:	607b      	str	r3, [r7, #4]
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d9c:	4659      	mov	r1, fp
 8007d9e:	00cb      	lsls	r3, r1, #3
 8007da0:	4651      	mov	r1, sl
 8007da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007da6:	4651      	mov	r1, sl
 8007da8:	00ca      	lsls	r2, r1, #3
 8007daa:	4610      	mov	r0, r2
 8007dac:	4619      	mov	r1, r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	4642      	mov	r2, r8
 8007db2:	189b      	adds	r3, r3, r2
 8007db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007db6:	464b      	mov	r3, r9
 8007db8:	460a      	mov	r2, r1
 8007dba:	eb42 0303 	adc.w	r3, r2, r3
 8007dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8007dca:	667a      	str	r2, [r7, #100]	; 0x64
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dd8:	4649      	mov	r1, r9
 8007dda:	008b      	lsls	r3, r1, #2
 8007ddc:	4641      	mov	r1, r8
 8007dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007de2:	4641      	mov	r1, r8
 8007de4:	008a      	lsls	r2, r1, #2
 8007de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dea:	f7f8 fee5 	bl	8000bb8 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007df4:	fba3 1302 	umull	r1, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	2164      	movs	r1, #100	; 0x64
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	4a08      	ldr	r2, [pc, #32]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f003 020f 	and.w	r2, r3, #15
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4422      	add	r2, r4
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e22:	46bd      	mov	sp, r7
 8007e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e28:	51eb851f 	.word	0x51eb851f

08007e2c <__cvt>:
 8007e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	ec55 4b10 	vmov	r4, r5, d0
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	460e      	mov	r6, r1
 8007e38:	4619      	mov	r1, r3
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e42:	461d      	movlt	r5, r3
 8007e44:	2300      	movge	r3, #0
 8007e46:	232d      	movlt	r3, #45	; 0x2d
 8007e48:	700b      	strb	r3, [r1, #0]
 8007e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e50:	4691      	mov	r9, r2
 8007e52:	f023 0820 	bic.w	r8, r3, #32
 8007e56:	bfbc      	itt	lt
 8007e58:	4622      	movlt	r2, r4
 8007e5a:	4614      	movlt	r4, r2
 8007e5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e60:	d005      	beq.n	8007e6e <__cvt+0x42>
 8007e62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e66:	d100      	bne.n	8007e6a <__cvt+0x3e>
 8007e68:	3601      	adds	r6, #1
 8007e6a:	2102      	movs	r1, #2
 8007e6c:	e000      	b.n	8007e70 <__cvt+0x44>
 8007e6e:	2103      	movs	r1, #3
 8007e70:	ab03      	add	r3, sp, #12
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	ab02      	add	r3, sp, #8
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	ec45 4b10 	vmov	d0, r4, r5
 8007e7c:	4653      	mov	r3, sl
 8007e7e:	4632      	mov	r2, r6
 8007e80:	f000 fe6a 	bl	8008b58 <_dtoa_r>
 8007e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e88:	4607      	mov	r7, r0
 8007e8a:	d102      	bne.n	8007e92 <__cvt+0x66>
 8007e8c:	f019 0f01 	tst.w	r9, #1
 8007e90:	d022      	beq.n	8007ed8 <__cvt+0xac>
 8007e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e96:	eb07 0906 	add.w	r9, r7, r6
 8007e9a:	d110      	bne.n	8007ebe <__cvt+0x92>
 8007e9c:	783b      	ldrb	r3, [r7, #0]
 8007e9e:	2b30      	cmp	r3, #48	; 0x30
 8007ea0:	d10a      	bne.n	8007eb8 <__cvt+0x8c>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eae:	b918      	cbnz	r0, 8007eb8 <__cvt+0x8c>
 8007eb0:	f1c6 0601 	rsb	r6, r6, #1
 8007eb4:	f8ca 6000 	str.w	r6, [sl]
 8007eb8:	f8da 3000 	ldr.w	r3, [sl]
 8007ebc:	4499      	add	r9, r3
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f7f8 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eca:	b108      	cbz	r0, 8007ed0 <__cvt+0xa4>
 8007ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ed0:	2230      	movs	r2, #48	; 0x30
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	454b      	cmp	r3, r9
 8007ed6:	d307      	bcc.n	8007ee8 <__cvt+0xbc>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007edc:	1bdb      	subs	r3, r3, r7
 8007ede:	4638      	mov	r0, r7
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	b004      	add	sp, #16
 8007ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee8:	1c59      	adds	r1, r3, #1
 8007eea:	9103      	str	r1, [sp, #12]
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e7f0      	b.n	8007ed2 <__cvt+0xa6>

08007ef0 <__exponent>:
 8007ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	bfb8      	it	lt
 8007ef8:	4249      	neglt	r1, r1
 8007efa:	f803 2b02 	strb.w	r2, [r3], #2
 8007efe:	bfb4      	ite	lt
 8007f00:	222d      	movlt	r2, #45	; 0x2d
 8007f02:	222b      	movge	r2, #43	; 0x2b
 8007f04:	2909      	cmp	r1, #9
 8007f06:	7042      	strb	r2, [r0, #1]
 8007f08:	dd2a      	ble.n	8007f60 <__exponent+0x70>
 8007f0a:	f10d 0207 	add.w	r2, sp, #7
 8007f0e:	4617      	mov	r7, r2
 8007f10:	260a      	movs	r6, #10
 8007f12:	4694      	mov	ip, r2
 8007f14:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f18:	fb06 1415 	mls	r4, r6, r5, r1
 8007f1c:	3430      	adds	r4, #48	; 0x30
 8007f1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f22:	460c      	mov	r4, r1
 8007f24:	2c63      	cmp	r4, #99	; 0x63
 8007f26:	f102 32ff 	add.w	r2, r2, #4294967295
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	dcf1      	bgt.n	8007f12 <__exponent+0x22>
 8007f2e:	3130      	adds	r1, #48	; 0x30
 8007f30:	f1ac 0402 	sub.w	r4, ip, #2
 8007f34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f38:	1c41      	adds	r1, r0, #1
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	42ba      	cmp	r2, r7
 8007f3e:	d30a      	bcc.n	8007f56 <__exponent+0x66>
 8007f40:	f10d 0209 	add.w	r2, sp, #9
 8007f44:	eba2 020c 	sub.w	r2, r2, ip
 8007f48:	42bc      	cmp	r4, r7
 8007f4a:	bf88      	it	hi
 8007f4c:	2200      	movhi	r2, #0
 8007f4e:	4413      	add	r3, r2
 8007f50:	1a18      	subs	r0, r3, r0
 8007f52:	b003      	add	sp, #12
 8007f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f5e:	e7ed      	b.n	8007f3c <__exponent+0x4c>
 8007f60:	2330      	movs	r3, #48	; 0x30
 8007f62:	3130      	adds	r1, #48	; 0x30
 8007f64:	7083      	strb	r3, [r0, #2]
 8007f66:	70c1      	strb	r1, [r0, #3]
 8007f68:	1d03      	adds	r3, r0, #4
 8007f6a:	e7f1      	b.n	8007f50 <__exponent+0x60>

08007f6c <_printf_float>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	ed2d 8b02 	vpush	{d8}
 8007f74:	b08d      	sub	sp, #52	; 0x34
 8007f76:	460c      	mov	r4, r1
 8007f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	461f      	mov	r7, r3
 8007f80:	4605      	mov	r5, r0
 8007f82:	f000 fce7 	bl	8008954 <_localeconv_r>
 8007f86:	f8d0 a000 	ldr.w	sl, [r0]
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f7f8 f978 	bl	8000280 <strlen>
 8007f90:	2300      	movs	r3, #0
 8007f92:	930a      	str	r3, [sp, #40]	; 0x28
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	f8d8 3000 	ldr.w	r3, [r8]
 8007f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fa0:	3307      	adds	r3, #7
 8007fa2:	f023 0307 	bic.w	r3, r3, #7
 8007fa6:	f103 0208 	add.w	r2, r3, #8
 8007faa:	f8c8 2000 	str.w	r2, [r8]
 8007fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fb6:	9307      	str	r3, [sp, #28]
 8007fb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fbc:	ee08 0a10 	vmov	s16, r0
 8007fc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fc8:	4b9e      	ldr	r3, [pc, #632]	; (8008244 <_printf_float+0x2d8>)
 8007fca:	f04f 32ff 	mov.w	r2, #4294967295
 8007fce:	f7f8 fdb5 	bl	8000b3c <__aeabi_dcmpun>
 8007fd2:	bb88      	cbnz	r0, 8008038 <_printf_float+0xcc>
 8007fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fd8:	4b9a      	ldr	r3, [pc, #616]	; (8008244 <_printf_float+0x2d8>)
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295
 8007fde:	f7f8 fd8f 	bl	8000b00 <__aeabi_dcmple>
 8007fe2:	bb48      	cbnz	r0, 8008038 <_printf_float+0xcc>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fd7e 	bl	8000aec <__aeabi_dcmplt>
 8007ff0:	b110      	cbz	r0, 8007ff8 <_printf_float+0x8c>
 8007ff2:	232d      	movs	r3, #45	; 0x2d
 8007ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff8:	4a93      	ldr	r2, [pc, #588]	; (8008248 <_printf_float+0x2dc>)
 8007ffa:	4b94      	ldr	r3, [pc, #592]	; (800824c <_printf_float+0x2e0>)
 8007ffc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008000:	bf94      	ite	ls
 8008002:	4690      	movls	r8, r2
 8008004:	4698      	movhi	r8, r3
 8008006:	2303      	movs	r3, #3
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	f04f 0900 	mov.w	r9, #0
 8008016:	9700      	str	r7, [sp, #0]
 8008018:	4633      	mov	r3, r6
 800801a:	aa0b      	add	r2, sp, #44	; 0x2c
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f9da 	bl	80083d8 <_printf_common>
 8008024:	3001      	adds	r0, #1
 8008026:	f040 8090 	bne.w	800814a <_printf_float+0x1de>
 800802a:	f04f 30ff 	mov.w	r0, #4294967295
 800802e:	b00d      	add	sp, #52	; 0x34
 8008030:	ecbd 8b02 	vpop	{d8}
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	4640      	mov	r0, r8
 800803e:	4649      	mov	r1, r9
 8008040:	f7f8 fd7c 	bl	8000b3c <__aeabi_dcmpun>
 8008044:	b140      	cbz	r0, 8008058 <_printf_float+0xec>
 8008046:	464b      	mov	r3, r9
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfbc      	itt	lt
 800804c:	232d      	movlt	r3, #45	; 0x2d
 800804e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008052:	4a7f      	ldr	r2, [pc, #508]	; (8008250 <_printf_float+0x2e4>)
 8008054:	4b7f      	ldr	r3, [pc, #508]	; (8008254 <_printf_float+0x2e8>)
 8008056:	e7d1      	b.n	8007ffc <_printf_float+0x90>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800805e:	9206      	str	r2, [sp, #24]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	d13f      	bne.n	80080e4 <_printf_float+0x178>
 8008064:	2306      	movs	r3, #6
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	6861      	ldr	r1, [r4, #4]
 800806c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008070:	2300      	movs	r3, #0
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	ab0a      	add	r3, sp, #40	; 0x28
 8008076:	e9cd b301 	strd	fp, r3, [sp, #4]
 800807a:	ab09      	add	r3, sp, #36	; 0x24
 800807c:	ec49 8b10 	vmov	d0, r8, r9
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	6022      	str	r2, [r4, #0]
 8008084:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008088:	4628      	mov	r0, r5
 800808a:	f7ff fecf 	bl	8007e2c <__cvt>
 800808e:	9b06      	ldr	r3, [sp, #24]
 8008090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008092:	2b47      	cmp	r3, #71	; 0x47
 8008094:	4680      	mov	r8, r0
 8008096:	d108      	bne.n	80080aa <_printf_float+0x13e>
 8008098:	1cc8      	adds	r0, r1, #3
 800809a:	db02      	blt.n	80080a2 <_printf_float+0x136>
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	4299      	cmp	r1, r3
 80080a0:	dd41      	ble.n	8008126 <_printf_float+0x1ba>
 80080a2:	f1ab 0302 	sub.w	r3, fp, #2
 80080a6:	fa5f fb83 	uxtb.w	fp, r3
 80080aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080ae:	d820      	bhi.n	80080f2 <_printf_float+0x186>
 80080b0:	3901      	subs	r1, #1
 80080b2:	465a      	mov	r2, fp
 80080b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080b8:	9109      	str	r1, [sp, #36]	; 0x24
 80080ba:	f7ff ff19 	bl	8007ef0 <__exponent>
 80080be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c0:	1813      	adds	r3, r2, r0
 80080c2:	2a01      	cmp	r2, #1
 80080c4:	4681      	mov	r9, r0
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	dc02      	bgt.n	80080d0 <_printf_float+0x164>
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	07d2      	lsls	r2, r2, #31
 80080ce:	d501      	bpl.n	80080d4 <_printf_float+0x168>
 80080d0:	3301      	adds	r3, #1
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d09c      	beq.n	8008016 <_printf_float+0xaa>
 80080dc:	232d      	movs	r3, #45	; 0x2d
 80080de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e2:	e798      	b.n	8008016 <_printf_float+0xaa>
 80080e4:	9a06      	ldr	r2, [sp, #24]
 80080e6:	2a47      	cmp	r2, #71	; 0x47
 80080e8:	d1be      	bne.n	8008068 <_printf_float+0xfc>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1bc      	bne.n	8008068 <_printf_float+0xfc>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e7b9      	b.n	8008066 <_printf_float+0xfa>
 80080f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080f6:	d118      	bne.n	800812a <_printf_float+0x1be>
 80080f8:	2900      	cmp	r1, #0
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	dd0b      	ble.n	8008116 <_printf_float+0x1aa>
 80080fe:	6121      	str	r1, [r4, #16]
 8008100:	b913      	cbnz	r3, 8008108 <_printf_float+0x19c>
 8008102:	6822      	ldr	r2, [r4, #0]
 8008104:	07d0      	lsls	r0, r2, #31
 8008106:	d502      	bpl.n	800810e <_printf_float+0x1a2>
 8008108:	3301      	adds	r3, #1
 800810a:	440b      	add	r3, r1
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	e7de      	b.n	80080d4 <_printf_float+0x168>
 8008116:	b913      	cbnz	r3, 800811e <_printf_float+0x1b2>
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	07d2      	lsls	r2, r2, #31
 800811c:	d501      	bpl.n	8008122 <_printf_float+0x1b6>
 800811e:	3302      	adds	r3, #2
 8008120:	e7f4      	b.n	800810c <_printf_float+0x1a0>
 8008122:	2301      	movs	r3, #1
 8008124:	e7f2      	b.n	800810c <_printf_float+0x1a0>
 8008126:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800812a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812c:	4299      	cmp	r1, r3
 800812e:	db05      	blt.n	800813c <_printf_float+0x1d0>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	6121      	str	r1, [r4, #16]
 8008134:	07d8      	lsls	r0, r3, #31
 8008136:	d5ea      	bpl.n	800810e <_printf_float+0x1a2>
 8008138:	1c4b      	adds	r3, r1, #1
 800813a:	e7e7      	b.n	800810c <_printf_float+0x1a0>
 800813c:	2900      	cmp	r1, #0
 800813e:	bfd4      	ite	le
 8008140:	f1c1 0202 	rsble	r2, r1, #2
 8008144:	2201      	movgt	r2, #1
 8008146:	4413      	add	r3, r2
 8008148:	e7e0      	b.n	800810c <_printf_float+0x1a0>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	055a      	lsls	r2, r3, #21
 800814e:	d407      	bmi.n	8008160 <_printf_float+0x1f4>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	4642      	mov	r2, r8
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	d12c      	bne.n	80081b8 <_printf_float+0x24c>
 800815e:	e764      	b.n	800802a <_printf_float+0xbe>
 8008160:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008164:	f240 80e0 	bls.w	8008328 <_printf_float+0x3bc>
 8008168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800816c:	2200      	movs	r2, #0
 800816e:	2300      	movs	r3, #0
 8008170:	f7f8 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d034      	beq.n	80081e2 <_printf_float+0x276>
 8008178:	4a37      	ldr	r2, [pc, #220]	; (8008258 <_printf_float+0x2ec>)
 800817a:	2301      	movs	r3, #1
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f af51 	beq.w	800802a <_printf_float+0xbe>
 8008188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800818c:	429a      	cmp	r2, r3
 800818e:	db02      	blt.n	8008196 <_printf_float+0x22a>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07d8      	lsls	r0, r3, #31
 8008194:	d510      	bpl.n	80081b8 <_printf_float+0x24c>
 8008196:	ee18 3a10 	vmov	r3, s16
 800819a:	4652      	mov	r2, sl
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f af41 	beq.w	800802a <_printf_float+0xbe>
 80081a8:	f04f 0800 	mov.w	r8, #0
 80081ac:	f104 091a 	add.w	r9, r4, #26
 80081b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b2:	3b01      	subs	r3, #1
 80081b4:	4543      	cmp	r3, r8
 80081b6:	dc09      	bgt.n	80081cc <_printf_float+0x260>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	f100 8107 	bmi.w	80083ce <_printf_float+0x462>
 80081c0:	68e0      	ldr	r0, [r4, #12]
 80081c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c4:	4298      	cmp	r0, r3
 80081c6:	bfb8      	it	lt
 80081c8:	4618      	movlt	r0, r3
 80081ca:	e730      	b.n	800802e <_printf_float+0xc2>
 80081cc:	2301      	movs	r3, #1
 80081ce:	464a      	mov	r2, r9
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f af27 	beq.w	800802a <_printf_float+0xbe>
 80081dc:	f108 0801 	add.w	r8, r8, #1
 80081e0:	e7e6      	b.n	80081b0 <_printf_float+0x244>
 80081e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dc39      	bgt.n	800825c <_printf_float+0x2f0>
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <_printf_float+0x2ec>)
 80081ea:	2301      	movs	r3, #1
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f af19 	beq.w	800802a <_printf_float+0xbe>
 80081f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d102      	bne.n	8008206 <_printf_float+0x29a>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	07d9      	lsls	r1, r3, #31
 8008204:	d5d8      	bpl.n	80081b8 <_printf_float+0x24c>
 8008206:	ee18 3a10 	vmov	r3, s16
 800820a:	4652      	mov	r2, sl
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f af09 	beq.w	800802a <_printf_float+0xbe>
 8008218:	f04f 0900 	mov.w	r9, #0
 800821c:	f104 0a1a 	add.w	sl, r4, #26
 8008220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008222:	425b      	negs	r3, r3
 8008224:	454b      	cmp	r3, r9
 8008226:	dc01      	bgt.n	800822c <_printf_float+0x2c0>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	e792      	b.n	8008152 <_printf_float+0x1e6>
 800822c:	2301      	movs	r3, #1
 800822e:	4652      	mov	r2, sl
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	47b8      	blx	r7
 8008236:	3001      	adds	r0, #1
 8008238:	f43f aef7 	beq.w	800802a <_printf_float+0xbe>
 800823c:	f109 0901 	add.w	r9, r9, #1
 8008240:	e7ee      	b.n	8008220 <_printf_float+0x2b4>
 8008242:	bf00      	nop
 8008244:	7fefffff 	.word	0x7fefffff
 8008248:	0800ab78 	.word	0x0800ab78
 800824c:	0800ab7c 	.word	0x0800ab7c
 8008250:	0800ab80 	.word	0x0800ab80
 8008254:	0800ab84 	.word	0x0800ab84
 8008258:	0800ab88 	.word	0x0800ab88
 800825c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008260:	429a      	cmp	r2, r3
 8008262:	bfa8      	it	ge
 8008264:	461a      	movge	r2, r3
 8008266:	2a00      	cmp	r2, #0
 8008268:	4691      	mov	r9, r2
 800826a:	dc37      	bgt.n	80082dc <_printf_float+0x370>
 800826c:	f04f 0b00 	mov.w	fp, #0
 8008270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008274:	f104 021a 	add.w	r2, r4, #26
 8008278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	eba3 0309 	sub.w	r3, r3, r9
 8008280:	455b      	cmp	r3, fp
 8008282:	dc33      	bgt.n	80082ec <_printf_float+0x380>
 8008284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008288:	429a      	cmp	r2, r3
 800828a:	db3b      	blt.n	8008304 <_printf_float+0x398>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	07da      	lsls	r2, r3, #31
 8008290:	d438      	bmi.n	8008304 <_printf_float+0x398>
 8008292:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008296:	eba2 0903 	sub.w	r9, r2, r3
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	1ad2      	subs	r2, r2, r3
 800829e:	4591      	cmp	r9, r2
 80082a0:	bfa8      	it	ge
 80082a2:	4691      	movge	r9, r2
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	dc35      	bgt.n	8008316 <_printf_float+0x3aa>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b2:	f104 0a1a 	add.w	sl, r4, #26
 80082b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	eba3 0309 	sub.w	r3, r3, r9
 80082c0:	4543      	cmp	r3, r8
 80082c2:	f77f af79 	ble.w	80081b8 <_printf_float+0x24c>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4652      	mov	r2, sl
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f aeaa 	beq.w	800802a <_printf_float+0xbe>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	e7ec      	b.n	80082b6 <_printf_float+0x34a>
 80082dc:	4613      	mov	r3, r2
 80082de:	4631      	mov	r1, r6
 80082e0:	4642      	mov	r2, r8
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	d1c0      	bne.n	800826c <_printf_float+0x300>
 80082ea:	e69e      	b.n	800802a <_printf_float+0xbe>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	9205      	str	r2, [sp, #20]
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f ae97 	beq.w	800802a <_printf_float+0xbe>
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	f10b 0b01 	add.w	fp, fp, #1
 8008302:	e7b9      	b.n	8008278 <_printf_float+0x30c>
 8008304:	ee18 3a10 	vmov	r3, s16
 8008308:	4652      	mov	r2, sl
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	d1be      	bne.n	8008292 <_printf_float+0x326>
 8008314:	e689      	b.n	800802a <_printf_float+0xbe>
 8008316:	9a05      	ldr	r2, [sp, #20]
 8008318:	464b      	mov	r3, r9
 800831a:	4442      	add	r2, r8
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	d1c1      	bne.n	80082aa <_printf_float+0x33e>
 8008326:	e680      	b.n	800802a <_printf_float+0xbe>
 8008328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832a:	2a01      	cmp	r2, #1
 800832c:	dc01      	bgt.n	8008332 <_printf_float+0x3c6>
 800832e:	07db      	lsls	r3, r3, #31
 8008330:	d53a      	bpl.n	80083a8 <_printf_float+0x43c>
 8008332:	2301      	movs	r3, #1
 8008334:	4642      	mov	r2, r8
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae74 	beq.w	800802a <_printf_float+0xbe>
 8008342:	ee18 3a10 	vmov	r3, s16
 8008346:	4652      	mov	r2, sl
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f ae6b 	beq.w	800802a <_printf_float+0xbe>
 8008354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008358:	2200      	movs	r2, #0
 800835a:	2300      	movs	r3, #0
 800835c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008360:	f7f8 fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008364:	b9d8      	cbnz	r0, 800839e <_printf_float+0x432>
 8008366:	f10a 33ff 	add.w	r3, sl, #4294967295
 800836a:	f108 0201 	add.w	r2, r8, #1
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	d10e      	bne.n	8008396 <_printf_float+0x42a>
 8008378:	e657      	b.n	800802a <_printf_float+0xbe>
 800837a:	2301      	movs	r3, #1
 800837c:	4652      	mov	r2, sl
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f ae50 	beq.w	800802a <_printf_float+0xbe>
 800838a:	f108 0801 	add.w	r8, r8, #1
 800838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008390:	3b01      	subs	r3, #1
 8008392:	4543      	cmp	r3, r8
 8008394:	dcf1      	bgt.n	800837a <_printf_float+0x40e>
 8008396:	464b      	mov	r3, r9
 8008398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800839c:	e6da      	b.n	8008154 <_printf_float+0x1e8>
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	f104 0a1a 	add.w	sl, r4, #26
 80083a6:	e7f2      	b.n	800838e <_printf_float+0x422>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4642      	mov	r2, r8
 80083ac:	e7df      	b.n	800836e <_printf_float+0x402>
 80083ae:	2301      	movs	r3, #1
 80083b0:	464a      	mov	r2, r9
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f ae36 	beq.w	800802a <_printf_float+0xbe>
 80083be:	f108 0801 	add.w	r8, r8, #1
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083c6:	1a5b      	subs	r3, r3, r1
 80083c8:	4543      	cmp	r3, r8
 80083ca:	dcf0      	bgt.n	80083ae <_printf_float+0x442>
 80083cc:	e6f8      	b.n	80081c0 <_printf_float+0x254>
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	f104 0919 	add.w	r9, r4, #25
 80083d6:	e7f4      	b.n	80083c2 <_printf_float+0x456>

080083d8 <_printf_common>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	4616      	mov	r6, r2
 80083de:	4699      	mov	r9, r3
 80083e0:	688a      	ldr	r2, [r1, #8]
 80083e2:	690b      	ldr	r3, [r1, #16]
 80083e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083e8:	4293      	cmp	r3, r2
 80083ea:	bfb8      	it	lt
 80083ec:	4613      	movlt	r3, r2
 80083ee:	6033      	str	r3, [r6, #0]
 80083f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083f4:	4607      	mov	r7, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b10a      	cbz	r2, 80083fe <_printf_common+0x26>
 80083fa:	3301      	adds	r3, #1
 80083fc:	6033      	str	r3, [r6, #0]
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	0699      	lsls	r1, r3, #26
 8008402:	bf42      	ittt	mi
 8008404:	6833      	ldrmi	r3, [r6, #0]
 8008406:	3302      	addmi	r3, #2
 8008408:	6033      	strmi	r3, [r6, #0]
 800840a:	6825      	ldr	r5, [r4, #0]
 800840c:	f015 0506 	ands.w	r5, r5, #6
 8008410:	d106      	bne.n	8008420 <_printf_common+0x48>
 8008412:	f104 0a19 	add.w	sl, r4, #25
 8008416:	68e3      	ldr	r3, [r4, #12]
 8008418:	6832      	ldr	r2, [r6, #0]
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	42ab      	cmp	r3, r5
 800841e:	dc26      	bgt.n	800846e <_printf_common+0x96>
 8008420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008424:	1e13      	subs	r3, r2, #0
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	bf18      	it	ne
 800842a:	2301      	movne	r3, #1
 800842c:	0692      	lsls	r2, r2, #26
 800842e:	d42b      	bmi.n	8008488 <_printf_common+0xb0>
 8008430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008434:	4649      	mov	r1, r9
 8008436:	4638      	mov	r0, r7
 8008438:	47c0      	blx	r8
 800843a:	3001      	adds	r0, #1
 800843c:	d01e      	beq.n	800847c <_printf_common+0xa4>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	f003 0306 	and.w	r3, r3, #6
 8008446:	2b04      	cmp	r3, #4
 8008448:	bf02      	ittt	eq
 800844a:	68e5      	ldreq	r5, [r4, #12]
 800844c:	6833      	ldreq	r3, [r6, #0]
 800844e:	1aed      	subeq	r5, r5, r3
 8008450:	68a3      	ldr	r3, [r4, #8]
 8008452:	bf0c      	ite	eq
 8008454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008458:	2500      	movne	r5, #0
 800845a:	4293      	cmp	r3, r2
 800845c:	bfc4      	itt	gt
 800845e:	1a9b      	subgt	r3, r3, r2
 8008460:	18ed      	addgt	r5, r5, r3
 8008462:	2600      	movs	r6, #0
 8008464:	341a      	adds	r4, #26
 8008466:	42b5      	cmp	r5, r6
 8008468:	d11a      	bne.n	80084a0 <_printf_common+0xc8>
 800846a:	2000      	movs	r0, #0
 800846c:	e008      	b.n	8008480 <_printf_common+0xa8>
 800846e:	2301      	movs	r3, #1
 8008470:	4652      	mov	r2, sl
 8008472:	4649      	mov	r1, r9
 8008474:	4638      	mov	r0, r7
 8008476:	47c0      	blx	r8
 8008478:	3001      	adds	r0, #1
 800847a:	d103      	bne.n	8008484 <_printf_common+0xac>
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	3501      	adds	r5, #1
 8008486:	e7c6      	b.n	8008416 <_printf_common+0x3e>
 8008488:	18e1      	adds	r1, r4, r3
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	2030      	movs	r0, #48	; 0x30
 800848e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008492:	4422      	add	r2, r4
 8008494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800849c:	3302      	adds	r3, #2
 800849e:	e7c7      	b.n	8008430 <_printf_common+0x58>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4622      	mov	r2, r4
 80084a4:	4649      	mov	r1, r9
 80084a6:	4638      	mov	r0, r7
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d0e6      	beq.n	800847c <_printf_common+0xa4>
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7d9      	b.n	8008466 <_printf_common+0x8e>
	...

080084b4 <_printf_i>:
 80084b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	7e0f      	ldrb	r7, [r1, #24]
 80084ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084bc:	2f78      	cmp	r7, #120	; 0x78
 80084be:	4691      	mov	r9, r2
 80084c0:	4680      	mov	r8, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	469a      	mov	sl, r3
 80084c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ca:	d807      	bhi.n	80084dc <_printf_i+0x28>
 80084cc:	2f62      	cmp	r7, #98	; 0x62
 80084ce:	d80a      	bhi.n	80084e6 <_printf_i+0x32>
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	f000 80d4 	beq.w	800867e <_printf_i+0x1ca>
 80084d6:	2f58      	cmp	r7, #88	; 0x58
 80084d8:	f000 80c0 	beq.w	800865c <_printf_i+0x1a8>
 80084dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084e4:	e03a      	b.n	800855c <_printf_i+0xa8>
 80084e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ea:	2b15      	cmp	r3, #21
 80084ec:	d8f6      	bhi.n	80084dc <_printf_i+0x28>
 80084ee:	a101      	add	r1, pc, #4	; (adr r1, 80084f4 <_printf_i+0x40>)
 80084f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	08008561 	.word	0x08008561
 80084fc:	080084dd 	.word	0x080084dd
 8008500:	080084dd 	.word	0x080084dd
 8008504:	080084dd 	.word	0x080084dd
 8008508:	080084dd 	.word	0x080084dd
 800850c:	08008561 	.word	0x08008561
 8008510:	080084dd 	.word	0x080084dd
 8008514:	080084dd 	.word	0x080084dd
 8008518:	080084dd 	.word	0x080084dd
 800851c:	080084dd 	.word	0x080084dd
 8008520:	08008665 	.word	0x08008665
 8008524:	0800858d 	.word	0x0800858d
 8008528:	0800861f 	.word	0x0800861f
 800852c:	080084dd 	.word	0x080084dd
 8008530:	080084dd 	.word	0x080084dd
 8008534:	08008687 	.word	0x08008687
 8008538:	080084dd 	.word	0x080084dd
 800853c:	0800858d 	.word	0x0800858d
 8008540:	080084dd 	.word	0x080084dd
 8008544:	080084dd 	.word	0x080084dd
 8008548:	08008627 	.word	0x08008627
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	1d1a      	adds	r2, r3, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	602a      	str	r2, [r5, #0]
 8008554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800855c:	2301      	movs	r3, #1
 800855e:	e09f      	b.n	80086a0 <_printf_i+0x1ec>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	682b      	ldr	r3, [r5, #0]
 8008564:	0607      	lsls	r7, r0, #24
 8008566:	f103 0104 	add.w	r1, r3, #4
 800856a:	6029      	str	r1, [r5, #0]
 800856c:	d501      	bpl.n	8008572 <_printf_i+0xbe>
 800856e:	681e      	ldr	r6, [r3, #0]
 8008570:	e003      	b.n	800857a <_printf_i+0xc6>
 8008572:	0646      	lsls	r6, r0, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0xba>
 8008576:	f9b3 6000 	ldrsh.w	r6, [r3]
 800857a:	2e00      	cmp	r6, #0
 800857c:	da03      	bge.n	8008586 <_printf_i+0xd2>
 800857e:	232d      	movs	r3, #45	; 0x2d
 8008580:	4276      	negs	r6, r6
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008586:	485a      	ldr	r0, [pc, #360]	; (80086f0 <_printf_i+0x23c>)
 8008588:	230a      	movs	r3, #10
 800858a:	e012      	b.n	80085b2 <_printf_i+0xfe>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	6029      	str	r1, [r5, #0]
 8008594:	0605      	lsls	r5, r0, #24
 8008596:	d501      	bpl.n	800859c <_printf_i+0xe8>
 8008598:	681e      	ldr	r6, [r3, #0]
 800859a:	e002      	b.n	80085a2 <_printf_i+0xee>
 800859c:	0641      	lsls	r1, r0, #25
 800859e:	d5fb      	bpl.n	8008598 <_printf_i+0xe4>
 80085a0:	881e      	ldrh	r6, [r3, #0]
 80085a2:	4853      	ldr	r0, [pc, #332]	; (80086f0 <_printf_i+0x23c>)
 80085a4:	2f6f      	cmp	r7, #111	; 0x6f
 80085a6:	bf0c      	ite	eq
 80085a8:	2308      	moveq	r3, #8
 80085aa:	230a      	movne	r3, #10
 80085ac:	2100      	movs	r1, #0
 80085ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085b2:	6865      	ldr	r5, [r4, #4]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	bfa2      	ittt	ge
 80085ba:	6821      	ldrge	r1, [r4, #0]
 80085bc:	f021 0104 	bicge.w	r1, r1, #4
 80085c0:	6021      	strge	r1, [r4, #0]
 80085c2:	b90e      	cbnz	r6, 80085c8 <_printf_i+0x114>
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	d04b      	beq.n	8008660 <_printf_i+0x1ac>
 80085c8:	4615      	mov	r5, r2
 80085ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80085ce:	fb03 6711 	mls	r7, r3, r1, r6
 80085d2:	5dc7      	ldrb	r7, [r0, r7]
 80085d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085d8:	4637      	mov	r7, r6
 80085da:	42bb      	cmp	r3, r7
 80085dc:	460e      	mov	r6, r1
 80085de:	d9f4      	bls.n	80085ca <_printf_i+0x116>
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d10b      	bne.n	80085fc <_printf_i+0x148>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	07de      	lsls	r6, r3, #31
 80085e8:	d508      	bpl.n	80085fc <_printf_i+0x148>
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6861      	ldr	r1, [r4, #4]
 80085ee:	4299      	cmp	r1, r3
 80085f0:	bfde      	ittt	le
 80085f2:	2330      	movle	r3, #48	; 0x30
 80085f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085fc:	1b52      	subs	r2, r2, r5
 80085fe:	6122      	str	r2, [r4, #16]
 8008600:	f8cd a000 	str.w	sl, [sp]
 8008604:	464b      	mov	r3, r9
 8008606:	aa03      	add	r2, sp, #12
 8008608:	4621      	mov	r1, r4
 800860a:	4640      	mov	r0, r8
 800860c:	f7ff fee4 	bl	80083d8 <_printf_common>
 8008610:	3001      	adds	r0, #1
 8008612:	d14a      	bne.n	80086aa <_printf_i+0x1f6>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	b004      	add	sp, #16
 800861a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	f043 0320 	orr.w	r3, r3, #32
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	4833      	ldr	r0, [pc, #204]	; (80086f4 <_printf_i+0x240>)
 8008628:	2778      	movs	r7, #120	; 0x78
 800862a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6829      	ldr	r1, [r5, #0]
 8008632:	061f      	lsls	r7, r3, #24
 8008634:	f851 6b04 	ldr.w	r6, [r1], #4
 8008638:	d402      	bmi.n	8008640 <_printf_i+0x18c>
 800863a:	065f      	lsls	r7, r3, #25
 800863c:	bf48      	it	mi
 800863e:	b2b6      	uxthmi	r6, r6
 8008640:	07df      	lsls	r7, r3, #31
 8008642:	bf48      	it	mi
 8008644:	f043 0320 	orrmi.w	r3, r3, #32
 8008648:	6029      	str	r1, [r5, #0]
 800864a:	bf48      	it	mi
 800864c:	6023      	strmi	r3, [r4, #0]
 800864e:	b91e      	cbnz	r6, 8008658 <_printf_i+0x1a4>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	f023 0320 	bic.w	r3, r3, #32
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	2310      	movs	r3, #16
 800865a:	e7a7      	b.n	80085ac <_printf_i+0xf8>
 800865c:	4824      	ldr	r0, [pc, #144]	; (80086f0 <_printf_i+0x23c>)
 800865e:	e7e4      	b.n	800862a <_printf_i+0x176>
 8008660:	4615      	mov	r5, r2
 8008662:	e7bd      	b.n	80085e0 <_printf_i+0x12c>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	6826      	ldr	r6, [r4, #0]
 8008668:	6961      	ldr	r1, [r4, #20]
 800866a:	1d18      	adds	r0, r3, #4
 800866c:	6028      	str	r0, [r5, #0]
 800866e:	0635      	lsls	r5, r6, #24
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	d501      	bpl.n	8008678 <_printf_i+0x1c4>
 8008674:	6019      	str	r1, [r3, #0]
 8008676:	e002      	b.n	800867e <_printf_i+0x1ca>
 8008678:	0670      	lsls	r0, r6, #25
 800867a:	d5fb      	bpl.n	8008674 <_printf_i+0x1c0>
 800867c:	8019      	strh	r1, [r3, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	4615      	mov	r5, r2
 8008684:	e7bc      	b.n	8008600 <_printf_i+0x14c>
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	1d1a      	adds	r2, r3, #4
 800868a:	602a      	str	r2, [r5, #0]
 800868c:	681d      	ldr	r5, [r3, #0]
 800868e:	6862      	ldr	r2, [r4, #4]
 8008690:	2100      	movs	r1, #0
 8008692:	4628      	mov	r0, r5
 8008694:	f7f7 fda4 	bl	80001e0 <memchr>
 8008698:	b108      	cbz	r0, 800869e <_printf_i+0x1ea>
 800869a:	1b40      	subs	r0, r0, r5
 800869c:	6060      	str	r0, [r4, #4]
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	2300      	movs	r3, #0
 80086a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a8:	e7aa      	b.n	8008600 <_printf_i+0x14c>
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	462a      	mov	r2, r5
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	47d0      	blx	sl
 80086b4:	3001      	adds	r0, #1
 80086b6:	d0ad      	beq.n	8008614 <_printf_i+0x160>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	079b      	lsls	r3, r3, #30
 80086bc:	d413      	bmi.n	80086e6 <_printf_i+0x232>
 80086be:	68e0      	ldr	r0, [r4, #12]
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	4298      	cmp	r0, r3
 80086c4:	bfb8      	it	lt
 80086c6:	4618      	movlt	r0, r3
 80086c8:	e7a6      	b.n	8008618 <_printf_i+0x164>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4632      	mov	r2, r6
 80086ce:	4649      	mov	r1, r9
 80086d0:	4640      	mov	r0, r8
 80086d2:	47d0      	blx	sl
 80086d4:	3001      	adds	r0, #1
 80086d6:	d09d      	beq.n	8008614 <_printf_i+0x160>
 80086d8:	3501      	adds	r5, #1
 80086da:	68e3      	ldr	r3, [r4, #12]
 80086dc:	9903      	ldr	r1, [sp, #12]
 80086de:	1a5b      	subs	r3, r3, r1
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	dcf2      	bgt.n	80086ca <_printf_i+0x216>
 80086e4:	e7eb      	b.n	80086be <_printf_i+0x20a>
 80086e6:	2500      	movs	r5, #0
 80086e8:	f104 0619 	add.w	r6, r4, #25
 80086ec:	e7f5      	b.n	80086da <_printf_i+0x226>
 80086ee:	bf00      	nop
 80086f0:	0800ab8a 	.word	0x0800ab8a
 80086f4:	0800ab9b 	.word	0x0800ab9b

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	6643      	str	r3, [r0, #100]	; 0x64
 800870c:	81c2      	strh	r2, [r0, #14]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	; 0x5c
 8008716:	f000 f914 	bl	8008942 <memset>
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <std+0x58>)
 800871c:	6263      	str	r3, [r4, #36]	; 0x24
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <std+0x5c>)
 8008720:	62a3      	str	r3, [r4, #40]	; 0x28
 8008722:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <std+0x60>)
 8008724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008726:	4b0d      	ldr	r3, [pc, #52]	; (800875c <std+0x64>)
 8008728:	6323      	str	r3, [r4, #48]	; 0x30
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <std+0x68>)
 800872c:	6224      	str	r4, [r4, #32]
 800872e:	429c      	cmp	r4, r3
 8008730:	d006      	beq.n	8008740 <std+0x48>
 8008732:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008736:	4294      	cmp	r4, r2
 8008738:	d002      	beq.n	8008740 <std+0x48>
 800873a:	33d0      	adds	r3, #208	; 0xd0
 800873c:	429c      	cmp	r4, r3
 800873e:	d105      	bne.n	800874c <std+0x54>
 8008740:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008748:	f000 b978 	b.w	8008a3c <__retarget_lock_init_recursive>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	080088bd 	.word	0x080088bd
 8008754:	080088df 	.word	0x080088df
 8008758:	08008917 	.word	0x08008917
 800875c:	0800893b 	.word	0x0800893b
 8008760:	20000490 	.word	0x20000490

08008764 <stdio_exit_handler>:
 8008764:	4a02      	ldr	r2, [pc, #8]	; (8008770 <stdio_exit_handler+0xc>)
 8008766:	4903      	ldr	r1, [pc, #12]	; (8008774 <stdio_exit_handler+0x10>)
 8008768:	4803      	ldr	r0, [pc, #12]	; (8008778 <stdio_exit_handler+0x14>)
 800876a:	f000 b869 	b.w	8008840 <_fwalk_sglue>
 800876e:	bf00      	nop
 8008770:	200000c4 	.word	0x200000c4
 8008774:	0800a3f1 	.word	0x0800a3f1
 8008778:	200000d0 	.word	0x200000d0

0800877c <cleanup_stdio>:
 800877c:	6841      	ldr	r1, [r0, #4]
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <cleanup_stdio+0x34>)
 8008780:	4299      	cmp	r1, r3
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	d001      	beq.n	800878c <cleanup_stdio+0x10>
 8008788:	f001 fe32 	bl	800a3f0 <_fflush_r>
 800878c:	68a1      	ldr	r1, [r4, #8]
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <cleanup_stdio+0x38>)
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <cleanup_stdio+0x1e>
 8008794:	4620      	mov	r0, r4
 8008796:	f001 fe2b 	bl	800a3f0 <_fflush_r>
 800879a:	68e1      	ldr	r1, [r4, #12]
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <cleanup_stdio+0x3c>)
 800879e:	4299      	cmp	r1, r3
 80087a0:	d004      	beq.n	80087ac <cleanup_stdio+0x30>
 80087a2:	4620      	mov	r0, r4
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f001 be22 	b.w	800a3f0 <_fflush_r>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	20000490 	.word	0x20000490
 80087b4:	200004f8 	.word	0x200004f8
 80087b8:	20000560 	.word	0x20000560

080087bc <global_stdio_init.part.0>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <global_stdio_init.part.0+0x30>)
 80087c0:	4c0b      	ldr	r4, [pc, #44]	; (80087f0 <global_stdio_init.part.0+0x34>)
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <global_stdio_init.part.0+0x38>)
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	4620      	mov	r0, r4
 80087c8:	2200      	movs	r2, #0
 80087ca:	2104      	movs	r1, #4
 80087cc:	f7ff ff94 	bl	80086f8 <std>
 80087d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087d4:	2201      	movs	r2, #1
 80087d6:	2109      	movs	r1, #9
 80087d8:	f7ff ff8e 	bl	80086f8 <std>
 80087dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087e0:	2202      	movs	r2, #2
 80087e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e6:	2112      	movs	r1, #18
 80087e8:	f7ff bf86 	b.w	80086f8 <std>
 80087ec:	200005c8 	.word	0x200005c8
 80087f0:	20000490 	.word	0x20000490
 80087f4:	08008765 	.word	0x08008765

080087f8 <__sfp_lock_acquire>:
 80087f8:	4801      	ldr	r0, [pc, #4]	; (8008800 <__sfp_lock_acquire+0x8>)
 80087fa:	f000 b920 	b.w	8008a3e <__retarget_lock_acquire_recursive>
 80087fe:	bf00      	nop
 8008800:	200005d1 	.word	0x200005d1

08008804 <__sfp_lock_release>:
 8008804:	4801      	ldr	r0, [pc, #4]	; (800880c <__sfp_lock_release+0x8>)
 8008806:	f000 b91b 	b.w	8008a40 <__retarget_lock_release_recursive>
 800880a:	bf00      	nop
 800880c:	200005d1 	.word	0x200005d1

08008810 <__sinit>:
 8008810:	b510      	push	{r4, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	f7ff fff0 	bl	80087f8 <__sfp_lock_acquire>
 8008818:	6a23      	ldr	r3, [r4, #32]
 800881a:	b11b      	cbz	r3, 8008824 <__sinit+0x14>
 800881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008820:	f7ff bff0 	b.w	8008804 <__sfp_lock_release>
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <__sinit+0x28>)
 8008826:	6223      	str	r3, [r4, #32]
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <__sinit+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f5      	bne.n	800881c <__sinit+0xc>
 8008830:	f7ff ffc4 	bl	80087bc <global_stdio_init.part.0>
 8008834:	e7f2      	b.n	800881c <__sinit+0xc>
 8008836:	bf00      	nop
 8008838:	0800877d 	.word	0x0800877d
 800883c:	200005c8 	.word	0x200005c8

08008840 <_fwalk_sglue>:
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4607      	mov	r7, r0
 8008846:	4688      	mov	r8, r1
 8008848:	4614      	mov	r4, r2
 800884a:	2600      	movs	r6, #0
 800884c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008850:	f1b9 0901 	subs.w	r9, r9, #1
 8008854:	d505      	bpl.n	8008862 <_fwalk_sglue+0x22>
 8008856:	6824      	ldr	r4, [r4, #0]
 8008858:	2c00      	cmp	r4, #0
 800885a:	d1f7      	bne.n	800884c <_fwalk_sglue+0xc>
 800885c:	4630      	mov	r0, r6
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d907      	bls.n	8008878 <_fwalk_sglue+0x38>
 8008868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800886c:	3301      	adds	r3, #1
 800886e:	d003      	beq.n	8008878 <_fwalk_sglue+0x38>
 8008870:	4629      	mov	r1, r5
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	4306      	orrs	r6, r0
 8008878:	3568      	adds	r5, #104	; 0x68
 800887a:	e7e9      	b.n	8008850 <_fwalk_sglue+0x10>

0800887c <siprintf>:
 800887c:	b40e      	push	{r1, r2, r3}
 800887e:	b500      	push	{lr}
 8008880:	b09c      	sub	sp, #112	; 0x70
 8008882:	ab1d      	add	r3, sp, #116	; 0x74
 8008884:	9002      	str	r0, [sp, #8]
 8008886:	9006      	str	r0, [sp, #24]
 8008888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800888c:	4809      	ldr	r0, [pc, #36]	; (80088b4 <siprintf+0x38>)
 800888e:	9107      	str	r1, [sp, #28]
 8008890:	9104      	str	r1, [sp, #16]
 8008892:	4909      	ldr	r1, [pc, #36]	; (80088b8 <siprintf+0x3c>)
 8008894:	f853 2b04 	ldr.w	r2, [r3], #4
 8008898:	9105      	str	r1, [sp, #20]
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	a902      	add	r1, sp, #8
 80088a0:	f001 fc22 	bl	800a0e8 <_svfiprintf_r>
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	b01c      	add	sp, #112	; 0x70
 80088ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b0:	b003      	add	sp, #12
 80088b2:	4770      	bx	lr
 80088b4:	2000011c 	.word	0x2000011c
 80088b8:	ffff0208 	.word	0xffff0208

080088bc <__sread>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	f000 f86c 	bl	80089a0 <_read_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	bfab      	itete	ge
 80088cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088ce:	89a3      	ldrhlt	r3, [r4, #12]
 80088d0:	181b      	addge	r3, r3, r0
 80088d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088d6:	bfac      	ite	ge
 80088d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088da:	81a3      	strhlt	r3, [r4, #12]
 80088dc:	bd10      	pop	{r4, pc}

080088de <__swrite>:
 80088de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e2:	461f      	mov	r7, r3
 80088e4:	898b      	ldrh	r3, [r1, #12]
 80088e6:	05db      	lsls	r3, r3, #23
 80088e8:	4605      	mov	r5, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4616      	mov	r6, r2
 80088ee:	d505      	bpl.n	80088fc <__swrite+0x1e>
 80088f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f4:	2302      	movs	r3, #2
 80088f6:	2200      	movs	r2, #0
 80088f8:	f000 f840 	bl	800897c <_lseek_r>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	4632      	mov	r2, r6
 800890a:	463b      	mov	r3, r7
 800890c:	4628      	mov	r0, r5
 800890e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008912:	f000 b857 	b.w	80089c4 <_write_r>

08008916 <__sseek>:
 8008916:	b510      	push	{r4, lr}
 8008918:	460c      	mov	r4, r1
 800891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891e:	f000 f82d 	bl	800897c <_lseek_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	bf15      	itete	ne
 8008928:	6560      	strne	r0, [r4, #84]	; 0x54
 800892a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800892e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008932:	81a3      	strheq	r3, [r4, #12]
 8008934:	bf18      	it	ne
 8008936:	81a3      	strhne	r3, [r4, #12]
 8008938:	bd10      	pop	{r4, pc}

0800893a <__sclose>:
 800893a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893e:	f000 b80d 	b.w	800895c <_close_r>

08008942 <memset>:
 8008942:	4402      	add	r2, r0
 8008944:	4603      	mov	r3, r0
 8008946:	4293      	cmp	r3, r2
 8008948:	d100      	bne.n	800894c <memset+0xa>
 800894a:	4770      	bx	lr
 800894c:	f803 1b01 	strb.w	r1, [r3], #1
 8008950:	e7f9      	b.n	8008946 <memset+0x4>
	...

08008954 <_localeconv_r>:
 8008954:	4800      	ldr	r0, [pc, #0]	; (8008958 <_localeconv_r+0x4>)
 8008956:	4770      	bx	lr
 8008958:	20000210 	.word	0x20000210

0800895c <_close_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	; (8008978 <_close_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f8 ff17 	bl	800179a <_close>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_close_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_close_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200005cc 	.word	0x200005cc

0800897c <_lseek_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	; (800899c <_lseek_r+0x20>)
 8008980:	4604      	mov	r4, r0
 8008982:	4608      	mov	r0, r1
 8008984:	4611      	mov	r1, r2
 8008986:	2200      	movs	r2, #0
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	f7f8 ff2c 	bl	80017e8 <_lseek>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_lseek_r+0x1e>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_lseek_r+0x1e>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	200005cc 	.word	0x200005cc

080089a0 <_read_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	; (80089c0 <_read_r+0x20>)
 80089a4:	4604      	mov	r4, r0
 80089a6:	4608      	mov	r0, r1
 80089a8:	4611      	mov	r1, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	602a      	str	r2, [r5, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f7f8 feba 	bl	8001728 <_read>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_read_r+0x1e>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_read_r+0x1e>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	200005cc 	.word	0x200005cc

080089c4 <_write_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_write_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f7f8 fec5 	bl	8001762 <_write>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_write_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_write_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	200005cc 	.word	0x200005cc

080089e8 <__errno>:
 80089e8:	4b01      	ldr	r3, [pc, #4]	; (80089f0 <__errno+0x8>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	2000011c 	.word	0x2000011c

080089f4 <__libc_init_array>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4d0d      	ldr	r5, [pc, #52]	; (8008a2c <__libc_init_array+0x38>)
 80089f8:	4c0d      	ldr	r4, [pc, #52]	; (8008a30 <__libc_init_array+0x3c>)
 80089fa:	1b64      	subs	r4, r4, r5
 80089fc:	10a4      	asrs	r4, r4, #2
 80089fe:	2600      	movs	r6, #0
 8008a00:	42a6      	cmp	r6, r4
 8008a02:	d109      	bne.n	8008a18 <__libc_init_array+0x24>
 8008a04:	4d0b      	ldr	r5, [pc, #44]	; (8008a34 <__libc_init_array+0x40>)
 8008a06:	4c0c      	ldr	r4, [pc, #48]	; (8008a38 <__libc_init_array+0x44>)
 8008a08:	f002 f896 	bl	800ab38 <_init>
 8008a0c:	1b64      	subs	r4, r4, r5
 8008a0e:	10a4      	asrs	r4, r4, #2
 8008a10:	2600      	movs	r6, #0
 8008a12:	42a6      	cmp	r6, r4
 8008a14:	d105      	bne.n	8008a22 <__libc_init_array+0x2e>
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1c:	4798      	blx	r3
 8008a1e:	3601      	adds	r6, #1
 8008a20:	e7ee      	b.n	8008a00 <__libc_init_array+0xc>
 8008a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a26:	4798      	blx	r3
 8008a28:	3601      	adds	r6, #1
 8008a2a:	e7f2      	b.n	8008a12 <__libc_init_array+0x1e>
 8008a2c:	0800aef4 	.word	0x0800aef4
 8008a30:	0800aef4 	.word	0x0800aef4
 8008a34:	0800aef4 	.word	0x0800aef4
 8008a38:	0800aef8 	.word	0x0800aef8

08008a3c <__retarget_lock_init_recursive>:
 8008a3c:	4770      	bx	lr

08008a3e <__retarget_lock_acquire_recursive>:
 8008a3e:	4770      	bx	lr

08008a40 <__retarget_lock_release_recursive>:
 8008a40:	4770      	bx	lr

08008a42 <quorem>:
 8008a42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a46:	6903      	ldr	r3, [r0, #16]
 8008a48:	690c      	ldr	r4, [r1, #16]
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	db7e      	blt.n	8008b4e <quorem+0x10c>
 8008a50:	3c01      	subs	r4, #1
 8008a52:	f101 0814 	add.w	r8, r1, #20
 8008a56:	f100 0514 	add.w	r5, r0, #20
 8008a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a78:	d331      	bcc.n	8008ade <quorem+0x9c>
 8008a7a:	f04f 0e00 	mov.w	lr, #0
 8008a7e:	4640      	mov	r0, r8
 8008a80:	46ac      	mov	ip, r5
 8008a82:	46f2      	mov	sl, lr
 8008a84:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a88:	b293      	uxth	r3, r2
 8008a8a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a92:	0c1a      	lsrs	r2, r3, #16
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	ebaa 0303 	sub.w	r3, sl, r3
 8008a9a:	f8dc a000 	ldr.w	sl, [ip]
 8008a9e:	fa13 f38a 	uxtah	r3, r3, sl
 8008aa2:	fb06 220e 	mla	r2, r6, lr, r2
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	9b00      	ldr	r3, [sp, #0]
 8008aaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aae:	b292      	uxth	r2, r2
 8008ab0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ab8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008abc:	4581      	cmp	r9, r0
 8008abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ac6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aca:	d2db      	bcs.n	8008a84 <quorem+0x42>
 8008acc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ad0:	b92b      	cbnz	r3, 8008ade <quorem+0x9c>
 8008ad2:	9b01      	ldr	r3, [sp, #4]
 8008ad4:	3b04      	subs	r3, #4
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	d32c      	bcc.n	8008b36 <quorem+0xf4>
 8008adc:	613c      	str	r4, [r7, #16]
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f001 f9a8 	bl	8009e34 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	db22      	blt.n	8008b2e <quorem+0xec>
 8008ae8:	3601      	adds	r6, #1
 8008aea:	4629      	mov	r1, r5
 8008aec:	2000      	movs	r0, #0
 8008aee:	f858 2b04 	ldr.w	r2, [r8], #4
 8008af2:	f8d1 c000 	ldr.w	ip, [r1]
 8008af6:	b293      	uxth	r3, r2
 8008af8:	1ac3      	subs	r3, r0, r3
 8008afa:	0c12      	lsrs	r2, r2, #16
 8008afc:	fa13 f38c 	uxtah	r3, r3, ip
 8008b00:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b0e:	45c1      	cmp	r9, r8
 8008b10:	f841 3b04 	str.w	r3, [r1], #4
 8008b14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b18:	d2e9      	bcs.n	8008aee <quorem+0xac>
 8008b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b22:	b922      	cbnz	r2, 8008b2e <quorem+0xec>
 8008b24:	3b04      	subs	r3, #4
 8008b26:	429d      	cmp	r5, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	d30a      	bcc.n	8008b42 <quorem+0x100>
 8008b2c:	613c      	str	r4, [r7, #16]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	b003      	add	sp, #12
 8008b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	3b04      	subs	r3, #4
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	d1ce      	bne.n	8008adc <quorem+0x9a>
 8008b3e:	3c01      	subs	r4, #1
 8008b40:	e7c9      	b.n	8008ad6 <quorem+0x94>
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	3b04      	subs	r3, #4
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	d1f0      	bne.n	8008b2c <quorem+0xea>
 8008b4a:	3c01      	subs	r4, #1
 8008b4c:	e7eb      	b.n	8008b26 <quorem+0xe4>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e7ee      	b.n	8008b30 <quorem+0xee>
 8008b52:	0000      	movs	r0, r0
 8008b54:	0000      	movs	r0, r0
	...

08008b58 <_dtoa_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b04 	vpush	{d8-d9}
 8008b60:	69c5      	ldr	r5, [r0, #28]
 8008b62:	b093      	sub	sp, #76	; 0x4c
 8008b64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b68:	ec57 6b10 	vmov	r6, r7, d0
 8008b6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b70:	9107      	str	r1, [sp, #28]
 8008b72:	4604      	mov	r4, r0
 8008b74:	920a      	str	r2, [sp, #40]	; 0x28
 8008b76:	930d      	str	r3, [sp, #52]	; 0x34
 8008b78:	b975      	cbnz	r5, 8008b98 <_dtoa_r+0x40>
 8008b7a:	2010      	movs	r0, #16
 8008b7c:	f000 fe2a 	bl	80097d4 <malloc>
 8008b80:	4602      	mov	r2, r0
 8008b82:	61e0      	str	r0, [r4, #28]
 8008b84:	b920      	cbnz	r0, 8008b90 <_dtoa_r+0x38>
 8008b86:	4bae      	ldr	r3, [pc, #696]	; (8008e40 <_dtoa_r+0x2e8>)
 8008b88:	21ef      	movs	r1, #239	; 0xef
 8008b8a:	48ae      	ldr	r0, [pc, #696]	; (8008e44 <_dtoa_r+0x2ec>)
 8008b8c:	f001 fc90 	bl	800a4b0 <__assert_func>
 8008b90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b94:	6005      	str	r5, [r0, #0]
 8008b96:	60c5      	str	r5, [r0, #12]
 8008b98:	69e3      	ldr	r3, [r4, #28]
 8008b9a:	6819      	ldr	r1, [r3, #0]
 8008b9c:	b151      	cbz	r1, 8008bb4 <_dtoa_r+0x5c>
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	604a      	str	r2, [r1, #4]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4093      	lsls	r3, r2
 8008ba6:	608b      	str	r3, [r1, #8]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 ff07 	bl	80099bc <_Bfree>
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	1e3b      	subs	r3, r7, #0
 8008bb6:	bfbb      	ittet	lt
 8008bb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	9303      	strlt	r3, [sp, #12]
 8008bbe:	2300      	movge	r3, #0
 8008bc0:	2201      	movlt	r2, #1
 8008bc2:	bfac      	ite	ge
 8008bc4:	f8c8 3000 	strge.w	r3, [r8]
 8008bc8:	f8c8 2000 	strlt.w	r2, [r8]
 8008bcc:	4b9e      	ldr	r3, [pc, #632]	; (8008e48 <_dtoa_r+0x2f0>)
 8008bce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bd2:	ea33 0308 	bics.w	r3, r3, r8
 8008bd6:	d11b      	bne.n	8008c10 <_dtoa_r+0xb8>
 8008bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bda:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008be4:	4333      	orrs	r3, r6
 8008be6:	f000 8593 	beq.w	8009710 <_dtoa_r+0xbb8>
 8008bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bec:	b963      	cbnz	r3, 8008c08 <_dtoa_r+0xb0>
 8008bee:	4b97      	ldr	r3, [pc, #604]	; (8008e4c <_dtoa_r+0x2f4>)
 8008bf0:	e027      	b.n	8008c42 <_dtoa_r+0xea>
 8008bf2:	4b97      	ldr	r3, [pc, #604]	; (8008e50 <_dtoa_r+0x2f8>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	9800      	ldr	r0, [sp, #0]
 8008bfe:	b013      	add	sp, #76	; 0x4c
 8008c00:	ecbd 8b04 	vpop	{d8-d9}
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	4b90      	ldr	r3, [pc, #576]	; (8008e4c <_dtoa_r+0x2f4>)
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	3303      	adds	r3, #3
 8008c0e:	e7f3      	b.n	8008bf8 <_dtoa_r+0xa0>
 8008c10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	ec51 0b17 	vmov	r0, r1, d7
 8008c1a:	eeb0 8a47 	vmov.f32	s16, s14
 8008c1e:	eef0 8a67 	vmov.f32	s17, s15
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7f7 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c28:	4681      	mov	r9, r0
 8008c2a:	b160      	cbz	r0, 8008c46 <_dtoa_r+0xee>
 8008c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8568 	beq.w	800970a <_dtoa_r+0xbb2>
 8008c3a:	4b86      	ldr	r3, [pc, #536]	; (8008e54 <_dtoa_r+0x2fc>)
 8008c3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	e7da      	b.n	8008bfc <_dtoa_r+0xa4>
 8008c46:	aa10      	add	r2, sp, #64	; 0x40
 8008c48:	a911      	add	r1, sp, #68	; 0x44
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c50:	eef0 0a68 	vmov.f32	s1, s17
 8008c54:	f001 f994 	bl	8009f80 <__d2b>
 8008c58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	d07f      	beq.n	8008d62 <_dtoa_r+0x20a>
 8008c62:	ee18 3a90 	vmov	r3, s17
 8008c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c6e:	ec51 0b18 	vmov	r0, r1, d8
 8008c72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c7e:	4619      	mov	r1, r3
 8008c80:	2200      	movs	r2, #0
 8008c82:	4b75      	ldr	r3, [pc, #468]	; (8008e58 <_dtoa_r+0x300>)
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	a367      	add	r3, pc, #412	; (adr r3, 8008e28 <_dtoa_r+0x2d0>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fcbb 	bl	8000608 <__aeabi_dmul>
 8008c92:	a367      	add	r3, pc, #412	; (adr r3, 8008e30 <_dtoa_r+0x2d8>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fb00 	bl	800029c <__adddf3>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	f7f7 fc47 	bl	8000534 <__aeabi_i2d>
 8008ca6:	a364      	add	r3, pc, #400	; (adr r3, 8008e38 <_dtoa_r+0x2e0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fcac 	bl	8000608 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 faf0 	bl	800029c <__adddf3>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f7f7 ff52 	bl	8000b68 <__aeabi_d2iz>
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4683      	mov	fp, r0
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 ff0d 	bl	8000aec <__aeabi_dcmplt>
 8008cd2:	b148      	cbz	r0, 8008ce8 <_dtoa_r+0x190>
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f7f7 fc2d 	bl	8000534 <__aeabi_i2d>
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	f7f7 fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ce2:	b908      	cbnz	r0, 8008ce8 <_dtoa_r+0x190>
 8008ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ce8:	f1bb 0f16 	cmp.w	fp, #22
 8008cec:	d857      	bhi.n	8008d9e <_dtoa_r+0x246>
 8008cee:	4b5b      	ldr	r3, [pc, #364]	; (8008e5c <_dtoa_r+0x304>)
 8008cf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	ec51 0b18 	vmov	r0, r1, d8
 8008cfc:	f7f7 fef6 	bl	8000aec <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d04e      	beq.n	8008da2 <_dtoa_r+0x24a>
 8008d04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	1b5b      	subs	r3, r3, r5
 8008d10:	1e5a      	subs	r2, r3, #1
 8008d12:	bf45      	ittet	mi
 8008d14:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d18:	9305      	strmi	r3, [sp, #20]
 8008d1a:	2300      	movpl	r3, #0
 8008d1c:	2300      	movmi	r3, #0
 8008d1e:	9206      	str	r2, [sp, #24]
 8008d20:	bf54      	ite	pl
 8008d22:	9305      	strpl	r3, [sp, #20]
 8008d24:	9306      	strmi	r3, [sp, #24]
 8008d26:	f1bb 0f00 	cmp.w	fp, #0
 8008d2a:	db3c      	blt.n	8008da6 <_dtoa_r+0x24e>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d32:	445b      	add	r3, fp
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b07      	ldr	r3, [sp, #28]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d868      	bhi.n	8008e12 <_dtoa_r+0x2ba>
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	bfc4      	itt	gt
 8008d44:	3b04      	subgt	r3, #4
 8008d46:	9307      	strgt	r3, [sp, #28]
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d4e:	bfcc      	ite	gt
 8008d50:	2500      	movgt	r5, #0
 8008d52:	2501      	movle	r5, #1
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	f200 8085 	bhi.w	8008e64 <_dtoa_r+0x30c>
 8008d5a:	e8df f003 	tbb	[pc, r3]
 8008d5e:	3b2e      	.short	0x3b2e
 8008d60:	5839      	.short	0x5839
 8008d62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d66:	441d      	add	r5, r3
 8008d68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	bfc1      	itttt	gt
 8008d70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d74:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d80:	bfd6      	itet	le
 8008d82:	f1c3 0320 	rsble	r3, r3, #32
 8008d86:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d8a:	fa06 f003 	lslle.w	r0, r6, r3
 8008d8e:	f7f7 fbc1 	bl	8000514 <__aeabi_ui2d>
 8008d92:	2201      	movs	r2, #1
 8008d94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d98:	3d01      	subs	r5, #1
 8008d9a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d9c:	e76f      	b.n	8008c7e <_dtoa_r+0x126>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e7b3      	b.n	8008d0a <_dtoa_r+0x1b2>
 8008da2:	900c      	str	r0, [sp, #48]	; 0x30
 8008da4:	e7b2      	b.n	8008d0c <_dtoa_r+0x1b4>
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	eba3 030b 	sub.w	r3, r3, fp
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	f1cb 0300 	rsb	r3, fp, #0
 8008db2:	9308      	str	r3, [sp, #32]
 8008db4:	2300      	movs	r3, #0
 8008db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db8:	e7bf      	b.n	8008d3a <_dtoa_r+0x1e2>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc52      	bgt.n	8008e6a <_dtoa_r+0x312>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8008dce:	e00b      	b.n	8008de8 <_dtoa_r+0x290>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7f3      	b.n	8008dbc <_dtoa_r+0x264>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	445b      	add	r3, fp
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	bfb8      	it	lt
 8008de6:	2301      	movlt	r3, #1
 8008de8:	69e0      	ldr	r0, [r4, #28]
 8008dea:	2100      	movs	r1, #0
 8008dec:	2204      	movs	r2, #4
 8008dee:	f102 0614 	add.w	r6, r2, #20
 8008df2:	429e      	cmp	r6, r3
 8008df4:	d93d      	bls.n	8008e72 <_dtoa_r+0x31a>
 8008df6:	6041      	str	r1, [r0, #4]
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fd9f 	bl	800993c <_Balloc>
 8008dfe:	9000      	str	r0, [sp, #0]
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d139      	bne.n	8008e78 <_dtoa_r+0x320>
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <_dtoa_r+0x308>)
 8008e06:	4602      	mov	r2, r0
 8008e08:	f240 11af 	movw	r1, #431	; 0x1af
 8008e0c:	e6bd      	b.n	8008b8a <_dtoa_r+0x32>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7e1      	b.n	8008dd6 <_dtoa_r+0x27e>
 8008e12:	2501      	movs	r5, #1
 8008e14:	2300      	movs	r3, #0
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	9509      	str	r5, [sp, #36]	; 0x24
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	2200      	movs	r2, #0
 8008e24:	2312      	movs	r3, #18
 8008e26:	e7d1      	b.n	8008dcc <_dtoa_r+0x274>
 8008e28:	636f4361 	.word	0x636f4361
 8008e2c:	3fd287a7 	.word	0x3fd287a7
 8008e30:	8b60c8b3 	.word	0x8b60c8b3
 8008e34:	3fc68a28 	.word	0x3fc68a28
 8008e38:	509f79fb 	.word	0x509f79fb
 8008e3c:	3fd34413 	.word	0x3fd34413
 8008e40:	0800abb9 	.word	0x0800abb9
 8008e44:	0800abd0 	.word	0x0800abd0
 8008e48:	7ff00000 	.word	0x7ff00000
 8008e4c:	0800abb5 	.word	0x0800abb5
 8008e50:	0800abac 	.word	0x0800abac
 8008e54:	0800ab89 	.word	0x0800ab89
 8008e58:	3ff80000 	.word	0x3ff80000
 8008e5c:	0800acc0 	.word	0x0800acc0
 8008e60:	0800ac28 	.word	0x0800ac28
 8008e64:	2301      	movs	r3, #1
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	e7d7      	b.n	8008e1a <_dtoa_r+0x2c2>
 8008e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	9304      	str	r3, [sp, #16]
 8008e70:	e7ba      	b.n	8008de8 <_dtoa_r+0x290>
 8008e72:	3101      	adds	r1, #1
 8008e74:	0052      	lsls	r2, r2, #1
 8008e76:	e7ba      	b.n	8008dee <_dtoa_r+0x296>
 8008e78:	69e3      	ldr	r3, [r4, #28]
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	2b0e      	cmp	r3, #14
 8008e82:	f200 80a8 	bhi.w	8008fd6 <_dtoa_r+0x47e>
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	f000 80a5 	beq.w	8008fd6 <_dtoa_r+0x47e>
 8008e8c:	f1bb 0f00 	cmp.w	fp, #0
 8008e90:	dd38      	ble.n	8008f04 <_dtoa_r+0x3ac>
 8008e92:	4bc0      	ldr	r3, [pc, #768]	; (8009194 <_dtoa_r+0x63c>)
 8008e94:	f00b 020f 	and.w	r2, fp, #15
 8008e98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ea0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ea4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ea8:	d019      	beq.n	8008ede <_dtoa_r+0x386>
 8008eaa:	4bbb      	ldr	r3, [pc, #748]	; (8009198 <_dtoa_r+0x640>)
 8008eac:	ec51 0b18 	vmov	r0, r1, d8
 8008eb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eb4:	f7f7 fcd2 	bl	800085c <__aeabi_ddiv>
 8008eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebc:	f008 080f 	and.w	r8, r8, #15
 8008ec0:	2503      	movs	r5, #3
 8008ec2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009198 <_dtoa_r+0x640>
 8008ec6:	f1b8 0f00 	cmp.w	r8, #0
 8008eca:	d10a      	bne.n	8008ee2 <_dtoa_r+0x38a>
 8008ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	f7f7 fcc2 	bl	800085c <__aeabi_ddiv>
 8008ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008edc:	e02b      	b.n	8008f36 <_dtoa_r+0x3de>
 8008ede:	2502      	movs	r5, #2
 8008ee0:	e7ef      	b.n	8008ec2 <_dtoa_r+0x36a>
 8008ee2:	f018 0f01 	tst.w	r8, #1
 8008ee6:	d008      	beq.n	8008efa <_dtoa_r+0x3a2>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ef0:	f7f7 fb8a 	bl	8000608 <__aeabi_dmul>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008efe:	f109 0908 	add.w	r9, r9, #8
 8008f02:	e7e0      	b.n	8008ec6 <_dtoa_r+0x36e>
 8008f04:	f000 809f 	beq.w	8009046 <_dtoa_r+0x4ee>
 8008f08:	f1cb 0600 	rsb	r6, fp, #0
 8008f0c:	4ba1      	ldr	r3, [pc, #644]	; (8009194 <_dtoa_r+0x63c>)
 8008f0e:	4fa2      	ldr	r7, [pc, #648]	; (8009198 <_dtoa_r+0x640>)
 8008f10:	f006 020f 	and.w	r2, r6, #15
 8008f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	ec51 0b18 	vmov	r0, r1, d8
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f28:	1136      	asrs	r6, r6, #4
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2502      	movs	r5, #2
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	d17e      	bne.n	8009030 <_dtoa_r+0x4d8>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1d0      	bne.n	8008ed8 <_dtoa_r+0x380>
 8008f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 8084 	beq.w	800904a <_dtoa_r+0x4f2>
 8008f42:	4b96      	ldr	r3, [pc, #600]	; (800919c <_dtoa_r+0x644>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 fdcf 	bl	8000aec <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d07b      	beq.n	800904a <_dtoa_r+0x4f2>
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d078      	beq.n	800904a <_dtoa_r+0x4f2>
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dd39      	ble.n	8008fd2 <_dtoa_r+0x47a>
 8008f5e:	4b90      	ldr	r3, [pc, #576]	; (80091a0 <_dtoa_r+0x648>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 fb4f 	bl	8000608 <__aeabi_dmul>
 8008f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f6e:	9e01      	ldr	r6, [sp, #4]
 8008f70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f74:	3501      	adds	r5, #1
 8008f76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7f7 fada 	bl	8000534 <__aeabi_i2d>
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	f7f7 fb40 	bl	8000608 <__aeabi_dmul>
 8008f88:	4b86      	ldr	r3, [pc, #536]	; (80091a4 <_dtoa_r+0x64c>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f7f7 f986 	bl	800029c <__adddf3>
 8008f90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f98:	9303      	str	r3, [sp, #12]
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d158      	bne.n	8009050 <_dtoa_r+0x4f8>
 8008f9e:	4b82      	ldr	r3, [pc, #520]	; (80091a8 <_dtoa_r+0x650>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f977 	bl	8000298 <__aeabi_dsub>
 8008faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	f7f7 fdb9 	bl	8000b28 <__aeabi_dcmpgt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8296 	bne.w	80094e8 <_dtoa_r+0x990>
 8008fbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 fd90 	bl	8000aec <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f040 8289 	bne.w	80094e4 <_dtoa_r+0x98c>
 8008fd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f2c0 814e 	blt.w	800927a <_dtoa_r+0x722>
 8008fde:	f1bb 0f0e 	cmp.w	fp, #14
 8008fe2:	f300 814a 	bgt.w	800927a <_dtoa_r+0x722>
 8008fe6:	4b6b      	ldr	r3, [pc, #428]	; (8009194 <_dtoa_r+0x63c>)
 8008fe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f280 80dc 	bge.w	80091b0 <_dtoa_r+0x658>
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f300 80d8 	bgt.w	80091b0 <_dtoa_r+0x658>
 8009000:	f040 826f 	bne.w	80094e2 <_dtoa_r+0x98a>
 8009004:	4b68      	ldr	r3, [pc, #416]	; (80091a8 <_dtoa_r+0x650>)
 8009006:	2200      	movs	r2, #0
 8009008:	4640      	mov	r0, r8
 800900a:	4649      	mov	r1, r9
 800900c:	f7f7 fafc 	bl	8000608 <__aeabi_dmul>
 8009010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009014:	f7f7 fd7e 	bl	8000b14 <__aeabi_dcmpge>
 8009018:	9e04      	ldr	r6, [sp, #16]
 800901a:	4637      	mov	r7, r6
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 8245 	bne.w	80094ac <_dtoa_r+0x954>
 8009022:	9d00      	ldr	r5, [sp, #0]
 8009024:	2331      	movs	r3, #49	; 0x31
 8009026:	f805 3b01 	strb.w	r3, [r5], #1
 800902a:	f10b 0b01 	add.w	fp, fp, #1
 800902e:	e241      	b.n	80094b4 <_dtoa_r+0x95c>
 8009030:	07f2      	lsls	r2, r6, #31
 8009032:	d505      	bpl.n	8009040 <_dtoa_r+0x4e8>
 8009034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009038:	f7f7 fae6 	bl	8000608 <__aeabi_dmul>
 800903c:	3501      	adds	r5, #1
 800903e:	2301      	movs	r3, #1
 8009040:	1076      	asrs	r6, r6, #1
 8009042:	3708      	adds	r7, #8
 8009044:	e773      	b.n	8008f2e <_dtoa_r+0x3d6>
 8009046:	2502      	movs	r5, #2
 8009048:	e775      	b.n	8008f36 <_dtoa_r+0x3de>
 800904a:	9e04      	ldr	r6, [sp, #16]
 800904c:	465f      	mov	r7, fp
 800904e:	e792      	b.n	8008f76 <_dtoa_r+0x41e>
 8009050:	9900      	ldr	r1, [sp, #0]
 8009052:	4b50      	ldr	r3, [pc, #320]	; (8009194 <_dtoa_r+0x63c>)
 8009054:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009058:	4431      	add	r1, r6
 800905a:	9102      	str	r1, [sp, #8]
 800905c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905e:	eeb0 9a47 	vmov.f32	s18, s14
 8009062:	eef0 9a67 	vmov.f32	s19, s15
 8009066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800906a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800906e:	2900      	cmp	r1, #0
 8009070:	d044      	beq.n	80090fc <_dtoa_r+0x5a4>
 8009072:	494e      	ldr	r1, [pc, #312]	; (80091ac <_dtoa_r+0x654>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 fbf1 	bl	800085c <__aeabi_ddiv>
 800907a:	ec53 2b19 	vmov	r2, r3, d9
 800907e:	f7f7 f90b 	bl	8000298 <__aeabi_dsub>
 8009082:	9d00      	ldr	r5, [sp, #0]
 8009084:	ec41 0b19 	vmov	d9, r0, r1
 8009088:	4649      	mov	r1, r9
 800908a:	4640      	mov	r0, r8
 800908c:	f7f7 fd6c 	bl	8000b68 <__aeabi_d2iz>
 8009090:	4606      	mov	r6, r0
 8009092:	f7f7 fa4f 	bl	8000534 <__aeabi_i2d>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 f8fb 	bl	8000298 <__aeabi_dsub>
 80090a2:	3630      	adds	r6, #48	; 0x30
 80090a4:	f805 6b01 	strb.w	r6, [r5], #1
 80090a8:	ec53 2b19 	vmov	r2, r3, d9
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	f7f7 fd1c 	bl	8000aec <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d164      	bne.n	8009182 <_dtoa_r+0x62a>
 80090b8:	4642      	mov	r2, r8
 80090ba:	464b      	mov	r3, r9
 80090bc:	4937      	ldr	r1, [pc, #220]	; (800919c <_dtoa_r+0x644>)
 80090be:	2000      	movs	r0, #0
 80090c0:	f7f7 f8ea 	bl	8000298 <__aeabi_dsub>
 80090c4:	ec53 2b19 	vmov	r2, r3, d9
 80090c8:	f7f7 fd10 	bl	8000aec <__aeabi_dcmplt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f040 80b6 	bne.w	800923e <_dtoa_r+0x6e6>
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	429d      	cmp	r5, r3
 80090d6:	f43f af7c 	beq.w	8008fd2 <_dtoa_r+0x47a>
 80090da:	4b31      	ldr	r3, [pc, #196]	; (80091a0 <_dtoa_r+0x648>)
 80090dc:	ec51 0b19 	vmov	r0, r1, d9
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 fa91 	bl	8000608 <__aeabi_dmul>
 80090e6:	4b2e      	ldr	r3, [pc, #184]	; (80091a0 <_dtoa_r+0x648>)
 80090e8:	ec41 0b19 	vmov	d9, r0, r1
 80090ec:	2200      	movs	r2, #0
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 fa89 	bl	8000608 <__aeabi_dmul>
 80090f6:	4680      	mov	r8, r0
 80090f8:	4689      	mov	r9, r1
 80090fa:	e7c5      	b.n	8009088 <_dtoa_r+0x530>
 80090fc:	ec51 0b17 	vmov	r0, r1, d7
 8009100:	f7f7 fa82 	bl	8000608 <__aeabi_dmul>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	9d00      	ldr	r5, [sp, #0]
 8009108:	930f      	str	r3, [sp, #60]	; 0x3c
 800910a:	ec41 0b19 	vmov	d9, r0, r1
 800910e:	4649      	mov	r1, r9
 8009110:	4640      	mov	r0, r8
 8009112:	f7f7 fd29 	bl	8000b68 <__aeabi_d2iz>
 8009116:	4606      	mov	r6, r0
 8009118:	f7f7 fa0c 	bl	8000534 <__aeabi_i2d>
 800911c:	3630      	adds	r6, #48	; 0x30
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 f8b7 	bl	8000298 <__aeabi_dsub>
 800912a:	f805 6b01 	strb.w	r6, [r5], #1
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	429d      	cmp	r5, r3
 8009132:	4680      	mov	r8, r0
 8009134:	4689      	mov	r9, r1
 8009136:	f04f 0200 	mov.w	r2, #0
 800913a:	d124      	bne.n	8009186 <_dtoa_r+0x62e>
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <_dtoa_r+0x654>)
 800913e:	ec51 0b19 	vmov	r0, r1, d9
 8009142:	f7f7 f8ab 	bl	800029c <__adddf3>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 fceb 	bl	8000b28 <__aeabi_dcmpgt>
 8009152:	2800      	cmp	r0, #0
 8009154:	d173      	bne.n	800923e <_dtoa_r+0x6e6>
 8009156:	ec53 2b19 	vmov	r2, r3, d9
 800915a:	4914      	ldr	r1, [pc, #80]	; (80091ac <_dtoa_r+0x654>)
 800915c:	2000      	movs	r0, #0
 800915e:	f7f7 f89b 	bl	8000298 <__aeabi_dsub>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f af2f 	beq.w	8008fd2 <_dtoa_r+0x47a>
 8009174:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009176:	1e6b      	subs	r3, r5, #1
 8009178:	930f      	str	r3, [sp, #60]	; 0x3c
 800917a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800917e:	2b30      	cmp	r3, #48	; 0x30
 8009180:	d0f8      	beq.n	8009174 <_dtoa_r+0x61c>
 8009182:	46bb      	mov	fp, r7
 8009184:	e04a      	b.n	800921c <_dtoa_r+0x6c4>
 8009186:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <_dtoa_r+0x648>)
 8009188:	f7f7 fa3e 	bl	8000608 <__aeabi_dmul>
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	e7bd      	b.n	800910e <_dtoa_r+0x5b6>
 8009192:	bf00      	nop
 8009194:	0800acc0 	.word	0x0800acc0
 8009198:	0800ac98 	.word	0x0800ac98
 800919c:	3ff00000 	.word	0x3ff00000
 80091a0:	40240000 	.word	0x40240000
 80091a4:	401c0000 	.word	0x401c0000
 80091a8:	40140000 	.word	0x40140000
 80091ac:	3fe00000 	.word	0x3fe00000
 80091b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091b4:	9d00      	ldr	r5, [sp, #0]
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 fb4d 	bl	800085c <__aeabi_ddiv>
 80091c2:	f7f7 fcd1 	bl	8000b68 <__aeabi_d2iz>
 80091c6:	9001      	str	r0, [sp, #4]
 80091c8:	f7f7 f9b4 	bl	8000534 <__aeabi_i2d>
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	f7f7 fa1a 	bl	8000608 <__aeabi_dmul>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 f85c 	bl	8000298 <__aeabi_dsub>
 80091e0:	9e01      	ldr	r6, [sp, #4]
 80091e2:	9f04      	ldr	r7, [sp, #16]
 80091e4:	3630      	adds	r6, #48	; 0x30
 80091e6:	f805 6b01 	strb.w	r6, [r5], #1
 80091ea:	9e00      	ldr	r6, [sp, #0]
 80091ec:	1bae      	subs	r6, r5, r6
 80091ee:	42b7      	cmp	r7, r6
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	d134      	bne.n	8009260 <_dtoa_r+0x708>
 80091f6:	f7f7 f851 	bl	800029c <__adddf3>
 80091fa:	4642      	mov	r2, r8
 80091fc:	464b      	mov	r3, r9
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	f7f7 fc91 	bl	8000b28 <__aeabi_dcmpgt>
 8009206:	b9c8      	cbnz	r0, 800923c <_dtoa_r+0x6e4>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8009214:	b110      	cbz	r0, 800921c <_dtoa_r+0x6c4>
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	07db      	lsls	r3, r3, #31
 800921a:	d40f      	bmi.n	800923c <_dtoa_r+0x6e4>
 800921c:	4651      	mov	r1, sl
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fbcc 	bl	80099bc <_Bfree>
 8009224:	2300      	movs	r3, #0
 8009226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009228:	702b      	strb	r3, [r5, #0]
 800922a:	f10b 0301 	add.w	r3, fp, #1
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009232:	2b00      	cmp	r3, #0
 8009234:	f43f ace2 	beq.w	8008bfc <_dtoa_r+0xa4>
 8009238:	601d      	str	r5, [r3, #0]
 800923a:	e4df      	b.n	8008bfc <_dtoa_r+0xa4>
 800923c:	465f      	mov	r7, fp
 800923e:	462b      	mov	r3, r5
 8009240:	461d      	mov	r5, r3
 8009242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009246:	2a39      	cmp	r2, #57	; 0x39
 8009248:	d106      	bne.n	8009258 <_dtoa_r+0x700>
 800924a:	9a00      	ldr	r2, [sp, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d1f7      	bne.n	8009240 <_dtoa_r+0x6e8>
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	2230      	movs	r2, #48	; 0x30
 8009254:	3701      	adds	r7, #1
 8009256:	700a      	strb	r2, [r1, #0]
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	3201      	adds	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e790      	b.n	8009182 <_dtoa_r+0x62a>
 8009260:	4ba3      	ldr	r3, [pc, #652]	; (80094f0 <_dtoa_r+0x998>)
 8009262:	2200      	movs	r2, #0
 8009264:	f7f7 f9d0 	bl	8000608 <__aeabi_dmul>
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	f7f7 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8009274:	2800      	cmp	r0, #0
 8009276:	d09e      	beq.n	80091b6 <_dtoa_r+0x65e>
 8009278:	e7d0      	b.n	800921c <_dtoa_r+0x6c4>
 800927a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927c:	2a00      	cmp	r2, #0
 800927e:	f000 80ca 	beq.w	8009416 <_dtoa_r+0x8be>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	2a01      	cmp	r2, #1
 8009286:	f300 80ad 	bgt.w	80093e4 <_dtoa_r+0x88c>
 800928a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800928c:	2a00      	cmp	r2, #0
 800928e:	f000 80a5 	beq.w	80093dc <_dtoa_r+0x884>
 8009292:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009296:	9e08      	ldr	r6, [sp, #32]
 8009298:	9d05      	ldr	r5, [sp, #20]
 800929a:	9a05      	ldr	r2, [sp, #20]
 800929c:	441a      	add	r2, r3
 800929e:	9205      	str	r2, [sp, #20]
 80092a0:	9a06      	ldr	r2, [sp, #24]
 80092a2:	2101      	movs	r1, #1
 80092a4:	441a      	add	r2, r3
 80092a6:	4620      	mov	r0, r4
 80092a8:	9206      	str	r2, [sp, #24]
 80092aa:	f000 fc3d 	bl	8009b28 <__i2b>
 80092ae:	4607      	mov	r7, r0
 80092b0:	b165      	cbz	r5, 80092cc <_dtoa_r+0x774>
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd09      	ble.n	80092cc <_dtoa_r+0x774>
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	9a05      	ldr	r2, [sp, #20]
 80092bc:	bfa8      	it	ge
 80092be:	462b      	movge	r3, r5
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	9205      	str	r2, [sp, #20]
 80092c4:	9a06      	ldr	r2, [sp, #24]
 80092c6:	1aed      	subs	r5, r5, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	b1f3      	cbz	r3, 800930e <_dtoa_r+0x7b6>
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80a3 	beq.w	800941e <_dtoa_r+0x8c6>
 80092d8:	2e00      	cmp	r6, #0
 80092da:	dd10      	ble.n	80092fe <_dtoa_r+0x7a6>
 80092dc:	4639      	mov	r1, r7
 80092de:	4632      	mov	r2, r6
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fce1 	bl	8009ca8 <__pow5mult>
 80092e6:	4652      	mov	r2, sl
 80092e8:	4601      	mov	r1, r0
 80092ea:	4607      	mov	r7, r0
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fc31 	bl	8009b54 <__multiply>
 80092f2:	4651      	mov	r1, sl
 80092f4:	4680      	mov	r8, r0
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fb60 	bl	80099bc <_Bfree>
 80092fc:	46c2      	mov	sl, r8
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	1b9a      	subs	r2, r3, r6
 8009302:	d004      	beq.n	800930e <_dtoa_r+0x7b6>
 8009304:	4651      	mov	r1, sl
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fcce 	bl	8009ca8 <__pow5mult>
 800930c:	4682      	mov	sl, r0
 800930e:	2101      	movs	r1, #1
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fc09 	bl	8009b28 <__i2b>
 8009316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009318:	2b00      	cmp	r3, #0
 800931a:	4606      	mov	r6, r0
 800931c:	f340 8081 	ble.w	8009422 <_dtoa_r+0x8ca>
 8009320:	461a      	mov	r2, r3
 8009322:	4601      	mov	r1, r0
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fcbf 	bl	8009ca8 <__pow5mult>
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	2b01      	cmp	r3, #1
 800932e:	4606      	mov	r6, r0
 8009330:	dd7a      	ble.n	8009428 <_dtoa_r+0x8d0>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	6933      	ldr	r3, [r6, #16]
 8009338:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800933c:	6918      	ldr	r0, [r3, #16]
 800933e:	f000 fba5 	bl	8009a8c <__hi0bits>
 8009342:	f1c0 0020 	rsb	r0, r0, #32
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	4418      	add	r0, r3
 800934a:	f010 001f 	ands.w	r0, r0, #31
 800934e:	f000 8094 	beq.w	800947a <_dtoa_r+0x922>
 8009352:	f1c0 0320 	rsb	r3, r0, #32
 8009356:	2b04      	cmp	r3, #4
 8009358:	f340 8085 	ble.w	8009466 <_dtoa_r+0x90e>
 800935c:	9b05      	ldr	r3, [sp, #20]
 800935e:	f1c0 001c 	rsb	r0, r0, #28
 8009362:	4403      	add	r3, r0
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	4403      	add	r3, r0
 800936a:	4405      	add	r5, r0
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	9b05      	ldr	r3, [sp, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd05      	ble.n	8009380 <_dtoa_r+0x828>
 8009374:	4651      	mov	r1, sl
 8009376:	461a      	mov	r2, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fcef 	bl	8009d5c <__lshift>
 800937e:	4682      	mov	sl, r0
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd05      	ble.n	8009392 <_dtoa_r+0x83a>
 8009386:	4631      	mov	r1, r6
 8009388:	461a      	mov	r2, r3
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fce6 	bl	8009d5c <__lshift>
 8009390:	4606      	mov	r6, r0
 8009392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009394:	2b00      	cmp	r3, #0
 8009396:	d072      	beq.n	800947e <_dtoa_r+0x926>
 8009398:	4631      	mov	r1, r6
 800939a:	4650      	mov	r0, sl
 800939c:	f000 fd4a 	bl	8009e34 <__mcmp>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	da6c      	bge.n	800947e <_dtoa_r+0x926>
 80093a4:	2300      	movs	r3, #0
 80093a6:	4651      	mov	r1, sl
 80093a8:	220a      	movs	r2, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fb28 	bl	8009a00 <__multadd>
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093b6:	4682      	mov	sl, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 81b0 	beq.w	800971e <_dtoa_r+0xbc6>
 80093be:	2300      	movs	r3, #0
 80093c0:	4639      	mov	r1, r7
 80093c2:	220a      	movs	r2, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fb1b 	bl	8009a00 <__multadd>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4607      	mov	r7, r0
 80093d0:	f300 8096 	bgt.w	8009500 <_dtoa_r+0x9a8>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dc59      	bgt.n	800948e <_dtoa_r+0x936>
 80093da:	e091      	b.n	8009500 <_dtoa_r+0x9a8>
 80093dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093e2:	e758      	b.n	8009296 <_dtoa_r+0x73e>
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	1e5e      	subs	r6, r3, #1
 80093e8:	9b08      	ldr	r3, [sp, #32]
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	bfbf      	itttt	lt
 80093ee:	9b08      	ldrlt	r3, [sp, #32]
 80093f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80093f2:	9608      	strlt	r6, [sp, #32]
 80093f4:	1af3      	sublt	r3, r6, r3
 80093f6:	bfb4      	ite	lt
 80093f8:	18d2      	addlt	r2, r2, r3
 80093fa:	1b9e      	subge	r6, r3, r6
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	bfbc      	itt	lt
 8009400:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009402:	2600      	movlt	r6, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfb7      	itett	lt
 8009408:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800940c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009410:	1a9d      	sublt	r5, r3, r2
 8009412:	2300      	movlt	r3, #0
 8009414:	e741      	b.n	800929a <_dtoa_r+0x742>
 8009416:	9e08      	ldr	r6, [sp, #32]
 8009418:	9d05      	ldr	r5, [sp, #20]
 800941a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800941c:	e748      	b.n	80092b0 <_dtoa_r+0x758>
 800941e:	9a08      	ldr	r2, [sp, #32]
 8009420:	e770      	b.n	8009304 <_dtoa_r+0x7ac>
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	2b01      	cmp	r3, #1
 8009426:	dc19      	bgt.n	800945c <_dtoa_r+0x904>
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	b9bb      	cbnz	r3, 800945c <_dtoa_r+0x904>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009432:	b99b      	cbnz	r3, 800945c <_dtoa_r+0x904>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800943a:	0d1b      	lsrs	r3, r3, #20
 800943c:	051b      	lsls	r3, r3, #20
 800943e:	b183      	cbz	r3, 8009462 <_dtoa_r+0x90a>
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	3301      	adds	r3, #1
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	f04f 0801 	mov.w	r8, #1
 8009450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f af6f 	bne.w	8009336 <_dtoa_r+0x7de>
 8009458:	2001      	movs	r0, #1
 800945a:	e774      	b.n	8009346 <_dtoa_r+0x7ee>
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	e7f6      	b.n	8009450 <_dtoa_r+0x8f8>
 8009462:	4698      	mov	r8, r3
 8009464:	e7f4      	b.n	8009450 <_dtoa_r+0x8f8>
 8009466:	d082      	beq.n	800936e <_dtoa_r+0x816>
 8009468:	9a05      	ldr	r2, [sp, #20]
 800946a:	331c      	adds	r3, #28
 800946c:	441a      	add	r2, r3
 800946e:	9205      	str	r2, [sp, #20]
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	441a      	add	r2, r3
 8009474:	441d      	add	r5, r3
 8009476:	9206      	str	r2, [sp, #24]
 8009478:	e779      	b.n	800936e <_dtoa_r+0x816>
 800947a:	4603      	mov	r3, r0
 800947c:	e7f4      	b.n	8009468 <_dtoa_r+0x910>
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dc37      	bgt.n	80094f4 <_dtoa_r+0x99c>
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	2b02      	cmp	r3, #2
 8009488:	dd34      	ble.n	80094f4 <_dtoa_r+0x99c>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	b963      	cbnz	r3, 80094ac <_dtoa_r+0x954>
 8009492:	4631      	mov	r1, r6
 8009494:	2205      	movs	r2, #5
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fab2 	bl	8009a00 <__multadd>
 800949c:	4601      	mov	r1, r0
 800949e:	4606      	mov	r6, r0
 80094a0:	4650      	mov	r0, sl
 80094a2:	f000 fcc7 	bl	8009e34 <__mcmp>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f73f adbb 	bgt.w	8009022 <_dtoa_r+0x4ca>
 80094ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ae:	9d00      	ldr	r5, [sp, #0]
 80094b0:	ea6f 0b03 	mvn.w	fp, r3
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	4631      	mov	r1, r6
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fa7e 	bl	80099bc <_Bfree>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f43f aeab 	beq.w	800921c <_dtoa_r+0x6c4>
 80094c6:	f1b8 0f00 	cmp.w	r8, #0
 80094ca:	d005      	beq.n	80094d8 <_dtoa_r+0x980>
 80094cc:	45b8      	cmp	r8, r7
 80094ce:	d003      	beq.n	80094d8 <_dtoa_r+0x980>
 80094d0:	4641      	mov	r1, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fa72 	bl	80099bc <_Bfree>
 80094d8:	4639      	mov	r1, r7
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa6e 	bl	80099bc <_Bfree>
 80094e0:	e69c      	b.n	800921c <_dtoa_r+0x6c4>
 80094e2:	2600      	movs	r6, #0
 80094e4:	4637      	mov	r7, r6
 80094e6:	e7e1      	b.n	80094ac <_dtoa_r+0x954>
 80094e8:	46bb      	mov	fp, r7
 80094ea:	4637      	mov	r7, r6
 80094ec:	e599      	b.n	8009022 <_dtoa_r+0x4ca>
 80094ee:	bf00      	nop
 80094f0:	40240000 	.word	0x40240000
 80094f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80c8 	beq.w	800968c <_dtoa_r+0xb34>
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	2d00      	cmp	r5, #0
 8009502:	dd05      	ble.n	8009510 <_dtoa_r+0x9b8>
 8009504:	4639      	mov	r1, r7
 8009506:	462a      	mov	r2, r5
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fc27 	bl	8009d5c <__lshift>
 800950e:	4607      	mov	r7, r0
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d05b      	beq.n	80095ce <_dtoa_r+0xa76>
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fa0f 	bl	800993c <_Balloc>
 800951e:	4605      	mov	r5, r0
 8009520:	b928      	cbnz	r0, 800952e <_dtoa_r+0x9d6>
 8009522:	4b83      	ldr	r3, [pc, #524]	; (8009730 <_dtoa_r+0xbd8>)
 8009524:	4602      	mov	r2, r0
 8009526:	f240 21ef 	movw	r1, #751	; 0x2ef
 800952a:	f7ff bb2e 	b.w	8008b8a <_dtoa_r+0x32>
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	3202      	adds	r2, #2
 8009532:	0092      	lsls	r2, r2, #2
 8009534:	f107 010c 	add.w	r1, r7, #12
 8009538:	300c      	adds	r0, #12
 800953a:	f000 ffab 	bl	800a494 <memcpy>
 800953e:	2201      	movs	r2, #1
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fc0a 	bl	8009d5c <__lshift>
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009552:	4413      	add	r3, r2
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	46b8      	mov	r8, r7
 800955e:	9306      	str	r3, [sp, #24]
 8009560:	4607      	mov	r7, r0
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	4631      	mov	r1, r6
 8009566:	3b01      	subs	r3, #1
 8009568:	4650      	mov	r0, sl
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	f7ff fa69 	bl	8008a42 <quorem>
 8009570:	4641      	mov	r1, r8
 8009572:	9002      	str	r0, [sp, #8]
 8009574:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009578:	4650      	mov	r0, sl
 800957a:	f000 fc5b 	bl	8009e34 <__mcmp>
 800957e:	463a      	mov	r2, r7
 8009580:	9005      	str	r0, [sp, #20]
 8009582:	4631      	mov	r1, r6
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc71 	bl	8009e6c <__mdiff>
 800958a:	68c2      	ldr	r2, [r0, #12]
 800958c:	4605      	mov	r5, r0
 800958e:	bb02      	cbnz	r2, 80095d2 <_dtoa_r+0xa7a>
 8009590:	4601      	mov	r1, r0
 8009592:	4650      	mov	r0, sl
 8009594:	f000 fc4e 	bl	8009e34 <__mcmp>
 8009598:	4602      	mov	r2, r0
 800959a:	4629      	mov	r1, r5
 800959c:	4620      	mov	r0, r4
 800959e:	9209      	str	r2, [sp, #36]	; 0x24
 80095a0:	f000 fa0c 	bl	80099bc <_Bfree>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a8:	9d04      	ldr	r5, [sp, #16]
 80095aa:	ea43 0102 	orr.w	r1, r3, r2
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	4319      	orrs	r1, r3
 80095b2:	d110      	bne.n	80095d6 <_dtoa_r+0xa7e>
 80095b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095b8:	d029      	beq.n	800960e <_dtoa_r+0xab6>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dd02      	ble.n	80095c6 <_dtoa_r+0xa6e>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	f883 9000 	strb.w	r9, [r3]
 80095cc:	e774      	b.n	80094b8 <_dtoa_r+0x960>
 80095ce:	4638      	mov	r0, r7
 80095d0:	e7ba      	b.n	8009548 <_dtoa_r+0x9f0>
 80095d2:	2201      	movs	r2, #1
 80095d4:	e7e1      	b.n	800959a <_dtoa_r+0xa42>
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	db04      	blt.n	80095e6 <_dtoa_r+0xa8e>
 80095dc:	9907      	ldr	r1, [sp, #28]
 80095de:	430b      	orrs	r3, r1
 80095e0:	9906      	ldr	r1, [sp, #24]
 80095e2:	430b      	orrs	r3, r1
 80095e4:	d120      	bne.n	8009628 <_dtoa_r+0xad0>
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	dded      	ble.n	80095c6 <_dtoa_r+0xa6e>
 80095ea:	4651      	mov	r1, sl
 80095ec:	2201      	movs	r2, #1
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fbb4 	bl	8009d5c <__lshift>
 80095f4:	4631      	mov	r1, r6
 80095f6:	4682      	mov	sl, r0
 80095f8:	f000 fc1c 	bl	8009e34 <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	dc03      	bgt.n	8009608 <_dtoa_r+0xab0>
 8009600:	d1e1      	bne.n	80095c6 <_dtoa_r+0xa6e>
 8009602:	f019 0f01 	tst.w	r9, #1
 8009606:	d0de      	beq.n	80095c6 <_dtoa_r+0xa6e>
 8009608:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800960c:	d1d8      	bne.n	80095c0 <_dtoa_r+0xa68>
 800960e:	9a01      	ldr	r2, [sp, #4]
 8009610:	2339      	movs	r3, #57	; 0x39
 8009612:	7013      	strb	r3, [r2, #0]
 8009614:	462b      	mov	r3, r5
 8009616:	461d      	mov	r5, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800961e:	2a39      	cmp	r2, #57	; 0x39
 8009620:	d06c      	beq.n	80096fc <_dtoa_r+0xba4>
 8009622:	3201      	adds	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e747      	b.n	80094b8 <_dtoa_r+0x960>
 8009628:	2a00      	cmp	r2, #0
 800962a:	dd07      	ble.n	800963c <_dtoa_r+0xae4>
 800962c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009630:	d0ed      	beq.n	800960e <_dtoa_r+0xab6>
 8009632:	9a01      	ldr	r2, [sp, #4]
 8009634:	f109 0301 	add.w	r3, r9, #1
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e73d      	b.n	80094b8 <_dtoa_r+0x960>
 800963c:	9b04      	ldr	r3, [sp, #16]
 800963e:	9a08      	ldr	r2, [sp, #32]
 8009640:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009644:	4293      	cmp	r3, r2
 8009646:	d043      	beq.n	80096d0 <_dtoa_r+0xb78>
 8009648:	4651      	mov	r1, sl
 800964a:	2300      	movs	r3, #0
 800964c:	220a      	movs	r2, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f9d6 	bl	8009a00 <__multadd>
 8009654:	45b8      	cmp	r8, r7
 8009656:	4682      	mov	sl, r0
 8009658:	f04f 0300 	mov.w	r3, #0
 800965c:	f04f 020a 	mov.w	r2, #10
 8009660:	4641      	mov	r1, r8
 8009662:	4620      	mov	r0, r4
 8009664:	d107      	bne.n	8009676 <_dtoa_r+0xb1e>
 8009666:	f000 f9cb 	bl	8009a00 <__multadd>
 800966a:	4680      	mov	r8, r0
 800966c:	4607      	mov	r7, r0
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	e775      	b.n	8009562 <_dtoa_r+0xa0a>
 8009676:	f000 f9c3 	bl	8009a00 <__multadd>
 800967a:	4639      	mov	r1, r7
 800967c:	4680      	mov	r8, r0
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f9bc 	bl	8009a00 <__multadd>
 8009688:	4607      	mov	r7, r0
 800968a:	e7f0      	b.n	800966e <_dtoa_r+0xb16>
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	9d00      	ldr	r5, [sp, #0]
 8009692:	4631      	mov	r1, r6
 8009694:	4650      	mov	r0, sl
 8009696:	f7ff f9d4 	bl	8008a42 <quorem>
 800969a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	f805 9b01 	strb.w	r9, [r5], #1
 80096a4:	1aea      	subs	r2, r5, r3
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	dd07      	ble.n	80096bc <_dtoa_r+0xb64>
 80096ac:	4651      	mov	r1, sl
 80096ae:	2300      	movs	r3, #0
 80096b0:	220a      	movs	r2, #10
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f9a4 	bl	8009a00 <__multadd>
 80096b8:	4682      	mov	sl, r0
 80096ba:	e7ea      	b.n	8009692 <_dtoa_r+0xb3a>
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfc8      	it	gt
 80096c2:	461d      	movgt	r5, r3
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	bfd8      	it	le
 80096c8:	2501      	movle	r5, #1
 80096ca:	441d      	add	r5, r3
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	4651      	mov	r1, sl
 80096d2:	2201      	movs	r2, #1
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fb41 	bl	8009d5c <__lshift>
 80096da:	4631      	mov	r1, r6
 80096dc:	4682      	mov	sl, r0
 80096de:	f000 fba9 	bl	8009e34 <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	dc96      	bgt.n	8009614 <_dtoa_r+0xabc>
 80096e6:	d102      	bne.n	80096ee <_dtoa_r+0xb96>
 80096e8:	f019 0f01 	tst.w	r9, #1
 80096ec:	d192      	bne.n	8009614 <_dtoa_r+0xabc>
 80096ee:	462b      	mov	r3, r5
 80096f0:	461d      	mov	r5, r3
 80096f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f6:	2a30      	cmp	r2, #48	; 0x30
 80096f8:	d0fa      	beq.n	80096f0 <_dtoa_r+0xb98>
 80096fa:	e6dd      	b.n	80094b8 <_dtoa_r+0x960>
 80096fc:	9a00      	ldr	r2, [sp, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d189      	bne.n	8009616 <_dtoa_r+0xabe>
 8009702:	f10b 0b01 	add.w	fp, fp, #1
 8009706:	2331      	movs	r3, #49	; 0x31
 8009708:	e796      	b.n	8009638 <_dtoa_r+0xae0>
 800970a:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <_dtoa_r+0xbdc>)
 800970c:	f7ff ba99 	b.w	8008c42 <_dtoa_r+0xea>
 8009710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f aa6d 	bne.w	8008bf2 <_dtoa_r+0x9a>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <_dtoa_r+0xbe0>)
 800971a:	f7ff ba92 	b.w	8008c42 <_dtoa_r+0xea>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	dcb5      	bgt.n	8009690 <_dtoa_r+0xb38>
 8009724:	9b07      	ldr	r3, [sp, #28]
 8009726:	2b02      	cmp	r3, #2
 8009728:	f73f aeb1 	bgt.w	800948e <_dtoa_r+0x936>
 800972c:	e7b0      	b.n	8009690 <_dtoa_r+0xb38>
 800972e:	bf00      	nop
 8009730:	0800ac28 	.word	0x0800ac28
 8009734:	0800ab88 	.word	0x0800ab88
 8009738:	0800abac 	.word	0x0800abac

0800973c <_free_r>:
 800973c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800973e:	2900      	cmp	r1, #0
 8009740:	d044      	beq.n	80097cc <_free_r+0x90>
 8009742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009746:	9001      	str	r0, [sp, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f1a1 0404 	sub.w	r4, r1, #4
 800974e:	bfb8      	it	lt
 8009750:	18e4      	addlt	r4, r4, r3
 8009752:	f000 f8e7 	bl	8009924 <__malloc_lock>
 8009756:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <_free_r+0x94>)
 8009758:	9801      	ldr	r0, [sp, #4]
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	b933      	cbnz	r3, 800976c <_free_r+0x30>
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	6014      	str	r4, [r2, #0]
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	f000 b8e2 	b.w	8009930 <__malloc_unlock>
 800976c:	42a3      	cmp	r3, r4
 800976e:	d908      	bls.n	8009782 <_free_r+0x46>
 8009770:	6825      	ldr	r5, [r4, #0]
 8009772:	1961      	adds	r1, r4, r5
 8009774:	428b      	cmp	r3, r1
 8009776:	bf01      	itttt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	1949      	addeq	r1, r1, r5
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	e7ed      	b.n	800975e <_free_r+0x22>
 8009782:	461a      	mov	r2, r3
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b10b      	cbz	r3, 800978c <_free_r+0x50>
 8009788:	42a3      	cmp	r3, r4
 800978a:	d9fa      	bls.n	8009782 <_free_r+0x46>
 800978c:	6811      	ldr	r1, [r2, #0]
 800978e:	1855      	adds	r5, r2, r1
 8009790:	42a5      	cmp	r5, r4
 8009792:	d10b      	bne.n	80097ac <_free_r+0x70>
 8009794:	6824      	ldr	r4, [r4, #0]
 8009796:	4421      	add	r1, r4
 8009798:	1854      	adds	r4, r2, r1
 800979a:	42a3      	cmp	r3, r4
 800979c:	6011      	str	r1, [r2, #0]
 800979e:	d1e0      	bne.n	8009762 <_free_r+0x26>
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	6053      	str	r3, [r2, #4]
 80097a6:	440c      	add	r4, r1
 80097a8:	6014      	str	r4, [r2, #0]
 80097aa:	e7da      	b.n	8009762 <_free_r+0x26>
 80097ac:	d902      	bls.n	80097b4 <_free_r+0x78>
 80097ae:	230c      	movs	r3, #12
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	e7d6      	b.n	8009762 <_free_r+0x26>
 80097b4:	6825      	ldr	r5, [r4, #0]
 80097b6:	1961      	adds	r1, r4, r5
 80097b8:	428b      	cmp	r3, r1
 80097ba:	bf04      	itt	eq
 80097bc:	6819      	ldreq	r1, [r3, #0]
 80097be:	685b      	ldreq	r3, [r3, #4]
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	bf04      	itt	eq
 80097c4:	1949      	addeq	r1, r1, r5
 80097c6:	6021      	streq	r1, [r4, #0]
 80097c8:	6054      	str	r4, [r2, #4]
 80097ca:	e7ca      	b.n	8009762 <_free_r+0x26>
 80097cc:	b003      	add	sp, #12
 80097ce:	bd30      	pop	{r4, r5, pc}
 80097d0:	200005d4 	.word	0x200005d4

080097d4 <malloc>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <malloc+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 b823 	b.w	8009824 <_malloc_r>
 80097de:	bf00      	nop
 80097e0:	2000011c 	.word	0x2000011c

080097e4 <sbrk_aligned>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4e0e      	ldr	r6, [pc, #56]	; (8009820 <sbrk_aligned+0x3c>)
 80097e8:	460c      	mov	r4, r1
 80097ea:	6831      	ldr	r1, [r6, #0]
 80097ec:	4605      	mov	r5, r0
 80097ee:	b911      	cbnz	r1, 80097f6 <sbrk_aligned+0x12>
 80097f0:	f000 fe40 	bl	800a474 <_sbrk_r>
 80097f4:	6030      	str	r0, [r6, #0]
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 fe3b 	bl	800a474 <_sbrk_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d00a      	beq.n	8009818 <sbrk_aligned+0x34>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d007      	beq.n	800981c <sbrk_aligned+0x38>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fe30 	bl	800a474 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d101      	bne.n	800981c <sbrk_aligned+0x38>
 8009818:	f04f 34ff 	mov.w	r4, #4294967295
 800981c:	4620      	mov	r0, r4
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	200005d8 	.word	0x200005d8

08009824 <_malloc_r>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	1ccd      	adds	r5, r1, #3
 800982a:	f025 0503 	bic.w	r5, r5, #3
 800982e:	3508      	adds	r5, #8
 8009830:	2d0c      	cmp	r5, #12
 8009832:	bf38      	it	cc
 8009834:	250c      	movcc	r5, #12
 8009836:	2d00      	cmp	r5, #0
 8009838:	4607      	mov	r7, r0
 800983a:	db01      	blt.n	8009840 <_malloc_r+0x1c>
 800983c:	42a9      	cmp	r1, r5
 800983e:	d905      	bls.n	800984c <_malloc_r+0x28>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	2600      	movs	r6, #0
 8009846:	4630      	mov	r0, r6
 8009848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009920 <_malloc_r+0xfc>
 8009850:	f000 f868 	bl	8009924 <__malloc_lock>
 8009854:	f8d8 3000 	ldr.w	r3, [r8]
 8009858:	461c      	mov	r4, r3
 800985a:	bb5c      	cbnz	r4, 80098b4 <_malloc_r+0x90>
 800985c:	4629      	mov	r1, r5
 800985e:	4638      	mov	r0, r7
 8009860:	f7ff ffc0 	bl	80097e4 <sbrk_aligned>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	4604      	mov	r4, r0
 8009868:	d155      	bne.n	8009916 <_malloc_r+0xf2>
 800986a:	f8d8 4000 	ldr.w	r4, [r8]
 800986e:	4626      	mov	r6, r4
 8009870:	2e00      	cmp	r6, #0
 8009872:	d145      	bne.n	8009900 <_malloc_r+0xdc>
 8009874:	2c00      	cmp	r4, #0
 8009876:	d048      	beq.n	800990a <_malloc_r+0xe6>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	4631      	mov	r1, r6
 800987c:	4638      	mov	r0, r7
 800987e:	eb04 0903 	add.w	r9, r4, r3
 8009882:	f000 fdf7 	bl	800a474 <_sbrk_r>
 8009886:	4581      	cmp	r9, r0
 8009888:	d13f      	bne.n	800990a <_malloc_r+0xe6>
 800988a:	6821      	ldr	r1, [r4, #0]
 800988c:	1a6d      	subs	r5, r5, r1
 800988e:	4629      	mov	r1, r5
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff ffa7 	bl	80097e4 <sbrk_aligned>
 8009896:	3001      	adds	r0, #1
 8009898:	d037      	beq.n	800990a <_malloc_r+0xe6>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	442b      	add	r3, r5
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	f8d8 3000 	ldr.w	r3, [r8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d038      	beq.n	800991a <_malloc_r+0xf6>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	42a2      	cmp	r2, r4
 80098ac:	d12b      	bne.n	8009906 <_malloc_r+0xe2>
 80098ae:	2200      	movs	r2, #0
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	e00f      	b.n	80098d4 <_malloc_r+0xb0>
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	1b52      	subs	r2, r2, r5
 80098b8:	d41f      	bmi.n	80098fa <_malloc_r+0xd6>
 80098ba:	2a0b      	cmp	r2, #11
 80098bc:	d917      	bls.n	80098ee <_malloc_r+0xca>
 80098be:	1961      	adds	r1, r4, r5
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	6025      	str	r5, [r4, #0]
 80098c4:	bf18      	it	ne
 80098c6:	6059      	strne	r1, [r3, #4]
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	bf08      	it	eq
 80098cc:	f8c8 1000 	streq.w	r1, [r8]
 80098d0:	5162      	str	r2, [r4, r5]
 80098d2:	604b      	str	r3, [r1, #4]
 80098d4:	4638      	mov	r0, r7
 80098d6:	f104 060b 	add.w	r6, r4, #11
 80098da:	f000 f829 	bl	8009930 <__malloc_unlock>
 80098de:	f026 0607 	bic.w	r6, r6, #7
 80098e2:	1d23      	adds	r3, r4, #4
 80098e4:	1af2      	subs	r2, r6, r3
 80098e6:	d0ae      	beq.n	8009846 <_malloc_r+0x22>
 80098e8:	1b9b      	subs	r3, r3, r6
 80098ea:	50a3      	str	r3, [r4, r2]
 80098ec:	e7ab      	b.n	8009846 <_malloc_r+0x22>
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	6862      	ldr	r2, [r4, #4]
 80098f2:	d1dd      	bne.n	80098b0 <_malloc_r+0x8c>
 80098f4:	f8c8 2000 	str.w	r2, [r8]
 80098f8:	e7ec      	b.n	80098d4 <_malloc_r+0xb0>
 80098fa:	4623      	mov	r3, r4
 80098fc:	6864      	ldr	r4, [r4, #4]
 80098fe:	e7ac      	b.n	800985a <_malloc_r+0x36>
 8009900:	4634      	mov	r4, r6
 8009902:	6876      	ldr	r6, [r6, #4]
 8009904:	e7b4      	b.n	8009870 <_malloc_r+0x4c>
 8009906:	4613      	mov	r3, r2
 8009908:	e7cc      	b.n	80098a4 <_malloc_r+0x80>
 800990a:	230c      	movs	r3, #12
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4638      	mov	r0, r7
 8009910:	f000 f80e 	bl	8009930 <__malloc_unlock>
 8009914:	e797      	b.n	8009846 <_malloc_r+0x22>
 8009916:	6025      	str	r5, [r4, #0]
 8009918:	e7dc      	b.n	80098d4 <_malloc_r+0xb0>
 800991a:	605b      	str	r3, [r3, #4]
 800991c:	deff      	udf	#255	; 0xff
 800991e:	bf00      	nop
 8009920:	200005d4 	.word	0x200005d4

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_lock+0x8>)
 8009926:	f7ff b88a 	b.w	8008a3e <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	200005d0 	.word	0x200005d0

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff b885 	b.w	8008a40 <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	200005d0 	.word	0x200005d0

0800993c <_Balloc>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	69c6      	ldr	r6, [r0, #28]
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
 8009944:	b976      	cbnz	r6, 8009964 <_Balloc+0x28>
 8009946:	2010      	movs	r0, #16
 8009948:	f7ff ff44 	bl	80097d4 <malloc>
 800994c:	4602      	mov	r2, r0
 800994e:	61e0      	str	r0, [r4, #28]
 8009950:	b920      	cbnz	r0, 800995c <_Balloc+0x20>
 8009952:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <_Balloc+0x78>)
 8009954:	4818      	ldr	r0, [pc, #96]	; (80099b8 <_Balloc+0x7c>)
 8009956:	216b      	movs	r1, #107	; 0x6b
 8009958:	f000 fdaa 	bl	800a4b0 <__assert_func>
 800995c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009960:	6006      	str	r6, [r0, #0]
 8009962:	60c6      	str	r6, [r0, #12]
 8009964:	69e6      	ldr	r6, [r4, #28]
 8009966:	68f3      	ldr	r3, [r6, #12]
 8009968:	b183      	cbz	r3, 800998c <_Balloc+0x50>
 800996a:	69e3      	ldr	r3, [r4, #28]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009972:	b9b8      	cbnz	r0, 80099a4 <_Balloc+0x68>
 8009974:	2101      	movs	r1, #1
 8009976:	fa01 f605 	lsl.w	r6, r1, r5
 800997a:	1d72      	adds	r2, r6, #5
 800997c:	0092      	lsls	r2, r2, #2
 800997e:	4620      	mov	r0, r4
 8009980:	f000 fdb4 	bl	800a4ec <_calloc_r>
 8009984:	b160      	cbz	r0, 80099a0 <_Balloc+0x64>
 8009986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800998a:	e00e      	b.n	80099aa <_Balloc+0x6e>
 800998c:	2221      	movs	r2, #33	; 0x21
 800998e:	2104      	movs	r1, #4
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fdab 	bl	800a4ec <_calloc_r>
 8009996:	69e3      	ldr	r3, [r4, #28]
 8009998:	60f0      	str	r0, [r6, #12]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e4      	bne.n	800996a <_Balloc+0x2e>
 80099a0:	2000      	movs	r0, #0
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	6802      	ldr	r2, [r0, #0]
 80099a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099aa:	2300      	movs	r3, #0
 80099ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099b0:	e7f7      	b.n	80099a2 <_Balloc+0x66>
 80099b2:	bf00      	nop
 80099b4:	0800abb9 	.word	0x0800abb9
 80099b8:	0800ac39 	.word	0x0800ac39

080099bc <_Bfree>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	69c6      	ldr	r6, [r0, #28]
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Bfree+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ff04 	bl	80097d4 <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	61e8      	str	r0, [r5, #28]
 80099d0:	b920      	cbnz	r0, 80099dc <_Bfree+0x20>
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <_Bfree+0x3c>)
 80099d4:	4809      	ldr	r0, [pc, #36]	; (80099fc <_Bfree+0x40>)
 80099d6:	218f      	movs	r1, #143	; 0x8f
 80099d8:	f000 fd6a 	bl	800a4b0 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	b13c      	cbz	r4, 80099f6 <_Bfree+0x3a>
 80099e6:	69eb      	ldr	r3, [r5, #28]
 80099e8:	6862      	ldr	r2, [r4, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099f0:	6021      	str	r1, [r4, #0]
 80099f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	0800abb9 	.word	0x0800abb9
 80099fc:	0800ac39 	.word	0x0800ac39

08009a00 <__multadd>:
 8009a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a04:	690d      	ldr	r5, [r1, #16]
 8009a06:	4607      	mov	r7, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	f101 0c14 	add.w	ip, r1, #20
 8009a10:	2000      	movs	r0, #0
 8009a12:	f8dc 3000 	ldr.w	r3, [ip]
 8009a16:	b299      	uxth	r1, r3
 8009a18:	fb02 6101 	mla	r1, r2, r1, r6
 8009a1c:	0c1e      	lsrs	r6, r3, #16
 8009a1e:	0c0b      	lsrs	r3, r1, #16
 8009a20:	fb02 3306 	mla	r3, r2, r6, r3
 8009a24:	b289      	uxth	r1, r1
 8009a26:	3001      	adds	r0, #1
 8009a28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a2c:	4285      	cmp	r5, r0
 8009a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a36:	dcec      	bgt.n	8009a12 <__multadd+0x12>
 8009a38:	b30e      	cbz	r6, 8009a7e <__multadd+0x7e>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	dc19      	bgt.n	8009a74 <__multadd+0x74>
 8009a40:	6861      	ldr	r1, [r4, #4]
 8009a42:	4638      	mov	r0, r7
 8009a44:	3101      	adds	r1, #1
 8009a46:	f7ff ff79 	bl	800993c <_Balloc>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	b928      	cbnz	r0, 8009a5a <__multadd+0x5a>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <__multadd+0x84>)
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <__multadd+0x88>)
 8009a54:	21ba      	movs	r1, #186	; 0xba
 8009a56:	f000 fd2b 	bl	800a4b0 <__assert_func>
 8009a5a:	6922      	ldr	r2, [r4, #16]
 8009a5c:	3202      	adds	r2, #2
 8009a5e:	f104 010c 	add.w	r1, r4, #12
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	300c      	adds	r0, #12
 8009a66:	f000 fd15 	bl	800a494 <memcpy>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ffa5 	bl	80099bc <_Bfree>
 8009a72:	4644      	mov	r4, r8
 8009a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a78:	3501      	adds	r5, #1
 8009a7a:	615e      	str	r6, [r3, #20]
 8009a7c:	6125      	str	r5, [r4, #16]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	0800ac28 	.word	0x0800ac28
 8009a88:	0800ac39 	.word	0x0800ac39

08009a8c <__hi0bits>:
 8009a8c:	0c03      	lsrs	r3, r0, #16
 8009a8e:	041b      	lsls	r3, r3, #16
 8009a90:	b9d3      	cbnz	r3, 8009ac8 <__hi0bits+0x3c>
 8009a92:	0400      	lsls	r0, r0, #16
 8009a94:	2310      	movs	r3, #16
 8009a96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a9a:	bf04      	itt	eq
 8009a9c:	0200      	lsleq	r0, r0, #8
 8009a9e:	3308      	addeq	r3, #8
 8009aa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009aa4:	bf04      	itt	eq
 8009aa6:	0100      	lsleq	r0, r0, #4
 8009aa8:	3304      	addeq	r3, #4
 8009aaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aae:	bf04      	itt	eq
 8009ab0:	0080      	lsleq	r0, r0, #2
 8009ab2:	3302      	addeq	r3, #2
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	db05      	blt.n	8009ac4 <__hi0bits+0x38>
 8009ab8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009abc:	f103 0301 	add.w	r3, r3, #1
 8009ac0:	bf08      	it	eq
 8009ac2:	2320      	moveq	r3, #32
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	4770      	bx	lr
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e7e4      	b.n	8009a96 <__hi0bits+0xa>

08009acc <__lo0bits>:
 8009acc:	6803      	ldr	r3, [r0, #0]
 8009ace:	f013 0207 	ands.w	r2, r3, #7
 8009ad2:	d00c      	beq.n	8009aee <__lo0bits+0x22>
 8009ad4:	07d9      	lsls	r1, r3, #31
 8009ad6:	d422      	bmi.n	8009b1e <__lo0bits+0x52>
 8009ad8:	079a      	lsls	r2, r3, #30
 8009ada:	bf49      	itett	mi
 8009adc:	085b      	lsrmi	r3, r3, #1
 8009ade:	089b      	lsrpl	r3, r3, #2
 8009ae0:	6003      	strmi	r3, [r0, #0]
 8009ae2:	2201      	movmi	r2, #1
 8009ae4:	bf5c      	itt	pl
 8009ae6:	6003      	strpl	r3, [r0, #0]
 8009ae8:	2202      	movpl	r2, #2
 8009aea:	4610      	mov	r0, r2
 8009aec:	4770      	bx	lr
 8009aee:	b299      	uxth	r1, r3
 8009af0:	b909      	cbnz	r1, 8009af6 <__lo0bits+0x2a>
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	2210      	movs	r2, #16
 8009af6:	b2d9      	uxtb	r1, r3
 8009af8:	b909      	cbnz	r1, 8009afe <__lo0bits+0x32>
 8009afa:	3208      	adds	r2, #8
 8009afc:	0a1b      	lsrs	r3, r3, #8
 8009afe:	0719      	lsls	r1, r3, #28
 8009b00:	bf04      	itt	eq
 8009b02:	091b      	lsreq	r3, r3, #4
 8009b04:	3204      	addeq	r2, #4
 8009b06:	0799      	lsls	r1, r3, #30
 8009b08:	bf04      	itt	eq
 8009b0a:	089b      	lsreq	r3, r3, #2
 8009b0c:	3202      	addeq	r2, #2
 8009b0e:	07d9      	lsls	r1, r3, #31
 8009b10:	d403      	bmi.n	8009b1a <__lo0bits+0x4e>
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	f102 0201 	add.w	r2, r2, #1
 8009b18:	d003      	beq.n	8009b22 <__lo0bits+0x56>
 8009b1a:	6003      	str	r3, [r0, #0]
 8009b1c:	e7e5      	b.n	8009aea <__lo0bits+0x1e>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	e7e3      	b.n	8009aea <__lo0bits+0x1e>
 8009b22:	2220      	movs	r2, #32
 8009b24:	e7e1      	b.n	8009aea <__lo0bits+0x1e>
	...

08009b28 <__i2b>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	f7ff ff05 	bl	800993c <_Balloc>
 8009b32:	4602      	mov	r2, r0
 8009b34:	b928      	cbnz	r0, 8009b42 <__i2b+0x1a>
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <__i2b+0x24>)
 8009b38:	4805      	ldr	r0, [pc, #20]	; (8009b50 <__i2b+0x28>)
 8009b3a:	f240 1145 	movw	r1, #325	; 0x145
 8009b3e:	f000 fcb7 	bl	800a4b0 <__assert_func>
 8009b42:	2301      	movs	r3, #1
 8009b44:	6144      	str	r4, [r0, #20]
 8009b46:	6103      	str	r3, [r0, #16]
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	bf00      	nop
 8009b4c:	0800ac28 	.word	0x0800ac28
 8009b50:	0800ac39 	.word	0x0800ac39

08009b54 <__multiply>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4691      	mov	r9, r2
 8009b5a:	690a      	ldr	r2, [r1, #16]
 8009b5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	bfb8      	it	lt
 8009b64:	460b      	movlt	r3, r1
 8009b66:	460c      	mov	r4, r1
 8009b68:	bfbc      	itt	lt
 8009b6a:	464c      	movlt	r4, r9
 8009b6c:	4699      	movlt	r9, r3
 8009b6e:	6927      	ldr	r7, [r4, #16]
 8009b70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	6861      	ldr	r1, [r4, #4]
 8009b78:	eb07 060a 	add.w	r6, r7, sl
 8009b7c:	42b3      	cmp	r3, r6
 8009b7e:	b085      	sub	sp, #20
 8009b80:	bfb8      	it	lt
 8009b82:	3101      	addlt	r1, #1
 8009b84:	f7ff feda 	bl	800993c <_Balloc>
 8009b88:	b930      	cbnz	r0, 8009b98 <__multiply+0x44>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	4b44      	ldr	r3, [pc, #272]	; (8009ca0 <__multiply+0x14c>)
 8009b8e:	4845      	ldr	r0, [pc, #276]	; (8009ca4 <__multiply+0x150>)
 8009b90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b94:	f000 fc8c 	bl	800a4b0 <__assert_func>
 8009b98:	f100 0514 	add.w	r5, r0, #20
 8009b9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4543      	cmp	r3, r8
 8009ba6:	d321      	bcc.n	8009bec <__multiply+0x98>
 8009ba8:	f104 0314 	add.w	r3, r4, #20
 8009bac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bb0:	f109 0314 	add.w	r3, r9, #20
 8009bb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bb8:	9202      	str	r2, [sp, #8]
 8009bba:	1b3a      	subs	r2, r7, r4
 8009bbc:	3a15      	subs	r2, #21
 8009bbe:	f022 0203 	bic.w	r2, r2, #3
 8009bc2:	3204      	adds	r2, #4
 8009bc4:	f104 0115 	add.w	r1, r4, #21
 8009bc8:	428f      	cmp	r7, r1
 8009bca:	bf38      	it	cc
 8009bcc:	2204      	movcc	r2, #4
 8009bce:	9201      	str	r2, [sp, #4]
 8009bd0:	9a02      	ldr	r2, [sp, #8]
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d80c      	bhi.n	8009bf2 <__multiply+0x9e>
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	dd03      	ble.n	8009be4 <__multiply+0x90>
 8009bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d05b      	beq.n	8009c9c <__multiply+0x148>
 8009be4:	6106      	str	r6, [r0, #16]
 8009be6:	b005      	add	sp, #20
 8009be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	f843 2b04 	str.w	r2, [r3], #4
 8009bf0:	e7d8      	b.n	8009ba4 <__multiply+0x50>
 8009bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bf6:	f1ba 0f00 	cmp.w	sl, #0
 8009bfa:	d024      	beq.n	8009c46 <__multiply+0xf2>
 8009bfc:	f104 0e14 	add.w	lr, r4, #20
 8009c00:	46a9      	mov	r9, r5
 8009c02:	f04f 0c00 	mov.w	ip, #0
 8009c06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c0a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c0e:	fa1f fb82 	uxth.w	fp, r2
 8009c12:	b289      	uxth	r1, r1
 8009c14:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c20:	4461      	add	r1, ip
 8009c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c26:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c2e:	b289      	uxth	r1, r1
 8009c30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c34:	4577      	cmp	r7, lr
 8009c36:	f849 1b04 	str.w	r1, [r9], #4
 8009c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c3e:	d8e2      	bhi.n	8009c06 <__multiply+0xb2>
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	f845 c002 	str.w	ip, [r5, r2]
 8009c46:	9a03      	ldr	r2, [sp, #12]
 8009c48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	f1b9 0f00 	cmp.w	r9, #0
 8009c52:	d021      	beq.n	8009c98 <__multiply+0x144>
 8009c54:	6829      	ldr	r1, [r5, #0]
 8009c56:	f104 0c14 	add.w	ip, r4, #20
 8009c5a:	46ae      	mov	lr, r5
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	f8bc b000 	ldrh.w	fp, [ip]
 8009c64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c68:	fb09 220b 	mla	r2, r9, fp, r2
 8009c6c:	4452      	add	r2, sl
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c74:	f84e 1b04 	str.w	r1, [lr], #4
 8009c78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c80:	f8be 1000 	ldrh.w	r1, [lr]
 8009c84:	fb09 110a 	mla	r1, r9, sl, r1
 8009c88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c8c:	4567      	cmp	r7, ip
 8009c8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c92:	d8e5      	bhi.n	8009c60 <__multiply+0x10c>
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	50a9      	str	r1, [r5, r2]
 8009c98:	3504      	adds	r5, #4
 8009c9a:	e799      	b.n	8009bd0 <__multiply+0x7c>
 8009c9c:	3e01      	subs	r6, #1
 8009c9e:	e79b      	b.n	8009bd8 <__multiply+0x84>
 8009ca0:	0800ac28 	.word	0x0800ac28
 8009ca4:	0800ac39 	.word	0x0800ac39

08009ca8 <__pow5mult>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4615      	mov	r5, r2
 8009cae:	f012 0203 	ands.w	r2, r2, #3
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	d007      	beq.n	8009cc8 <__pow5mult+0x20>
 8009cb8:	4c25      	ldr	r4, [pc, #148]	; (8009d50 <__pow5mult+0xa8>)
 8009cba:	3a01      	subs	r2, #1
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cc2:	f7ff fe9d 	bl	8009a00 <__multadd>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	10ad      	asrs	r5, r5, #2
 8009cca:	d03d      	beq.n	8009d48 <__pow5mult+0xa0>
 8009ccc:	69f4      	ldr	r4, [r6, #28]
 8009cce:	b97c      	cbnz	r4, 8009cf0 <__pow5mult+0x48>
 8009cd0:	2010      	movs	r0, #16
 8009cd2:	f7ff fd7f 	bl	80097d4 <malloc>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	61f0      	str	r0, [r6, #28]
 8009cda:	b928      	cbnz	r0, 8009ce8 <__pow5mult+0x40>
 8009cdc:	4b1d      	ldr	r3, [pc, #116]	; (8009d54 <__pow5mult+0xac>)
 8009cde:	481e      	ldr	r0, [pc, #120]	; (8009d58 <__pow5mult+0xb0>)
 8009ce0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ce4:	f000 fbe4 	bl	800a4b0 <__assert_func>
 8009ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cec:	6004      	str	r4, [r0, #0]
 8009cee:	60c4      	str	r4, [r0, #12]
 8009cf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cf8:	b94c      	cbnz	r4, 8009d0e <__pow5mult+0x66>
 8009cfa:	f240 2171 	movw	r1, #625	; 0x271
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ff12 	bl	8009b28 <__i2b>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	f04f 0900 	mov.w	r9, #0
 8009d12:	07eb      	lsls	r3, r5, #31
 8009d14:	d50a      	bpl.n	8009d2c <__pow5mult+0x84>
 8009d16:	4639      	mov	r1, r7
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff1a 	bl	8009b54 <__multiply>
 8009d20:	4639      	mov	r1, r7
 8009d22:	4680      	mov	r8, r0
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fe49 	bl	80099bc <_Bfree>
 8009d2a:	4647      	mov	r7, r8
 8009d2c:	106d      	asrs	r5, r5, #1
 8009d2e:	d00b      	beq.n	8009d48 <__pow5mult+0xa0>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	b938      	cbnz	r0, 8009d44 <__pow5mult+0x9c>
 8009d34:	4622      	mov	r2, r4
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ff0b 	bl	8009b54 <__multiply>
 8009d3e:	6020      	str	r0, [r4, #0]
 8009d40:	f8c0 9000 	str.w	r9, [r0]
 8009d44:	4604      	mov	r4, r0
 8009d46:	e7e4      	b.n	8009d12 <__pow5mult+0x6a>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	bf00      	nop
 8009d50:	0800ad88 	.word	0x0800ad88
 8009d54:	0800abb9 	.word	0x0800abb9
 8009d58:	0800ac39 	.word	0x0800ac39

08009d5c <__lshift>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	460c      	mov	r4, r1
 8009d62:	6849      	ldr	r1, [r1, #4]
 8009d64:	6923      	ldr	r3, [r4, #16]
 8009d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	4691      	mov	r9, r2
 8009d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d74:	f108 0601 	add.w	r6, r8, #1
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	db0b      	blt.n	8009d94 <__lshift+0x38>
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff fddd 	bl	800993c <_Balloc>
 8009d82:	4605      	mov	r5, r0
 8009d84:	b948      	cbnz	r0, 8009d9a <__lshift+0x3e>
 8009d86:	4602      	mov	r2, r0
 8009d88:	4b28      	ldr	r3, [pc, #160]	; (8009e2c <__lshift+0xd0>)
 8009d8a:	4829      	ldr	r0, [pc, #164]	; (8009e30 <__lshift+0xd4>)
 8009d8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d90:	f000 fb8e 	bl	800a4b0 <__assert_func>
 8009d94:	3101      	adds	r1, #1
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	e7ee      	b.n	8009d78 <__lshift+0x1c>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f100 0114 	add.w	r1, r0, #20
 8009da0:	f100 0210 	add.w	r2, r0, #16
 8009da4:	4618      	mov	r0, r3
 8009da6:	4553      	cmp	r3, sl
 8009da8:	db33      	blt.n	8009e12 <__lshift+0xb6>
 8009daa:	6920      	ldr	r0, [r4, #16]
 8009dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db0:	f104 0314 	add.w	r3, r4, #20
 8009db4:	f019 091f 	ands.w	r9, r9, #31
 8009db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dc0:	d02b      	beq.n	8009e1a <__lshift+0xbe>
 8009dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8009dc6:	468a      	mov	sl, r1
 8009dc8:	2200      	movs	r2, #0
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8009dd0:	4310      	orrs	r0, r2
 8009dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8009dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dda:	459c      	cmp	ip, r3
 8009ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009de0:	d8f3      	bhi.n	8009dca <__lshift+0x6e>
 8009de2:	ebac 0304 	sub.w	r3, ip, r4
 8009de6:	3b15      	subs	r3, #21
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	3304      	adds	r3, #4
 8009dee:	f104 0015 	add.w	r0, r4, #21
 8009df2:	4584      	cmp	ip, r0
 8009df4:	bf38      	it	cc
 8009df6:	2304      	movcc	r3, #4
 8009df8:	50ca      	str	r2, [r1, r3]
 8009dfa:	b10a      	cbz	r2, 8009e00 <__lshift+0xa4>
 8009dfc:	f108 0602 	add.w	r6, r8, #2
 8009e00:	3e01      	subs	r6, #1
 8009e02:	4638      	mov	r0, r7
 8009e04:	612e      	str	r6, [r5, #16]
 8009e06:	4621      	mov	r1, r4
 8009e08:	f7ff fdd8 	bl	80099bc <_Bfree>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e16:	3301      	adds	r3, #1
 8009e18:	e7c5      	b.n	8009da6 <__lshift+0x4a>
 8009e1a:	3904      	subs	r1, #4
 8009e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e24:	459c      	cmp	ip, r3
 8009e26:	d8f9      	bhi.n	8009e1c <__lshift+0xc0>
 8009e28:	e7ea      	b.n	8009e00 <__lshift+0xa4>
 8009e2a:	bf00      	nop
 8009e2c:	0800ac28 	.word	0x0800ac28
 8009e30:	0800ac39 	.word	0x0800ac39

08009e34 <__mcmp>:
 8009e34:	b530      	push	{r4, r5, lr}
 8009e36:	6902      	ldr	r2, [r0, #16]
 8009e38:	690c      	ldr	r4, [r1, #16]
 8009e3a:	1b12      	subs	r2, r2, r4
 8009e3c:	d10e      	bne.n	8009e5c <__mcmp+0x28>
 8009e3e:	f100 0314 	add.w	r3, r0, #20
 8009e42:	3114      	adds	r1, #20
 8009e44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e54:	42a5      	cmp	r5, r4
 8009e56:	d003      	beq.n	8009e60 <__mcmp+0x2c>
 8009e58:	d305      	bcc.n	8009e66 <__mcmp+0x32>
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	bd30      	pop	{r4, r5, pc}
 8009e60:	4283      	cmp	r3, r0
 8009e62:	d3f3      	bcc.n	8009e4c <__mcmp+0x18>
 8009e64:	e7fa      	b.n	8009e5c <__mcmp+0x28>
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	e7f7      	b.n	8009e5c <__mcmp+0x28>

08009e6c <__mdiff>:
 8009e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	4606      	mov	r6, r0
 8009e74:	4611      	mov	r1, r2
 8009e76:	4620      	mov	r0, r4
 8009e78:	4690      	mov	r8, r2
 8009e7a:	f7ff ffdb 	bl	8009e34 <__mcmp>
 8009e7e:	1e05      	subs	r5, r0, #0
 8009e80:	d110      	bne.n	8009ea4 <__mdiff+0x38>
 8009e82:	4629      	mov	r1, r5
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff fd59 	bl	800993c <_Balloc>
 8009e8a:	b930      	cbnz	r0, 8009e9a <__mdiff+0x2e>
 8009e8c:	4b3a      	ldr	r3, [pc, #232]	; (8009f78 <__mdiff+0x10c>)
 8009e8e:	4602      	mov	r2, r0
 8009e90:	f240 2137 	movw	r1, #567	; 0x237
 8009e94:	4839      	ldr	r0, [pc, #228]	; (8009f7c <__mdiff+0x110>)
 8009e96:	f000 fb0b 	bl	800a4b0 <__assert_func>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	bfa4      	itt	ge
 8009ea6:	4643      	movge	r3, r8
 8009ea8:	46a0      	movge	r8, r4
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eb0:	bfa6      	itte	ge
 8009eb2:	461c      	movge	r4, r3
 8009eb4:	2500      	movge	r5, #0
 8009eb6:	2501      	movlt	r5, #1
 8009eb8:	f7ff fd40 	bl	800993c <_Balloc>
 8009ebc:	b920      	cbnz	r0, 8009ec8 <__mdiff+0x5c>
 8009ebe:	4b2e      	ldr	r3, [pc, #184]	; (8009f78 <__mdiff+0x10c>)
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	f240 2145 	movw	r1, #581	; 0x245
 8009ec6:	e7e5      	b.n	8009e94 <__mdiff+0x28>
 8009ec8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ecc:	6926      	ldr	r6, [r4, #16]
 8009ece:	60c5      	str	r5, [r0, #12]
 8009ed0:	f104 0914 	add.w	r9, r4, #20
 8009ed4:	f108 0514 	add.w	r5, r8, #20
 8009ed8:	f100 0e14 	add.w	lr, r0, #20
 8009edc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ee4:	f108 0210 	add.w	r2, r8, #16
 8009ee8:	46f2      	mov	sl, lr
 8009eea:	2100      	movs	r1, #0
 8009eec:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ef4:	fa11 f88b 	uxtah	r8, r1, fp
 8009ef8:	b299      	uxth	r1, r3
 8009efa:	0c1b      	lsrs	r3, r3, #16
 8009efc:	eba8 0801 	sub.w	r8, r8, r1
 8009f00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f08:	fa1f f888 	uxth.w	r8, r8
 8009f0c:	1419      	asrs	r1, r3, #16
 8009f0e:	454e      	cmp	r6, r9
 8009f10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f14:	f84a 3b04 	str.w	r3, [sl], #4
 8009f18:	d8e8      	bhi.n	8009eec <__mdiff+0x80>
 8009f1a:	1b33      	subs	r3, r6, r4
 8009f1c:	3b15      	subs	r3, #21
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	3304      	adds	r3, #4
 8009f24:	3415      	adds	r4, #21
 8009f26:	42a6      	cmp	r6, r4
 8009f28:	bf38      	it	cc
 8009f2a:	2304      	movcc	r3, #4
 8009f2c:	441d      	add	r5, r3
 8009f2e:	4473      	add	r3, lr
 8009f30:	469e      	mov	lr, r3
 8009f32:	462e      	mov	r6, r5
 8009f34:	4566      	cmp	r6, ip
 8009f36:	d30e      	bcc.n	8009f56 <__mdiff+0xea>
 8009f38:	f10c 0203 	add.w	r2, ip, #3
 8009f3c:	1b52      	subs	r2, r2, r5
 8009f3e:	f022 0203 	bic.w	r2, r2, #3
 8009f42:	3d03      	subs	r5, #3
 8009f44:	45ac      	cmp	ip, r5
 8009f46:	bf38      	it	cc
 8009f48:	2200      	movcc	r2, #0
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f50:	b17a      	cbz	r2, 8009f72 <__mdiff+0x106>
 8009f52:	6107      	str	r7, [r0, #16]
 8009f54:	e7a4      	b.n	8009ea0 <__mdiff+0x34>
 8009f56:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f5a:	fa11 f288 	uxtah	r2, r1, r8
 8009f5e:	1414      	asrs	r4, r2, #16
 8009f60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f64:	b292      	uxth	r2, r2
 8009f66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f6a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f6e:	1421      	asrs	r1, r4, #16
 8009f70:	e7e0      	b.n	8009f34 <__mdiff+0xc8>
 8009f72:	3f01      	subs	r7, #1
 8009f74:	e7ea      	b.n	8009f4c <__mdiff+0xe0>
 8009f76:	bf00      	nop
 8009f78:	0800ac28 	.word	0x0800ac28
 8009f7c:	0800ac39 	.word	0x0800ac39

08009f80 <__d2b>:
 8009f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	460f      	mov	r7, r1
 8009f86:	2101      	movs	r1, #1
 8009f88:	ec59 8b10 	vmov	r8, r9, d0
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	f7ff fcd5 	bl	800993c <_Balloc>
 8009f92:	4604      	mov	r4, r0
 8009f94:	b930      	cbnz	r0, 8009fa4 <__d2b+0x24>
 8009f96:	4602      	mov	r2, r0
 8009f98:	4b24      	ldr	r3, [pc, #144]	; (800a02c <__d2b+0xac>)
 8009f9a:	4825      	ldr	r0, [pc, #148]	; (800a030 <__d2b+0xb0>)
 8009f9c:	f240 310f 	movw	r1, #783	; 0x30f
 8009fa0:	f000 fa86 	bl	800a4b0 <__assert_func>
 8009fa4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fac:	bb2d      	cbnz	r5, 8009ffa <__d2b+0x7a>
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fb4:	d026      	beq.n	800a004 <__d2b+0x84>
 8009fb6:	4668      	mov	r0, sp
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	f7ff fd87 	bl	8009acc <__lo0bits>
 8009fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fc2:	b1e8      	cbz	r0, 800a000 <__d2b+0x80>
 8009fc4:	f1c0 0320 	rsb	r3, r0, #32
 8009fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fcc:	430b      	orrs	r3, r1
 8009fce:	40c2      	lsrs	r2, r0
 8009fd0:	6163      	str	r3, [r4, #20]
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	61a3      	str	r3, [r4, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bf14      	ite	ne
 8009fdc:	2202      	movne	r2, #2
 8009fde:	2201      	moveq	r2, #1
 8009fe0:	6122      	str	r2, [r4, #16]
 8009fe2:	b1bd      	cbz	r5, 800a014 <__d2b+0x94>
 8009fe4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fe8:	4405      	add	r5, r0
 8009fea:	603d      	str	r5, [r7, #0]
 8009fec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ff0:	6030      	str	r0, [r6, #0]
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	b003      	add	sp, #12
 8009ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ffe:	e7d6      	b.n	8009fae <__d2b+0x2e>
 800a000:	6161      	str	r1, [r4, #20]
 800a002:	e7e7      	b.n	8009fd4 <__d2b+0x54>
 800a004:	a801      	add	r0, sp, #4
 800a006:	f7ff fd61 	bl	8009acc <__lo0bits>
 800a00a:	9b01      	ldr	r3, [sp, #4]
 800a00c:	6163      	str	r3, [r4, #20]
 800a00e:	3020      	adds	r0, #32
 800a010:	2201      	movs	r2, #1
 800a012:	e7e5      	b.n	8009fe0 <__d2b+0x60>
 800a014:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a01c:	6038      	str	r0, [r7, #0]
 800a01e:	6918      	ldr	r0, [r3, #16]
 800a020:	f7ff fd34 	bl	8009a8c <__hi0bits>
 800a024:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a028:	e7e2      	b.n	8009ff0 <__d2b+0x70>
 800a02a:	bf00      	nop
 800a02c:	0800ac28 	.word	0x0800ac28
 800a030:	0800ac39 	.word	0x0800ac39

0800a034 <__ssputs_r>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	688e      	ldr	r6, [r1, #8]
 800a03a:	461f      	mov	r7, r3
 800a03c:	42be      	cmp	r6, r7
 800a03e:	680b      	ldr	r3, [r1, #0]
 800a040:	4682      	mov	sl, r0
 800a042:	460c      	mov	r4, r1
 800a044:	4690      	mov	r8, r2
 800a046:	d82c      	bhi.n	800a0a2 <__ssputs_r+0x6e>
 800a048:	898a      	ldrh	r2, [r1, #12]
 800a04a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a04e:	d026      	beq.n	800a09e <__ssputs_r+0x6a>
 800a050:	6965      	ldr	r5, [r4, #20]
 800a052:	6909      	ldr	r1, [r1, #16]
 800a054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a058:	eba3 0901 	sub.w	r9, r3, r1
 800a05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a060:	1c7b      	adds	r3, r7, #1
 800a062:	444b      	add	r3, r9
 800a064:	106d      	asrs	r5, r5, #1
 800a066:	429d      	cmp	r5, r3
 800a068:	bf38      	it	cc
 800a06a:	461d      	movcc	r5, r3
 800a06c:	0553      	lsls	r3, r2, #21
 800a06e:	d527      	bpl.n	800a0c0 <__ssputs_r+0x8c>
 800a070:	4629      	mov	r1, r5
 800a072:	f7ff fbd7 	bl	8009824 <_malloc_r>
 800a076:	4606      	mov	r6, r0
 800a078:	b360      	cbz	r0, 800a0d4 <__ssputs_r+0xa0>
 800a07a:	6921      	ldr	r1, [r4, #16]
 800a07c:	464a      	mov	r2, r9
 800a07e:	f000 fa09 	bl	800a494 <memcpy>
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	6126      	str	r6, [r4, #16]
 800a090:	6165      	str	r5, [r4, #20]
 800a092:	444e      	add	r6, r9
 800a094:	eba5 0509 	sub.w	r5, r5, r9
 800a098:	6026      	str	r6, [r4, #0]
 800a09a:	60a5      	str	r5, [r4, #8]
 800a09c:	463e      	mov	r6, r7
 800a09e:	42be      	cmp	r6, r7
 800a0a0:	d900      	bls.n	800a0a4 <__ssputs_r+0x70>
 800a0a2:	463e      	mov	r6, r7
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	f000 f9c9 	bl	800a440 <memmove>
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	1b9b      	subs	r3, r3, r6
 800a0b2:	60a3      	str	r3, [r4, #8]
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	4433      	add	r3, r6
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	f000 fa3b 	bl	800a53c <_realloc_r>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d1e0      	bne.n	800a08e <__ssputs_r+0x5a>
 800a0cc:	6921      	ldr	r1, [r4, #16]
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f7ff fb34 	bl	800973c <_free_r>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	f8ca 3000 	str.w	r3, [sl]
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e6:	e7e9      	b.n	800a0bc <__ssputs_r+0x88>

0800a0e8 <_svfiprintf_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	4698      	mov	r8, r3
 800a0ee:	898b      	ldrh	r3, [r1, #12]
 800a0f0:	061b      	lsls	r3, r3, #24
 800a0f2:	b09d      	sub	sp, #116	; 0x74
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	d50e      	bpl.n	800a11a <_svfiprintf_r+0x32>
 800a0fc:	690b      	ldr	r3, [r1, #16]
 800a0fe:	b963      	cbnz	r3, 800a11a <_svfiprintf_r+0x32>
 800a100:	2140      	movs	r1, #64	; 0x40
 800a102:	f7ff fb8f 	bl	8009824 <_malloc_r>
 800a106:	6028      	str	r0, [r5, #0]
 800a108:	6128      	str	r0, [r5, #16]
 800a10a:	b920      	cbnz	r0, 800a116 <_svfiprintf_r+0x2e>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e0d0      	b.n	800a2b8 <_svfiprintf_r+0x1d0>
 800a116:	2340      	movs	r3, #64	; 0x40
 800a118:	616b      	str	r3, [r5, #20]
 800a11a:	2300      	movs	r3, #0
 800a11c:	9309      	str	r3, [sp, #36]	; 0x24
 800a11e:	2320      	movs	r3, #32
 800a120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a124:	f8cd 800c 	str.w	r8, [sp, #12]
 800a128:	2330      	movs	r3, #48	; 0x30
 800a12a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2d0 <_svfiprintf_r+0x1e8>
 800a12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a132:	f04f 0901 	mov.w	r9, #1
 800a136:	4623      	mov	r3, r4
 800a138:	469a      	mov	sl, r3
 800a13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a13e:	b10a      	cbz	r2, 800a144 <_svfiprintf_r+0x5c>
 800a140:	2a25      	cmp	r2, #37	; 0x25
 800a142:	d1f9      	bne.n	800a138 <_svfiprintf_r+0x50>
 800a144:	ebba 0b04 	subs.w	fp, sl, r4
 800a148:	d00b      	beq.n	800a162 <_svfiprintf_r+0x7a>
 800a14a:	465b      	mov	r3, fp
 800a14c:	4622      	mov	r2, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ff6f 	bl	800a034 <__ssputs_r>
 800a156:	3001      	adds	r0, #1
 800a158:	f000 80a9 	beq.w	800a2ae <_svfiprintf_r+0x1c6>
 800a15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a15e:	445a      	add	r2, fp
 800a160:	9209      	str	r2, [sp, #36]	; 0x24
 800a162:	f89a 3000 	ldrb.w	r3, [sl]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 80a1 	beq.w	800a2ae <_svfiprintf_r+0x1c6>
 800a16c:	2300      	movs	r3, #0
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295
 800a172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a176:	f10a 0a01 	add.w	sl, sl, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	9307      	str	r3, [sp, #28]
 800a17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a182:	931a      	str	r3, [sp, #104]	; 0x68
 800a184:	4654      	mov	r4, sl
 800a186:	2205      	movs	r2, #5
 800a188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18c:	4850      	ldr	r0, [pc, #320]	; (800a2d0 <_svfiprintf_r+0x1e8>)
 800a18e:	f7f6 f827 	bl	80001e0 <memchr>
 800a192:	9a04      	ldr	r2, [sp, #16]
 800a194:	b9d8      	cbnz	r0, 800a1ce <_svfiprintf_r+0xe6>
 800a196:	06d0      	lsls	r0, r2, #27
 800a198:	bf44      	itt	mi
 800a19a:	2320      	movmi	r3, #32
 800a19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a0:	0711      	lsls	r1, r2, #28
 800a1a2:	bf44      	itt	mi
 800a1a4:	232b      	movmi	r3, #43	; 0x2b
 800a1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b0:	d015      	beq.n	800a1de <_svfiprintf_r+0xf6>
 800a1b2:	9a07      	ldr	r2, [sp, #28]
 800a1b4:	4654      	mov	r4, sl
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	f04f 0c0a 	mov.w	ip, #10
 800a1bc:	4621      	mov	r1, r4
 800a1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c2:	3b30      	subs	r3, #48	; 0x30
 800a1c4:	2b09      	cmp	r3, #9
 800a1c6:	d94d      	bls.n	800a264 <_svfiprintf_r+0x17c>
 800a1c8:	b1b0      	cbz	r0, 800a1f8 <_svfiprintf_r+0x110>
 800a1ca:	9207      	str	r2, [sp, #28]
 800a1cc:	e014      	b.n	800a1f8 <_svfiprintf_r+0x110>
 800a1ce:	eba0 0308 	sub.w	r3, r0, r8
 800a1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	46a2      	mov	sl, r4
 800a1dc:	e7d2      	b.n	800a184 <_svfiprintf_r+0x9c>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	1d19      	adds	r1, r3, #4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	9103      	str	r1, [sp, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	425b      	neglt	r3, r3
 800a1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f0:	9307      	strge	r3, [sp, #28]
 800a1f2:	9307      	strlt	r3, [sp, #28]
 800a1f4:	bfb8      	it	lt
 800a1f6:	9204      	strlt	r2, [sp, #16]
 800a1f8:	7823      	ldrb	r3, [r4, #0]
 800a1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fc:	d10c      	bne.n	800a218 <_svfiprintf_r+0x130>
 800a1fe:	7863      	ldrb	r3, [r4, #1]
 800a200:	2b2a      	cmp	r3, #42	; 0x2a
 800a202:	d134      	bne.n	800a26e <_svfiprintf_r+0x186>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	1d1a      	adds	r2, r3, #4
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	9203      	str	r2, [sp, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfb8      	it	lt
 800a210:	f04f 33ff 	movlt.w	r3, #4294967295
 800a214:	3402      	adds	r4, #2
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a2e0 <_svfiprintf_r+0x1f8>
 800a21c:	7821      	ldrb	r1, [r4, #0]
 800a21e:	2203      	movs	r2, #3
 800a220:	4650      	mov	r0, sl
 800a222:	f7f5 ffdd 	bl	80001e0 <memchr>
 800a226:	b138      	cbz	r0, 800a238 <_svfiprintf_r+0x150>
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	eba0 000a 	sub.w	r0, r0, sl
 800a22e:	2240      	movs	r2, #64	; 0x40
 800a230:	4082      	lsls	r2, r0
 800a232:	4313      	orrs	r3, r2
 800a234:	3401      	adds	r4, #1
 800a236:	9304      	str	r3, [sp, #16]
 800a238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23c:	4825      	ldr	r0, [pc, #148]	; (800a2d4 <_svfiprintf_r+0x1ec>)
 800a23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a242:	2206      	movs	r2, #6
 800a244:	f7f5 ffcc 	bl	80001e0 <memchr>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d038      	beq.n	800a2be <_svfiprintf_r+0x1d6>
 800a24c:	4b22      	ldr	r3, [pc, #136]	; (800a2d8 <_svfiprintf_r+0x1f0>)
 800a24e:	bb1b      	cbnz	r3, 800a298 <_svfiprintf_r+0x1b0>
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	3307      	adds	r3, #7
 800a254:	f023 0307 	bic.w	r3, r3, #7
 800a258:	3308      	adds	r3, #8
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25e:	4433      	add	r3, r6
 800a260:	9309      	str	r3, [sp, #36]	; 0x24
 800a262:	e768      	b.n	800a136 <_svfiprintf_r+0x4e>
 800a264:	fb0c 3202 	mla	r2, ip, r2, r3
 800a268:	460c      	mov	r4, r1
 800a26a:	2001      	movs	r0, #1
 800a26c:	e7a6      	b.n	800a1bc <_svfiprintf_r+0xd4>
 800a26e:	2300      	movs	r3, #0
 800a270:	3401      	adds	r4, #1
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	4619      	mov	r1, r3
 800a276:	f04f 0c0a 	mov.w	ip, #10
 800a27a:	4620      	mov	r0, r4
 800a27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a280:	3a30      	subs	r2, #48	; 0x30
 800a282:	2a09      	cmp	r2, #9
 800a284:	d903      	bls.n	800a28e <_svfiprintf_r+0x1a6>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0c6      	beq.n	800a218 <_svfiprintf_r+0x130>
 800a28a:	9105      	str	r1, [sp, #20]
 800a28c:	e7c4      	b.n	800a218 <_svfiprintf_r+0x130>
 800a28e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a292:	4604      	mov	r4, r0
 800a294:	2301      	movs	r3, #1
 800a296:	e7f0      	b.n	800a27a <_svfiprintf_r+0x192>
 800a298:	ab03      	add	r3, sp, #12
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	462a      	mov	r2, r5
 800a29e:	4b0f      	ldr	r3, [pc, #60]	; (800a2dc <_svfiprintf_r+0x1f4>)
 800a2a0:	a904      	add	r1, sp, #16
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f7fd fe62 	bl	8007f6c <_printf_float>
 800a2a8:	1c42      	adds	r2, r0, #1
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	d1d6      	bne.n	800a25c <_svfiprintf_r+0x174>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	065b      	lsls	r3, r3, #25
 800a2b2:	f53f af2d 	bmi.w	800a110 <_svfiprintf_r+0x28>
 800a2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2b8:	b01d      	add	sp, #116	; 0x74
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	ab03      	add	r3, sp, #12
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	462a      	mov	r2, r5
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <_svfiprintf_r+0x1f4>)
 800a2c6:	a904      	add	r1, sp, #16
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7fe f8f3 	bl	80084b4 <_printf_i>
 800a2ce:	e7eb      	b.n	800a2a8 <_svfiprintf_r+0x1c0>
 800a2d0:	0800ad94 	.word	0x0800ad94
 800a2d4:	0800ad9e 	.word	0x0800ad9e
 800a2d8:	08007f6d 	.word	0x08007f6d
 800a2dc:	0800a035 	.word	0x0800a035
 800a2e0:	0800ad9a 	.word	0x0800ad9a

0800a2e4 <__sflush_r>:
 800a2e4:	898a      	ldrh	r2, [r1, #12]
 800a2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	0710      	lsls	r0, r2, #28
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	d458      	bmi.n	800a3a4 <__sflush_r+0xc0>
 800a2f2:	684b      	ldr	r3, [r1, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dc05      	bgt.n	800a304 <__sflush_r+0x20>
 800a2f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	dc02      	bgt.n	800a304 <__sflush_r+0x20>
 800a2fe:	2000      	movs	r0, #0
 800a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a306:	2e00      	cmp	r6, #0
 800a308:	d0f9      	beq.n	800a2fe <__sflush_r+0x1a>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a310:	682f      	ldr	r7, [r5, #0]
 800a312:	6a21      	ldr	r1, [r4, #32]
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	d032      	beq.n	800a37e <__sflush_r+0x9a>
 800a318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	075a      	lsls	r2, r3, #29
 800a31e:	d505      	bpl.n	800a32c <__sflush_r+0x48>
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	1ac0      	subs	r0, r0, r3
 800a324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a326:	b10b      	cbz	r3, 800a32c <__sflush_r+0x48>
 800a328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a32a:	1ac0      	subs	r0, r0, r3
 800a32c:	2300      	movs	r3, #0
 800a32e:	4602      	mov	r2, r0
 800a330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a332:	6a21      	ldr	r1, [r4, #32]
 800a334:	4628      	mov	r0, r5
 800a336:	47b0      	blx	r6
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	d106      	bne.n	800a34c <__sflush_r+0x68>
 800a33e:	6829      	ldr	r1, [r5, #0]
 800a340:	291d      	cmp	r1, #29
 800a342:	d82b      	bhi.n	800a39c <__sflush_r+0xb8>
 800a344:	4a29      	ldr	r2, [pc, #164]	; (800a3ec <__sflush_r+0x108>)
 800a346:	410a      	asrs	r2, r1
 800a348:	07d6      	lsls	r6, r2, #31
 800a34a:	d427      	bmi.n	800a39c <__sflush_r+0xb8>
 800a34c:	2200      	movs	r2, #0
 800a34e:	6062      	str	r2, [r4, #4]
 800a350:	04d9      	lsls	r1, r3, #19
 800a352:	6922      	ldr	r2, [r4, #16]
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	d504      	bpl.n	800a362 <__sflush_r+0x7e>
 800a358:	1c42      	adds	r2, r0, #1
 800a35a:	d101      	bne.n	800a360 <__sflush_r+0x7c>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b903      	cbnz	r3, 800a362 <__sflush_r+0x7e>
 800a360:	6560      	str	r0, [r4, #84]	; 0x54
 800a362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a364:	602f      	str	r7, [r5, #0]
 800a366:	2900      	cmp	r1, #0
 800a368:	d0c9      	beq.n	800a2fe <__sflush_r+0x1a>
 800a36a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a36e:	4299      	cmp	r1, r3
 800a370:	d002      	beq.n	800a378 <__sflush_r+0x94>
 800a372:	4628      	mov	r0, r5
 800a374:	f7ff f9e2 	bl	800973c <_free_r>
 800a378:	2000      	movs	r0, #0
 800a37a:	6360      	str	r0, [r4, #52]	; 0x34
 800a37c:	e7c0      	b.n	800a300 <__sflush_r+0x1c>
 800a37e:	2301      	movs	r3, #1
 800a380:	4628      	mov	r0, r5
 800a382:	47b0      	blx	r6
 800a384:	1c41      	adds	r1, r0, #1
 800a386:	d1c8      	bne.n	800a31a <__sflush_r+0x36>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0c5      	beq.n	800a31a <__sflush_r+0x36>
 800a38e:	2b1d      	cmp	r3, #29
 800a390:	d001      	beq.n	800a396 <__sflush_r+0xb2>
 800a392:	2b16      	cmp	r3, #22
 800a394:	d101      	bne.n	800a39a <__sflush_r+0xb6>
 800a396:	602f      	str	r7, [r5, #0]
 800a398:	e7b1      	b.n	800a2fe <__sflush_r+0x1a>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	e7ad      	b.n	800a300 <__sflush_r+0x1c>
 800a3a4:	690f      	ldr	r7, [r1, #16]
 800a3a6:	2f00      	cmp	r7, #0
 800a3a8:	d0a9      	beq.n	800a2fe <__sflush_r+0x1a>
 800a3aa:	0793      	lsls	r3, r2, #30
 800a3ac:	680e      	ldr	r6, [r1, #0]
 800a3ae:	bf08      	it	eq
 800a3b0:	694b      	ldreq	r3, [r1, #20]
 800a3b2:	600f      	str	r7, [r1, #0]
 800a3b4:	bf18      	it	ne
 800a3b6:	2300      	movne	r3, #0
 800a3b8:	eba6 0807 	sub.w	r8, r6, r7
 800a3bc:	608b      	str	r3, [r1, #8]
 800a3be:	f1b8 0f00 	cmp.w	r8, #0
 800a3c2:	dd9c      	ble.n	800a2fe <__sflush_r+0x1a>
 800a3c4:	6a21      	ldr	r1, [r4, #32]
 800a3c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3c8:	4643      	mov	r3, r8
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b0      	blx	r6
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dc06      	bgt.n	800a3e2 <__sflush_r+0xfe>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e0:	e78e      	b.n	800a300 <__sflush_r+0x1c>
 800a3e2:	4407      	add	r7, r0
 800a3e4:	eba8 0800 	sub.w	r8, r8, r0
 800a3e8:	e7e9      	b.n	800a3be <__sflush_r+0xda>
 800a3ea:	bf00      	nop
 800a3ec:	dfbffffe 	.word	0xdfbffffe

0800a3f0 <_fflush_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	690b      	ldr	r3, [r1, #16]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	b913      	cbnz	r3, 800a400 <_fflush_r+0x10>
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	b118      	cbz	r0, 800a40a <_fflush_r+0x1a>
 800a402:	6a03      	ldr	r3, [r0, #32]
 800a404:	b90b      	cbnz	r3, 800a40a <_fflush_r+0x1a>
 800a406:	f7fe fa03 	bl	8008810 <__sinit>
 800a40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0f3      	beq.n	800a3fa <_fflush_r+0xa>
 800a412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a414:	07d0      	lsls	r0, r2, #31
 800a416:	d404      	bmi.n	800a422 <_fflush_r+0x32>
 800a418:	0599      	lsls	r1, r3, #22
 800a41a:	d402      	bmi.n	800a422 <_fflush_r+0x32>
 800a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41e:	f7fe fb0e 	bl	8008a3e <__retarget_lock_acquire_recursive>
 800a422:	4628      	mov	r0, r5
 800a424:	4621      	mov	r1, r4
 800a426:	f7ff ff5d 	bl	800a2e4 <__sflush_r>
 800a42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42c:	07da      	lsls	r2, r3, #31
 800a42e:	4605      	mov	r5, r0
 800a430:	d4e4      	bmi.n	800a3fc <_fflush_r+0xc>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	059b      	lsls	r3, r3, #22
 800a436:	d4e1      	bmi.n	800a3fc <_fflush_r+0xc>
 800a438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a43a:	f7fe fb01 	bl	8008a40 <__retarget_lock_release_recursive>
 800a43e:	e7dd      	b.n	800a3fc <_fflush_r+0xc>

0800a440 <memmove>:
 800a440:	4288      	cmp	r0, r1
 800a442:	b510      	push	{r4, lr}
 800a444:	eb01 0402 	add.w	r4, r1, r2
 800a448:	d902      	bls.n	800a450 <memmove+0x10>
 800a44a:	4284      	cmp	r4, r0
 800a44c:	4623      	mov	r3, r4
 800a44e:	d807      	bhi.n	800a460 <memmove+0x20>
 800a450:	1e43      	subs	r3, r0, #1
 800a452:	42a1      	cmp	r1, r4
 800a454:	d008      	beq.n	800a468 <memmove+0x28>
 800a456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a45a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a45e:	e7f8      	b.n	800a452 <memmove+0x12>
 800a460:	4402      	add	r2, r0
 800a462:	4601      	mov	r1, r0
 800a464:	428a      	cmp	r2, r1
 800a466:	d100      	bne.n	800a46a <memmove+0x2a>
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a46e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a472:	e7f7      	b.n	800a464 <memmove+0x24>

0800a474 <_sbrk_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d06      	ldr	r5, [pc, #24]	; (800a490 <_sbrk_r+0x1c>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	602b      	str	r3, [r5, #0]
 800a480:	f7f7 f9c0 	bl	8001804 <_sbrk>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_sbrk_r+0x1a>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_sbrk_r+0x1a>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	200005cc 	.word	0x200005cc

0800a494 <memcpy>:
 800a494:	440a      	add	r2, r1
 800a496:	4291      	cmp	r1, r2
 800a498:	f100 33ff 	add.w	r3, r0, #4294967295
 800a49c:	d100      	bne.n	800a4a0 <memcpy+0xc>
 800a49e:	4770      	bx	lr
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4aa:	4291      	cmp	r1, r2
 800a4ac:	d1f9      	bne.n	800a4a2 <memcpy+0xe>
 800a4ae:	bd10      	pop	{r4, pc}

0800a4b0 <__assert_func>:
 800a4b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <__assert_func+0x2c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	68d8      	ldr	r0, [r3, #12]
 800a4be:	b14c      	cbz	r4, 800a4d4 <__assert_func+0x24>
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <__assert_func+0x30>)
 800a4c2:	9100      	str	r1, [sp, #0]
 800a4c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4c8:	4906      	ldr	r1, [pc, #24]	; (800a4e4 <__assert_func+0x34>)
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f000 f872 	bl	800a5b4 <fiprintf>
 800a4d0:	f000 f882 	bl	800a5d8 <abort>
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <__assert_func+0x38>)
 800a4d6:	461c      	mov	r4, r3
 800a4d8:	e7f3      	b.n	800a4c2 <__assert_func+0x12>
 800a4da:	bf00      	nop
 800a4dc:	2000011c 	.word	0x2000011c
 800a4e0:	0800adaf 	.word	0x0800adaf
 800a4e4:	0800adbc 	.word	0x0800adbc
 800a4e8:	0800adea 	.word	0x0800adea

0800a4ec <_calloc_r>:
 800a4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ee:	fba1 2402 	umull	r2, r4, r1, r2
 800a4f2:	b94c      	cbnz	r4, 800a508 <_calloc_r+0x1c>
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	9201      	str	r2, [sp, #4]
 800a4f8:	f7ff f994 	bl	8009824 <_malloc_r>
 800a4fc:	9a01      	ldr	r2, [sp, #4]
 800a4fe:	4605      	mov	r5, r0
 800a500:	b930      	cbnz	r0, 800a510 <_calloc_r+0x24>
 800a502:	4628      	mov	r0, r5
 800a504:	b003      	add	sp, #12
 800a506:	bd30      	pop	{r4, r5, pc}
 800a508:	220c      	movs	r2, #12
 800a50a:	6002      	str	r2, [r0, #0]
 800a50c:	2500      	movs	r5, #0
 800a50e:	e7f8      	b.n	800a502 <_calloc_r+0x16>
 800a510:	4621      	mov	r1, r4
 800a512:	f7fe fa16 	bl	8008942 <memset>
 800a516:	e7f4      	b.n	800a502 <_calloc_r+0x16>

0800a518 <__ascii_mbtowc>:
 800a518:	b082      	sub	sp, #8
 800a51a:	b901      	cbnz	r1, 800a51e <__ascii_mbtowc+0x6>
 800a51c:	a901      	add	r1, sp, #4
 800a51e:	b142      	cbz	r2, 800a532 <__ascii_mbtowc+0x1a>
 800a520:	b14b      	cbz	r3, 800a536 <__ascii_mbtowc+0x1e>
 800a522:	7813      	ldrb	r3, [r2, #0]
 800a524:	600b      	str	r3, [r1, #0]
 800a526:	7812      	ldrb	r2, [r2, #0]
 800a528:	1e10      	subs	r0, r2, #0
 800a52a:	bf18      	it	ne
 800a52c:	2001      	movne	r0, #1
 800a52e:	b002      	add	sp, #8
 800a530:	4770      	bx	lr
 800a532:	4610      	mov	r0, r2
 800a534:	e7fb      	b.n	800a52e <__ascii_mbtowc+0x16>
 800a536:	f06f 0001 	mvn.w	r0, #1
 800a53a:	e7f8      	b.n	800a52e <__ascii_mbtowc+0x16>

0800a53c <_realloc_r>:
 800a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a540:	4680      	mov	r8, r0
 800a542:	4614      	mov	r4, r2
 800a544:	460e      	mov	r6, r1
 800a546:	b921      	cbnz	r1, 800a552 <_realloc_r+0x16>
 800a548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a54c:	4611      	mov	r1, r2
 800a54e:	f7ff b969 	b.w	8009824 <_malloc_r>
 800a552:	b92a      	cbnz	r2, 800a560 <_realloc_r+0x24>
 800a554:	f7ff f8f2 	bl	800973c <_free_r>
 800a558:	4625      	mov	r5, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a560:	f000 f841 	bl	800a5e6 <_malloc_usable_size_r>
 800a564:	4284      	cmp	r4, r0
 800a566:	4607      	mov	r7, r0
 800a568:	d802      	bhi.n	800a570 <_realloc_r+0x34>
 800a56a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a56e:	d812      	bhi.n	800a596 <_realloc_r+0x5a>
 800a570:	4621      	mov	r1, r4
 800a572:	4640      	mov	r0, r8
 800a574:	f7ff f956 	bl	8009824 <_malloc_r>
 800a578:	4605      	mov	r5, r0
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d0ed      	beq.n	800a55a <_realloc_r+0x1e>
 800a57e:	42bc      	cmp	r4, r7
 800a580:	4622      	mov	r2, r4
 800a582:	4631      	mov	r1, r6
 800a584:	bf28      	it	cs
 800a586:	463a      	movcs	r2, r7
 800a588:	f7ff ff84 	bl	800a494 <memcpy>
 800a58c:	4631      	mov	r1, r6
 800a58e:	4640      	mov	r0, r8
 800a590:	f7ff f8d4 	bl	800973c <_free_r>
 800a594:	e7e1      	b.n	800a55a <_realloc_r+0x1e>
 800a596:	4635      	mov	r5, r6
 800a598:	e7df      	b.n	800a55a <_realloc_r+0x1e>

0800a59a <__ascii_wctomb>:
 800a59a:	b149      	cbz	r1, 800a5b0 <__ascii_wctomb+0x16>
 800a59c:	2aff      	cmp	r2, #255	; 0xff
 800a59e:	bf85      	ittet	hi
 800a5a0:	238a      	movhi	r3, #138	; 0x8a
 800a5a2:	6003      	strhi	r3, [r0, #0]
 800a5a4:	700a      	strbls	r2, [r1, #0]
 800a5a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5aa:	bf98      	it	ls
 800a5ac:	2001      	movls	r0, #1
 800a5ae:	4770      	bx	lr
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	4770      	bx	lr

0800a5b4 <fiprintf>:
 800a5b4:	b40e      	push	{r1, r2, r3}
 800a5b6:	b503      	push	{r0, r1, lr}
 800a5b8:	4601      	mov	r1, r0
 800a5ba:	ab03      	add	r3, sp, #12
 800a5bc:	4805      	ldr	r0, [pc, #20]	; (800a5d4 <fiprintf+0x20>)
 800a5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c2:	6800      	ldr	r0, [r0, #0]
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	f000 f83f 	bl	800a648 <_vfiprintf_r>
 800a5ca:	b002      	add	sp, #8
 800a5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5d0:	b003      	add	sp, #12
 800a5d2:	4770      	bx	lr
 800a5d4:	2000011c 	.word	0x2000011c

0800a5d8 <abort>:
 800a5d8:	b508      	push	{r3, lr}
 800a5da:	2006      	movs	r0, #6
 800a5dc:	f000 fa0c 	bl	800a9f8 <raise>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7f7 f897 	bl	8001714 <_exit>

0800a5e6 <_malloc_usable_size_r>:
 800a5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ea:	1f18      	subs	r0, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfbc      	itt	lt
 800a5f0:	580b      	ldrlt	r3, [r1, r0]
 800a5f2:	18c0      	addlt	r0, r0, r3
 800a5f4:	4770      	bx	lr

0800a5f6 <__sfputc_r>:
 800a5f6:	6893      	ldr	r3, [r2, #8]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	b410      	push	{r4}
 800a5fe:	6093      	str	r3, [r2, #8]
 800a600:	da08      	bge.n	800a614 <__sfputc_r+0x1e>
 800a602:	6994      	ldr	r4, [r2, #24]
 800a604:	42a3      	cmp	r3, r4
 800a606:	db01      	blt.n	800a60c <__sfputc_r+0x16>
 800a608:	290a      	cmp	r1, #10
 800a60a:	d103      	bne.n	800a614 <__sfputc_r+0x1e>
 800a60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a610:	f000 b934 	b.w	800a87c <__swbuf_r>
 800a614:	6813      	ldr	r3, [r2, #0]
 800a616:	1c58      	adds	r0, r3, #1
 800a618:	6010      	str	r0, [r2, #0]
 800a61a:	7019      	strb	r1, [r3, #0]
 800a61c:	4608      	mov	r0, r1
 800a61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <__sfputs_r>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	4606      	mov	r6, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	4614      	mov	r4, r2
 800a62c:	18d5      	adds	r5, r2, r3
 800a62e:	42ac      	cmp	r4, r5
 800a630:	d101      	bne.n	800a636 <__sfputs_r+0x12>
 800a632:	2000      	movs	r0, #0
 800a634:	e007      	b.n	800a646 <__sfputs_r+0x22>
 800a636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63a:	463a      	mov	r2, r7
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7ff ffda 	bl	800a5f6 <__sfputc_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d1f3      	bne.n	800a62e <__sfputs_r+0xa>
 800a646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a648 <_vfiprintf_r>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	460d      	mov	r5, r1
 800a64e:	b09d      	sub	sp, #116	; 0x74
 800a650:	4614      	mov	r4, r2
 800a652:	4698      	mov	r8, r3
 800a654:	4606      	mov	r6, r0
 800a656:	b118      	cbz	r0, 800a660 <_vfiprintf_r+0x18>
 800a658:	6a03      	ldr	r3, [r0, #32]
 800a65a:	b90b      	cbnz	r3, 800a660 <_vfiprintf_r+0x18>
 800a65c:	f7fe f8d8 	bl	8008810 <__sinit>
 800a660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a662:	07d9      	lsls	r1, r3, #31
 800a664:	d405      	bmi.n	800a672 <_vfiprintf_r+0x2a>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d402      	bmi.n	800a672 <_vfiprintf_r+0x2a>
 800a66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a66e:	f7fe f9e6 	bl	8008a3e <__retarget_lock_acquire_recursive>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	071b      	lsls	r3, r3, #28
 800a676:	d501      	bpl.n	800a67c <_vfiprintf_r+0x34>
 800a678:	692b      	ldr	r3, [r5, #16]
 800a67a:	b99b      	cbnz	r3, 800a6a4 <_vfiprintf_r+0x5c>
 800a67c:	4629      	mov	r1, r5
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 f93a 	bl	800a8f8 <__swsetup_r>
 800a684:	b170      	cbz	r0, 800a6a4 <_vfiprintf_r+0x5c>
 800a686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a688:	07dc      	lsls	r4, r3, #31
 800a68a:	d504      	bpl.n	800a696 <_vfiprintf_r+0x4e>
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295
 800a690:	b01d      	add	sp, #116	; 0x74
 800a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	0598      	lsls	r0, r3, #22
 800a69a:	d4f7      	bmi.n	800a68c <_vfiprintf_r+0x44>
 800a69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69e:	f7fe f9cf 	bl	8008a40 <__retarget_lock_release_recursive>
 800a6a2:	e7f3      	b.n	800a68c <_vfiprintf_r+0x44>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a8:	2320      	movs	r3, #32
 800a6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b2:	2330      	movs	r3, #48	; 0x30
 800a6b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a868 <_vfiprintf_r+0x220>
 800a6b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6bc:	f04f 0901 	mov.w	r9, #1
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	469a      	mov	sl, r3
 800a6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c8:	b10a      	cbz	r2, 800a6ce <_vfiprintf_r+0x86>
 800a6ca:	2a25      	cmp	r2, #37	; 0x25
 800a6cc:	d1f9      	bne.n	800a6c2 <_vfiprintf_r+0x7a>
 800a6ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d2:	d00b      	beq.n	800a6ec <_vfiprintf_r+0xa4>
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7ff ffa2 	bl	800a624 <__sfputs_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f000 80a9 	beq.w	800a838 <_vfiprintf_r+0x1f0>
 800a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e8:	445a      	add	r2, fp
 800a6ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80a1 	beq.w	800a838 <_vfiprintf_r+0x1f0>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a700:	f10a 0a01 	add.w	sl, sl, #1
 800a704:	9304      	str	r3, [sp, #16]
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70c:	931a      	str	r3, [sp, #104]	; 0x68
 800a70e:	4654      	mov	r4, sl
 800a710:	2205      	movs	r2, #5
 800a712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a716:	4854      	ldr	r0, [pc, #336]	; (800a868 <_vfiprintf_r+0x220>)
 800a718:	f7f5 fd62 	bl	80001e0 <memchr>
 800a71c:	9a04      	ldr	r2, [sp, #16]
 800a71e:	b9d8      	cbnz	r0, 800a758 <_vfiprintf_r+0x110>
 800a720:	06d1      	lsls	r1, r2, #27
 800a722:	bf44      	itt	mi
 800a724:	2320      	movmi	r3, #32
 800a726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72a:	0713      	lsls	r3, r2, #28
 800a72c:	bf44      	itt	mi
 800a72e:	232b      	movmi	r3, #43	; 0x2b
 800a730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a734:	f89a 3000 	ldrb.w	r3, [sl]
 800a738:	2b2a      	cmp	r3, #42	; 0x2a
 800a73a:	d015      	beq.n	800a768 <_vfiprintf_r+0x120>
 800a73c:	9a07      	ldr	r2, [sp, #28]
 800a73e:	4654      	mov	r4, sl
 800a740:	2000      	movs	r0, #0
 800a742:	f04f 0c0a 	mov.w	ip, #10
 800a746:	4621      	mov	r1, r4
 800a748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74c:	3b30      	subs	r3, #48	; 0x30
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d94d      	bls.n	800a7ee <_vfiprintf_r+0x1a6>
 800a752:	b1b0      	cbz	r0, 800a782 <_vfiprintf_r+0x13a>
 800a754:	9207      	str	r2, [sp, #28]
 800a756:	e014      	b.n	800a782 <_vfiprintf_r+0x13a>
 800a758:	eba0 0308 	sub.w	r3, r0, r8
 800a75c:	fa09 f303 	lsl.w	r3, r9, r3
 800a760:	4313      	orrs	r3, r2
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	46a2      	mov	sl, r4
 800a766:	e7d2      	b.n	800a70e <_vfiprintf_r+0xc6>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	1d19      	adds	r1, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9103      	str	r1, [sp, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfbb      	ittet	lt
 800a774:	425b      	neglt	r3, r3
 800a776:	f042 0202 	orrlt.w	r2, r2, #2
 800a77a:	9307      	strge	r3, [sp, #28]
 800a77c:	9307      	strlt	r3, [sp, #28]
 800a77e:	bfb8      	it	lt
 800a780:	9204      	strlt	r2, [sp, #16]
 800a782:	7823      	ldrb	r3, [r4, #0]
 800a784:	2b2e      	cmp	r3, #46	; 0x2e
 800a786:	d10c      	bne.n	800a7a2 <_vfiprintf_r+0x15a>
 800a788:	7863      	ldrb	r3, [r4, #1]
 800a78a:	2b2a      	cmp	r3, #42	; 0x2a
 800a78c:	d134      	bne.n	800a7f8 <_vfiprintf_r+0x1b0>
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	1d1a      	adds	r2, r3, #4
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	9203      	str	r2, [sp, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	bfb8      	it	lt
 800a79a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a79e:	3402      	adds	r4, #2
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a878 <_vfiprintf_r+0x230>
 800a7a6:	7821      	ldrb	r1, [r4, #0]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	f7f5 fd18 	bl	80001e0 <memchr>
 800a7b0:	b138      	cbz	r0, 800a7c2 <_vfiprintf_r+0x17a>
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	eba0 000a 	sub.w	r0, r0, sl
 800a7b8:	2240      	movs	r2, #64	; 0x40
 800a7ba:	4082      	lsls	r2, r0
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4829      	ldr	r0, [pc, #164]	; (800a86c <_vfiprintf_r+0x224>)
 800a7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f7f5 fd07 	bl	80001e0 <memchr>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d03f      	beq.n	800a856 <_vfiprintf_r+0x20e>
 800a7d6:	4b26      	ldr	r3, [pc, #152]	; (800a870 <_vfiprintf_r+0x228>)
 800a7d8:	bb1b      	cbnz	r3, 800a822 <_vfiprintf_r+0x1da>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	443b      	add	r3, r7
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	e768      	b.n	800a6c0 <_vfiprintf_r+0x78>
 800a7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7a6      	b.n	800a746 <_vfiprintf_r+0xfe>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	3401      	adds	r4, #1
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4620      	mov	r0, r4
 800a806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80a:	3a30      	subs	r2, #48	; 0x30
 800a80c:	2a09      	cmp	r2, #9
 800a80e:	d903      	bls.n	800a818 <_vfiprintf_r+0x1d0>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c6      	beq.n	800a7a2 <_vfiprintf_r+0x15a>
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	e7c4      	b.n	800a7a2 <_vfiprintf_r+0x15a>
 800a818:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81c:	4604      	mov	r4, r0
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f0      	b.n	800a804 <_vfiprintf_r+0x1bc>
 800a822:	ab03      	add	r3, sp, #12
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	462a      	mov	r2, r5
 800a828:	4b12      	ldr	r3, [pc, #72]	; (800a874 <_vfiprintf_r+0x22c>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7fd fb9d 	bl	8007f6c <_printf_float>
 800a832:	4607      	mov	r7, r0
 800a834:	1c78      	adds	r0, r7, #1
 800a836:	d1d6      	bne.n	800a7e6 <_vfiprintf_r+0x19e>
 800a838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a83a:	07d9      	lsls	r1, r3, #31
 800a83c:	d405      	bmi.n	800a84a <_vfiprintf_r+0x202>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	059a      	lsls	r2, r3, #22
 800a842:	d402      	bmi.n	800a84a <_vfiprintf_r+0x202>
 800a844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a846:	f7fe f8fb 	bl	8008a40 <__retarget_lock_release_recursive>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	065b      	lsls	r3, r3, #25
 800a84e:	f53f af1d 	bmi.w	800a68c <_vfiprintf_r+0x44>
 800a852:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a854:	e71c      	b.n	800a690 <_vfiprintf_r+0x48>
 800a856:	ab03      	add	r3, sp, #12
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	462a      	mov	r2, r5
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <_vfiprintf_r+0x22c>)
 800a85e:	a904      	add	r1, sp, #16
 800a860:	4630      	mov	r0, r6
 800a862:	f7fd fe27 	bl	80084b4 <_printf_i>
 800a866:	e7e4      	b.n	800a832 <_vfiprintf_r+0x1ea>
 800a868:	0800ad94 	.word	0x0800ad94
 800a86c:	0800ad9e 	.word	0x0800ad9e
 800a870:	08007f6d 	.word	0x08007f6d
 800a874:	0800a625 	.word	0x0800a625
 800a878:	0800ad9a 	.word	0x0800ad9a

0800a87c <__swbuf_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	460e      	mov	r6, r1
 800a880:	4614      	mov	r4, r2
 800a882:	4605      	mov	r5, r0
 800a884:	b118      	cbz	r0, 800a88e <__swbuf_r+0x12>
 800a886:	6a03      	ldr	r3, [r0, #32]
 800a888:	b90b      	cbnz	r3, 800a88e <__swbuf_r+0x12>
 800a88a:	f7fd ffc1 	bl	8008810 <__sinit>
 800a88e:	69a3      	ldr	r3, [r4, #24]
 800a890:	60a3      	str	r3, [r4, #8]
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	071a      	lsls	r2, r3, #28
 800a896:	d525      	bpl.n	800a8e4 <__swbuf_r+0x68>
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	b31b      	cbz	r3, 800a8e4 <__swbuf_r+0x68>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	1a98      	subs	r0, r3, r2
 800a8a2:	6963      	ldr	r3, [r4, #20]
 800a8a4:	b2f6      	uxtb	r6, r6
 800a8a6:	4283      	cmp	r3, r0
 800a8a8:	4637      	mov	r7, r6
 800a8aa:	dc04      	bgt.n	800a8b6 <__swbuf_r+0x3a>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f7ff fd9e 	bl	800a3f0 <_fflush_r>
 800a8b4:	b9e0      	cbnz	r0, 800a8f0 <__swbuf_r+0x74>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	60a3      	str	r3, [r4, #8]
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	701e      	strb	r6, [r3, #0]
 800a8c4:	6962      	ldr	r2, [r4, #20]
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d004      	beq.n	800a8d6 <__swbuf_r+0x5a>
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	07db      	lsls	r3, r3, #31
 800a8d0:	d506      	bpl.n	800a8e0 <__swbuf_r+0x64>
 800a8d2:	2e0a      	cmp	r6, #10
 800a8d4:	d104      	bne.n	800a8e0 <__swbuf_r+0x64>
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7ff fd89 	bl	800a3f0 <_fflush_r>
 800a8de:	b938      	cbnz	r0, 800a8f0 <__swbuf_r+0x74>
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 f806 	bl	800a8f8 <__swsetup_r>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d0d5      	beq.n	800a89c <__swbuf_r+0x20>
 800a8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8f4:	e7f4      	b.n	800a8e0 <__swbuf_r+0x64>
	...

0800a8f8 <__swsetup_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <__swsetup_r+0xac>)
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	6818      	ldr	r0, [r3, #0]
 800a900:	460c      	mov	r4, r1
 800a902:	b118      	cbz	r0, 800a90c <__swsetup_r+0x14>
 800a904:	6a03      	ldr	r3, [r0, #32]
 800a906:	b90b      	cbnz	r3, 800a90c <__swsetup_r+0x14>
 800a908:	f7fd ff82 	bl	8008810 <__sinit>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a912:	0718      	lsls	r0, r3, #28
 800a914:	d422      	bmi.n	800a95c <__swsetup_r+0x64>
 800a916:	06d9      	lsls	r1, r3, #27
 800a918:	d407      	bmi.n	800a92a <__swsetup_r+0x32>
 800a91a:	2309      	movs	r3, #9
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295
 800a928:	e034      	b.n	800a994 <__swsetup_r+0x9c>
 800a92a:	0758      	lsls	r0, r3, #29
 800a92c:	d512      	bpl.n	800a954 <__swsetup_r+0x5c>
 800a92e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a930:	b141      	cbz	r1, 800a944 <__swsetup_r+0x4c>
 800a932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a936:	4299      	cmp	r1, r3
 800a938:	d002      	beq.n	800a940 <__swsetup_r+0x48>
 800a93a:	4628      	mov	r0, r5
 800a93c:	f7fe fefe 	bl	800973c <_free_r>
 800a940:	2300      	movs	r3, #0
 800a942:	6363      	str	r3, [r4, #52]	; 0x34
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	2300      	movs	r3, #0
 800a94e:	6063      	str	r3, [r4, #4]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	f043 0308 	orr.w	r3, r3, #8
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	b94b      	cbnz	r3, 800a974 <__swsetup_r+0x7c>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96a:	d003      	beq.n	800a974 <__swsetup_r+0x7c>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f884 	bl	800aa7c <__smakebuf_r>
 800a974:	89a0      	ldrh	r0, [r4, #12]
 800a976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a97a:	f010 0301 	ands.w	r3, r0, #1
 800a97e:	d00a      	beq.n	800a996 <__swsetup_r+0x9e>
 800a980:	2300      	movs	r3, #0
 800a982:	60a3      	str	r3, [r4, #8]
 800a984:	6963      	ldr	r3, [r4, #20]
 800a986:	425b      	negs	r3, r3
 800a988:	61a3      	str	r3, [r4, #24]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	b943      	cbnz	r3, 800a9a0 <__swsetup_r+0xa8>
 800a98e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a992:	d1c4      	bne.n	800a91e <__swsetup_r+0x26>
 800a994:	bd38      	pop	{r3, r4, r5, pc}
 800a996:	0781      	lsls	r1, r0, #30
 800a998:	bf58      	it	pl
 800a99a:	6963      	ldrpl	r3, [r4, #20]
 800a99c:	60a3      	str	r3, [r4, #8]
 800a99e:	e7f4      	b.n	800a98a <__swsetup_r+0x92>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e7f7      	b.n	800a994 <__swsetup_r+0x9c>
 800a9a4:	2000011c 	.word	0x2000011c

0800a9a8 <_raise_r>:
 800a9a8:	291f      	cmp	r1, #31
 800a9aa:	b538      	push	{r3, r4, r5, lr}
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	d904      	bls.n	800a9bc <_raise_r+0x14>
 800a9b2:	2316      	movs	r3, #22
 800a9b4:	6003      	str	r3, [r0, #0]
 800a9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9be:	b112      	cbz	r2, 800a9c6 <_raise_r+0x1e>
 800a9c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c4:	b94b      	cbnz	r3, 800a9da <_raise_r+0x32>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f830 	bl	800aa2c <_getpid_r>
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d6:	f000 b817 	b.w	800aa08 <_kill_r>
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d00a      	beq.n	800a9f4 <_raise_r+0x4c>
 800a9de:	1c59      	adds	r1, r3, #1
 800a9e0:	d103      	bne.n	800a9ea <_raise_r+0x42>
 800a9e2:	2316      	movs	r3, #22
 800a9e4:	6003      	str	r3, [r0, #0]
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	e7e7      	b.n	800a9ba <_raise_r+0x12>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	4798      	blx	r3
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e7e0      	b.n	800a9ba <_raise_r+0x12>

0800a9f8 <raise>:
 800a9f8:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <raise+0xc>)
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	f7ff bfd3 	b.w	800a9a8 <_raise_r>
 800aa02:	bf00      	nop
 800aa04:	2000011c 	.word	0x2000011c

0800aa08 <_kill_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d07      	ldr	r5, [pc, #28]	; (800aa28 <_kill_r+0x20>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	4611      	mov	r1, r2
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	f7f6 fe6d 	bl	80016f4 <_kill>
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	d102      	bne.n	800aa24 <_kill_r+0x1c>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	b103      	cbz	r3, 800aa24 <_kill_r+0x1c>
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	bd38      	pop	{r3, r4, r5, pc}
 800aa26:	bf00      	nop
 800aa28:	200005cc 	.word	0x200005cc

0800aa2c <_getpid_r>:
 800aa2c:	f7f6 be5a 	b.w	80016e4 <_getpid>

0800aa30 <__swhatbuf_r>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	460c      	mov	r4, r1
 800aa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	b096      	sub	sp, #88	; 0x58
 800aa3c:	4615      	mov	r5, r2
 800aa3e:	461e      	mov	r6, r3
 800aa40:	da0d      	bge.n	800aa5e <__swhatbuf_r+0x2e>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa48:	f04f 0100 	mov.w	r1, #0
 800aa4c:	bf0c      	ite	eq
 800aa4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa52:	2340      	movne	r3, #64	; 0x40
 800aa54:	2000      	movs	r0, #0
 800aa56:	6031      	str	r1, [r6, #0]
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	b016      	add	sp, #88	; 0x58
 800aa5c:	bd70      	pop	{r4, r5, r6, pc}
 800aa5e:	466a      	mov	r2, sp
 800aa60:	f000 f848 	bl	800aaf4 <_fstat_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	dbec      	blt.n	800aa42 <__swhatbuf_r+0x12>
 800aa68:	9901      	ldr	r1, [sp, #4]
 800aa6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa72:	4259      	negs	r1, r3
 800aa74:	4159      	adcs	r1, r3
 800aa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7a:	e7eb      	b.n	800aa54 <__swhatbuf_r+0x24>

0800aa7c <__smakebuf_r>:
 800aa7c:	898b      	ldrh	r3, [r1, #12]
 800aa7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa80:	079d      	lsls	r5, r3, #30
 800aa82:	4606      	mov	r6, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	d507      	bpl.n	800aa98 <__smakebuf_r+0x1c>
 800aa88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	6123      	str	r3, [r4, #16]
 800aa90:	2301      	movs	r3, #1
 800aa92:	6163      	str	r3, [r4, #20]
 800aa94:	b002      	add	sp, #8
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	ab01      	add	r3, sp, #4
 800aa9a:	466a      	mov	r2, sp
 800aa9c:	f7ff ffc8 	bl	800aa30 <__swhatbuf_r>
 800aaa0:	9900      	ldr	r1, [sp, #0]
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7fe febd 	bl	8009824 <_malloc_r>
 800aaaa:	b948      	cbnz	r0, 800aac0 <__smakebuf_r+0x44>
 800aaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab0:	059a      	lsls	r2, r3, #22
 800aab2:	d4ef      	bmi.n	800aa94 <__smakebuf_r+0x18>
 800aab4:	f023 0303 	bic.w	r3, r3, #3
 800aab8:	f043 0302 	orr.w	r3, r3, #2
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	e7e3      	b.n	800aa88 <__smakebuf_r+0xc>
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	6020      	str	r0, [r4, #0]
 800aac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	6163      	str	r3, [r4, #20]
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	6120      	str	r0, [r4, #16]
 800aad2:	b15b      	cbz	r3, 800aaec <__smakebuf_r+0x70>
 800aad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f81d 	bl	800ab18 <_isatty_r>
 800aade:	b128      	cbz	r0, 800aaec <__smakebuf_r+0x70>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	431d      	orrs	r5, r3
 800aaf0:	81a5      	strh	r5, [r4, #12]
 800aaf2:	e7cf      	b.n	800aa94 <__smakebuf_r+0x18>

0800aaf4 <_fstat_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d07      	ldr	r5, [pc, #28]	; (800ab14 <_fstat_r+0x20>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	4611      	mov	r1, r2
 800ab00:	602b      	str	r3, [r5, #0]
 800ab02:	f7f6 fe56 	bl	80017b2 <_fstat>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d102      	bne.n	800ab10 <_fstat_r+0x1c>
 800ab0a:	682b      	ldr	r3, [r5, #0]
 800ab0c:	b103      	cbz	r3, 800ab10 <_fstat_r+0x1c>
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	bd38      	pop	{r3, r4, r5, pc}
 800ab12:	bf00      	nop
 800ab14:	200005cc 	.word	0x200005cc

0800ab18 <_isatty_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_isatty_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f6 fe55 	bl	80017d2 <_isatty>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_isatty_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_isatty_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	200005cc 	.word	0x200005cc

0800ab38 <_init>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	bf00      	nop
 800ab3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3e:	bc08      	pop	{r3}
 800ab40:	469e      	mov	lr, r3
 800ab42:	4770      	bx	lr

0800ab44 <_fini>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	bf00      	nop
 800ab48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4a:	bc08      	pop	{r3}
 800ab4c:	469e      	mov	lr, r3
 800ab4e:	4770      	bx	lr
