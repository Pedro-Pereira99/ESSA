
lab05_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800ab88  0800ab88  0001ab88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af3c  0800af3c  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af3c  0800af3c  0001af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af44  0800af44  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800af4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000028c  0800b1d8  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800b1d8  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018959  00000000  00000000  000202ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335f  00000000  00000000  00038c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0003bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c6  00000000  00000000  0003d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019169  00000000  00000000  0003eab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191a3  00000000  00000000  00057c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096811  00000000  00000000  00070dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078a8  00000000  00000000  001075d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010ee7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab70 	.word	0x0800ab70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	0800ab70 	.word	0x0800ab70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int timFlag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timFlag = 1; // The interrupt func is going to set the flag every 500 ms
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
} // The flag will be cleared in the while loop.
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000338 	.word	0x20000338

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ed8:	b09a      	sub	sp, #104	; 0x68
 8000eda:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f003 fa82 	bl	80043e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f886 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f968 	bl	80011b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee8:	f000 f93c 	bl	8001164 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000eec:	f000 f8ec 	bl	80010c8 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char welcome_message[] = "Program has started \r\n"; // Message to transmit in case of any error when reading the data
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <main+0x108>)
 8000ef2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f00:	6020      	str	r0, [r4, #0]
 8000f02:	3404      	adds	r4, #4
 8000f04:	8021      	strh	r1, [r4, #0]
 8000f06:	3402      	adds	r4, #2
 8000f08:	0c0b      	lsrs	r3, r1, #16
 8000f0a:	7023      	strb	r3, [r4, #0]

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY); // Initialize the humidity sensor
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f002 fe90 	bl	8003c34 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE); // Initialize the temperature sensor
 8000f14:	2101      	movs	r1, #1
 8000f16:	2002      	movs	r0, #2
 8000f18:	f002 fe8c 	bl	8003c34 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE); // Initialize the pressure sensor
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f002 fe88 	bl	8003c34 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY); // Enable the humidity sensor
 8000f24:	2104      	movs	r1, #4
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 ff92 	bl	8003e50 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE); // Enable the temperature sensor
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f002 ff8e 	bl	8003e50 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE); // Enable the pressure sensor
 8000f34:	2102      	movs	r1, #2
 8000f36:	2001      	movs	r0, #1
 8000f38:	f002 ff8a 	bl	8003e50 <IKS01A3_ENV_SENSOR_Enable>
  float pressure;
  	//

  char buffer[50]; // This will help the data transmission

	HAL_TIM_Base_Start_IT(&htim3);// Start the timer; This will enable interrupts every time the timer is reloaded (every 0.5 sec)
 8000f3c:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <main+0x10c>)
 8000f3e:	f005 fc53 	bl	80067e8 <HAL_TIM_Base_Start_IT>
	 // Print welcome message
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
 8000f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f99a 	bl	8000280 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f54:	4619      	mov	r1, r3
 8000f56:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <main+0x110>)
 8000f58:	f006 f880 	bl	800705c <HAL_UART_Transmit_IT>
	while (1)
	{
	 if(timFlag == 1){
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <main+0x114>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d1fb      	bne.n	8000f5c <main+0x88>
	  timFlag = 0; //Clear the interrupt flag of the timer
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <main+0x114>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]

	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity); // Saves the output in the "humidity" variable, and returns a value useful to find errors
 8000f6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2104      	movs	r1, #4
 8000f72:	2000      	movs	r0, #0
 8000f74:	f002 ffac 	bl	8003ed0 <IKS01A3_ENV_SENSOR_GetValue>
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &temperature); // Saves the output in the "temperature" variable, and returns a value useful to find errors
 8000f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2002      	movs	r0, #2
 8000f82:	f002 ffa5 	bl	8003ed0 <IKS01A3_ENV_SENSOR_GetValue>
	  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure); // Saves the output in the "pressure" variable, and returns a value useful to find errors
 8000f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f002 ff9e 	bl	8003ed0 <IKS01A3_ENV_SENSOR_GetValue>

	  HAL_UART_Transmit_IT(&huart2, buffer, sprintf(buffer, "%f, %f, %f; \r\n", temperature, humidity, pressure)); // Transmits humidity data
 8000f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fade 	bl	8000558 <__aeabi_f2d>
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	4689      	mov	r9, r1
 8000fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fad8 	bl	8000558 <__aeabi_f2d>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	460d      	mov	r5, r1
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fad2 	bl	8000558 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4638      	mov	r0, r7
 8000fba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fbe:	e9cd 4500 	strd	r4, r5, [sp]
 8000fc2:	4642      	mov	r2, r8
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <main+0x118>)
 8000fc8:	f007 fc74 	bl	80088b4 <siprintf>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <main+0x110>)
 8000fd6:	f006 f841 	bl	800705c <HAL_UART_Transmit_IT>
	 if(timFlag == 1){
 8000fda:	e7bf      	b.n	8000f5c <main+0x88>
 8000fdc:	0800ab98 	.word	0x0800ab98
 8000fe0:	200002a8 	.word	0x200002a8
 8000fe4:	200002f0 	.word	0x200002f0
 8000fe8:	20000338 	.word	0x20000338
 8000fec:	0800ab88 	.word	0x0800ab88

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fcbb 	bl	800897a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <SystemClock_Config+0xd0>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <SystemClock_Config+0xd0>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <SystemClock_Config+0xd0>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <SystemClock_Config+0xd4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <SystemClock_Config+0xd4>)
 800103e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <SystemClock_Config+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001058:	2310      	movs	r3, #16
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105c:	2302      	movs	r3, #2
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001060:	2300      	movs	r3, #0
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001064:	2310      	movs	r3, #16
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001068:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800106e:	2304      	movs	r3, #4
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fecc 	bl	8005e18 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001086:	f000 f905 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2102      	movs	r1, #2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 f92e 	bl	8006308 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010b2:	f000 f8ef 	bl	8001294 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	; 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_TIM3_Init+0x94>)
 80010e6:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <MX_TIM3_Init+0x98>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_TIM3_Init+0x94>)
 80010ec:	f640 0233 	movw	r2, #2099	; 0x833
 80010f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_TIM3_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_TIM3_Init+0x94>)
 80010fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_TIM3_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM3_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_TIM3_Init+0x94>)
 800110e:	f005 fb1b 	bl	8006748 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001118:	f000 f8bc 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_TIM3_Init+0x94>)
 800112a:	f005 fcaf 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 f8ae 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM3_Init+0x94>)
 8001146:	f005 feb7 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001150:	f000 f8a0 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002a8 	.word	0x200002a8
 8001160:	40000400 	.word	0x40000400

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f005 ff0e 	bl	8006fbc <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f875 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002f0 	.word	0x200002f0
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_GPIO_Init+0xd0>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_GPIO_Init+0xd4>)
 8001244:	f003 fd4c 	bl	8004ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_GPIO_Init+0xd8>)
 8001260:	f003 fad6 	bl	8004810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001264:	2320      	movs	r3, #32
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_GPIO_Init+0xd4>)
 800127c:	f003 fac8 	bl	8004810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020800 	.word	0x40020800

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012de:	2007      	movs	r0, #7
 80012e0:	f003 f9c2 	bl	8004668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_TIM_Base_MspInit+0x48>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d115      	bne.n	800132e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_TIM_Base_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x4c>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_TIM_Base_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201d      	movs	r0, #29
 8001324:	f003 f9ab 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001328:	201d      	movs	r0, #29
 800132a:	f003 f9c4 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40000400 	.word	0x40000400
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x94>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d133      	bne.n	80013ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x98>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_UART_MspInit+0x9c>)
 80013b6:	f003 fa2b 	bl	8004810 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2026      	movs	r0, #38	; 0x26
 80013c0:	f003 f95d 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f003 f976 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f003 f82c 	bl	8004488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <TIM3_IRQHandler+0x10>)
 800143a:	f005 fa37 	bl	80068ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002a8 	.word	0x200002a8

08001448 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USART2_IRQHandler+0x10>)
 800144e:	f005 fe3b 	bl	80070c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002f0 	.word	0x200002f0

0800145c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <BSP_I2C1_Init+0x58>)
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <BSP_I2C1_Init+0x5c>)
 800146a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <BSP_I2C1_Init+0x60>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	4912      	ldr	r1, [pc, #72]	; (80014bc <BSP_I2C1_Init+0x60>)
 8001474:	600a      	str	r2, [r1, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d117      	bne.n	80014aa <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <BSP_I2C1_Init+0x58>)
 800147c:	f004 f8fe 	bl	800567c <HAL_I2C_GetState>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d111      	bne.n	80014aa <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <BSP_I2C1_Init+0x58>)
 8001488:	f000 f8e2 	bl	8001650 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10b      	bne.n	80014aa <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <BSP_I2C1_Init+0x58>)
 8001494:	f000 f8a8 	bl	80015e8 <MX_I2C1_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800149e:	f06f 0307 	mvn.w	r3, #7
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000033c 	.word	0x2000033c
 80014b8:	40005400 	.word	0x40005400
 80014bc:	20000390 	.word	0x20000390

080014c0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <BSP_I2C1_DeInit+0x48>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d014      	beq.n	80014fc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <BSP_I2C1_DeInit+0x48>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <BSP_I2C1_DeInit+0x48>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <BSP_I2C1_DeInit+0x48>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10b      	bne.n	80014fc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <BSP_I2C1_DeInit+0x4c>)
 80014e6:	f000 f8fd 	bl	80016e4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <BSP_I2C1_DeInit+0x4c>)
 80014ec:	f003 fd56 	bl	8004f9c <HAL_I2C_DeInit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80014f6:	f06f 0307 	mvn.w	r3, #7
 80014fa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000390 	.word	0x20000390
 800150c:	2000033c 	.word	0x2000033c

08001510 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af04      	add	r7, sp, #16
 8001516:	60ba      	str	r2, [r7, #8]
 8001518:	461a      	mov	r2, r3
 800151a:	4603      	mov	r3, r0
 800151c:	81fb      	strh	r3, [r7, #14]
 800151e:	460b      	mov	r3, r1
 8001520:	81bb      	strh	r3, [r7, #12]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800152a:	89ba      	ldrh	r2, [r7, #12]
 800152c:	89f9      	ldrh	r1, [r7, #14]
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <BSP_I2C1_WriteReg+0x60>)
 8001540:	f003 fd70 	bl	8005024 <HAL_I2C_Mem_Write>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00c      	beq.n	8001564 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <BSP_I2C1_WriteReg+0x60>)
 800154c:	f004 f8a4 	bl	8005698 <HAL_I2C_GetError>
 8001550:	4603      	mov	r3, r0
 8001552:	2b04      	cmp	r3, #4
 8001554:	d103      	bne.n	800155e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001556:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e002      	b.n	8001564 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800155e:	f06f 0303 	mvn.w	r3, #3
 8001562:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001564:	697b      	ldr	r3, [r7, #20]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000033c 	.word	0x2000033c

08001574 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af04      	add	r7, sp, #16
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	81fb      	strh	r3, [r7, #14]
 8001582:	460b      	mov	r3, r1
 8001584:	81bb      	strh	r3, [r7, #12]
 8001586:	4613      	mov	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800158e:	89ba      	ldrh	r2, [r7, #12]
 8001590:	89f9      	ldrh	r1, [r7, #14]
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <BSP_I2C1_ReadReg+0x60>)
 80015a4:	f003 fe38 	bl	8005218 <HAL_I2C_Mem_Read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00c      	beq.n	80015c8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <BSP_I2C1_ReadReg+0x60>)
 80015b0:	f004 f872 	bl	8005698 <HAL_I2C_GetError>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d103      	bne.n	80015c2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80015ba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e002      	b.n	80015c8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015c2:	f06f 0303 	mvn.w	r3, #3
 80015c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000033c 	.word	0x2000033c

080015d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80015dc:	f002 ff68 	bl	80044b0 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <MX_I2C1_Init+0x60>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_I2C1_Init+0x64>)
 80015fe:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001612:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f003 fb71 	bl	8004d14 <HAL_I2C_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40005400 	.word	0x40005400
 800164c:	00061a80 	.word	0x00061a80

08001650 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <I2C1_MspInit+0x8c>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <I2C1_MspInit+0x8c>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <I2C1_MspInit+0x8c>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167a:	2312      	movs	r3, #18
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001686:	2304      	movs	r3, #4
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <I2C1_MspInit+0x90>)
 8001692:	f003 f8bd 	bl	8004810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80016a8:	2304      	movs	r3, #4
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C1_MspInit+0x90>)
 80016b4:	f003 f8ac 	bl	8004810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <I2C1_MspInit+0x8c>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <I2C1_MspInit+0x8c>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <I2C1_MspInit+0x8c>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400

080016e4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <I2C1_MspDeInit+0x30>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <I2C1_MspDeInit+0x30>)
 80016f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80016f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <I2C1_MspDeInit+0x34>)
 80016fe:	f003 fa0b 	bl	8004b18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <I2C1_MspDeInit+0x34>)
 8001708:	f003 fa06 	bl	8004b18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_kill>:

int _kill(int pid, int sig)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001736:	f007 f973 	bl	8008a20 <__errno>
 800173a:	4603      	mov	r3, r0
 800173c:	2216      	movs	r2, #22
 800173e:	601a      	str	r2, [r3, #0]
  return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_exit>:

void _exit (int status)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffe7 	bl	800172c <_kill>
  while (1) {}    /* Make sure we hang here */
 800175e:	e7fe      	b.n	800175e <_exit+0x12>

08001760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00a      	b.n	8001788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001772:	f3af 8000 	nop.w
 8001776:	4601      	mov	r1, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf0      	blt.n	8001772 <_read+0x12>
  }

  return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf1      	blt.n	80017ac <_write+0x12>
  }
  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:

int _close(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_isatty>:

int _isatty(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f007 f8d8 	bl	8008a20 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000394 	.word	0x20000394
 80018a4:	200005e0 	.word	0x200005e0

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f007 f897 	bl	8008a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fae9 	bl	8000ed4 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8001910:	0800af4c 	.word	0x0800af4c
  ldr r2, =_sbss
 8001914:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8001918:	200005dc 	.word	0x200005dc

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e034      	b.n	80019a2 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7b1a      	ldrb	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HTS221_RegisterBusIO+0x8c>)
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HTS221_RegisterBusIO+0x90>)
 800197a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4798      	blx	r3
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	e002      	b.n	80019a2 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	08001fef 	.word	0x08001fef
 80019b0:	08002051 	.word	0x08002051

080019b4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 faac 	bl	8001f24 <HTS221_Initialize>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e004      	b.n	80019e2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d111      	bne.n	8001a20 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f880 	bl	8001b02 <HTS221_HUM_Disable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	e00d      	b.n	8001a2a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f967 	bl	8001ce2 <HTS221_TEMP_Disable>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e004      	b.n	8001a2a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3320      	adds	r3, #32
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc30 	bl	80022a8 <hts221_device_id_get>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e000      	b.n	8001a56 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HTS221_GetCapabilities+0x54>)
 8001a8c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HTS221_GetCapabilities+0x54>)
 8001a92:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	41480000 	.word	0x41480000

08001ab8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e015      	b.n	8001afa <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3320      	adds	r3, #32
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fbf3 	bl	80022ca <hts221_power_on_set>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e004      	b.n	8001afa <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e015      	b.n	8001b44 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3320      	adds	r3, #32
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fbce 	bl	80022ca <hts221_power_on_set>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	e004      	b.n	8001b44 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f96f 	bl	8001e3c <HTS221_GetOutputDataRate>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001b74:	ed97 0a00 	vldr	s0, [r7]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f9a3 	bl	8001ec4 <HTS221_SetOutputDataRate>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3320      	adds	r3, #32
 8001b96:	f107 020c 	add.w	r2, r7, #12
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fc58 	bl	8002452 <hts221_hum_adc_point_0_get>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	e06b      	b.n	8001c86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f103 0220 	add.w	r2, r3, #32
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f000 fbaa 	bl	8002316 <hts221_hum_rh_point_0_get>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	e05b      	b.n	8001c86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f103 0220 	add.w	r2, r3, #32
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	3308      	adds	r3, #8
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f000 fc5c 	bl	800249a <hts221_hum_adc_point_1_get>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	e04b      	b.n	8001c86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f103 0220 	add.w	r2, r3, #32
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f000 fba8 	bl	8002352 <hts221_hum_rh_point_1_get>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	e03b      	b.n	8001c86 <HTS221_HUM_GetHumidity+0xfe>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3320      	adds	r3, #32
 8001c16:	f107 021c 	add.w	r2, r7, #28
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fafd 	bl	800221c <hts221_humidity_raw_get>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	e02b      	b.n	8001c86 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001c2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f99a 	bl	8001f7c <Linear_Interpolation>
 8001c48:	eef0 7a40 	vmov.f32	s15, s0
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d503      	bpl.n	8001c6a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c90 <HTS221_HUM_GetHumidity+0x108>
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	dd02      	ble.n	8001c84 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HTS221_HUM_GetHumidity+0x10c>)
 8001c82:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	42c80000 	.word	0x42c80000
 8001c94:	42c80000 	.word	0x42c80000

08001c98 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e015      	b.n	8001cda <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3320      	adds	r3, #32
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fb03 	bl	80022ca <hts221_power_on_set>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e004      	b.n	8001cda <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e015      	b.n	8001d24 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3320      	adds	r3, #32
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fade 	bl	80022ca <hts221_power_on_set>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	e004      	b.n	8001d24 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f87f 	bl	8001e3c <HTS221_GetOutputDataRate>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001d54:	ed97 0a00 	vldr	s0, [r7]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8b3 	bl	8001ec4 <HTS221_SetOutputDataRate>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3320      	adds	r3, #32
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fbb0 	bl	80024e2 <hts221_temp_adc_point_0_get>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e052      	b.n	8001e34 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f103 0220 	add.w	r2, r3, #32
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	3304      	adds	r3, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f000 faf6 	bl	800238e <hts221_temp_deg_point_0_get>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	e042      	b.n	8001e34 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 0220 	add.w	r2, r3, #32
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	3308      	adds	r3, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 fbb4 	bl	800252a <hts221_temp_adc_point_1_get>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	e032      	b.n	8001e34 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 0220 	add.w	r2, r3, #32
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	330c      	adds	r3, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f000 fb07 	bl	80023f0 <hts221_temp_deg_point_1_get>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e022      	b.n	8001e34 <HTS221_TEMP_GetTemperature+0xcc>
 8001dee:	2300      	movs	r3, #0
 8001df0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3320      	adds	r3, #32
 8001df6:	f107 021c 	add.w	r2, r7, #28
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fa30 	bl	8002262 <hts221_temperature_raw_get>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	e012      	b.n	8001e34 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001e0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f8aa 	bl	8001f7c <Linear_Interpolation>
 8001e28:	eef0 7a40 	vmov.f32	s15, s0
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3320      	adds	r3, #32
 8001e4e:	f107 020b 	add.w	r2, r7, #11
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f983 	bl	8002160 <hts221_data_rate_get>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e025      	b.n	8001eb2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d81d      	bhi.n	8001ea8 <HTS221_GetOutputDataRate+0x6c>
 8001e6c:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <HTS221_GetOutputDataRate+0x38>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e8f 	.word	0x08001e8f
 8001e7c:	08001e99 	.word	0x08001e99
 8001e80:	08001ea1 	.word	0x08001ea1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
      break;
 8001e8c:	e010      	b.n	8001eb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e94:	601a      	str	r2, [r3, #0]
      break;
 8001e96:	e00b      	b.n	8001eb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HTS221_GetOutputDataRate+0x80>)
 8001e9c:	601a      	str	r2, [r3, #0]
      break;
 8001e9e:	e007      	b.n	8001eb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HTS221_GetOutputDataRate+0x84>)
 8001ea4:	601a      	str	r2, [r3, #0]
      break;
 8001ea6:	e003      	b.n	8001eb0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	60fb      	str	r3, [r7, #12]
      break;
 8001eae:	bf00      	nop
  }

  return ret;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40e00000 	.word	0x40e00000
 8001ec0:	41480000 	.word	0x41480000

08001ec4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001ed0:	edd7 7a00 	vldr	s15, [r7]
 8001ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d801      	bhi.n	8001ee6 <HTS221_SetOutputDataRate+0x22>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00b      	b.n	8001efe <HTS221_SetOutputDataRate+0x3a>
 8001ee6:	edd7 7a00 	vldr	s15, [r7]
 8001eea:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d801      	bhi.n	8001efc <HTS221_SetOutputDataRate+0x38>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e000      	b.n	8001efe <HTS221_SetOutputDataRate+0x3a>
 8001efc:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001efe:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3320      	adds	r3, #32
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f902 	bl	8002112 <hts221_data_rate_set>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e000      	b.n	8001f1c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3320      	adds	r3, #32
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f9c9 	bl	80022ca <hts221_power_on_set>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e017      	b.n	8001f74 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3320      	adds	r3, #32
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f940 	bl	80021d0 <hts221_block_data_update_set>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e00b      	b.n	8001f74 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001f5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffaf 	bl	8001ec4 <HTS221_SetOutputDataRate>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	e000      	b.n	8001f74 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	edd7 7a00 	vldr	s15, [r7]
 8001f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	ed93 6a00 	vldr	s12, [r3]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fdc:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	72fb      	strb	r3, [r7, #11]
 8001ffe:	4613      	mov	r3, r2
 8002000:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	695c      	ldr	r4, [r3, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	7b1b      	ldrb	r3, [r3, #12]
 8002016:	b298      	uxth	r0, r3
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201e:	b2db      	uxtb	r3, r3
 8002020:	b299      	uxth	r1, r3
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	47a0      	blx	r4
 8002028:	4603      	mov	r3, r0
 800202a:	e00d      	b.n	8002048 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	695c      	ldr	r4, [r3, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	b298      	uxth	r0, r3
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	b2db      	uxtb	r3, r3
 800203e:	b299      	uxth	r1, r3
 8002040:	893b      	ldrh	r3, [r7, #8]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	47a0      	blx	r4
 8002046:	4603      	mov	r3, r0
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}

08002050 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	461a      	mov	r2, r3
 800205c:	460b      	mov	r3, r1
 800205e:	72fb      	strb	r3, [r7, #11]
 8002060:	4613      	mov	r3, r2
 8002062:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10e      	bne.n	800208e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	691c      	ldr	r4, [r3, #16]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	7b1b      	ldrb	r3, [r3, #12]
 8002078:	b298      	uxth	r0, r3
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002080:	b2db      	uxtb	r3, r3
 8002082:	b299      	uxth	r1, r3
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	47a0      	blx	r4
 800208a:	4603      	mov	r3, r0
 800208c:	e00d      	b.n	80020aa <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	691c      	ldr	r4, [r3, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	b298      	uxth	r0, r3
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b299      	uxth	r1, r3
 80020a2:	893b      	ldrh	r3, [r7, #8]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	47a0      	blx	r4
 80020a8:	4603      	mov	r3, r0
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}

080020b2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80020b2:	b590      	push	{r4, r7, lr}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	461a      	mov	r2, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	72fb      	strb	r3, [r7, #11]
 80020c2:	4613      	mov	r3, r2
 80020c4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685c      	ldr	r4, [r3, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68d8      	ldr	r0, [r3, #12]
 80020ce:	893b      	ldrh	r3, [r7, #8]
 80020d0:	7af9      	ldrb	r1, [r7, #11]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	47a0      	blx	r4
 80020d6:	6178      	str	r0, [r7, #20]

  return ret;
 80020d8:	697b      	ldr	r3, [r7, #20]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}

080020e2 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b087      	sub	sp, #28
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	461a      	mov	r2, r3
 80020ee:	460b      	mov	r3, r1
 80020f0:	72fb      	strb	r3, [r7, #11]
 80020f2:	4613      	mov	r3, r2
 80020f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681c      	ldr	r4, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68d8      	ldr	r0, [r3, #12]
 80020fe:	893b      	ldrh	r3, [r7, #8]
 8002100:	7af9      	ldrb	r1, [r7, #11]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	47a0      	blx	r4
 8002106:	6178      	str	r0, [r7, #20]

  return ret;
 8002108:	697b      	ldr	r3, [r7, #20]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800211e:	f107 0208 	add.w	r2, r7, #8
 8002122:	2301      	movs	r3, #1
 8002124:	2120      	movs	r1, #32
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffc3 	bl	80020b2 <hts221_read_reg>
 800212c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10f      	bne.n	8002154 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	7a3b      	ldrb	r3, [r7, #8]
 800213e:	f362 0301 	bfi	r3, r2, #0, #2
 8002142:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	2301      	movs	r3, #1
 800214a:	2120      	movs	r1, #32
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffc8 	bl	80020e2 <hts221_write_reg>
 8002152:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002154:	68fb      	ldr	r3, [r7, #12]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800216a:	f107 0208 	add.w	r2, r7, #8
 800216e:	2301      	movs	r3, #1
 8002170:	2120      	movs	r1, #32
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff9d 	bl	80020b2 <hts221_read_reg>
 8002178:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800217a:	7a3b      	ldrb	r3, [r7, #8]
 800217c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b03      	cmp	r3, #3
 8002184:	d81a      	bhi.n	80021bc <hts221_data_rate_get+0x5c>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <hts221_data_rate_get+0x2c>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021b5 	.word	0x080021b5
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
      break;
 80021a2:	e00f      	b.n	80021c4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e00b      	b.n	80021c4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e007      	b.n	80021c4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2203      	movs	r2, #3
 80021b8:	701a      	strb	r2, [r3, #0]
      break;
 80021ba:	e003      	b.n	80021c4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2204      	movs	r2, #4
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	bf00      	nop
  }

  return ret;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop

080021d0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80021dc:	f107 0208 	add.w	r2, r7, #8
 80021e0:	2301      	movs	r3, #1
 80021e2:	2120      	movs	r1, #32
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff64 	bl	80020b2 <hts221_read_reg>
 80021ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	7a3b      	ldrb	r3, [r7, #8]
 80021fc:	f362 0382 	bfi	r3, r2, #2, #1
 8002200:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002202:	f107 0208 	add.w	r2, r7, #8
 8002206:	2301      	movs	r3, #1
 8002208:	2120      	movs	r1, #32
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff69 	bl	80020e2 <hts221_write_reg>
 8002210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002226:	f107 0208 	add.w	r2, r7, #8
 800222a:	2302      	movs	r3, #2
 800222c:	2128      	movs	r1, #40	; 0x28
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff3f 	bl	80020b2 <hts221_read_reg>
 8002234:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002236:	7a7b      	ldrb	r3, [r7, #9]
 8002238:	b21a      	sxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	b29b      	uxth	r3, r3
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b29a      	uxth	r2, r3
 800224a:	7a3b      	ldrb	r3, [r7, #8]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]

  return ret;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	2302      	movs	r3, #2
 8002272:	212a      	movs	r1, #42	; 0x2a
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff1c 	bl	80020b2 <hts221_read_reg>
 800227a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	b21a      	sxth	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228a:	b29b      	uxth	r3, r3
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b29a      	uxth	r2, r3
 8002290:	7a3b      	ldrb	r3, [r7, #8]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	b21a      	sxth	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	801a      	strh	r2, [r3, #0]

  return ret;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80022b2:	2301      	movs	r3, #1
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	210f      	movs	r1, #15
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fefa 	bl	80020b2 <hts221_read_reg>
 80022be:	60f8      	str	r0, [r7, #12]

  return ret;
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80022d6:	f107 0208 	add.w	r2, r7, #8
 80022da:	2301      	movs	r3, #1
 80022dc:	2120      	movs	r1, #32
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fee7 	bl	80020b2 <hts221_read_reg>
 80022e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	7a3b      	ldrb	r3, [r7, #8]
 80022f6:	f362 13c7 	bfi	r3, r2, #7, #1
 80022fa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80022fc:	f107 0208 	add.w	r2, r7, #8
 8002300:	2301      	movs	r3, #1
 8002302:	2120      	movs	r1, #32
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff feec 	bl	80020e2 <hts221_write_reg>
 800230a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800230c:	68fb      	ldr	r3, [r7, #12]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002320:	f107 020b 	add.w	r2, r7, #11
 8002324:	2301      	movs	r3, #1
 8002326:	2130      	movs	r1, #48	; 0x30
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fec2 	bl	80020b2 <hts221_read_reg>
 800232e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800233e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002348:	68fb      	ldr	r3, [r7, #12]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800235c:	f107 020b 	add.w	r2, r7, #11
 8002360:	2301      	movs	r3, #1
 8002362:	2131      	movs	r1, #49	; 0x31
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fea4 	bl	80020b2 <hts221_read_reg>
 800236a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002376:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800237a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002398:	f107 020f 	add.w	r2, r7, #15
 800239c:	2301      	movs	r3, #1
 800239e:	2132      	movs	r1, #50	; 0x32
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fe86 	bl	80020b2 <hts221_read_reg>
 80023a6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11b      	bne.n	80023e6 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80023ae:	f107 0210 	add.w	r2, r7, #16
 80023b2:	2301      	movs	r3, #1
 80023b4:	2135      	movs	r1, #53	; 0x35
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fe7b 	bl	80020b2 <hts221_read_reg>
 80023bc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80023be:	7c3b      	ldrb	r3, [r7, #16]
 80023c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	4413      	add	r3, r2
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80023dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80023e6:	697b      	ldr	r3, [r7, #20]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80023fa:	f107 020f 	add.w	r2, r7, #15
 80023fe:	2301      	movs	r3, #1
 8002400:	2133      	movs	r1, #51	; 0x33
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe55 	bl	80020b2 <hts221_read_reg>
 8002408:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11b      	bne.n	8002448 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002410:	f107 0210 	add.w	r2, r7, #16
 8002414:	2301      	movs	r3, #1
 8002416:	2135      	movs	r1, #53	; 0x35
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe4a 	bl	80020b2 <hts221_read_reg>
 800241e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002420:	7c3b      	ldrb	r3, [r7, #16]
 8002422:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	4413      	add	r3, r2
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800243e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002448:	697b      	ldr	r3, [r7, #20]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800245c:	f107 0208 	add.w	r2, r7, #8
 8002460:	2302      	movs	r3, #2
 8002462:	2136      	movs	r1, #54	; 0x36
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fe24 	bl	80020b2 <hts221_read_reg>
 800246a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800246c:	7a7b      	ldrb	r3, [r7, #9]
 800246e:	b29b      	uxth	r3, r3
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b29a      	uxth	r2, r3
 8002474:	7a3b      	ldrb	r3, [r7, #8]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800247e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002490:	68fb      	ldr	r3, [r7, #12]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80024a4:	f107 0208 	add.w	r2, r7, #8
 80024a8:	2302      	movs	r3, #2
 80024aa:	213a      	movs	r1, #58	; 0x3a
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fe00 	bl	80020b2 <hts221_read_reg>
 80024b2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80024b4:	7a7b      	ldrb	r3, [r7, #9]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	7a3b      	ldrb	r3, [r7, #8]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80024c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80024ec:	f107 0208 	add.w	r2, r7, #8
 80024f0:	2302      	movs	r3, #2
 80024f2:	213c      	movs	r1, #60	; 0x3c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fddc 	bl	80020b2 <hts221_read_reg>
 80024fa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80024fc:	7a7b      	ldrb	r3, [r7, #9]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b29a      	uxth	r2, r3
 8002504:	7a3b      	ldrb	r3, [r7, #8]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800250e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002534:	f107 0208 	add.w	r2, r7, #8
 8002538:	2302      	movs	r3, #2
 800253a:	213e      	movs	r1, #62	; 0x3e
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fdb8 	bl	80020b2 <hts221_read_reg>
 8002542:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	b29b      	uxth	r3, r3
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	7a3b      	ldrb	r3, [r7, #8]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4413      	add	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002556:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e051      	b.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	7b1a      	ldrb	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <LPS22HH_RegisterBusIO+0xcc>)
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <LPS22HH_RegisterBusIO+0xd0>)
 80025d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e020      	b.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4798      	blx	r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e016      	b.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d112      	bne.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002618:	2301      	movs	r3, #1
 800261a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	461a      	mov	r2, r3
 8002620:	2110      	movs	r1, #16
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9e7 	bl	80029f6 <LPS22HH_Write_Reg>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	08002d27 	.word	0x08002d27
 8002644:	08002d5d 	.word	0x08002d5d

08002648 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fb16 	bl	8002c8c <LPS22HH_Initialize>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e004      	b.n	8002676 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268c:	2b01      	cmp	r3, #1
 800268e:	d111      	bne.n	80026b4 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f87f 	bl	8002794 <LPS22HH_PRESS_Disable>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	e00d      	b.n	80026be <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f920 	bl	80028e8 <LPS22HH_TEMP_Disable>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e004      	b.n	80026be <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3320      	adds	r3, #32
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fd26 	bl	8003128 <lps22hh_device_id_get>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e000      	b.n	80026ea <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <LPS22HH_GetCapabilities+0x54>)
 8002728:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <LPS22HH_GetCapabilities+0x54>)
 800272e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	43480000 	.word	0x43480000

0800274c <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e014      	b.n	800278c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0220 	add.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 fb97 	bl	8002ea4 <lps22hh_data_rate_set>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e004      	b.n	800278c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e024      	b.n	80027f4 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11a      	bne.n	80027ea <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0220 	add.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3333      	adds	r3, #51	; 0x33
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 fbbd 	bl	8002f40 <lps22hh_data_rate_get>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	e010      	b.n	80027f4 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3320      	adds	r3, #32
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fb63 	bl	8002ea4 <lps22hh_data_rate_set>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e004      	b.n	80027f4 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f90f 	bl	8002a2c <LPS22HH_GetOutputDataRate>
 800280e:	4603      	mov	r3, r0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800282a:	2b01      	cmp	r3, #1
 800282c:	d106      	bne.n	800283c <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800282e:	ed97 0a00 	vldr	s0, [r7]
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f95e 	bl	8002af4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8002838:	4603      	mov	r3, r0
 800283a:	e005      	b.n	8002848 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800283c:	ed97 0a00 	vldr	s0, [r7]
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f9c9 	bl	8002bd8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8002846:	4603      	mov	r3, r0
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	2204      	movs	r2, #4
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f006 f889 	bl	800897a <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3320      	adds	r3, #32
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fc0c 	bl	8003090 <lps22hh_pressure_raw_get>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fab4 	bl	8002df4 <lps22hh_from_lsb_to_hpa>
 800288c:	eef0 7a40 	vmov.f32	s15, s0
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e014      	b.n	80028e0 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 0220 	add.w	r2, r3, #32
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 faed 	bl	8002ea4 <lps22hh_data_rate_set>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e004      	b.n	80028e0 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e024      	b.n	8002948 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11a      	bne.n	800293e <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f103 0220 	add.w	r2, r3, #32
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3333      	adds	r3, #51	; 0x33
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f000 fb13 	bl	8002f40 <lps22hh_data_rate_get>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	e010      	b.n	8002948 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3320      	adds	r3, #32
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fab9 	bl	8002ea4 <lps22hh_data_rate_set>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	e004      	b.n	8002948 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f865 	bl	8002a2c <LPS22HH_GetOutputDataRate>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002982:	ed97 0a00 	vldr	s0, [r7]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8b4 	bl	8002af4 <LPS22HH_SetOutputDataRate_When_Enabled>
 800298c:	4603      	mov	r3, r0
 800298e:	e005      	b.n	800299c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002990:	ed97 0a00 	vldr	s0, [r7]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f91f 	bl	8002bd8 <LPS22HH_SetOutputDataRate_When_Disabled>
 800299a:	4603      	mov	r3, r0
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2202      	movs	r2, #2
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 ffdf 	bl	800897a <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3320      	adds	r3, #32
 80029c0:	f107 020c 	add.w	r2, r7, #12
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fb8b 	bl	80030e2 <lps22hh_temperature_raw_get>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e00a      	b.n	80029ee <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80029d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa21 	bl	8002e24 <lps22hh_from_lsb_to_celsius>
 80029e2:	eef0 7a40 	vmov.f32	s15, s0
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
 8002a02:	4613      	mov	r3, r2
 8002a04:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 0020 	add.w	r0, r3, #32
 8002a0c:	1cba      	adds	r2, r7, #2
 8002a0e:	78f9      	ldrb	r1, [r7, #3]
 8002a10:	2301      	movs	r3, #1
 8002a12:	f000 f9d6 	bl	8002dc2 <lps22hh_write_reg>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	e000      	b.n	8002a24 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3320      	adds	r3, #32
 8002a3e:	f107 020b 	add.w	r2, r7, #11
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fa7b 	bl	8002f40 <lps22hh_data_rate_get>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	e03d      	b.n	8002ad2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	2b07      	cmp	r3, #7
 8002a5a:	d835      	bhi.n	8002ac8 <LPS22HH_GetOutputDataRate+0x9c>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <LPS22HH_GetOutputDataRate+0x38>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a85 	.word	0x08002a85
 8002a68:	08002a8f 	.word	0x08002a8f
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aa1 	.word	0x08002aa1
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002ab1 	.word	0x08002ab1
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ac1 	.word	0x08002ac1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
      break;
 8002a8c:	e020      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a94:	601a      	str	r2, [r3, #0]
      break;
 8002a96:	e01b      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <LPS22HH_GetOutputDataRate+0xb0>)
 8002a9c:	601a      	str	r2, [r3, #0]
      break;
 8002a9e:	e017      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <LPS22HH_GetOutputDataRate+0xb4>)
 8002aa4:	601a      	str	r2, [r3, #0]
      break;
 8002aa6:	e013      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <LPS22HH_GetOutputDataRate+0xb8>)
 8002aac:	601a      	str	r2, [r3, #0]
      break;
 8002aae:	e00f      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <LPS22HH_GetOutputDataRate+0xbc>)
 8002ab4:	601a      	str	r2, [r3, #0]
      break;
 8002ab6:	e00b      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <LPS22HH_GetOutputDataRate+0xc0>)
 8002abc:	601a      	str	r2, [r3, #0]
      break;
 8002abe:	e007      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <LPS22HH_GetOutputDataRate+0xc4>)
 8002ac4:	601a      	str	r2, [r3, #0]
      break;
 8002ac6:	e003      	b.n	8002ad0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	60fb      	str	r3, [r7, #12]
      break;
 8002ace:	bf00      	nop
  }

  return ret;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	41200000 	.word	0x41200000
 8002ae0:	41c80000 	.word	0x41c80000
 8002ae4:	42480000 	.word	0x42480000
 8002ae8:	42960000 	.word	0x42960000
 8002aec:	42c80000 	.word	0x42c80000
 8002af0:	43480000 	.word	0x43480000

08002af4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8002b00:	edd7 7a00 	vldr	s15, [r7]
 8002b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d801      	bhi.n	8002b16 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e037      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b16:	edd7 7a00 	vldr	s15, [r7]
 8002b1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d801      	bhi.n	8002b2c <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e02c      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b2c:	edd7 7a00 	vldr	s15, [r7]
 8002b30:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	d801      	bhi.n	8002b42 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e021      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b42:	edd7 7a00 	vldr	s15, [r7]
 8002b46:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002bcc <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	d801      	bhi.n	8002b58 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e016      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b58:	edd7 7a00 	vldr	s15, [r7]
 8002b5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002bd0 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8002b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d801      	bhi.n	8002b6e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e00b      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b6e:	edd7 7a00 	vldr	s15, [r7]
 8002b72:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002bd4 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d801      	bhi.n	8002b84 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8002b80:	2306      	movs	r3, #6
 8002b82:	e000      	b.n	8002b86 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002b84:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002b86:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f987 	bl	8002ea4 <lps22hh_data_rate_set>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	e00f      	b.n	8002bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0220 	add.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3333      	adds	r3, #51	; 0x33
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 f9c6 	bl	8002f40 <lps22hh_data_rate_get>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e000      	b.n	8002bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	42480000 	.word	0x42480000
 8002bd0:	42960000 	.word	0x42960000
 8002bd4:	42c80000 	.word	0x42c80000

08002bd8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8002be4:	edd7 7a00 	vldr	s15, [r7]
 8002be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d801      	bhi.n	8002bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e037      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002bfa:	edd7 7a00 	vldr	s15, [r7]
 8002bfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d801      	bhi.n	8002c10 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e02c      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c10:	edd7 7a00 	vldr	s15, [r7]
 8002c14:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	d801      	bhi.n	8002c26 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e021      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c26:	edd7 7a00 	vldr	s15, [r7]
 8002c2a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c80 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8002c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	d801      	bhi.n	8002c3c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	e016      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c3c:	edd7 7a00 	vldr	s15, [r7]
 8002c40:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002c84 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8002c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d801      	bhi.n	8002c52 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8002c4e:	2305      	movs	r3, #5
 8002c50:	e00b      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c52:	edd7 7a00 	vldr	s15, [r7]
 8002c56:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002c88 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8002c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d801      	bhi.n	8002c68 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8002c64:	2306      	movs	r3, #6
 8002c66:	e000      	b.n	8002c6a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002c68:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	42480000 	.word	0x42480000
 8002c84:	42960000 	.word	0x42960000
 8002c88:	42c80000 	.word	0x42c80000

08002c8c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d00b      	beq.n	8002cb4 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	2111      	movs	r1, #17
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa9d 	bl	80031e2 <lps22hh_i3c_interface_set>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e034      	b.n	8002d1e <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	2110      	movs	r1, #16
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f8f2 	bl	8002ea4 <lps22hh_data_rate_set>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	e028      	b.n	8002d1e <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3320      	adds	r3, #32
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fa5f 	bl	8003196 <lps22hh_lp_bandwidth_set>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e01c      	b.n	8002d1e <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8b4 	bl	8002e58 <lps22hh_block_data_update_set>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e010      	b.n	8002d1e <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3320      	adds	r3, #32
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fa21 	bl	800314a <lps22hh_auto_increment_set>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	e004      	b.n	8002d1e <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2203      	movs	r2, #3
 8002d18:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d26:	b590      	push	{r4, r7, lr}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	461a      	mov	r2, r3
 8002d32:	460b      	mov	r3, r1
 8002d34:	72fb      	strb	r3, [r7, #11]
 8002d36:	4613      	mov	r3, r2
 8002d38:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	695c      	ldr	r4, [r3, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	7b1b      	ldrb	r3, [r3, #12]
 8002d46:	b298      	uxth	r0, r3
 8002d48:	7afb      	ldrb	r3, [r7, #11]
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	47a0      	blx	r4
 8002d52:	4603      	mov	r3, r0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	72fb      	strb	r3, [r7, #11]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	691c      	ldr	r4, [r3, #16]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	7b1b      	ldrb	r3, [r3, #12]
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	b299      	uxth	r1, r3
 8002d82:	893b      	ldrh	r3, [r7, #8]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	47a0      	blx	r4
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	72fb      	strb	r3, [r7, #11]
 8002da2:	4613      	mov	r3, r2
 8002da4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685c      	ldr	r4, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68d8      	ldr	r0, [r3, #12]
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	7af9      	ldrb	r1, [r7, #11]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	47a0      	blx	r4
 8002db6:	6178      	str	r0, [r7, #20]

  return ret;
 8002db8:	697b      	ldr	r3, [r7, #20]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b087      	sub	sp, #28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	460b      	mov	r3, r1
 8002dd0:	72fb      	strb	r3, [r7, #11]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68d8      	ldr	r0, [r3, #12]
 8002dde:	893b      	ldrh	r3, [r7, #8]
 8002de0:	7af9      	ldrb	r1, [r7, #11]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	47a0      	blx	r4
 8002de6:	6178      	str	r0, [r7, #20]

  return ret;
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd90      	pop	{r4, r7, pc}
	...

08002df4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002e20 <lps22hh_from_lsb_to_hpa+0x2c>
 8002e0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e0e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	49800000 	.word	0x49800000

08002e24 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8002e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002e54 <lps22hh_from_lsb_to_celsius+0x30>
 8002e3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e42:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	42c80000 	.word	0x42c80000

08002e58 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e64:	f107 0208 	add.w	r2, r7, #8
 8002e68:	2301      	movs	r3, #1
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff90 	bl	8002d92 <lps22hh_read_reg>
 8002e72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	f362 0341 	bfi	r3, r2, #1, #1
 8002e88:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e8a:	f107 0208 	add.w	r2, r7, #8
 8002e8e:	2301      	movs	r3, #1
 8002e90:	2110      	movs	r1, #16
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff95 	bl	8002dc2 <lps22hh_write_reg>
 8002e98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002eb0:	f107 0210 	add.w	r2, r7, #16
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff6a 	bl	8002d92 <lps22hh_read_reg>
 8002ebe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002ec6:	f107 020c 	add.w	r2, r7, #12
 8002eca:	2301      	movs	r3, #1
 8002ecc:	2111      	movs	r1, #17
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff5f 	bl	8002d92 <lps22hh_read_reg>
 8002ed4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	7c3b      	ldrb	r3, [r7, #16]
 8002ee6:	f362 1306 	bfi	r3, r2, #4, #3
 8002eea:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002eec:	f107 0210 	add.w	r2, r7, #16
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff64 	bl	8002dc2 <lps22hh_write_reg>
 8002efa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	7b3b      	ldrb	r3, [r7, #12]
 8002f0e:	f362 0341 	bfi	r3, r2, #1, #1
 8002f12:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	7b3b      	ldrb	r3, [r7, #12]
 8002f20:	f362 0300 	bfi	r3, r2, #0, #1
 8002f24:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002f26:	f107 020c 	add.w	r2, r7, #12
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	2111      	movs	r1, #17
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff47 	bl	8002dc2 <lps22hh_write_reg>
 8002f34:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002f36:	697b      	ldr	r3, [r7, #20]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002f4a:	f107 0210 	add.w	r2, r7, #16
 8002f4e:	2301      	movs	r3, #1
 8002f50:	2110      	movs	r1, #16
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff1d 	bl	8002d92 <lps22hh_read_reg>
 8002f58:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002f60:	f107 020c 	add.w	r2, r7, #12
 8002f64:	2301      	movs	r3, #1
 8002f66:	2111      	movs	r1, #17
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff12 	bl	8002d92 <lps22hh_read_reg>
 8002f6e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8086 	bne.w	8003084 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002f78:	f107 020c 	add.w	r2, r7, #12
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2111      	movs	r1, #17
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff06 	bl	8002d92 <lps22hh_read_reg>
 8002f86:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002f88:	7b3b      	ldrb	r3, [r7, #12]
 8002f8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	011a      	lsls	r2, r3, #4
 8002f92:	7b3b      	ldrb	r3, [r7, #12]
 8002f94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8002f9e:	7c3a      	ldrb	r2, [r7, #16]
 8002fa0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002fa4:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2b15      	cmp	r3, #21
 8002faa:	d867      	bhi.n	800307c <lps22hh_data_rate_get+0x13c>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <lps22hh_data_rate_get+0x74>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	0800301d 	.word	0x0800301d
 8002fbc:	08003025 	.word	0x08003025
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	08003035 	.word	0x08003035
 8002fc8:	0800303d 	.word	0x0800303d
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	08003075 	.word	0x08003075
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	0800307d 	.word	0x0800307d
 8002fdc:	0800307d 	.word	0x0800307d
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	0800307d 	.word	0x0800307d
 8002fe8:	0800307d 	.word	0x0800307d
 8002fec:	0800307d 	.word	0x0800307d
 8002ff0:	0800307d 	.word	0x0800307d
 8002ff4:	0800307d 	.word	0x0800307d
 8002ff8:	08003045 	.word	0x08003045
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	08003055 	.word	0x08003055
 8003004:	0800305d 	.word	0x0800305d
 8003008:	08003065 	.word	0x08003065
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
        break;
 8003012:	e037      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	701a      	strb	r2, [r3, #0]
        break;
 800301a:	e033      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
        break;
 8003022:	e02f      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]
        break;
 800302a:	e02b      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2203      	movs	r2, #3
 8003030:	701a      	strb	r2, [r3, #0]
        break;
 8003032:	e027      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2204      	movs	r2, #4
 8003038:	701a      	strb	r2, [r3, #0]
        break;
 800303a:	e023      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2205      	movs	r2, #5
 8003040:	701a      	strb	r2, [r3, #0]
        break;
 8003042:	e01f      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2211      	movs	r2, #17
 8003048:	701a      	strb	r2, [r3, #0]
        break;
 800304a:	e01b      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2212      	movs	r2, #18
 8003050:	701a      	strb	r2, [r3, #0]
        break;
 8003052:	e017      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2213      	movs	r2, #19
 8003058:	701a      	strb	r2, [r3, #0]
        break;
 800305a:	e013      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2214      	movs	r2, #20
 8003060:	701a      	strb	r2, [r3, #0]
        break;
 8003062:	e00f      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2215      	movs	r2, #21
 8003068:	701a      	strb	r2, [r3, #0]
        break;
 800306a:	e00b      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2206      	movs	r2, #6
 8003070:	701a      	strb	r2, [r3, #0]
        break;
 8003072:	e007      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
        break;
 800307a:	e003      	b.n	8003084 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
        break;
 8003082:	bf00      	nop
    }
  }

  return ret;
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop

08003090 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800309a:	f107 0208 	add.w	r2, r7, #8
 800309e:	2303      	movs	r3, #3
 80030a0:	2128      	movs	r1, #40	; 0x28
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fe75 	bl	8002d92 <lps22hh_read_reg>
 80030a8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80030aa:	7abb      	ldrb	r3, [r7, #10]
 80030ac:	461a      	mov	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	7a7a      	ldrb	r2, [r7, #9]
 80030ba:	441a      	add	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	7a3a      	ldrb	r2, [r7, #8]
 80030c8:	441a      	add	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	021a      	lsls	r2, r3, #8
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	601a      	str	r2, [r3, #0]

  return ret;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80030ec:	f107 0208 	add.w	r2, r7, #8
 80030f0:	2302      	movs	r3, #2
 80030f2:	212b      	movs	r1, #43	; 0x2b
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fe4c 	bl	8002d92 <lps22hh_read_reg>
 80030fa:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80030fc:	7a7b      	ldrb	r3, [r7, #9]
 80030fe:	b21a      	sxth	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310a:	b29b      	uxth	r3, r3
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	b29a      	uxth	r2, r3
 8003110:	7a3b      	ldrb	r3, [r7, #8]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21a      	sxth	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	801a      	strh	r2, [r3, #0]

  return ret;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003132:	2301      	movs	r3, #1
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	210f      	movs	r1, #15
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fe2a 	bl	8002d92 <lps22hh_read_reg>
 800313e:	60f8      	str	r0, [r7, #12]

  return ret;
 8003140:	68fb      	ldr	r3, [r7, #12]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003156:	f107 0208 	add.w	r2, r7, #8
 800315a:	2301      	movs	r3, #1
 800315c:	2111      	movs	r1, #17
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fe17 	bl	8002d92 <lps22hh_read_reg>
 8003164:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	7a3b      	ldrb	r3, [r7, #8]
 8003176:	f362 1304 	bfi	r3, r2, #4, #1
 800317a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800317c:	f107 0208 	add.w	r2, r7, #8
 8003180:	2301      	movs	r3, #1
 8003182:	2111      	movs	r1, #17
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fe1c 	bl	8002dc2 <lps22hh_write_reg>
 800318a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80031a2:	f107 0208 	add.w	r2, r7, #8
 80031a6:	2301      	movs	r3, #1
 80031a8:	2110      	movs	r1, #16
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fdf1 	bl	8002d92 <lps22hh_read_reg>
 80031b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	7a3b      	ldrb	r3, [r7, #8]
 80031c2:	f362 0383 	bfi	r3, r2, #2, #2
 80031c6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80031c8:	f107 0208 	add.w	r2, r7, #8
 80031cc:	2301      	movs	r3, #1
 80031ce:	2110      	movs	r1, #16
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fdf6 	bl	8002dc2 <lps22hh_write_reg>
 80031d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80031ee:	f107 0208 	add.w	r2, r7, #8
 80031f2:	2301      	movs	r3, #1
 80031f4:	210e      	movs	r1, #14
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fdcb 	bl	8002d92 <lps22hh_read_reg>
 80031fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d118      	bne.n	8003236 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	7a3b      	ldrb	r3, [r7, #8]
 800320e:	f362 0341 	bfi	r3, r2, #1, #1
 8003212:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	7a3b      	ldrb	r3, [r7, #8]
 8003220:	f362 13c7 	bfi	r3, r2, #7, #1
 8003224:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8003226:	f107 0208 	add.w	r2, r7, #8
 800322a:	2301      	movs	r3, #1
 800322c:	210e      	movs	r1, #14
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fdc7 	bl	8002dc2 <lps22hh_write_reg>
 8003234:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e034      	b.n	80032c2 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	7b1a      	ldrb	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <STTS751_RegisterBusIO+0x8c>)
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <STTS751_RegisterBusIO+0x90>)
 800329a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4798      	blx	r3
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	e002      	b.n	80032c2 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	08003765 	.word	0x08003765
 80032d0:	080037d3 	.word	0x080037d3

080032d4 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d127      	bne.n	8003336 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fc54 	bl	8003b9a <stts751_pin_event_route_set>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	e020      	b.n	8003340 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3320      	adds	r3, #32
 800330a:	2103      	movs	r1, #3
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fbb7 	bl	8003a80 <stts751_resolution_set>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
 800331c:	e010      	b.n	8003340 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3320      	adds	r3, #32
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fad5 	bl	80038d4 <stts751_temp_data_rate_set>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e004      	b.n	8003340 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f877 	bl	800344e <STTS751_TEMP_Disable>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e004      	b.n	8003376 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3320      	adds	r3, #32
 800338c:	f107 020c 	add.w	r2, r7, #12
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc27 	bl	8003be6 <stts751_device_id_get>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	e003      	b.n	80033ac <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80033a4:	7b7a      	ldrb	r2, [r7, #13]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80033ea:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e012      	b.n	8003446 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003426:	eeb0 0a67 	vmov.f32	s0, s15
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8b6 	bl	800359c <STTS751_TEMP_SetOutputDataRate>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e004      	b.n	8003446 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e01c      	b.n	800349e <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3334      	adds	r3, #52	; 0x34
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f81c 	bl	80034a8 <STTS751_TEMP_GetOutputDataRate>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	e010      	b.n	800349e <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3320      	adds	r3, #32
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fa26 	bl	80038d4 <stts751_temp_data_rate_set>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	e004      	b.n	800349e <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3320      	adds	r3, #32
 80034ba:	f107 020b 	add.w	r2, r7, #11
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa5d 	bl	8003980 <stts751_temp_data_rate_get>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e060      	b.n	8003594 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	2b90      	cmp	r3, #144	; 0x90
 80034d6:	d021      	beq.n	800351c <STTS751_TEMP_GetOutputDataRate+0x74>
 80034d8:	2b90      	cmp	r3, #144	; 0x90
 80034da:	dc56      	bgt.n	800358a <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034dc:	2b09      	cmp	r3, #9
 80034de:	dc1b      	bgt.n	8003518 <STTS751_TEMP_GetOutputDataRate+0x70>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db52      	blt.n	800358a <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d850      	bhi.n	800358a <STTS751_TEMP_GetOutputDataRate+0xe2>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <STTS751_TEMP_GetOutputDataRate+0x48>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003531 	.word	0x08003531
 80034f8:	0800353b 	.word	0x0800353b
 80034fc:	08003545 	.word	0x08003545
 8003500:	0800354f 	.word	0x0800354f
 8003504:	08003559 	.word	0x08003559
 8003508:	08003563 	.word	0x08003563
 800350c:	0800356d 	.word	0x0800356d
 8003510:	08003577 	.word	0x08003577
 8003514:	08003581 	.word	0x08003581
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d136      	bne.n	800358a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
      break;
 8003524:	e035      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800352c:	601a      	str	r2, [r3, #0]
      break;
 800352e:	e030      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8003536:	601a      	str	r2, [r3, #0]
      break;
 8003538:	e02b      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003540:	601a      	str	r2, [r3, #0]
      break;
 8003542:	e026      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800354a:	601a      	str	r2, [r3, #0]
      break;
 800354c:	e021      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003554:	601a      	str	r2, [r3, #0]
      break;
 8003556:	e01c      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800355e:	601a      	str	r2, [r3, #0]
      break;
 8003560:	e017      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003568:	601a      	str	r2, [r3, #0]
      break;
 800356a:	e012      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8003572:	601a      	str	r2, [r3, #0]
      break;
 8003574:	e00d      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800357c:	601a      	str	r2, [r3, #0]
      break;
 800357e:	e008      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8003586:	601a      	str	r2, [r3, #0]
      break;
 8003588:	e003      	b.n	8003592 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	60fb      	str	r3, [r7, #12]
      break;
 8003590:	bf00      	nop
  }

  return ret;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3320      	adds	r3, #32
 80035ac:	f107 020e 	add.w	r2, r7, #14
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa8a 	bl	8003acc <stts751_resolution_get>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e0a5      	b.n	8003710 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80035c4:	edd7 7a00 	vldr	s15, [r7]
 80035c8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80035cc:	eef4 7a47 	vcmp.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	d10e      	bne.n	80035f4 <STTS751_TEMP_SetOutputDataRate+0x58>
 80035d6:	7bbb      	ldrb	r3, [r7, #14]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d10b      	bne.n	80035f4 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3320      	adds	r3, #32
 80035e0:	2101      	movs	r1, #1
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa4c 	bl	8003a80 <stts751_resolution_set>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	e08d      	b.n	8003710 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80035f4:	edd7 7a00 	vldr	s15, [r7]
 80035f8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003718 <STTS751_TEMP_SetOutputDataRate+0x17c>
 80035fc:	eef4 7a47 	vcmp.f32	s15, s14
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	d111      	bne.n	800362a <STTS751_TEMP_SetOutputDataRate+0x8e>
 8003606:	7bbb      	ldrb	r3, [r7, #14]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d002      	beq.n	8003612 <STTS751_TEMP_SetOutputDataRate+0x76>
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3320      	adds	r3, #32
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa31 	bl	8003a80 <stts751_resolution_set>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e072      	b.n	8003710 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800362a:	edd7 7a00 	vldr	s15, [r7]
 800362e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800371c <STTS751_TEMP_SetOutputDataRate+0x180>
 8003632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	d801      	bhi.n	8003640 <STTS751_TEMP_SetOutputDataRate+0xa4>
 800363c:	2300      	movs	r3, #0
 800363e:	e058      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003640:	edd7 7a00 	vldr	s15, [r7]
 8003644:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	d801      	bhi.n	8003656 <STTS751_TEMP_SetOutputDataRate+0xba>
 8003652:	2301      	movs	r3, #1
 8003654:	e04d      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003656:	edd7 7a00 	vldr	s15, [r7]
 800365a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	d801      	bhi.n	800366c <STTS751_TEMP_SetOutputDataRate+0xd0>
 8003668:	2302      	movs	r3, #2
 800366a:	e042      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 800366c:	edd7 7a00 	vldr	s15, [r7]
 8003670:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d801      	bhi.n	8003682 <STTS751_TEMP_SetOutputDataRate+0xe6>
 800367e:	2303      	movs	r3, #3
 8003680:	e037      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003682:	edd7 7a00 	vldr	s15, [r7]
 8003686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	d801      	bhi.n	8003698 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8003694:	2304      	movs	r3, #4
 8003696:	e02c      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003698:	edd7 7a00 	vldr	s15, [r7]
 800369c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80036a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d801      	bhi.n	80036ae <STTS751_TEMP_SetOutputDataRate+0x112>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e021      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80036ae:	edd7 7a00 	vldr	s15, [r7]
 80036b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80036b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	d801      	bhi.n	80036c4 <STTS751_TEMP_SetOutputDataRate+0x128>
 80036c0:	2306      	movs	r3, #6
 80036c2:	e016      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80036c4:	edd7 7a00 	vldr	s15, [r7]
 80036c8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80036cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	d801      	bhi.n	80036da <STTS751_TEMP_SetOutputDataRate+0x13e>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e00b      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80036da:	edd7 7a00 	vldr	s15, [r7]
 80036de:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80036e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d801      	bhi.n	80036f0 <STTS751_TEMP_SetOutputDataRate+0x154>
 80036ec:	2308      	movs	r3, #8
 80036ee:	e000      	b.n	80036f2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80036f0:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80036f2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3320      	adds	r3, #32
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f8e9 	bl	80038d4 <stts751_temp_data_rate_set>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	e000      	b.n	8003710 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	42000000 	.word	0x42000000
 800371c:	3d800000 	.word	0x3d800000

08003720 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3320      	adds	r3, #32
 800372e:	f107 020e 	add.w	r2, r7, #14
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa01 	bl	8003b3c <stts751_temperature_raw_get>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e00a      	b.n	800375c <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8003746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f8a8 	bl	80038a0 <stts751_from_lsb_to_celsius>
 8003750:	eef0 7a40 	vmov.f32	s15, s0
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	72fb      	strb	r3, [r7, #11]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11f      	bne.n	80037c8 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003788:	2300      	movs	r3, #0
 800378a:	83fb      	strh	r3, [r7, #30]
 800378c:	e018      	b.n	80037c0 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	695c      	ldr	r4, [r3, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	7b1b      	ldrb	r3, [r3, #12]
 8003796:	b298      	uxth	r0, r3
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	b29a      	uxth	r2, r3
 800379c:	8bfb      	ldrh	r3, [r7, #30]
 800379e:	4413      	add	r3, r2
 80037a0:	b299      	uxth	r1, r3
 80037a2:	8bfb      	ldrh	r3, [r7, #30]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	441a      	add	r2, r3
 80037a8:	2301      	movs	r3, #1
 80037aa:	47a0      	blx	r4
 80037ac:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	e007      	b.n	80037ca <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80037ba:	8bfb      	ldrh	r3, [r7, #30]
 80037bc:	3301      	adds	r3, #1
 80037be:	83fb      	strh	r3, [r7, #30]
 80037c0:	8bfa      	ldrh	r2, [r7, #30]
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3e2      	bcc.n	800378e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80037c8:	69bb      	ldr	r3, [r7, #24]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	; 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}

080037d2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b089      	sub	sp, #36	; 0x24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	461a      	mov	r2, r3
 80037de:	460b      	mov	r3, r1
 80037e0:	72fb      	strb	r3, [r7, #11]
 80037e2:	4613      	mov	r3, r2
 80037e4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d11f      	bne.n	8003836 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	83fb      	strh	r3, [r7, #30]
 80037fa:	e018      	b.n	800382e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	691c      	ldr	r4, [r3, #16]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	7b1b      	ldrb	r3, [r3, #12]
 8003804:	b298      	uxth	r0, r3
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	b29a      	uxth	r2, r3
 800380a:	8bfb      	ldrh	r3, [r7, #30]
 800380c:	4413      	add	r3, r2
 800380e:	b299      	uxth	r1, r3
 8003810:	8bfb      	ldrh	r3, [r7, #30]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	441a      	add	r2, r3
 8003816:	2301      	movs	r3, #1
 8003818:	47a0      	blx	r4
 800381a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e007      	b.n	8003838 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8003828:	8bfb      	ldrh	r3, [r7, #30]
 800382a:	3301      	adds	r3, #1
 800382c:	83fb      	strh	r3, [r7, #30]
 800382e:	8bfa      	ldrh	r2, [r7, #30]
 8003830:	893b      	ldrh	r3, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d3e2      	bcc.n	80037fc <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003836:	69bb      	ldr	r3, [r7, #24]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3724      	adds	r7, #36	; 0x24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}

08003840 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	460b      	mov	r3, r1
 800384e:	72fb      	strb	r3, [r7, #11]
 8003850:	4613      	mov	r3, r2
 8003852:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685c      	ldr	r4, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68d8      	ldr	r0, [r3, #12]
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	7af9      	ldrb	r1, [r7, #11]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	47a0      	blx	r4
 8003864:	6178      	str	r0, [r7, #20]

  return ret;
 8003866:	697b      	ldr	r3, [r7, #20]
}
 8003868:	4618      	mov	r0, r3
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}

08003870 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	460b      	mov	r3, r1
 800387e:	72fb      	strb	r3, [r7, #11]
 8003880:	4613      	mov	r3, r2
 8003882:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681c      	ldr	r4, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68d8      	ldr	r0, [r3, #12]
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	7af9      	ldrb	r1, [r7, #11]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	47a0      	blx	r4
 8003894:	6178      	str	r0, [r7, #20]

  return ret;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 80038aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80038d0 <stts751_from_lsb_to_celsius+0x30>
 80038ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038be:	eef0 7a66 	vmov.f32	s15, s13
}
 80038c2:	eeb0 0a67 	vmov.f32	s0, s15
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	43800000 	.word	0x43800000

080038d4 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80038e0:	23aa      	movs	r3, #170	; 0xaa
 80038e2:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80038e4:	f107 020c 	add.w	r2, r7, #12
 80038e8:	2301      	movs	r3, #1
 80038ea:	2104      	movs	r1, #4
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ffa7 	bl	8003840 <stts751_read_reg>
 80038f2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	b2da      	uxtb	r2, r3
 8003902:	7b3b      	ldrb	r3, [r7, #12]
 8003904:	f362 0303 	bfi	r3, r2, #0, #4
 8003908:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800390a:	f107 020c 	add.w	r2, r7, #12
 800390e:	2301      	movs	r3, #1
 8003910:	2104      	movs	r1, #4
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffac 	bl	8003870 <stts751_write_reg>
 8003918:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	2301      	movs	r3, #1
 8003926:	2103      	movs	r1, #3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff89 	bl	8003840 <stts751_read_reg>
 800392e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d111      	bne.n	800395a <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	09db      	lsrs	r3, r3, #7
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	7c3b      	ldrb	r3, [r7, #16]
 8003944:	f362 1386 	bfi	r3, r2, #6, #1
 8003948:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800394a:	f107 0210 	add.w	r2, r7, #16
 800394e:	2301      	movs	r3, #1
 8003950:	2103      	movs	r1, #3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff8c 	bl	8003870 <stts751_write_reg>
 8003958:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <stts751_temp_data_rate_set+0xa2>
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	2b90      	cmp	r3, #144	; 0x90
 8003964:	d107      	bne.n	8003976 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8003966:	f107 020b 	add.w	r2, r7, #11
 800396a:	2301      	movs	r3, #1
 800396c:	210f      	movs	r1, #15
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff7e 	bl	8003870 <stts751_write_reg>
 8003974:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003976:	697b      	ldr	r3, [r7, #20]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800398a:	f107 0210 	add.w	r2, r7, #16
 800398e:	2301      	movs	r3, #1
 8003990:	2104      	movs	r1, #4
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff54 	bl	8003840 <stts751_read_reg>
 8003998:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80039a0:	f107 020c 	add.w	r2, r7, #12
 80039a4:	2301      	movs	r3, #1
 80039a6:	2103      	movs	r1, #3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff49 	bl	8003840 <stts751_read_reg>
 80039ae:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 80039b0:	7b3b      	ldrb	r3, [r7, #12]
 80039b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	7c3a      	ldrb	r2, [r7, #16]
 80039bc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	4413      	add	r3, r2
 80039c4:	2b90      	cmp	r3, #144	; 0x90
 80039c6:	d025      	beq.n	8003a14 <stts751_temp_data_rate_get+0x94>
 80039c8:	2b90      	cmp	r3, #144	; 0x90
 80039ca:	dc4f      	bgt.n	8003a6c <stts751_temp_data_rate_get+0xec>
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	dc1b      	bgt.n	8003a08 <stts751_temp_data_rate_get+0x88>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db4b      	blt.n	8003a6c <stts751_temp_data_rate_get+0xec>
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d849      	bhi.n	8003a6c <stts751_temp_data_rate_get+0xec>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <stts751_temp_data_rate_get+0x60>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a2d 	.word	0x08003a2d
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a45 	.word	0x08003a45
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a5d 	.word	0x08003a5d
 8003a04:	08003a65 	.word	0x08003a65
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d12f      	bne.n	8003a6c <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	701a      	strb	r2, [r3, #0]
      break;
 8003a12:	e02f      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2290      	movs	r2, #144	; 0x90
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e02b      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
      break;
 8003a22:	e027      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
      break;
 8003a2a:	e023      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	701a      	strb	r2, [r3, #0]
      break;
 8003a32:	e01f      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2203      	movs	r2, #3
 8003a38:	701a      	strb	r2, [r3, #0]
      break;
 8003a3a:	e01b      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	701a      	strb	r2, [r3, #0]
      break;
 8003a42:	e017      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2205      	movs	r2, #5
 8003a48:	701a      	strb	r2, [r3, #0]
      break;
 8003a4a:	e013      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2206      	movs	r2, #6
 8003a50:	701a      	strb	r2, [r3, #0]
      break;
 8003a52:	e00f      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2207      	movs	r2, #7
 8003a58:	701a      	strb	r2, [r3, #0]
      break;
 8003a5a:	e00b      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
      break;
 8003a62:	e007      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2209      	movs	r2, #9
 8003a68:	701a      	strb	r2, [r3, #0]
      break;
 8003a6a:	e003      	b.n	8003a74 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	701a      	strb	r2, [r3, #0]
      break;
 8003a72:	bf00      	nop
  }

  return ret;
 8003a74:	697b      	ldr	r3, [r7, #20]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop

08003a80 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003a8c:	f107 0208 	add.w	r2, r7, #8
 8003a90:	2301      	movs	r3, #1
 8003a92:	2103      	movs	r1, #3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fed3 	bl	8003840 <stts751_read_reg>
 8003a9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	7a3b      	ldrb	r3, [r7, #8]
 8003aac:	f362 0383 	bfi	r3, r2, #2, #2
 8003ab0:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003ab2:	f107 0208 	add.w	r2, r7, #8
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	2103      	movs	r1, #3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fed8 	bl	8003870 <stts751_write_reg>
 8003ac0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003ad6:	f107 0208 	add.w	r2, r7, #8
 8003ada:	2301      	movs	r3, #1
 8003adc:	2103      	movs	r1, #3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff feae 	bl	8003840 <stts751_read_reg>
 8003ae4:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8003ae6:	7a3b      	ldrb	r3, [r7, #8]
 8003ae8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d81a      	bhi.n	8003b28 <stts751_resolution_get+0x5c>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <stts751_resolution_get+0x2c>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b11 	.word	0x08003b11
 8003afc:	08003b19 	.word	0x08003b19
 8003b00:	08003b09 	.word	0x08003b09
 8003b04:	08003b21 	.word	0x08003b21
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e00f      	b.n	8003b30 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	e00b      	b.n	8003b30 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e007      	b.n	8003b30 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e003      	b.n	8003b30 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	bf00      	nop
  }

  return ret;
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop

08003b3c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe75 	bl	8003840 <stts751_read_reg>
 8003b56:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8003b5e:	f107 0208 	add.w	r2, r7, #8
 8003b62:	2301      	movs	r3, #1
 8003b64:	2102      	movs	r1, #2
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fe6a 	bl	8003840 <stts751_read_reg>
 8003b6c:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8003b6e:	7a7b      	ldrb	r3, [r7, #9]
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	7a3b      	ldrb	r3, [r7, #8]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8003b90:	68fb      	ldr	r3, [r7, #12]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003ba6:	f107 0208 	add.w	r2, r7, #8
 8003baa:	2301      	movs	r3, #1
 8003bac:	2103      	movs	r1, #3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fe46 	bl	8003840 <stts751_read_reg>
 8003bb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	7a3b      	ldrb	r3, [r7, #8]
 8003bc6:	f362 13c7 	bfi	r3, r2, #7, #1
 8003bca:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2103      	movs	r1, #3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fe4b 	bl	8003870 <stts751_write_reg>
 8003bda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	21fd      	movs	r1, #253	; 0xfd
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff fe22 	bl	8003840 <stts751_read_reg>
 8003bfc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	2301      	movs	r3, #1
 8003c0a:	21fe      	movs	r1, #254	; 0xfe
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fe17 	bl	8003840 <stts751_read_reg>
 8003c12:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	2301      	movs	r3, #1
 8003c20:	21ff      	movs	r1, #255	; 0xff
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fe0c 	bl	8003840 <stts751_read_reg>
 8003c28:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	; 0x30
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d07c      	beq.n	8003d4a <IKS01A3_ENV_SENSOR_Init+0x116>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	f200 80b2 	bhi.w	8003dbc <IKS01A3_ENV_SENSOR_Init+0x188>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <IKS01A3_ENV_SENSOR_Init+0x32>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d039      	beq.n	8003cd8 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8003c64:	e0aa      	b.n	8003dbc <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f000 f974 	bl	8003f54 <HTS221_0_Probe>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e0df      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003c78:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4970      	ldr	r1, [pc, #448]	; (8003e44 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c8a:	f107 0108 	add.w	r1, r7, #8
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4798      	blx	r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003c98:	f06f 0306 	mvn.w	r3, #6
 8003c9c:	e0cc      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003c9e:	7a3b      	ldrb	r3, [r7, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d103      	bne.n	8003cac <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003cac:	7abb      	ldrb	r3, [r7, #10]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d103      	bne.n	8003cba <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003cba:	7a7b      	ldrb	r3, [r7, #9]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d103      	bne.n	8003cc8 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d17a      	bne.n	8003dc4 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	623b      	str	r3, [r7, #32]
      }
      break;
 8003cd6:	e075      	b.n	8003dc4 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f000 fa05 	bl	80040e8 <LPS22HH_0_Probe>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e0a6      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003cea:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4953      	ldr	r1, [pc, #332]	; (8003e44 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003cfc:	f107 0108 	add.w	r1, r7, #8
 8003d00:	4610      	mov	r0, r2
 8003d02:	4798      	blx	r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003d0a:	f06f 0306 	mvn.w	r3, #6
 8003d0e:	e093      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003d10:	7a3b      	ldrb	r3, [r7, #8]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d103      	bne.n	8003d1e <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003d1e:	7abb      	ldrb	r3, [r7, #10]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d103      	bne.n	8003d2c <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f043 0304 	orr.w	r3, r3, #4
 8003d2a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003d2c:	7a7b      	ldrb	r3, [r7, #9]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d103      	bne.n	8003d3a <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d143      	bne.n	8003dc8 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f043 0308 	orr.w	r3, r3, #8
 8003d46:	623b      	str	r3, [r7, #32]
      }
      break;
 8003d48:	e03e      	b.n	8003dc8 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f000 fa98 	bl	8004280 <STTS751_0_Probe>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	e06d      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003d5c:	4a38      	ldr	r2, [pc, #224]	; (8003e40 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4937      	ldr	r1, [pc, #220]	; (8003e44 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d6e:	f107 0108 	add.w	r1, r7, #8
 8003d72:	4610      	mov	r0, r2
 8003d74:	4798      	blx	r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003d7c:	f06f 0306 	mvn.w	r3, #6
 8003d80:	e05a      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003d82:	7a3b      	ldrb	r3, [r7, #8]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d103      	bne.n	8003d90 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003d90:	7abb      	ldrb	r3, [r7, #10]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d103      	bne.n	8003d9e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8003d9e:	7a7b      	ldrb	r3, [r7, #9]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d103      	bne.n	8003dac <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10c      	bne.n	8003dcc <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	623b      	str	r3, [r7, #32]
      }
      break;
 8003dba:	e007      	b.n	8003dcc <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8003dbc:	f06f 0301 	mvn.w	r3, #1
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003dc2:	e004      	b.n	8003dce <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e002      	b.n	8003dce <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003dcc:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	e02f      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	e028      	b.n	8003e30 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	4013      	ands	r3, r2
 8003de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d11c      	bne.n	8003e24 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	4013      	ands	r3, r2
 8003df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d116      	bne.n	8003e24 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfe:	4913      	ldr	r1, [pc, #76]	; (8003e4c <IKS01A3_ENV_SENSOR_Init+0x218>)
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	490d      	ldr	r1, [pc, #52]	; (8003e44 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8003e1e:	f06f 0304 	mvn.w	r3, #4
 8003e22:	e009      	b.n	8003e38 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d9d3      	bls.n	8003dde <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200003d4 	.word	0x200003d4
 8003e44:	20000398 	.word	0x20000398
 8003e48:	20000098 	.word	0x20000098
 8003e4c:	200003a4 	.word	0x200003a4

08003e50 <IKS01A3_ENV_SENSOR_Enable>:
  * @param  Instance environmental sensor instance to be used
  * @param  Function Environmental sensor function
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d903      	bls.n	8003e68 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e60:	f06f 0301 	mvn.w	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e026      	b.n	8003eb6 <IKS01A3_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <IKS01A3_ENV_SENSOR_Enable+0x70>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4013      	ands	r3, r2
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <IKS01A3_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	4911      	ldr	r1, [pc, #68]	; (8003ec8 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	490e      	ldr	r1, [pc, #56]	; (8003ecc <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <IKS01A3_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ea2:	f06f 0304 	mvn.w	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e005      	b.n	8003eb6 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	e002      	b.n	8003eb6 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003eb0:	f06f 0301 	mvn.w	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200003e0 	.word	0x200003e0
 8003ec4:	20000098 	.word	0x20000098
 8003ec8:	200003a4 	.word	0x200003a4
 8003ecc:	20000398 	.word	0x20000398

08003ed0 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d903      	bls.n	8003eea <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ee2:	f06f 0301 	mvn.w	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e027      	b.n	8003f3a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d11b      	bne.n	8003f34 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	4911      	ldr	r1, [pc, #68]	; (8003f4c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	490f      	ldr	r1, [pc, #60]	; (8003f50 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f26:	f06f 0304 	mvn.w	r3, #4
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e005      	b.n	8003f3a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e002      	b.n	8003f3a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003f34:	f06f 0301 	mvn.w	r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003f3a:	697b      	ldr	r3, [r7, #20]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200003e0 	.word	0x200003e0
 8003f48:	20000098 	.word	0x20000098
 8003f4c:	200003a4 	.word	0x200003a4
 8003f50:	20000398 	.word	0x20000398

08003f54 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b092      	sub	sp, #72	; 0x48
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003f64:	23bf      	movs	r3, #191	; 0xbf
 8003f66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HTS221_0_Probe+0x15c>)
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003f6e:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <HTS221_0_Probe+0x160>)
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <HTS221_0_Probe+0x164>)
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003f76:	4b51      	ldr	r3, [pc, #324]	; (80040bc <HTS221_0_Probe+0x168>)
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HTS221_0_Probe+0x16c>)
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	4619      	mov	r1, r3
 8003f84:	484f      	ldr	r0, [pc, #316]	; (80040c4 <HTS221_0_Probe+0x170>)
 8003f86:	f7fd fccb 	bl	8001920 <HTS221_RegisterBusIO>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f90:	f06f 0306 	mvn.w	r3, #6
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
 8003f96:	e085      	b.n	80040a4 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003f98:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4849      	ldr	r0, [pc, #292]	; (80040c4 <HTS221_0_Probe+0x170>)
 8003fa0:	f7fd fd47 	bl	8001a32 <HTS221_ReadID>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003faa:	f06f 0306 	mvn.w	r3, #6
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	e078      	b.n	80040a4 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8003fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb6:	2bbc      	cmp	r3, #188	; 0xbc
 8003fb8:	d003      	beq.n	8003fc2 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003fba:	f06f 0306 	mvn.w	r3, #6
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	e070      	b.n	80040a4 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	483e      	ldr	r0, [pc, #248]	; (80040c4 <HTS221_0_Probe+0x170>)
 8003fca:	f7fd fd49 	bl	8001a60 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8003fce:	7a3b      	ldrb	r3, [r7, #8]
 8003fd0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8003fd2:	7a7b      	ldrb	r3, [r7, #9]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8003fd8:	7abb      	ldrb	r3, [r7, #10]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8003fe4:	4a38      	ldr	r2, [pc, #224]	; (80040c8 <HTS221_0_Probe+0x174>)
 8003fe6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HTS221_0_Probe+0x178>)
 8003fea:	4a36      	ldr	r2, [pc, #216]	; (80040c4 <HTS221_0_Probe+0x170>)
 8003fec:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <HTS221_0_Probe+0x17c>)
 8003ff0:	4a38      	ldr	r2, [pc, #224]	; (80040d4 <HTS221_0_Probe+0x180>)
 8003ff2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11d      	bne.n	8004036 <HTS221_0_Probe+0xe2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <HTS221_0_Probe+0xe2>
 8004004:	7a3b      	ldrb	r3, [r7, #8]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d115      	bne.n	8004036 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HTS221_0_Probe+0x184>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a33      	ldr	r2, [pc, #204]	; (80040dc <HTS221_0_Probe+0x188>)
 8004010:	4933      	ldr	r1, [pc, #204]	; (80040e0 <HTS221_0_Probe+0x18c>)
 8004012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HTS221_0_Probe+0x17c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HTS221_0_Probe+0x178>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800402a:	f06f 0304 	mvn.w	r3, #4
 800402e:	647b      	str	r3, [r7, #68]	; 0x44
 8004030:	e001      	b.n	8004036 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004032:	2300      	movs	r3, #0
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8004036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11d      	bne.n	8004078 <HTS221_0_Probe+0x124>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <HTS221_0_Probe+0x124>
 8004046:	7abb      	ldrb	r3, [r7, #10]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d115      	bne.n	8004078 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800404c:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HTS221_0_Probe+0x184>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <HTS221_0_Probe+0x188>)
 8004052:	4924      	ldr	r1, [pc, #144]	; (80040e4 <HTS221_0_Probe+0x190>)
 8004054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HTS221_0_Probe+0x17c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HTS221_0_Probe+0x178>)
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4610      	mov	r0, r2
 8004064:	4798      	blx	r3
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800406c:	f06f 0304 	mvn.w	r3, #4
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
 8004072:	e001      	b.n	8004078 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004074:	2300      	movs	r3, #0
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8004078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407a:	2b00      	cmp	r3, #0
 800407c:	d107      	bne.n	800408e <HTS221_0_Probe+0x13a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004088:	f06f 0304 	mvn.w	r3, #4
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800408e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HTS221_0_Probe+0x150>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800409e:	f06f 0304 	mvn.w	r3, #4
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80040a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3748      	adds	r7, #72	; 0x48
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	0800145d 	.word	0x0800145d
 80040b4:	080014c1 	.word	0x080014c1
 80040b8:	08001575 	.word	0x08001575
 80040bc:	08001511 	.word	0x08001511
 80040c0:	080015d9 	.word	0x080015d9
 80040c4:	200003ec 	.word	0x200003ec
 80040c8:	200003e0 	.word	0x200003e0
 80040cc:	20000398 	.word	0x20000398
 80040d0:	200003d4 	.word	0x200003d4
 80040d4:	20000004 	.word	0x20000004
 80040d8:	20000098 	.word	0x20000098
 80040dc:	200003a4 	.word	0x200003a4
 80040e0:	20000028 	.word	0x20000028
 80040e4:	20000014 	.word	0x20000014

080040e8 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b092      	sub	sp, #72	; 0x48
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80040f8:	23bb      	movs	r3, #187	; 0xbb
 80040fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80040fe:	4b52      	ldr	r3, [pc, #328]	; (8004248 <LPS22HH_0_Probe+0x160>)
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004102:	4b52      	ldr	r3, [pc, #328]	; (800424c <LPS22HH_0_Probe+0x164>)
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004106:	4b52      	ldr	r3, [pc, #328]	; (8004250 <LPS22HH_0_Probe+0x168>)
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800410a:	4b52      	ldr	r3, [pc, #328]	; (8004254 <LPS22HH_0_Probe+0x16c>)
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800410e:	4b52      	ldr	r3, [pc, #328]	; (8004258 <LPS22HH_0_Probe+0x170>)
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	4619      	mov	r1, r3
 8004118:	4850      	ldr	r0, [pc, #320]	; (800425c <LPS22HH_0_Probe+0x174>)
 800411a:	f7fe fa2b 	bl	8002574 <LPS22HH_RegisterBusIO>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004124:	f06f 0306 	mvn.w	r3, #6
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
 800412a:	e087      	b.n	800423c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800412c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004130:	4619      	mov	r1, r3
 8004132:	484a      	ldr	r0, [pc, #296]	; (800425c <LPS22HH_0_Probe+0x174>)
 8004134:	f7fe fac7 	bl	80026c6 <LPS22HH_ReadID>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800413e:	f06f 0306 	mvn.w	r3, #6
 8004142:	647b      	str	r3, [r7, #68]	; 0x44
 8004144:	e07a      	b.n	800423c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8004146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414a:	2bb3      	cmp	r3, #179	; 0xb3
 800414c:	d003      	beq.n	8004156 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800414e:	f06f 0306 	mvn.w	r3, #6
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
 8004154:	e072      	b.n	800423c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	4619      	mov	r1, r3
 800415c:	483f      	ldr	r0, [pc, #252]	; (800425c <LPS22HH_0_Probe+0x174>)
 800415e:	f7fe fac9 	bl	80026f4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8004162:	7a3b      	ldrb	r3, [r7, #8]
 8004164:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8004166:	7a7b      	ldrb	r3, [r7, #9]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800416c:	7abb      	ldrb	r3, [r7, #10]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8004178:	4a39      	ldr	r2, [pc, #228]	; (8004260 <LPS22HH_0_Probe+0x178>)
 800417a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800417c:	4b39      	ldr	r3, [pc, #228]	; (8004264 <LPS22HH_0_Probe+0x17c>)
 800417e:	4a37      	ldr	r2, [pc, #220]	; (800425c <LPS22HH_0_Probe+0x174>)
 8004180:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <LPS22HH_0_Probe+0x180>)
 8004184:	4a39      	ldr	r2, [pc, #228]	; (800426c <LPS22HH_0_Probe+0x184>)
 8004186:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11e      	bne.n	80041cc <LPS22HH_0_Probe+0xe4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <LPS22HH_0_Probe+0xe4>
 8004198:	7a3b      	ldrb	r3, [r7, #8]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d116      	bne.n	80041cc <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800419e:	4b34      	ldr	r3, [pc, #208]	; (8004270 <LPS22HH_0_Probe+0x188>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a34      	ldr	r2, [pc, #208]	; (8004274 <LPS22HH_0_Probe+0x18c>)
 80041a4:	3304      	adds	r3, #4
 80041a6:	4934      	ldr	r1, [pc, #208]	; (8004278 <LPS22HH_0_Probe+0x190>)
 80041a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <LPS22HH_0_Probe+0x180>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <LPS22HH_0_Probe+0x17c>)
 80041b4:	6852      	ldr	r2, [r2, #4]
 80041b6:	4610      	mov	r0, r2
 80041b8:	4798      	blx	r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041c0:	f06f 0304 	mvn.w	r3, #4
 80041c4:	647b      	str	r3, [r7, #68]	; 0x44
 80041c6:	e001      	b.n	80041cc <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80041cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11e      	bne.n	8004210 <LPS22HH_0_Probe+0x128>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d019      	beq.n	8004210 <LPS22HH_0_Probe+0x128>
 80041dc:	7a7b      	ldrb	r3, [r7, #9]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d116      	bne.n	8004210 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80041e2:	4b23      	ldr	r3, [pc, #140]	; (8004270 <LPS22HH_0_Probe+0x188>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	4a23      	ldr	r2, [pc, #140]	; (8004274 <LPS22HH_0_Probe+0x18c>)
 80041e8:	3304      	adds	r3, #4
 80041ea:	4924      	ldr	r1, [pc, #144]	; (800427c <LPS22HH_0_Probe+0x194>)
 80041ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <LPS22HH_0_Probe+0x180>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <LPS22HH_0_Probe+0x17c>)
 80041f8:	6852      	ldr	r2, [r2, #4]
 80041fa:	4610      	mov	r0, r2
 80041fc:	4798      	blx	r3
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004204:	f06f 0304 	mvn.w	r3, #4
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
 800420a:	e001      	b.n	8004210 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800420c:	2300      	movs	r3, #0
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8004210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <LPS22HH_0_Probe+0x13e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004220:	f06f 0304 	mvn.w	r3, #4
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <LPS22HH_0_Probe+0x154>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004236:	f06f 0304 	mvn.w	r3, #4
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800423c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800423e:	4618      	mov	r0, r3
 8004240:	3748      	adds	r7, #72	; 0x48
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	0800145d 	.word	0x0800145d
 800424c:	080014c1 	.word	0x080014c1
 8004250:	08001575 	.word	0x08001575
 8004254:	08001511 	.word	0x08001511
 8004258:	080015d9 	.word	0x080015d9
 800425c:	20000420 	.word	0x20000420
 8004260:	200003e0 	.word	0x200003e0
 8004264:	20000398 	.word	0x20000398
 8004268:	200003d4 	.word	0x200003d4
 800426c:	2000003c 	.word	0x2000003c
 8004270:	20000098 	.word	0x20000098
 8004274:	200003a4 	.word	0x200003a4
 8004278:	20000060 	.word	0x20000060
 800427c:	2000004c 	.word	0x2000004c

08004280 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b092      	sub	sp, #72	; 0x48
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8004288:	2300      	movs	r3, #0
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8004290:	2395      	movs	r3, #149	; 0x95
 8004292:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004296:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <STTS751_0_Probe+0x130>)
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <STTS751_0_Probe+0x134>)
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800429e:	4b46      	ldr	r3, [pc, #280]	; (80043b8 <STTS751_0_Probe+0x138>)
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80042a2:	4b46      	ldr	r3, [pc, #280]	; (80043bc <STTS751_0_Probe+0x13c>)
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80042a6:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <STTS751_0_Probe+0x140>)
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80042aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ae:	4619      	mov	r1, r3
 80042b0:	4844      	ldr	r0, [pc, #272]	; (80043c4 <STTS751_0_Probe+0x144>)
 80042b2:	f7fe ffc5 	bl	8003240 <STTS751_RegisterBusIO>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042bc:	f06f 0306 	mvn.w	r3, #6
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
 80042c2:	e070      	b.n	80043a6 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 80042c4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80042c8:	4619      	mov	r1, r3
 80042ca:	483e      	ldr	r0, [pc, #248]	; (80043c4 <STTS751_0_Probe+0x144>)
 80042cc:	f7ff f857 	bl	800337e <STTS751_ReadID>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042d6:	f06f 0306 	mvn.w	r3, #6
 80042da:	647b      	str	r3, [r7, #68]	; 0x44
 80042dc:	e063      	b.n	80043a6 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 80042de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e2:	2b53      	cmp	r3, #83	; 0x53
 80042e4:	d003      	beq.n	80042ee <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042e6:	f06f 0306 	mvn.w	r3, #6
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	e05b      	b.n	80043a6 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	4619      	mov	r1, r3
 80042f4:	4833      	ldr	r0, [pc, #204]	; (80043c4 <STTS751_0_Probe+0x144>)
 80042f6:	f7ff f85d 	bl	80033b4 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80042fa:	7a3b      	ldrb	r3, [r7, #8]
 80042fc:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80042fe:	7a7b      	ldrb	r3, [r7, #9]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8004304:	7abb      	ldrb	r3, [r7, #10]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8004310:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <STTS751_0_Probe+0x148>)
 8004312:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <STTS751_0_Probe+0x14c>)
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <STTS751_0_Probe+0x144>)
 8004318:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <STTS751_0_Probe+0x150>)
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <STTS751_0_Probe+0x154>)
 800431e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11e      	bne.n	8004364 <STTS751_0_Probe+0xe4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <STTS751_0_Probe+0xe4>
 8004330:	7a3b      	ldrb	r3, [r7, #8]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d116      	bne.n	8004364 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8004336:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <STTS751_0_Probe+0x158>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4a28      	ldr	r2, [pc, #160]	; (80043dc <STTS751_0_Probe+0x15c>)
 800433c:	3308      	adds	r3, #8
 800433e:	4928      	ldr	r1, [pc, #160]	; (80043e0 <STTS751_0_Probe+0x160>)
 8004340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <STTS751_0_Probe+0x150>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a20      	ldr	r2, [pc, #128]	; (80043cc <STTS751_0_Probe+0x14c>)
 800434c:	6892      	ldr	r2, [r2, #8]
 800434e:	4610      	mov	r0, r2
 8004350:	4798      	blx	r3
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004358:	f06f 0304 	mvn.w	r3, #4
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
 800435e:	e001      	b.n	8004364 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004360:	2300      	movs	r3, #0
 8004362:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8004364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <STTS751_0_Probe+0xfa>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004374:	f06f 0304 	mvn.w	r3, #4
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <STTS751_0_Probe+0x110>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800438a:	f06f 0304 	mvn.w	r3, #4
 800438e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <STTS751_0_Probe+0x126>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80043a0:	f06f 0304 	mvn.w	r3, #4
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80043a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3748      	adds	r7, #72	; 0x48
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	0800145d 	.word	0x0800145d
 80043b4:	080014c1 	.word	0x080014c1
 80043b8:	08001575 	.word	0x08001575
 80043bc:	08001511 	.word	0x08001511
 80043c0:	080015d9 	.word	0x080015d9
 80043c4:	20000454 	.word	0x20000454
 80043c8:	200003e0 	.word	0x200003e0
 80043cc:	20000398 	.word	0x20000398
 80043d0:	200003d4 	.word	0x200003d4
 80043d4:	20000074 	.word	0x20000074
 80043d8:	20000098 	.word	0x20000098
 80043dc:	200003a4 	.word	0x200003a4
 80043e0:	20000084 	.word	0x20000084

080043e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_Init+0x40>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_Init+0x40>)
 80043ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <HAL_Init+0x40>)
 80043fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004400:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_Init+0x40>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800440c:	2003      	movs	r0, #3
 800440e:	f000 f92b 	bl	8004668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004412:	2000      	movs	r0, #0
 8004414:	f000 f808 	bl	8004428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004418:	f7fc ff42 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00

08004428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_InitTick+0x54>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_InitTick+0x58>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	4619      	mov	r1, r3
 800443a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800443e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f943 	bl	80046d2 <HAL_SYSTICK_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e00e      	b.n	8004474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d80a      	bhi.n	8004472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800445c:	2200      	movs	r2, #0
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	f000 f90b 	bl	800467e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004468:	4a06      	ldr	r2, [pc, #24]	; (8004484 <HAL_InitTick+0x5c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000000 	.word	0x20000000
 8004480:	200000c0 	.word	0x200000c0
 8004484:	200000bc 	.word	0x200000bc

08004488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_IncTick+0x20>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_IncTick+0x24>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4413      	add	r3, r2
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_IncTick+0x24>)
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	200000c0 	.word	0x200000c0
 80044ac:	2000048c 	.word	0x2000048c

080044b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return uwTick;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_GetTick+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	2000048c 	.word	0x2000048c

080044c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	60d3      	str	r3, [r2, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <__NVIC_GetPriorityGrouping+0x18>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 0307 	and.w	r3, r3, #7
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db0b      	blt.n	8004556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	4907      	ldr	r1, [pc, #28]	; (8004564 <__NVIC_EnableIRQ+0x38>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2001      	movs	r0, #1
 800454e:	fa00 f202 	lsl.w	r2, r0, r2
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	; (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf28      	it	cs
 80045da:	2304      	movcs	r3, #4
 80045dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d902      	bls.n	80045ec <NVIC_EncodePriority+0x30>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3b03      	subs	r3, #3
 80045ea:	e000      	b.n	80045ee <NVIC_EncodePriority+0x32>
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	401a      	ands	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004604:	f04f 31ff 	mov.w	r1, #4294967295
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	43d9      	mvns	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	4313      	orrs	r3, r2
         );
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004634:	d301      	bcc.n	800463a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004636:	2301      	movs	r3, #1
 8004638:	e00f      	b.n	800465a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <SysTick_Config+0x40>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004642:	210f      	movs	r1, #15
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f7ff ff8e 	bl	8004568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <SysTick_Config+0x40>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <SysTick_Config+0x40>)
 8004654:	2207      	movs	r2, #7
 8004656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000e010 	.word	0xe000e010

08004668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff29 	bl	80044c8 <__NVIC_SetPriorityGrouping>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004690:	f7ff ff3e 	bl	8004510 <__NVIC_GetPriorityGrouping>
 8004694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff8e 	bl	80045bc <NVIC_EncodePriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff5d 	bl	8004568 <__NVIC_SetPriority>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff31 	bl	800452c <__NVIC_EnableIRQ>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ffa2 	bl	8004624 <SysTick_Config>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7ff feda 	bl	80044b0 <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d008      	beq.n	800471c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e052      	b.n	80047c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0216 	bic.w	r2, r2, #22
 800472a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_DMA_Abort+0x62>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0208 	bic.w	r2, r2, #8
 800475a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476c:	e013      	b.n	8004796 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800476e:	f7ff fe9f 	bl	80044b0 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b05      	cmp	r3, #5
 800477a:	d90c      	bls.n	8004796 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e015      	b.n	80047c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e4      	bne.n	800476e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2280      	movs	r2, #128	; 0x80
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e00c      	b.n	8004802 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2205      	movs	r2, #5
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e159      	b.n	8004ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	f040 8148 	bne.w	8004ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d005      	beq.n	8004862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800485e:	2b02      	cmp	r3, #2
 8004860:	d130      	bne.n	80048c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004898:	2201      	movs	r2, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 0201 	and.w	r2, r3, #1
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d017      	beq.n	8004900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2203      	movs	r2, #3
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d123      	bne.n	8004954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	220f      	movs	r2, #15
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0203 	and.w	r2, r3, #3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a2 	beq.w	8004ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b57      	ldr	r3, [pc, #348]	; (8004af8 <HAL_GPIO_Init+0x2e8>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	4a56      	ldr	r2, [pc, #344]	; (8004af8 <HAL_GPIO_Init+0x2e8>)
 80049a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a4:	6453      	str	r3, [r2, #68]	; 0x44
 80049a6:	4b54      	ldr	r3, [pc, #336]	; (8004af8 <HAL_GPIO_Init+0x2e8>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b2:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_GPIO_Init+0x2ec>)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a49      	ldr	r2, [pc, #292]	; (8004b00 <HAL_GPIO_Init+0x2f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d019      	beq.n	8004a12 <HAL_GPIO_Init+0x202>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a48      	ldr	r2, [pc, #288]	; (8004b04 <HAL_GPIO_Init+0x2f4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_GPIO_Init+0x1fe>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a47      	ldr	r2, [pc, #284]	; (8004b08 <HAL_GPIO_Init+0x2f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00d      	beq.n	8004a0a <HAL_GPIO_Init+0x1fa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a46      	ldr	r2, [pc, #280]	; (8004b0c <HAL_GPIO_Init+0x2fc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <HAL_GPIO_Init+0x1f6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a45      	ldr	r2, [pc, #276]	; (8004b10 <HAL_GPIO_Init+0x300>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_GPIO_Init+0x1f2>
 80049fe:	2304      	movs	r3, #4
 8004a00:	e008      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e006      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a06:	2303      	movs	r3, #3
 8004a08:	e004      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e002      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a12:	2300      	movs	r3, #0
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	f002 0203 	and.w	r2, r2, #3
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	4093      	lsls	r3, r2
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a24:	4935      	ldr	r1, [pc, #212]	; (8004afc <HAL_GPIO_Init+0x2ec>)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a32:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a56:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ad4:	4a0f      	ldr	r2, [pc, #60]	; (8004b14 <HAL_GPIO_Init+0x304>)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	f67f aea2 	bls.w	800482c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400
 8004b08:	40020800 	.word	0x40020800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40013c00 	.word	0x40013c00

08004b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e0bb      	b.n	8004cac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b34:	2201      	movs	r2, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f040 80ab 	bne.w	8004ca6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b50:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_GPIO_DeInit+0x1ac>)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	3302      	adds	r3, #2
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	220f      	movs	r2, #15
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a54      	ldr	r2, [pc, #336]	; (8004cc8 <HAL_GPIO_DeInit+0x1b0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d019      	beq.n	8004bae <HAL_GPIO_DeInit+0x96>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a53      	ldr	r2, [pc, #332]	; (8004ccc <HAL_GPIO_DeInit+0x1b4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_GPIO_DeInit+0x92>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_GPIO_DeInit+0x1b8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00d      	beq.n	8004ba6 <HAL_GPIO_DeInit+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a51      	ldr	r2, [pc, #324]	; (8004cd4 <HAL_GPIO_DeInit+0x1bc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <HAL_GPIO_DeInit+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a50      	ldr	r2, [pc, #320]	; (8004cd8 <HAL_GPIO_DeInit+0x1c0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_GPIO_DeInit+0x86>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e008      	b.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004b9e:	2307      	movs	r3, #7
 8004ba0:	e006      	b.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e004      	b.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	f002 0203 	and.w	r2, r2, #3
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	4093      	lsls	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d132      	bne.n	8004c26 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	4944      	ldr	r1, [pc, #272]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bce:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	4941      	ldr	r1, [pc, #260]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	493d      	ldr	r1, [pc, #244]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bea:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	493a      	ldr	r1, [pc, #232]	; (8004cdc <HAL_GPIO_DeInit+0x1c4>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	220f      	movs	r2, #15
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c08:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <HAL_GPIO_DeInit+0x1ac>)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	3302      	adds	r3, #2
 8004c10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	482a      	ldr	r0, [pc, #168]	; (8004cc4 <HAL_GPIO_DeInit+0x1ac>)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	400a      	ands	r2, r1
 8004c20:	3302      	adds	r3, #2
 8004c22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2103      	movs	r1, #3
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	401a      	ands	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	08da      	lsrs	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3208      	adds	r2, #8
 8004c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	08d2      	lsrs	r2, r2, #3
 8004c5c:	4019      	ands	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3208      	adds	r2, #8
 8004c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2103      	movs	r1, #3
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	2101      	movs	r1, #1
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	fa01 f303 	lsl.w	r3, r1, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2103      	movs	r1, #3
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	f67f af40 	bls.w	8004b34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40020800 	.word	0x40020800
 8004cd4:	40020c00 	.word	0x40020c00
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40013c00 	.word	0x40013c00

08004ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
 8004cec:	4613      	mov	r3, r2
 8004cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf0:	787b      	ldrb	r3, [r7, #1]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cfc:	e003      	b.n	8004d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cfe:	887b      	ldrh	r3, [r7, #2]
 8004d00:	041a      	lsls	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	619a      	str	r2, [r3, #24]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e12b      	b.n	8004f7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f95d 	bl	8004ffa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	; 0x24
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d78:	f001 fcbe 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4a81      	ldr	r2, [pc, #516]	; (8004f88 <HAL_I2C_Init+0x274>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d807      	bhi.n	8004d98 <HAL_I2C_Init+0x84>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <HAL_I2C_Init+0x278>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bf94      	ite	ls
 8004d90:	2301      	movls	r3, #1
 8004d92:	2300      	movhi	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e006      	b.n	8004da6 <HAL_I2C_Init+0x92>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a7d      	ldr	r2, [pc, #500]	; (8004f90 <HAL_I2C_Init+0x27c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	bf94      	ite	ls
 8004da0:	2301      	movls	r3, #1
 8004da2:	2300      	movhi	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0e7      	b.n	8004f7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a78      	ldr	r2, [pc, #480]	; (8004f94 <HAL_I2C_Init+0x280>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	0c9b      	lsrs	r3, r3, #18
 8004db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a6a      	ldr	r2, [pc, #424]	; (8004f88 <HAL_I2C_Init+0x274>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d802      	bhi.n	8004de8 <HAL_I2C_Init+0xd4>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	3301      	adds	r3, #1
 8004de6:	e009      	b.n	8004dfc <HAL_I2C_Init+0xe8>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	4a69      	ldr	r2, [pc, #420]	; (8004f98 <HAL_I2C_Init+0x284>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	495c      	ldr	r1, [pc, #368]	; (8004f88 <HAL_I2C_Init+0x274>)
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	d819      	bhi.n	8004e50 <HAL_I2C_Init+0x13c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1e59      	subs	r1, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2a:	1c59      	adds	r1, r3, #1
 8004e2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e30:	400b      	ands	r3, r1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_I2C_Init+0x138>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1e59      	subs	r1, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e44:	3301      	adds	r3, #1
 8004e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4a:	e051      	b.n	8004ef0 <HAL_I2C_Init+0x1dc>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	e04f      	b.n	8004ef0 <HAL_I2C_Init+0x1dc>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d111      	bne.n	8004e7c <HAL_I2C_Init+0x168>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1e58      	subs	r0, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	440b      	add	r3, r1
 8004e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e012      	b.n	8004ea2 <HAL_I2C_Init+0x18e>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1e58      	subs	r0, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	0099      	lsls	r1, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Init+0x196>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e022      	b.n	8004ef0 <HAL_I2C_Init+0x1dc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_I2C_Init+0x1bc>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1e58      	subs	r0, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	440b      	add	r3, r1
 8004ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	e00f      	b.n	8004ef0 <HAL_I2C_Init+0x1dc>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1e58      	subs	r0, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	0099      	lsls	r1, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	6809      	ldr	r1, [r1, #0]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6911      	ldr	r1, [r2, #16]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	4311      	orrs	r1, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	000186a0 	.word	0x000186a0
 8004f8c:	001e847f 	.word	0x001e847f
 8004f90:	003d08ff 	.word	0x003d08ff
 8004f94:	431bde83 	.word	0x431bde83
 8004f98:	10624dd3 	.word	0x10624dd3

08004f9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e021      	b.n	8004ff2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2224      	movs	r2, #36	; 0x24
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f821 	bl	800500e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	460b      	mov	r3, r1
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800503e:	f7ff fa37 	bl	80044b0 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	f040 80d9 	bne.w	8005204 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2319      	movs	r3, #25
 8005058:	2201      	movs	r2, #1
 800505a:	496d      	ldr	r1, [pc, #436]	; (8005210 <HAL_I2C_Mem_Write+0x1ec>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fca5 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	e0cc      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2C_Mem_Write+0x56>
 8005076:	2302      	movs	r3, #2
 8005078:	e0c5      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d007      	beq.n	80050a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	; 0x21
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2240      	movs	r2, #64	; 0x40
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a4d      	ldr	r2, [pc, #308]	; (8005214 <HAL_I2C_Mem_Write+0x1f0>)
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050e2:	88f8      	ldrh	r0, [r7, #6]
 80050e4:	893a      	ldrh	r2, [r7, #8]
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4603      	mov	r3, r0
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fadc 	bl	80056b0 <I2C_RequestMemoryWrite>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d052      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e081      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fd6a 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b04      	cmp	r3, #4
 8005118:	d107      	bne.n	800512a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06b      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11b      	bne.n	80051a4 <HAL_I2C_Mem_Write+0x180>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1aa      	bne.n	8005102 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fd5d 	bl	8005c70 <I2C_WaitOnBTFFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d107      	bne.n	80051d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e016      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	00100002 	.word	0x00100002
 8005214:	ffff0000 	.word	0xffff0000

08005218 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005232:	f7ff f93d 	bl	80044b0 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b20      	cmp	r3, #32
 8005242:	f040 8214 	bne.w	800566e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2319      	movs	r3, #25
 800524c:	2201      	movs	r2, #1
 800524e:	497b      	ldr	r1, [pc, #492]	; (800543c <HAL_I2C_Mem_Read+0x224>)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fbab 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	e207      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2C_Mem_Read+0x56>
 800526a:	2302      	movs	r3, #2
 800526c:	e200      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d007      	beq.n	8005294 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2222      	movs	r2, #34	; 0x22
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a5b      	ldr	r2, [pc, #364]	; (8005440 <HAL_I2C_Mem_Read+0x228>)
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d6:	88f8      	ldrh	r0, [r7, #6]
 80052d8:	893a      	ldrh	r2, [r7, #8]
 80052da:	8979      	ldrh	r1, [r7, #10]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4603      	mov	r3, r0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa78 	bl	80057dc <I2C_RequestMemoryRead>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e1bc      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d113      	bne.n	8005326 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e190      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	2b01      	cmp	r3, #1
 800532c:	d11b      	bne.n	8005366 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e170      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	2b02      	cmp	r3, #2
 800536c:	d11b      	bne.n	80053a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	e150      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053bc:	e144      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	f200 80f1 	bhi.w	80055aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d123      	bne.n	8005418 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fc93 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e145      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005416:	e117      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	2b02      	cmp	r3, #2
 800541e:	d14e      	bne.n	80054be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2200      	movs	r2, #0
 8005428:	4906      	ldr	r1, [pc, #24]	; (8005444 <HAL_I2C_Mem_Read+0x22c>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fabe 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e11a      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
 800543a:	bf00      	nop
 800543c:	00100002 	.word	0x00100002
 8005440:	ffff0000 	.word	0xffff0000
 8005444:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054bc:	e0c4      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	2200      	movs	r2, #0
 80054c6:	496c      	ldr	r1, [pc, #432]	; (8005678 <HAL_I2C_Mem_Read+0x460>)
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fa6f 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0cb      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2200      	movs	r2, #0
 8005522:	4955      	ldr	r1, [pc, #340]	; (8005678 <HAL_I2C_Mem_Read+0x460>)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fa41 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e09d      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055a8:	e04e      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fba6 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e058      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d124      	bne.n	8005648 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f aeb6 	bne.w	80053be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
  }
}
 8005670:	4618      	mov	r0, r3
 8005672:	3728      	adds	r7, #40	; 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	00010004 	.word	0x00010004

0800567c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	460b      	mov	r3, r1
 80056c4:	813b      	strh	r3, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f960 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d103      	bne.n	800570a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e05f      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	492d      	ldr	r1, [pc, #180]	; (80057d8 <I2C_RequestMemoryWrite+0x128>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f9bb 	bl	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04c      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa46 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e02b      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	e021      	b.n	80057cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	b29b      	uxth	r3, r3
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fa20 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e005      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00010002 	.word	0x00010002

080057dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005804:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2200      	movs	r2, #0
 800581e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f8c2 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	d103      	bne.n	8005846 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0aa      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	4952      	ldr	r1, [pc, #328]	; (80059a8 <I2C_RequestMemoryRead+0x1cc>)
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f91d 	bl	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e097      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	6a39      	ldr	r1, [r7, #32]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f9a8 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00d      	beq.n	80058b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b04      	cmp	r3, #4
 800589c:	d107      	bne.n	80058ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e076      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b8:	893b      	ldrh	r3, [r7, #8]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	e021      	b.n	8005908 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	6a39      	ldr	r1, [r7, #32]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f982 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d107      	bne.n	80058fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e050      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	893b      	ldrh	r3, [r7, #8]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	6a39      	ldr	r1, [r7, #32]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f967 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b04      	cmp	r3, #4
 800591e:	d107      	bne.n	8005930 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e035      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2200      	movs	r2, #0
 800594c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f82b 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	d103      	bne.n	8005974 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e013      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005978:	897b      	ldrh	r3, [r7, #10]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	4906      	ldr	r1, [pc, #24]	; (80059a8 <I2C_RequestMemoryRead+0x1cc>)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f886 	bl	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00010002 	.word	0x00010002

080059ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059bc:	e048      	b.n	8005a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d044      	beq.n	8005a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fe fd73 	bl	80044b0 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d139      	bne.n	8005a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	0c1b      	lsrs	r3, r3, #16
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d10d      	bne.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x56>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	43da      	mvns	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	e00c      	b.n	8005a1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d116      	bne.n	8005a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e023      	b.n	8005a98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10d      	bne.n	8005a76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	43da      	mvns	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4013      	ands	r3, r2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	e00c      	b.n	8005a90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	43da      	mvns	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d093      	beq.n	80059be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aae:	e071      	b.n	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d123      	bne.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ace:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e067      	b.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d041      	beq.n	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b10:	f7fe fcce 	bl	80044b0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d302      	bcc.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d136      	bne.n	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10c      	bne.n	8005b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e00b      	b.n	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	43da      	mvns	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e021      	b.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	0c1b      	lsrs	r3, r3, #16
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d10c      	bne.n	8005bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	43da      	mvns	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e00b      	b.n	8005bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f47f af6d 	bne.w	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bec:	e034      	b.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f8e3 	bl	8005dba <I2C_IsAcknowledgeFailed>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e034      	b.n	8005c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d028      	beq.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7fe fc53 	bl	80044b0 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d11d      	bne.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d016      	beq.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e007      	b.n	8005c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d1c3      	bne.n	8005bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c7c:	e034      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f89b 	bl	8005dba <I2C_IsAcknowledgeFailed>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e034      	b.n	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d028      	beq.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c96:	f7fe fc0b 	bl	80044b0 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d302      	bcc.n	8005cac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d11d      	bne.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d016      	beq.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d1c3      	bne.n	8005c7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d0c:	e049      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d119      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0210 	mvn.w	r2, #16
 8005d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e030      	b.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fe fbae 	bl	80044b0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11d      	bne.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d016      	beq.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e007      	b.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d1ae      	bne.n	8005d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d11b      	bne.n	8005e0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e267      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d075      	beq.n	8005f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e36:	4b88      	ldr	r3, [pc, #544]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d00c      	beq.n	8005e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b85      	ldr	r3, [pc, #532]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d112      	bne.n	8005e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e4e:	4b82      	ldr	r3, [pc, #520]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	4b7e      	ldr	r3, [pc, #504]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05b      	beq.n	8005f20 <HAL_RCC_OscConfig+0x108>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d157      	bne.n	8005f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e242      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x74>
 8005e7e:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a75      	ldr	r2, [pc, #468]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e01d      	b.n	8005ec8 <HAL_RCC_OscConfig+0xb0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x98>
 8005e96:	4b70      	ldr	r3, [pc, #448]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6f      	ldr	r2, [pc, #444]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6c      	ldr	r2, [pc, #432]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0xb0>
 8005eb0:	4b69      	ldr	r3, [pc, #420]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a68      	ldr	r2, [pc, #416]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	4b66      	ldr	r3, [pc, #408]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a65      	ldr	r2, [pc, #404]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d013      	beq.n	8005ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7fe faee 	bl	80044b0 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fe faea 	bl	80044b0 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e207      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0xc0>
 8005ef6:	e014      	b.n	8005f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fe fada 	bl	80044b0 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f00:	f7fe fad6 	bl	80044b0 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b64      	cmp	r3, #100	; 0x64
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e1f3      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f12:	4b51      	ldr	r3, [pc, #324]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0xe8>
 8005f1e:	e000      	b.n	8005f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d063      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b47      	ldr	r3, [pc, #284]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d11c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_RCC_OscConfig+0x152>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e1c7      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6a:	4b3b      	ldr	r3, [pc, #236]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4937      	ldr	r1, [pc, #220]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7e:	e03a      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d020      	beq.n	8005fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <HAL_RCC_OscConfig+0x244>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fe fa8f 	bl	80044b0 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f96:	f7fe fa8b 	bl	80044b0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e1a8      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4925      	ldr	r1, [pc, #148]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]
 8005fc8:	e015      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <HAL_RCC_OscConfig+0x244>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fe fa6e 	bl	80044b0 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd8:	f7fe fa6a 	bl	80044b0 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e187      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d036      	beq.n	8006070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <HAL_RCC_OscConfig+0x248>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006010:	f7fe fa4e 	bl	80044b0 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006018:	f7fe fa4a 	bl	80044b0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e167      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <HAL_RCC_OscConfig+0x240>)
 800602c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0x200>
 8006036:	e01b      	b.n	8006070 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_RCC_OscConfig+0x248>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603e:	f7fe fa37 	bl	80044b0 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006044:	e00e      	b.n	8006064 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006046:	f7fe fa33 	bl	80044b0 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d907      	bls.n	8006064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e150      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
 8006058:	40023800 	.word	0x40023800
 800605c:	42470000 	.word	0x42470000
 8006060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006064:	4b88      	ldr	r3, [pc, #544]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ea      	bne.n	8006046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8097 	beq.w	80061ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006082:	4b81      	ldr	r3, [pc, #516]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	4b7d      	ldr	r3, [pc, #500]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	4a7c      	ldr	r2, [pc, #496]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609c:	6413      	str	r3, [r2, #64]	; 0x40
 800609e:	4b7a      	ldr	r3, [pc, #488]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060aa:	2301      	movs	r3, #1
 80060ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ae:	4b77      	ldr	r3, [pc, #476]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d118      	bne.n	80060ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ba:	4b74      	ldr	r3, [pc, #464]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a73      	ldr	r2, [pc, #460]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c6:	f7fe f9f3 	bl	80044b0 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fe f9ef 	bl	80044b0 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e10c      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e0:	4b6a      	ldr	r3, [pc, #424]	; (800628c <HAL_RCC_OscConfig+0x474>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d106      	bne.n	8006102 <HAL_RCC_OscConfig+0x2ea>
 80060f4:	4b64      	ldr	r3, [pc, #400]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a63      	ldr	r2, [pc, #396]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	e01c      	b.n	800613c <HAL_RCC_OscConfig+0x324>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b05      	cmp	r3, #5
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0x30c>
 800610a:	4b5f      	ldr	r3, [pc, #380]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a5e      	ldr	r2, [pc, #376]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 0304 	orr.w	r3, r3, #4
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	4b5c      	ldr	r3, [pc, #368]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a5b      	ldr	r2, [pc, #364]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	6713      	str	r3, [r2, #112]	; 0x70
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0x324>
 8006124:	4b58      	ldr	r3, [pc, #352]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
 8006130:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	4a54      	ldr	r2, [pc, #336]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006136:	f023 0304 	bic.w	r3, r3, #4
 800613a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fe f9b4 	bl	80044b0 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614a:	e00a      	b.n	8006162 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614c:	f7fe f9b0 	bl	80044b0 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f241 3288 	movw	r2, #5000	; 0x1388
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0cb      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	4b49      	ldr	r3, [pc, #292]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ee      	beq.n	800614c <HAL_RCC_OscConfig+0x334>
 800616e:	e014      	b.n	800619a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006170:	f7fe f99e 	bl	80044b0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006176:	e00a      	b.n	800618e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006178:	f7fe f99a 	bl	80044b0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	; 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e0b5      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	4b3e      	ldr	r3, [pc, #248]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1ee      	bne.n	8006178 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d105      	bne.n	80061ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a0:	4b39      	ldr	r3, [pc, #228]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	4a38      	ldr	r2, [pc, #224]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80a1 	beq.w	80062f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061b6:	4b34      	ldr	r3, [pc, #208]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d05c      	beq.n	800627c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d141      	bne.n	800624e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d0:	f7fe f96e 	bl	80044b0 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d8:	f7fe f96a 	bl	80044b0 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e087      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	019b      	lsls	r3, r3, #6
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	3b01      	subs	r3, #1
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	491b      	ldr	r1, [pc, #108]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fe f943 	bl	80044b0 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622e:	f7fe f93f 	bl	80044b0 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e05c      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x416>
 800624c:	e054      	b.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_RCC_OscConfig+0x478>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fe f92c 	bl	80044b0 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625c:	f7fe f928 	bl	80044b0 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e045      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCC_OscConfig+0x470>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x444>
 800627a:	e03d      	b.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d107      	bne.n	8006294 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e038      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
 8006288:	40023800 	.word	0x40023800
 800628c:	40007000 	.word	0x40007000
 8006290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <HAL_RCC_OscConfig+0x4ec>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d028      	beq.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d121      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d11a      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	3b01      	subs	r3, #1
 80062de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023800 	.word	0x40023800

08006308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0cc      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800631c:	4b68      	ldr	r3, [pc, #416]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d90c      	bls.n	8006344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b63      	ldr	r3, [pc, #396]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0b8      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d020      	beq.n	8006392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800635c:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a58      	ldr	r2, [pc, #352]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006374:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a52      	ldr	r2, [pc, #328]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800637e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006380:	4b50      	ldr	r3, [pc, #320]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	494d      	ldr	r1, [pc, #308]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d044      	beq.n	8006428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d107      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e07f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d003      	beq.n	80063c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d107      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e06f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d6:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e067      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 0203 	bic.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4934      	ldr	r1, [pc, #208]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063f8:	f7fe f85a 	bl	80044b0 <HAL_GetTick>
 80063fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006400:	f7fe f856 	bl	80044b0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e04f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 020c 	and.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	429a      	cmp	r2, r3
 8006426:	d1eb      	bne.n	8006400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d20c      	bcs.n	8006450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e032      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4916      	ldr	r1, [pc, #88]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800648e:	f000 f821 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	490a      	ldr	r1, [pc, #40]	; (80064c8 <HAL_RCC_ClockConfig+0x1c0>)
 80064a0:	5ccb      	ldrb	r3, [r1, r3]
 80064a2:	fa22 f303 	lsr.w	r3, r2, r3
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <HAL_RCC_ClockConfig+0x1c4>)
 80064a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd ffba 	bl	8004428 <HAL_InitTick>

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023c00 	.word	0x40023c00
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800abb0 	.word	0x0800abb0
 80064cc:	20000000 	.word	0x20000000
 80064d0:	200000bc 	.word	0x200000bc

080064d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b094      	sub	sp, #80	; 0x50
 80064da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	647b      	str	r3, [r7, #68]	; 0x44
 80064e0:	2300      	movs	r3, #0
 80064e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e4:	2300      	movs	r3, #0
 80064e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ec:	4b79      	ldr	r3, [pc, #484]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 030c 	and.w	r3, r3, #12
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d00d      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x40>
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	f200 80e1 	bhi.w	80066c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x34>
 8006502:	2b04      	cmp	r3, #4
 8006504:	d003      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x3a>
 8006506:	e0db      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006508:	4b73      	ldr	r3, [pc, #460]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800650a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800650c:	e0db      	b.n	80066c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800650e:	4b73      	ldr	r3, [pc, #460]	; (80066dc <HAL_RCC_GetSysClockFreq+0x208>)
 8006510:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006512:	e0d8      	b.n	80066c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006514:	4b6f      	ldr	r3, [pc, #444]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800651e:	4b6d      	ldr	r3, [pc, #436]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d063      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b6a      	ldr	r3, [pc, #424]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	2200      	movs	r2, #0
 8006532:	63bb      	str	r3, [r7, #56]	; 0x38
 8006534:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653c:	633b      	str	r3, [r7, #48]	; 0x30
 800653e:	2300      	movs	r3, #0
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
 8006542:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f04f 0000 	mov.w	r0, #0
 800654e:	f04f 0100 	mov.w	r1, #0
 8006552:	0159      	lsls	r1, r3, #5
 8006554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006558:	0150      	lsls	r0, r2, #5
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4621      	mov	r1, r4
 8006560:	1a51      	subs	r1, r2, r1
 8006562:	6139      	str	r1, [r7, #16]
 8006564:	4629      	mov	r1, r5
 8006566:	eb63 0301 	sbc.w	r3, r3, r1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006578:	4659      	mov	r1, fp
 800657a:	018b      	lsls	r3, r1, #6
 800657c:	4651      	mov	r1, sl
 800657e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006582:	4651      	mov	r1, sl
 8006584:	018a      	lsls	r2, r1, #6
 8006586:	4651      	mov	r1, sl
 8006588:	ebb2 0801 	subs.w	r8, r2, r1
 800658c:	4659      	mov	r1, fp
 800658e:	eb63 0901 	sbc.w	r9, r3, r1
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800659e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065a6:	4690      	mov	r8, r2
 80065a8:	4699      	mov	r9, r3
 80065aa:	4623      	mov	r3, r4
 80065ac:	eb18 0303 	adds.w	r3, r8, r3
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	462b      	mov	r3, r5
 80065b4:	eb49 0303 	adc.w	r3, r9, r3
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065c6:	4629      	mov	r1, r5
 80065c8:	024b      	lsls	r3, r1, #9
 80065ca:	4621      	mov	r1, r4
 80065cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065d0:	4621      	mov	r1, r4
 80065d2:	024a      	lsls	r2, r1, #9
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065da:	2200      	movs	r2, #0
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065e4:	f7fa fae8 	bl	8000bb8 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4613      	mov	r3, r2
 80065ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f0:	e058      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f2:	4b38      	ldr	r3, [pc, #224]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	099b      	lsrs	r3, r3, #6
 80065f8:	2200      	movs	r2, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	4611      	mov	r1, r2
 80065fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006602:	623b      	str	r3, [r7, #32]
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
 8006608:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800660c:	4642      	mov	r2, r8
 800660e:	464b      	mov	r3, r9
 8006610:	f04f 0000 	mov.w	r0, #0
 8006614:	f04f 0100 	mov.w	r1, #0
 8006618:	0159      	lsls	r1, r3, #5
 800661a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800661e:	0150      	lsls	r0, r2, #5
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4641      	mov	r1, r8
 8006626:	ebb2 0a01 	subs.w	sl, r2, r1
 800662a:	4649      	mov	r1, r9
 800662c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800663c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006640:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006644:	ebb2 040a 	subs.w	r4, r2, sl
 8006648:	eb63 050b 	sbc.w	r5, r3, fp
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	00eb      	lsls	r3, r5, #3
 8006656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800665a:	00e2      	lsls	r2, r4, #3
 800665c:	4614      	mov	r4, r2
 800665e:	461d      	mov	r5, r3
 8006660:	4643      	mov	r3, r8
 8006662:	18e3      	adds	r3, r4, r3
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	464b      	mov	r3, r9
 8006668:	eb45 0303 	adc.w	r3, r5, r3
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800667a:	4629      	mov	r1, r5
 800667c:	028b      	lsls	r3, r1, #10
 800667e:	4621      	mov	r1, r4
 8006680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006684:	4621      	mov	r1, r4
 8006686:	028a      	lsls	r2, r1, #10
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	2200      	movs	r2, #0
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	61fa      	str	r2, [r7, #28]
 8006694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006698:	f7fa fa8e 	bl	8000bb8 <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4613      	mov	r3, r2
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	3301      	adds	r3, #1
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066be:	e002      	b.n	80066c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3750      	adds	r7, #80	; 0x50
 80066cc:	46bd      	mov	sp, r7
 80066ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d2:	bf00      	nop
 80066d4:	40023800 	.word	0x40023800
 80066d8:	00f42400 	.word	0x00f42400
 80066dc:	007a1200 	.word	0x007a1200

080066e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000000 	.word	0x20000000

080066f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066fc:	f7ff fff0 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006700:	4602      	mov	r2, r0
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	0a9b      	lsrs	r3, r3, #10
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	4903      	ldr	r1, [pc, #12]	; (800671c <HAL_RCC_GetPCLK1Freq+0x24>)
 800670e:	5ccb      	ldrb	r3, [r1, r3]
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40023800 	.word	0x40023800
 800671c:	0800abc0 	.word	0x0800abc0

08006720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006724:	f7ff ffdc 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	0b5b      	lsrs	r3, r3, #13
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4903      	ldr	r1, [pc, #12]	; (8006744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40023800 	.word	0x40023800
 8006744:	0800abc0 	.word	0x0800abc0

08006748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e041      	b.n	80067de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fa fdbe 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 fa70 	bl	8006c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d001      	beq.n	8006800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e044      	b.n	800688a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_TIM_Base_Start_IT+0xb0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x6c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d013      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x6c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1a      	ldr	r2, [pc, #104]	; (800689c <HAL_TIM_Base_Start_IT+0xb4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x6c>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x6c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0x6c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d111      	bne.n	8006878 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b06      	cmp	r3, #6
 8006864:	d010      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006876:	e007      	b.n	8006888 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40010000 	.word	0x40010000
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40014000 	.word	0x40014000

080068ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0202 	mvn.w	r2, #2
 80068e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f999 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f98b 	bl	8006c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f99c 	bl	8006c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0204 	mvn.w	r2, #4
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f973 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f965 	bl	8006c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f976 	bl	8006c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0208 	mvn.w	r2, #8
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2204      	movs	r2, #4
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f94d 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f93f 	bl	8006c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f950 	bl	8006c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d020      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01b      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0210 	mvn.w	r2, #16
 80069c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2208      	movs	r2, #8
 80069ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f927 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 80069e0:	e005      	b.n	80069ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f919 	bl	8006c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f92a 	bl	8006c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0201 	mvn.w	r2, #1
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fa fa4e 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fab6 	bl	8006fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8fb 	bl	8006c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0220 	mvn.w	r2, #32
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa88 	bl	8006f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e0b4      	b.n	8006c12 <HAL_TIM_ConfigClockSource+0x186>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae0:	d03e      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0xd4>
 8006ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae6:	f200 8087 	bhi.w	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	f000 8086 	beq.w	8006bfe <HAL_TIM_ConfigClockSource+0x172>
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	d87f      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d01a      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0xa6>
 8006afc:	2b70      	cmp	r3, #112	; 0x70
 8006afe:	d87b      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d050      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d877      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b08:	2b50      	cmp	r3, #80	; 0x50
 8006b0a:	d03c      	beq.n	8006b86 <HAL_TIM_ConfigClockSource+0xfa>
 8006b0c:	2b50      	cmp	r3, #80	; 0x50
 8006b0e:	d873      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d058      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d86f      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d064      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1c:	2b30      	cmp	r3, #48	; 0x30
 8006b1e:	d86b      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d060      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d867      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05c      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d05a      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b30:	e062      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b42:	f000 f999 	bl	8006e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	609a      	str	r2, [r3, #8]
      break;
 8006b5e:	e04f      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b70:	f000 f982 	bl	8006e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b82:	609a      	str	r2, [r3, #8]
      break;
 8006b84:	e03c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b92:	461a      	mov	r2, r3
 8006b94:	f000 f8f6 	bl	8006d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2150      	movs	r1, #80	; 0x50
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f94f 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 8006ba4:	e02c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f000 f915 	bl	8006de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2160      	movs	r1, #96	; 0x60
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f93f 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 8006bc4:	e01c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f000 f8d6 	bl	8006d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2140      	movs	r1, #64	; 0x40
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f92f 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 8006be4:	e00c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f000 f926 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 8006bf6:	e003      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfc:	e000      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a3a      	ldr	r2, [pc, #232]	; (8006d68 <TIM_Base_SetConfig+0xfc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00f      	beq.n	8006ca4 <TIM_Base_SetConfig+0x38>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_Base_SetConfig+0x38>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a37      	ldr	r2, [pc, #220]	; (8006d6c <TIM_Base_SetConfig+0x100>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0x38>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a36      	ldr	r2, [pc, #216]	; (8006d70 <TIM_Base_SetConfig+0x104>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0x38>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a35      	ldr	r2, [pc, #212]	; (8006d74 <TIM_Base_SetConfig+0x108>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <TIM_Base_SetConfig+0xfc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01b      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d017      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <TIM_Base_SetConfig+0x100>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <TIM_Base_SetConfig+0x104>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00f      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <TIM_Base_SetConfig+0x108>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a25      	ldr	r2, [pc, #148]	; (8006d78 <TIM_Base_SetConfig+0x10c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <TIM_Base_SetConfig+0x110>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_Base_SetConfig+0x8a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <TIM_Base_SetConfig+0x114>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a0e      	ldr	r2, [pc, #56]	; (8006d68 <TIM_Base_SetConfig+0xfc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d103      	bne.n	8006d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d105      	bne.n	8006d5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f023 0201 	bic.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40014400 	.word	0x40014400
 8006d80:	40014800 	.word	0x40014800

08006d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 030a 	bic.w	r3, r3, #10
 8006dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b087      	sub	sp, #28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f023 0210 	bic.w	r2, r3, #16
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	031b      	lsls	r3, r3, #12
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f043 0307 	orr.w	r3, r3, #7
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e050      	b.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d018      	beq.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1c:	d013      	beq.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00e      	beq.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a16      	ldr	r2, [pc, #88]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d009      	beq.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d004      	beq.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d10c      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40014000 	.word	0x40014000

08006f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e042      	b.n	8007054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa f9ac 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	; 0x24
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fcbb 	bl	800797c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b20      	cmp	r3, #32
 8007074:	d121      	bne.n	80070ba <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_UART_Transmit_IT+0x26>
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e01a      	b.n	80070bc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2221      	movs	r2, #33	; 0x21
 80070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e000      	b.n	80070bc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80070ba:	2302      	movs	r3, #2
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b0ba      	sub	sp, #232	; 0xe8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10f      	bne.n	800712e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <HAL_UART_IRQHandler+0x66>
 800711a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb69 	bl	80077fe <UART_Receive_IT>
      return;
 800712c:	e25b      	b.n	80075e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800712e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80de 	beq.w	80072f4 <HAL_UART_IRQHandler+0x22c>
 8007138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80d1 	beq.w	80072f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0xae>
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <HAL_UART_IRQHandler+0xd2>
 8007182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f043 0202 	orr.w	r2, r3, #2
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <HAL_UART_IRQHandler+0xf6>
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	f043 0204 	orr.w	r2, r3, #4
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <HAL_UART_IRQHandler+0x126>
 80071ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	f043 0208 	orr.w	r2, r3, #8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 81f2 	beq.w	80075dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <HAL_UART_IRQHandler+0x14e>
 8007204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 faf4 	bl	80077fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	bf0c      	ite	eq
 8007224:	2301      	moveq	r3, #1
 8007226:	2300      	movne	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <HAL_UART_IRQHandler+0x17a>
 800723a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d04f      	beq.n	80072e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9fc 	bl	8007640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	d141      	bne.n	80072da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3314      	adds	r3, #20
 800725c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800726c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800728e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800729a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1d9      	bne.n	8007256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d013      	beq.n	80072d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	4a7e      	ldr	r2, [pc, #504]	; (80074a8 <HAL_UART_IRQHandler+0x3e0>)
 80072b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fd fa87 	bl	80047ca <HAL_DMA_Abort_IT>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	e00e      	b.n	80072f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f99e 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e00a      	b.n	80072f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f99a 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e006      	b.n	80072f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f996 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072ee:	e175      	b.n	80075dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	bf00      	nop
    return;
 80072f2:	e173      	b.n	80075dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 814f 	bne.w	800759c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8148 	beq.w	800759c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8141 	beq.w	800759c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	f040 80b6 	bne.w	80074ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800734c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8145 	beq.w	80075e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800735a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735e:	429a      	cmp	r2, r3
 8007360:	f080 813e 	bcs.w	80075e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800736a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007376:	f000 8088 	beq.w	800748a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	330c      	adds	r3, #12
 8007380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1d9      	bne.n	800737a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3314      	adds	r3, #20
 80073cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3314      	adds	r3, #20
 80073e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e1      	bne.n	80073c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3314      	adds	r3, #20
 8007422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800742c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e3      	bne.n	8007402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800746c:	65ba      	str	r2, [r7, #88]	; 0x58
 800746e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800747a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e3      	bne.n	8007448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd f930 	bl	80046ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007498:	b29b      	uxth	r3, r3
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	b29b      	uxth	r3, r3
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f8c1 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074a6:	e09b      	b.n	80075e0 <HAL_UART_IRQHandler+0x518>
 80074a8:	08007707 	.word	0x08007707
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 808e 	beq.w	80075e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8089 	beq.w	80075e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	330c      	adds	r3, #12
 80074f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074f6:	647a      	str	r2, [r7, #68]	; 0x44
 80074f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e3      	bne.n	80074d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	623b      	str	r3, [r7, #32]
   return(result);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800752e:	633a      	str	r2, [r7, #48]	; 0x30
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007574:	61fa      	str	r2, [r7, #28]
 8007576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	69b9      	ldr	r1, [r7, #24]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	617b      	str	r3, [r7, #20]
   return(result);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e3      	bne.n	8007550 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f847 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800759a:	e023      	b.n	80075e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <HAL_UART_IRQHandler+0x4f4>
 80075a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8ba 	bl	800772e <UART_Transmit_IT>
    return;
 80075ba:	e014      	b.n	80075e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00e      	beq.n	80075e6 <HAL_UART_IRQHandler+0x51e>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f8fa 	bl	80077ce <UART_EndTransmit_IT>
    return;
 80075da:	e004      	b.n	80075e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80075dc:	bf00      	nop
 80075de:	e002      	b.n	80075e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075e4:	bf00      	nop
  }
}
 80075e6:	37e8      	adds	r7, #232	; 0xe8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b095      	sub	sp, #84	; 0x54
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800765e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007668:	643a      	str	r2, [r7, #64]	; 0x40
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800766e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e5      	bne.n	8007648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3314      	adds	r3, #20
 8007682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	61fb      	str	r3, [r7, #28]
   return(result);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	64bb      	str	r3, [r7, #72]	; 0x48
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3314      	adds	r3, #20
 800769a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800769c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800769e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d119      	bne.n	80076ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	647b      	str	r3, [r7, #68]	; 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076d8:	61ba      	str	r2, [r7, #24]
 80076da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6979      	ldr	r1, [r7, #20]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e5      	bne.n	80076b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076fa:	bf00      	nop
 80076fc:	3754      	adds	r7, #84	; 0x54
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff ff77 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b21      	cmp	r3, #33	; 0x21
 8007740:	d13e      	bne.n	80077c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774a:	d114      	bne.n	8007776 <UART_Transmit_IT+0x48>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d110      	bne.n	8007776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	1c9a      	adds	r2, r3, #2
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	e008      	b.n	8007788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	1c59      	adds	r1, r3, #1
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6211      	str	r1, [r2, #32]
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29b      	uxth	r3, r3
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4619      	mov	r1, r3
 8007796:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10f      	bne.n	80077bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	e000      	b.n	80077c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077c0:	2302      	movs	r3, #2
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fefc 	bl	80075ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b08c      	sub	sp, #48	; 0x30
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b22      	cmp	r3, #34	; 0x22
 8007810:	f040 80ae 	bne.w	8007970 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781c:	d117      	bne.n	800784e <UART_Receive_IT+0x50>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d113      	bne.n	800784e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783c:	b29a      	uxth	r2, r3
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	1c9a      	adds	r2, r3, #2
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
 800784c:	e026      	b.n	800789c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d007      	beq.n	8007872 <UART_Receive_IT+0x74>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <UART_Receive_IT+0x82>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e008      	b.n	8007892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788c:	b2da      	uxtb	r2, r3
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4619      	mov	r1, r3
 80078aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d15d      	bne.n	800796c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0220 	bic.w	r2, r2, #32
 80078be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d135      	bne.n	8007962 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	623a      	str	r2, [r7, #32]
 800791e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	61bb      	str	r3, [r7, #24]
   return(result);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e5      	bne.n	80078fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b10      	cmp	r3, #16
 800793c:	d10a      	bne.n	8007954 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fe64 	bl	8007628 <HAL_UARTEx_RxEventCallback>
 8007960:	e002      	b.n	8007968 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fe4c 	bl	8007600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e002      	b.n	8007972 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3730      	adds	r7, #48	; 0x30
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800797c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007980:	b0c0      	sub	sp, #256	; 0x100
 8007982:	af00      	add	r7, sp, #0
 8007984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	68d9      	ldr	r1, [r3, #12]
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	ea40 0301 	orr.w	r3, r0, r1
 80079a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079d4:	f021 010c 	bic.w	r1, r1, #12
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079e2:	430b      	orrs	r3, r1
 80079e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f6:	6999      	ldr	r1, [r3, #24]
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	ea40 0301 	orr.w	r3, r0, r1
 8007a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4b8f      	ldr	r3, [pc, #572]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d005      	beq.n	8007a1c <UART_SetConfig+0xa0>
 8007a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4b8d      	ldr	r3, [pc, #564]	; (8007c4c <UART_SetConfig+0x2d0>)
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d104      	bne.n	8007a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a1c:	f7fe fe80 	bl	8006720 <HAL_RCC_GetPCLK2Freq>
 8007a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a24:	e003      	b.n	8007a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a26:	f7fe fe67 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8007a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a38:	f040 810c 	bne.w	8007c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a4e:	4622      	mov	r2, r4
 8007a50:	462b      	mov	r3, r5
 8007a52:	1891      	adds	r1, r2, r2
 8007a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a56:	415b      	adcs	r3, r3
 8007a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a5e:	4621      	mov	r1, r4
 8007a60:	eb12 0801 	adds.w	r8, r2, r1
 8007a64:	4629      	mov	r1, r5
 8007a66:	eb43 0901 	adc.w	r9, r3, r1
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7e:	4690      	mov	r8, r2
 8007a80:	4699      	mov	r9, r3
 8007a82:	4623      	mov	r3, r4
 8007a84:	eb18 0303 	adds.w	r3, r8, r3
 8007a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	eb49 0303 	adc.w	r3, r9, r3
 8007a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007aaa:	460b      	mov	r3, r1
 8007aac:	18db      	adds	r3, r3, r3
 8007aae:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	eb42 0303 	adc.w	r3, r2, r3
 8007ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ac0:	f7f9 f87a 	bl	8000bb8 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4b61      	ldr	r3, [pc, #388]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007aca:	fba3 2302 	umull	r2, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	011c      	lsls	r4, r3, #4
 8007ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	1891      	adds	r1, r2, r2
 8007aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8007aec:	415b      	adcs	r3, r3
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007af4:	4641      	mov	r1, r8
 8007af6:	eb12 0a01 	adds.w	sl, r2, r1
 8007afa:	4649      	mov	r1, r9
 8007afc:	eb43 0b01 	adc.w	fp, r3, r1
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b14:	4692      	mov	sl, r2
 8007b16:	469b      	mov	fp, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b22:	464b      	mov	r3, r9
 8007b24:	eb4b 0303 	adc.w	r3, fp, r3
 8007b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b40:	460b      	mov	r3, r1
 8007b42:	18db      	adds	r3, r3, r3
 8007b44:	643b      	str	r3, [r7, #64]	; 0x40
 8007b46:	4613      	mov	r3, r2
 8007b48:	eb42 0303 	adc.w	r3, r2, r3
 8007b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b56:	f7f9 f82f 	bl	8000bb8 <__aeabi_uldivmod>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4b3b      	ldr	r3, [pc, #236]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007b62:	fba3 2301 	umull	r2, r3, r3, r1
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	2264      	movs	r2, #100	; 0x64
 8007b6a:	fb02 f303 	mul.w	r3, r2, r3
 8007b6e:	1acb      	subs	r3, r1, r3
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b76:	4b36      	ldr	r3, [pc, #216]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007b78:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b84:	441c      	add	r4, r3
 8007b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b98:	4642      	mov	r2, r8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	1891      	adds	r1, r2, r2
 8007b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ba0:	415b      	adcs	r3, r3
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ba8:	4641      	mov	r1, r8
 8007baa:	1851      	adds	r1, r2, r1
 8007bac:	6339      	str	r1, [r7, #48]	; 0x30
 8007bae:	4649      	mov	r1, r9
 8007bb0:	414b      	adcs	r3, r1
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	00cb      	lsls	r3, r1, #3
 8007bc4:	4651      	mov	r1, sl
 8007bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bca:	4651      	mov	r1, sl
 8007bcc:	00ca      	lsls	r2, r1, #3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	189b      	adds	r3, r3, r2
 8007bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bdc:	464b      	mov	r3, r9
 8007bde:	460a      	mov	r2, r1
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	18db      	adds	r3, r3, r3
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c02:	4613      	mov	r3, r2
 8007c04:	eb42 0303 	adc.w	r3, r2, r3
 8007c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c12:	f7f8 ffd1 	bl	8000bb8 <__aeabi_uldivmod>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	2164      	movs	r1, #100	; 0x64
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	3332      	adds	r3, #50	; 0x32
 8007c2e:	4a08      	ldr	r2, [pc, #32]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007c30:	fba2 2303 	umull	r2, r3, r2, r3
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	f003 0207 	and.w	r2, r3, #7
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4422      	add	r2, r4
 8007c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c44:	e106      	b.n	8007e54 <UART_SetConfig+0x4d8>
 8007c46:	bf00      	nop
 8007c48:	40011000 	.word	0x40011000
 8007c4c:	40011400 	.word	0x40011400
 8007c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c66:	4642      	mov	r2, r8
 8007c68:	464b      	mov	r3, r9
 8007c6a:	1891      	adds	r1, r2, r2
 8007c6c:	6239      	str	r1, [r7, #32]
 8007c6e:	415b      	adcs	r3, r3
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
 8007c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c76:	4641      	mov	r1, r8
 8007c78:	1854      	adds	r4, r2, r1
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	eb43 0501 	adc.w	r5, r3, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	00eb      	lsls	r3, r5, #3
 8007c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c8e:	00e2      	lsls	r2, r4, #3
 8007c90:	4614      	mov	r4, r2
 8007c92:	461d      	mov	r5, r3
 8007c94:	4643      	mov	r3, r8
 8007c96:	18e3      	adds	r3, r4, r3
 8007c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	eb45 0303 	adc.w	r3, r5, r3
 8007ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	008b      	lsls	r3, r1, #2
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ccc:	4621      	mov	r1, r4
 8007cce:	008a      	lsls	r2, r1, #2
 8007cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cd4:	f7f8 ff70 	bl	8000bb8 <__aeabi_uldivmod>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4b60      	ldr	r3, [pc, #384]	; (8007e60 <UART_SetConfig+0x4e4>)
 8007cde:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	011c      	lsls	r4, r3, #4
 8007ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	1891      	adds	r1, r2, r2
 8007cfe:	61b9      	str	r1, [r7, #24]
 8007d00:	415b      	adcs	r3, r3
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d08:	4641      	mov	r1, r8
 8007d0a:	1851      	adds	r1, r2, r1
 8007d0c:	6139      	str	r1, [r7, #16]
 8007d0e:	4649      	mov	r1, r9
 8007d10:	414b      	adcs	r3, r1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d20:	4659      	mov	r1, fp
 8007d22:	00cb      	lsls	r3, r1, #3
 8007d24:	4651      	mov	r1, sl
 8007d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d2a:	4651      	mov	r1, sl
 8007d2c:	00ca      	lsls	r2, r1, #3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	4642      	mov	r2, r8
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	460a      	mov	r2, r1
 8007d40:	eb42 0303 	adc.w	r3, r2, r3
 8007d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d60:	4649      	mov	r1, r9
 8007d62:	008b      	lsls	r3, r1, #2
 8007d64:	4641      	mov	r1, r8
 8007d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	008a      	lsls	r2, r1, #2
 8007d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d72:	f7f8 ff21 	bl	8000bb8 <__aeabi_uldivmod>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4b38      	ldr	r3, [pc, #224]	; (8007e60 <UART_SetConfig+0x4e4>)
 8007d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2264      	movs	r2, #100	; 0x64
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	1acb      	subs	r3, r1, r3
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	3332      	adds	r3, #50	; 0x32
 8007d90:	4a33      	ldr	r2, [pc, #204]	; (8007e60 <UART_SetConfig+0x4e4>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d9c:	441c      	add	r4, r3
 8007d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da2:	2200      	movs	r2, #0
 8007da4:	673b      	str	r3, [r7, #112]	; 0x70
 8007da6:	677a      	str	r2, [r7, #116]	; 0x74
 8007da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	1891      	adds	r1, r2, r2
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	415b      	adcs	r3, r3
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	1851      	adds	r1, r2, r1
 8007dc0:	6039      	str	r1, [r7, #0]
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	414b      	adcs	r3, r1
 8007dc6:	607b      	str	r3, [r7, #4]
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	00cb      	lsls	r3, r1, #3
 8007dd8:	4651      	mov	r1, sl
 8007dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dde:	4651      	mov	r1, sl
 8007de0:	00ca      	lsls	r2, r1, #3
 8007de2:	4610      	mov	r0, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	4642      	mov	r2, r8
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dee:	464b      	mov	r3, r9
 8007df0:	460a      	mov	r2, r1
 8007df2:	eb42 0303 	adc.w	r3, r2, r3
 8007df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	663b      	str	r3, [r7, #96]	; 0x60
 8007e02:	667a      	str	r2, [r7, #100]	; 0x64
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e10:	4649      	mov	r1, r9
 8007e12:	008b      	lsls	r3, r1, #2
 8007e14:	4641      	mov	r1, r8
 8007e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	008a      	lsls	r2, r1, #2
 8007e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e22:	f7f8 fec9 	bl	8000bb8 <__aeabi_uldivmod>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <UART_SetConfig+0x4e4>)
 8007e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	2164      	movs	r1, #100	; 0x64
 8007e34:	fb01 f303 	mul.w	r3, r1, r3
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	3332      	adds	r3, #50	; 0x32
 8007e3e:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <UART_SetConfig+0x4e4>)
 8007e40:	fba2 2303 	umull	r2, r3, r2, r3
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f003 020f 	and.w	r2, r3, #15
 8007e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4422      	add	r2, r4
 8007e52:	609a      	str	r2, [r3, #8]
}
 8007e54:	bf00      	nop
 8007e56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e60:	51eb851f 	.word	0x51eb851f

08007e64 <__cvt>:
 8007e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	ec55 4b10 	vmov	r4, r5, d0
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	460e      	mov	r6, r1
 8007e70:	4619      	mov	r1, r3
 8007e72:	462b      	mov	r3, r5
 8007e74:	bfbb      	ittet	lt
 8007e76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e7a:	461d      	movlt	r5, r3
 8007e7c:	2300      	movge	r3, #0
 8007e7e:	232d      	movlt	r3, #45	; 0x2d
 8007e80:	700b      	strb	r3, [r1, #0]
 8007e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e88:	4691      	mov	r9, r2
 8007e8a:	f023 0820 	bic.w	r8, r3, #32
 8007e8e:	bfbc      	itt	lt
 8007e90:	4622      	movlt	r2, r4
 8007e92:	4614      	movlt	r4, r2
 8007e94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e98:	d005      	beq.n	8007ea6 <__cvt+0x42>
 8007e9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e9e:	d100      	bne.n	8007ea2 <__cvt+0x3e>
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	2102      	movs	r1, #2
 8007ea4:	e000      	b.n	8007ea8 <__cvt+0x44>
 8007ea6:	2103      	movs	r1, #3
 8007ea8:	ab03      	add	r3, sp, #12
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	ab02      	add	r3, sp, #8
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	ec45 4b10 	vmov	d0, r4, r5
 8007eb4:	4653      	mov	r3, sl
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	f000 fe6a 	bl	8008b90 <_dtoa_r>
 8007ebc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	d102      	bne.n	8007eca <__cvt+0x66>
 8007ec4:	f019 0f01 	tst.w	r9, #1
 8007ec8:	d022      	beq.n	8007f10 <__cvt+0xac>
 8007eca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ece:	eb07 0906 	add.w	r9, r7, r6
 8007ed2:	d110      	bne.n	8007ef6 <__cvt+0x92>
 8007ed4:	783b      	ldrb	r3, [r7, #0]
 8007ed6:	2b30      	cmp	r3, #48	; 0x30
 8007ed8:	d10a      	bne.n	8007ef0 <__cvt+0x8c>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ee6:	b918      	cbnz	r0, 8007ef0 <__cvt+0x8c>
 8007ee8:	f1c6 0601 	rsb	r6, r6, #1
 8007eec:	f8ca 6000 	str.w	r6, [sl]
 8007ef0:	f8da 3000 	ldr.w	r3, [sl]
 8007ef4:	4499      	add	r9, r3
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f02:	b108      	cbz	r0, 8007f08 <__cvt+0xa4>
 8007f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f08:	2230      	movs	r2, #48	; 0x30
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	454b      	cmp	r3, r9
 8007f0e:	d307      	bcc.n	8007f20 <__cvt+0xbc>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f14:	1bdb      	subs	r3, r3, r7
 8007f16:	4638      	mov	r0, r7
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	b004      	add	sp, #16
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e7f0      	b.n	8007f0a <__cvt+0xa6>

08007f28 <__exponent>:
 8007f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	bfb8      	it	lt
 8007f30:	4249      	neglt	r1, r1
 8007f32:	f803 2b02 	strb.w	r2, [r3], #2
 8007f36:	bfb4      	ite	lt
 8007f38:	222d      	movlt	r2, #45	; 0x2d
 8007f3a:	222b      	movge	r2, #43	; 0x2b
 8007f3c:	2909      	cmp	r1, #9
 8007f3e:	7042      	strb	r2, [r0, #1]
 8007f40:	dd2a      	ble.n	8007f98 <__exponent+0x70>
 8007f42:	f10d 0207 	add.w	r2, sp, #7
 8007f46:	4617      	mov	r7, r2
 8007f48:	260a      	movs	r6, #10
 8007f4a:	4694      	mov	ip, r2
 8007f4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f50:	fb06 1415 	mls	r4, r6, r5, r1
 8007f54:	3430      	adds	r4, #48	; 0x30
 8007f56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	2c63      	cmp	r4, #99	; 0x63
 8007f5e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007f62:	4629      	mov	r1, r5
 8007f64:	dcf1      	bgt.n	8007f4a <__exponent+0x22>
 8007f66:	3130      	adds	r1, #48	; 0x30
 8007f68:	f1ac 0402 	sub.w	r4, ip, #2
 8007f6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f70:	1c41      	adds	r1, r0, #1
 8007f72:	4622      	mov	r2, r4
 8007f74:	42ba      	cmp	r2, r7
 8007f76:	d30a      	bcc.n	8007f8e <__exponent+0x66>
 8007f78:	f10d 0209 	add.w	r2, sp, #9
 8007f7c:	eba2 020c 	sub.w	r2, r2, ip
 8007f80:	42bc      	cmp	r4, r7
 8007f82:	bf88      	it	hi
 8007f84:	2200      	movhi	r2, #0
 8007f86:	4413      	add	r3, r2
 8007f88:	1a18      	subs	r0, r3, r0
 8007f8a:	b003      	add	sp, #12
 8007f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f96:	e7ed      	b.n	8007f74 <__exponent+0x4c>
 8007f98:	2330      	movs	r3, #48	; 0x30
 8007f9a:	3130      	adds	r1, #48	; 0x30
 8007f9c:	7083      	strb	r3, [r0, #2]
 8007f9e:	70c1      	strb	r1, [r0, #3]
 8007fa0:	1d03      	adds	r3, r0, #4
 8007fa2:	e7f1      	b.n	8007f88 <__exponent+0x60>

08007fa4 <_printf_float>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	ed2d 8b02 	vpush	{d8}
 8007fac:	b08d      	sub	sp, #52	; 0x34
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	4605      	mov	r5, r0
 8007fba:	f000 fce7 	bl	800898c <_localeconv_r>
 8007fbe:	f8d0 a000 	ldr.w	sl, [r0]
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f7f8 f95c 	bl	8000280 <strlen>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	930a      	str	r3, [sp, #40]	; 0x28
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fd8:	3307      	adds	r3, #7
 8007fda:	f023 0307 	bic.w	r3, r3, #7
 8007fde:	f103 0208 	add.w	r2, r3, #8
 8007fe2:	f8c8 2000 	str.w	r2, [r8]
 8007fe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ff4:	ee08 0a10 	vmov	s16, r0
 8007ff8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008000:	4b9e      	ldr	r3, [pc, #632]	; (800827c <_printf_float+0x2d8>)
 8008002:	f04f 32ff 	mov.w	r2, #4294967295
 8008006:	f7f8 fd99 	bl	8000b3c <__aeabi_dcmpun>
 800800a:	bb88      	cbnz	r0, 8008070 <_printf_float+0xcc>
 800800c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008010:	4b9a      	ldr	r3, [pc, #616]	; (800827c <_printf_float+0x2d8>)
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	f7f8 fd73 	bl	8000b00 <__aeabi_dcmple>
 800801a:	bb48      	cbnz	r0, 8008070 <_printf_float+0xcc>
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 fd62 	bl	8000aec <__aeabi_dcmplt>
 8008028:	b110      	cbz	r0, 8008030 <_printf_float+0x8c>
 800802a:	232d      	movs	r3, #45	; 0x2d
 800802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008030:	4a93      	ldr	r2, [pc, #588]	; (8008280 <_printf_float+0x2dc>)
 8008032:	4b94      	ldr	r3, [pc, #592]	; (8008284 <_printf_float+0x2e0>)
 8008034:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008038:	bf94      	ite	ls
 800803a:	4690      	movls	r8, r2
 800803c:	4698      	movhi	r8, r3
 800803e:	2303      	movs	r3, #3
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	f023 0304 	bic.w	r3, r3, #4
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	f04f 0900 	mov.w	r9, #0
 800804e:	9700      	str	r7, [sp, #0]
 8008050:	4633      	mov	r3, r6
 8008052:	aa0b      	add	r2, sp, #44	; 0x2c
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f9da 	bl	8008410 <_printf_common>
 800805c:	3001      	adds	r0, #1
 800805e:	f040 8090 	bne.w	8008182 <_printf_float+0x1de>
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	b00d      	add	sp, #52	; 0x34
 8008068:	ecbd 8b02 	vpop	{d8}
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	4640      	mov	r0, r8
 8008076:	4649      	mov	r1, r9
 8008078:	f7f8 fd60 	bl	8000b3c <__aeabi_dcmpun>
 800807c:	b140      	cbz	r0, 8008090 <_printf_float+0xec>
 800807e:	464b      	mov	r3, r9
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfbc      	itt	lt
 8008084:	232d      	movlt	r3, #45	; 0x2d
 8008086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800808a:	4a7f      	ldr	r2, [pc, #508]	; (8008288 <_printf_float+0x2e4>)
 800808c:	4b7f      	ldr	r3, [pc, #508]	; (800828c <_printf_float+0x2e8>)
 800808e:	e7d1      	b.n	8008034 <_printf_float+0x90>
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008096:	9206      	str	r2, [sp, #24]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	d13f      	bne.n	800811c <_printf_float+0x178>
 800809c:	2306      	movs	r3, #6
 800809e:	6063      	str	r3, [r4, #4]
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	6861      	ldr	r1, [r4, #4]
 80080a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080a8:	2300      	movs	r3, #0
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	ab0a      	add	r3, sp, #40	; 0x28
 80080ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080b2:	ab09      	add	r3, sp, #36	; 0x24
 80080b4:	ec49 8b10 	vmov	d0, r8, r9
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	6022      	str	r2, [r4, #0]
 80080bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7ff fecf 	bl	8007e64 <__cvt>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ca:	2b47      	cmp	r3, #71	; 0x47
 80080cc:	4680      	mov	r8, r0
 80080ce:	d108      	bne.n	80080e2 <_printf_float+0x13e>
 80080d0:	1cc8      	adds	r0, r1, #3
 80080d2:	db02      	blt.n	80080da <_printf_float+0x136>
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	4299      	cmp	r1, r3
 80080d8:	dd41      	ble.n	800815e <_printf_float+0x1ba>
 80080da:	f1ab 0302 	sub.w	r3, fp, #2
 80080de:	fa5f fb83 	uxtb.w	fp, r3
 80080e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080e6:	d820      	bhi.n	800812a <_printf_float+0x186>
 80080e8:	3901      	subs	r1, #1
 80080ea:	465a      	mov	r2, fp
 80080ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080f0:	9109      	str	r1, [sp, #36]	; 0x24
 80080f2:	f7ff ff19 	bl	8007f28 <__exponent>
 80080f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f8:	1813      	adds	r3, r2, r0
 80080fa:	2a01      	cmp	r2, #1
 80080fc:	4681      	mov	r9, r0
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	dc02      	bgt.n	8008108 <_printf_float+0x164>
 8008102:	6822      	ldr	r2, [r4, #0]
 8008104:	07d2      	lsls	r2, r2, #31
 8008106:	d501      	bpl.n	800810c <_printf_float+0x168>
 8008108:	3301      	adds	r3, #1
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008110:	2b00      	cmp	r3, #0
 8008112:	d09c      	beq.n	800804e <_printf_float+0xaa>
 8008114:	232d      	movs	r3, #45	; 0x2d
 8008116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811a:	e798      	b.n	800804e <_printf_float+0xaa>
 800811c:	9a06      	ldr	r2, [sp, #24]
 800811e:	2a47      	cmp	r2, #71	; 0x47
 8008120:	d1be      	bne.n	80080a0 <_printf_float+0xfc>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1bc      	bne.n	80080a0 <_printf_float+0xfc>
 8008126:	2301      	movs	r3, #1
 8008128:	e7b9      	b.n	800809e <_printf_float+0xfa>
 800812a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800812e:	d118      	bne.n	8008162 <_printf_float+0x1be>
 8008130:	2900      	cmp	r1, #0
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	dd0b      	ble.n	800814e <_printf_float+0x1aa>
 8008136:	6121      	str	r1, [r4, #16]
 8008138:	b913      	cbnz	r3, 8008140 <_printf_float+0x19c>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	07d0      	lsls	r0, r2, #31
 800813e:	d502      	bpl.n	8008146 <_printf_float+0x1a2>
 8008140:	3301      	adds	r3, #1
 8008142:	440b      	add	r3, r1
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	65a1      	str	r1, [r4, #88]	; 0x58
 8008148:	f04f 0900 	mov.w	r9, #0
 800814c:	e7de      	b.n	800810c <_printf_float+0x168>
 800814e:	b913      	cbnz	r3, 8008156 <_printf_float+0x1b2>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	07d2      	lsls	r2, r2, #31
 8008154:	d501      	bpl.n	800815a <_printf_float+0x1b6>
 8008156:	3302      	adds	r3, #2
 8008158:	e7f4      	b.n	8008144 <_printf_float+0x1a0>
 800815a:	2301      	movs	r3, #1
 800815c:	e7f2      	b.n	8008144 <_printf_float+0x1a0>
 800815e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008164:	4299      	cmp	r1, r3
 8008166:	db05      	blt.n	8008174 <_printf_float+0x1d0>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	6121      	str	r1, [r4, #16]
 800816c:	07d8      	lsls	r0, r3, #31
 800816e:	d5ea      	bpl.n	8008146 <_printf_float+0x1a2>
 8008170:	1c4b      	adds	r3, r1, #1
 8008172:	e7e7      	b.n	8008144 <_printf_float+0x1a0>
 8008174:	2900      	cmp	r1, #0
 8008176:	bfd4      	ite	le
 8008178:	f1c1 0202 	rsble	r2, r1, #2
 800817c:	2201      	movgt	r2, #1
 800817e:	4413      	add	r3, r2
 8008180:	e7e0      	b.n	8008144 <_printf_float+0x1a0>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	055a      	lsls	r2, r3, #21
 8008186:	d407      	bmi.n	8008198 <_printf_float+0x1f4>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	4642      	mov	r2, r8
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	d12c      	bne.n	80081f0 <_printf_float+0x24c>
 8008196:	e764      	b.n	8008062 <_printf_float+0xbe>
 8008198:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800819c:	f240 80e0 	bls.w	8008360 <_printf_float+0x3bc>
 80081a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	f7f8 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d034      	beq.n	800821a <_printf_float+0x276>
 80081b0:	4a37      	ldr	r2, [pc, #220]	; (8008290 <_printf_float+0x2ec>)
 80081b2:	2301      	movs	r3, #1
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af51 	beq.w	8008062 <_printf_float+0xbe>
 80081c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081c4:	429a      	cmp	r2, r3
 80081c6:	db02      	blt.n	80081ce <_printf_float+0x22a>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	07d8      	lsls	r0, r3, #31
 80081cc:	d510      	bpl.n	80081f0 <_printf_float+0x24c>
 80081ce:	ee18 3a10 	vmov	r3, s16
 80081d2:	4652      	mov	r2, sl
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af41 	beq.w	8008062 <_printf_float+0xbe>
 80081e0:	f04f 0800 	mov.w	r8, #0
 80081e4:	f104 091a 	add.w	r9, r4, #26
 80081e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ea:	3b01      	subs	r3, #1
 80081ec:	4543      	cmp	r3, r8
 80081ee:	dc09      	bgt.n	8008204 <_printf_float+0x260>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	079b      	lsls	r3, r3, #30
 80081f4:	f100 8107 	bmi.w	8008406 <_printf_float+0x462>
 80081f8:	68e0      	ldr	r0, [r4, #12]
 80081fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fc:	4298      	cmp	r0, r3
 80081fe:	bfb8      	it	lt
 8008200:	4618      	movlt	r0, r3
 8008202:	e730      	b.n	8008066 <_printf_float+0xc2>
 8008204:	2301      	movs	r3, #1
 8008206:	464a      	mov	r2, r9
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af27 	beq.w	8008062 <_printf_float+0xbe>
 8008214:	f108 0801 	add.w	r8, r8, #1
 8008218:	e7e6      	b.n	80081e8 <_printf_float+0x244>
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc39      	bgt.n	8008294 <_printf_float+0x2f0>
 8008220:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <_printf_float+0x2ec>)
 8008222:	2301      	movs	r3, #1
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f af19 	beq.w	8008062 <_printf_float+0xbe>
 8008230:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008234:	4313      	orrs	r3, r2
 8008236:	d102      	bne.n	800823e <_printf_float+0x29a>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d5d8      	bpl.n	80081f0 <_printf_float+0x24c>
 800823e:	ee18 3a10 	vmov	r3, s16
 8008242:	4652      	mov	r2, sl
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f af09 	beq.w	8008062 <_printf_float+0xbe>
 8008250:	f04f 0900 	mov.w	r9, #0
 8008254:	f104 0a1a 	add.w	sl, r4, #26
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	425b      	negs	r3, r3
 800825c:	454b      	cmp	r3, r9
 800825e:	dc01      	bgt.n	8008264 <_printf_float+0x2c0>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	e792      	b.n	800818a <_printf_float+0x1e6>
 8008264:	2301      	movs	r3, #1
 8008266:	4652      	mov	r2, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f aef7 	beq.w	8008062 <_printf_float+0xbe>
 8008274:	f109 0901 	add.w	r9, r9, #1
 8008278:	e7ee      	b.n	8008258 <_printf_float+0x2b4>
 800827a:	bf00      	nop
 800827c:	7fefffff 	.word	0x7fefffff
 8008280:	0800abc8 	.word	0x0800abc8
 8008284:	0800abcc 	.word	0x0800abcc
 8008288:	0800abd0 	.word	0x0800abd0
 800828c:	0800abd4 	.word	0x0800abd4
 8008290:	0800abd8 	.word	0x0800abd8
 8008294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008298:	429a      	cmp	r2, r3
 800829a:	bfa8      	it	ge
 800829c:	461a      	movge	r2, r3
 800829e:	2a00      	cmp	r2, #0
 80082a0:	4691      	mov	r9, r2
 80082a2:	dc37      	bgt.n	8008314 <_printf_float+0x370>
 80082a4:	f04f 0b00 	mov.w	fp, #0
 80082a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ac:	f104 021a 	add.w	r2, r4, #26
 80082b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	eba3 0309 	sub.w	r3, r3, r9
 80082b8:	455b      	cmp	r3, fp
 80082ba:	dc33      	bgt.n	8008324 <_printf_float+0x380>
 80082bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082c0:	429a      	cmp	r2, r3
 80082c2:	db3b      	blt.n	800833c <_printf_float+0x398>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	07da      	lsls	r2, r3, #31
 80082c8:	d438      	bmi.n	800833c <_printf_float+0x398>
 80082ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082ce:	eba2 0903 	sub.w	r9, r2, r3
 80082d2:	9b05      	ldr	r3, [sp, #20]
 80082d4:	1ad2      	subs	r2, r2, r3
 80082d6:	4591      	cmp	r9, r2
 80082d8:	bfa8      	it	ge
 80082da:	4691      	movge	r9, r2
 80082dc:	f1b9 0f00 	cmp.w	r9, #0
 80082e0:	dc35      	bgt.n	800834e <_printf_float+0x3aa>
 80082e2:	f04f 0800 	mov.w	r8, #0
 80082e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ea:	f104 0a1a 	add.w	sl, r4, #26
 80082ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	eba3 0309 	sub.w	r3, r3, r9
 80082f8:	4543      	cmp	r3, r8
 80082fa:	f77f af79 	ble.w	80081f0 <_printf_float+0x24c>
 80082fe:	2301      	movs	r3, #1
 8008300:	4652      	mov	r2, sl
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f aeaa 	beq.w	8008062 <_printf_float+0xbe>
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	e7ec      	b.n	80082ee <_printf_float+0x34a>
 8008314:	4613      	mov	r3, r2
 8008316:	4631      	mov	r1, r6
 8008318:	4642      	mov	r2, r8
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	d1c0      	bne.n	80082a4 <_printf_float+0x300>
 8008322:	e69e      	b.n	8008062 <_printf_float+0xbe>
 8008324:	2301      	movs	r3, #1
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	9205      	str	r2, [sp, #20]
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	f43f ae97 	beq.w	8008062 <_printf_float+0xbe>
 8008334:	9a05      	ldr	r2, [sp, #20]
 8008336:	f10b 0b01 	add.w	fp, fp, #1
 800833a:	e7b9      	b.n	80082b0 <_printf_float+0x30c>
 800833c:	ee18 3a10 	vmov	r3, s16
 8008340:	4652      	mov	r2, sl
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	d1be      	bne.n	80082ca <_printf_float+0x326>
 800834c:	e689      	b.n	8008062 <_printf_float+0xbe>
 800834e:	9a05      	ldr	r2, [sp, #20]
 8008350:	464b      	mov	r3, r9
 8008352:	4442      	add	r2, r8
 8008354:	4631      	mov	r1, r6
 8008356:	4628      	mov	r0, r5
 8008358:	47b8      	blx	r7
 800835a:	3001      	adds	r0, #1
 800835c:	d1c1      	bne.n	80082e2 <_printf_float+0x33e>
 800835e:	e680      	b.n	8008062 <_printf_float+0xbe>
 8008360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008362:	2a01      	cmp	r2, #1
 8008364:	dc01      	bgt.n	800836a <_printf_float+0x3c6>
 8008366:	07db      	lsls	r3, r3, #31
 8008368:	d53a      	bpl.n	80083e0 <_printf_float+0x43c>
 800836a:	2301      	movs	r3, #1
 800836c:	4642      	mov	r2, r8
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	f43f ae74 	beq.w	8008062 <_printf_float+0xbe>
 800837a:	ee18 3a10 	vmov	r3, s16
 800837e:	4652      	mov	r2, sl
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f ae6b 	beq.w	8008062 <_printf_float+0xbe>
 800838c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008398:	f7f8 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800839c:	b9d8      	cbnz	r0, 80083d6 <_printf_float+0x432>
 800839e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083a2:	f108 0201 	add.w	r2, r8, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d10e      	bne.n	80083ce <_printf_float+0x42a>
 80083b0:	e657      	b.n	8008062 <_printf_float+0xbe>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4631      	mov	r1, r6
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b8      	blx	r7
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f ae50 	beq.w	8008062 <_printf_float+0xbe>
 80083c2:	f108 0801 	add.w	r8, r8, #1
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	3b01      	subs	r3, #1
 80083ca:	4543      	cmp	r3, r8
 80083cc:	dcf1      	bgt.n	80083b2 <_printf_float+0x40e>
 80083ce:	464b      	mov	r3, r9
 80083d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083d4:	e6da      	b.n	800818c <_printf_float+0x1e8>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f104 0a1a 	add.w	sl, r4, #26
 80083de:	e7f2      	b.n	80083c6 <_printf_float+0x422>
 80083e0:	2301      	movs	r3, #1
 80083e2:	4642      	mov	r2, r8
 80083e4:	e7df      	b.n	80083a6 <_printf_float+0x402>
 80083e6:	2301      	movs	r3, #1
 80083e8:	464a      	mov	r2, r9
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae36 	beq.w	8008062 <_printf_float+0xbe>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083fe:	1a5b      	subs	r3, r3, r1
 8008400:	4543      	cmp	r3, r8
 8008402:	dcf0      	bgt.n	80083e6 <_printf_float+0x442>
 8008404:	e6f8      	b.n	80081f8 <_printf_float+0x254>
 8008406:	f04f 0800 	mov.w	r8, #0
 800840a:	f104 0919 	add.w	r9, r4, #25
 800840e:	e7f4      	b.n	80083fa <_printf_float+0x456>

08008410 <_printf_common>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	4616      	mov	r6, r2
 8008416:	4699      	mov	r9, r3
 8008418:	688a      	ldr	r2, [r1, #8]
 800841a:	690b      	ldr	r3, [r1, #16]
 800841c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008420:	4293      	cmp	r3, r2
 8008422:	bfb8      	it	lt
 8008424:	4613      	movlt	r3, r2
 8008426:	6033      	str	r3, [r6, #0]
 8008428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800842c:	4607      	mov	r7, r0
 800842e:	460c      	mov	r4, r1
 8008430:	b10a      	cbz	r2, 8008436 <_printf_common+0x26>
 8008432:	3301      	adds	r3, #1
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	0699      	lsls	r1, r3, #26
 800843a:	bf42      	ittt	mi
 800843c:	6833      	ldrmi	r3, [r6, #0]
 800843e:	3302      	addmi	r3, #2
 8008440:	6033      	strmi	r3, [r6, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	f015 0506 	ands.w	r5, r5, #6
 8008448:	d106      	bne.n	8008458 <_printf_common+0x48>
 800844a:	f104 0a19 	add.w	sl, r4, #25
 800844e:	68e3      	ldr	r3, [r4, #12]
 8008450:	6832      	ldr	r2, [r6, #0]
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	42ab      	cmp	r3, r5
 8008456:	dc26      	bgt.n	80084a6 <_printf_common+0x96>
 8008458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800845c:	1e13      	subs	r3, r2, #0
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	bf18      	it	ne
 8008462:	2301      	movne	r3, #1
 8008464:	0692      	lsls	r2, r2, #26
 8008466:	d42b      	bmi.n	80084c0 <_printf_common+0xb0>
 8008468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800846c:	4649      	mov	r1, r9
 800846e:	4638      	mov	r0, r7
 8008470:	47c0      	blx	r8
 8008472:	3001      	adds	r0, #1
 8008474:	d01e      	beq.n	80084b4 <_printf_common+0xa4>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	6922      	ldr	r2, [r4, #16]
 800847a:	f003 0306 	and.w	r3, r3, #6
 800847e:	2b04      	cmp	r3, #4
 8008480:	bf02      	ittt	eq
 8008482:	68e5      	ldreq	r5, [r4, #12]
 8008484:	6833      	ldreq	r3, [r6, #0]
 8008486:	1aed      	subeq	r5, r5, r3
 8008488:	68a3      	ldr	r3, [r4, #8]
 800848a:	bf0c      	ite	eq
 800848c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008490:	2500      	movne	r5, #0
 8008492:	4293      	cmp	r3, r2
 8008494:	bfc4      	itt	gt
 8008496:	1a9b      	subgt	r3, r3, r2
 8008498:	18ed      	addgt	r5, r5, r3
 800849a:	2600      	movs	r6, #0
 800849c:	341a      	adds	r4, #26
 800849e:	42b5      	cmp	r5, r6
 80084a0:	d11a      	bne.n	80084d8 <_printf_common+0xc8>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e008      	b.n	80084b8 <_printf_common+0xa8>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4652      	mov	r2, sl
 80084aa:	4649      	mov	r1, r9
 80084ac:	4638      	mov	r0, r7
 80084ae:	47c0      	blx	r8
 80084b0:	3001      	adds	r0, #1
 80084b2:	d103      	bne.n	80084bc <_printf_common+0xac>
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084bc:	3501      	adds	r5, #1
 80084be:	e7c6      	b.n	800844e <_printf_common+0x3e>
 80084c0:	18e1      	adds	r1, r4, r3
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	2030      	movs	r0, #48	; 0x30
 80084c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ca:	4422      	add	r2, r4
 80084cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d4:	3302      	adds	r3, #2
 80084d6:	e7c7      	b.n	8008468 <_printf_common+0x58>
 80084d8:	2301      	movs	r3, #1
 80084da:	4622      	mov	r2, r4
 80084dc:	4649      	mov	r1, r9
 80084de:	4638      	mov	r0, r7
 80084e0:	47c0      	blx	r8
 80084e2:	3001      	adds	r0, #1
 80084e4:	d0e6      	beq.n	80084b4 <_printf_common+0xa4>
 80084e6:	3601      	adds	r6, #1
 80084e8:	e7d9      	b.n	800849e <_printf_common+0x8e>
	...

080084ec <_printf_i>:
 80084ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	7e0f      	ldrb	r7, [r1, #24]
 80084f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084f4:	2f78      	cmp	r7, #120	; 0x78
 80084f6:	4691      	mov	r9, r2
 80084f8:	4680      	mov	r8, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	469a      	mov	sl, r3
 80084fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008502:	d807      	bhi.n	8008514 <_printf_i+0x28>
 8008504:	2f62      	cmp	r7, #98	; 0x62
 8008506:	d80a      	bhi.n	800851e <_printf_i+0x32>
 8008508:	2f00      	cmp	r7, #0
 800850a:	f000 80d4 	beq.w	80086b6 <_printf_i+0x1ca>
 800850e:	2f58      	cmp	r7, #88	; 0x58
 8008510:	f000 80c0 	beq.w	8008694 <_printf_i+0x1a8>
 8008514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800851c:	e03a      	b.n	8008594 <_printf_i+0xa8>
 800851e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008522:	2b15      	cmp	r3, #21
 8008524:	d8f6      	bhi.n	8008514 <_printf_i+0x28>
 8008526:	a101      	add	r1, pc, #4	; (adr r1, 800852c <_printf_i+0x40>)
 8008528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800852c:	08008585 	.word	0x08008585
 8008530:	08008599 	.word	0x08008599
 8008534:	08008515 	.word	0x08008515
 8008538:	08008515 	.word	0x08008515
 800853c:	08008515 	.word	0x08008515
 8008540:	08008515 	.word	0x08008515
 8008544:	08008599 	.word	0x08008599
 8008548:	08008515 	.word	0x08008515
 800854c:	08008515 	.word	0x08008515
 8008550:	08008515 	.word	0x08008515
 8008554:	08008515 	.word	0x08008515
 8008558:	0800869d 	.word	0x0800869d
 800855c:	080085c5 	.word	0x080085c5
 8008560:	08008657 	.word	0x08008657
 8008564:	08008515 	.word	0x08008515
 8008568:	08008515 	.word	0x08008515
 800856c:	080086bf 	.word	0x080086bf
 8008570:	08008515 	.word	0x08008515
 8008574:	080085c5 	.word	0x080085c5
 8008578:	08008515 	.word	0x08008515
 800857c:	08008515 	.word	0x08008515
 8008580:	0800865f 	.word	0x0800865f
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	602a      	str	r2, [r5, #0]
 800858c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008594:	2301      	movs	r3, #1
 8008596:	e09f      	b.n	80086d8 <_printf_i+0x1ec>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	0607      	lsls	r7, r0, #24
 800859e:	f103 0104 	add.w	r1, r3, #4
 80085a2:	6029      	str	r1, [r5, #0]
 80085a4:	d501      	bpl.n	80085aa <_printf_i+0xbe>
 80085a6:	681e      	ldr	r6, [r3, #0]
 80085a8:	e003      	b.n	80085b2 <_printf_i+0xc6>
 80085aa:	0646      	lsls	r6, r0, #25
 80085ac:	d5fb      	bpl.n	80085a6 <_printf_i+0xba>
 80085ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	da03      	bge.n	80085be <_printf_i+0xd2>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	4276      	negs	r6, r6
 80085ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085be:	485a      	ldr	r0, [pc, #360]	; (8008728 <_printf_i+0x23c>)
 80085c0:	230a      	movs	r3, #10
 80085c2:	e012      	b.n	80085ea <_printf_i+0xfe>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	6820      	ldr	r0, [r4, #0]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	6029      	str	r1, [r5, #0]
 80085cc:	0605      	lsls	r5, r0, #24
 80085ce:	d501      	bpl.n	80085d4 <_printf_i+0xe8>
 80085d0:	681e      	ldr	r6, [r3, #0]
 80085d2:	e002      	b.n	80085da <_printf_i+0xee>
 80085d4:	0641      	lsls	r1, r0, #25
 80085d6:	d5fb      	bpl.n	80085d0 <_printf_i+0xe4>
 80085d8:	881e      	ldrh	r6, [r3, #0]
 80085da:	4853      	ldr	r0, [pc, #332]	; (8008728 <_printf_i+0x23c>)
 80085dc:	2f6f      	cmp	r7, #111	; 0x6f
 80085de:	bf0c      	ite	eq
 80085e0:	2308      	moveq	r3, #8
 80085e2:	230a      	movne	r3, #10
 80085e4:	2100      	movs	r1, #0
 80085e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ea:	6865      	ldr	r5, [r4, #4]
 80085ec:	60a5      	str	r5, [r4, #8]
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	bfa2      	ittt	ge
 80085f2:	6821      	ldrge	r1, [r4, #0]
 80085f4:	f021 0104 	bicge.w	r1, r1, #4
 80085f8:	6021      	strge	r1, [r4, #0]
 80085fa:	b90e      	cbnz	r6, 8008600 <_printf_i+0x114>
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	d04b      	beq.n	8008698 <_printf_i+0x1ac>
 8008600:	4615      	mov	r5, r2
 8008602:	fbb6 f1f3 	udiv	r1, r6, r3
 8008606:	fb03 6711 	mls	r7, r3, r1, r6
 800860a:	5dc7      	ldrb	r7, [r0, r7]
 800860c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008610:	4637      	mov	r7, r6
 8008612:	42bb      	cmp	r3, r7
 8008614:	460e      	mov	r6, r1
 8008616:	d9f4      	bls.n	8008602 <_printf_i+0x116>
 8008618:	2b08      	cmp	r3, #8
 800861a:	d10b      	bne.n	8008634 <_printf_i+0x148>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07de      	lsls	r6, r3, #31
 8008620:	d508      	bpl.n	8008634 <_printf_i+0x148>
 8008622:	6923      	ldr	r3, [r4, #16]
 8008624:	6861      	ldr	r1, [r4, #4]
 8008626:	4299      	cmp	r1, r3
 8008628:	bfde      	ittt	le
 800862a:	2330      	movle	r3, #48	; 0x30
 800862c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008634:	1b52      	subs	r2, r2, r5
 8008636:	6122      	str	r2, [r4, #16]
 8008638:	f8cd a000 	str.w	sl, [sp]
 800863c:	464b      	mov	r3, r9
 800863e:	aa03      	add	r2, sp, #12
 8008640:	4621      	mov	r1, r4
 8008642:	4640      	mov	r0, r8
 8008644:	f7ff fee4 	bl	8008410 <_printf_common>
 8008648:	3001      	adds	r0, #1
 800864a:	d14a      	bne.n	80086e2 <_printf_i+0x1f6>
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	b004      	add	sp, #16
 8008652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f043 0320 	orr.w	r3, r3, #32
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	4833      	ldr	r0, [pc, #204]	; (800872c <_printf_i+0x240>)
 8008660:	2778      	movs	r7, #120	; 0x78
 8008662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	6829      	ldr	r1, [r5, #0]
 800866a:	061f      	lsls	r7, r3, #24
 800866c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008670:	d402      	bmi.n	8008678 <_printf_i+0x18c>
 8008672:	065f      	lsls	r7, r3, #25
 8008674:	bf48      	it	mi
 8008676:	b2b6      	uxthmi	r6, r6
 8008678:	07df      	lsls	r7, r3, #31
 800867a:	bf48      	it	mi
 800867c:	f043 0320 	orrmi.w	r3, r3, #32
 8008680:	6029      	str	r1, [r5, #0]
 8008682:	bf48      	it	mi
 8008684:	6023      	strmi	r3, [r4, #0]
 8008686:	b91e      	cbnz	r6, 8008690 <_printf_i+0x1a4>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	f023 0320 	bic.w	r3, r3, #32
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	2310      	movs	r3, #16
 8008692:	e7a7      	b.n	80085e4 <_printf_i+0xf8>
 8008694:	4824      	ldr	r0, [pc, #144]	; (8008728 <_printf_i+0x23c>)
 8008696:	e7e4      	b.n	8008662 <_printf_i+0x176>
 8008698:	4615      	mov	r5, r2
 800869a:	e7bd      	b.n	8008618 <_printf_i+0x12c>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	6826      	ldr	r6, [r4, #0]
 80086a0:	6961      	ldr	r1, [r4, #20]
 80086a2:	1d18      	adds	r0, r3, #4
 80086a4:	6028      	str	r0, [r5, #0]
 80086a6:	0635      	lsls	r5, r6, #24
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	d501      	bpl.n	80086b0 <_printf_i+0x1c4>
 80086ac:	6019      	str	r1, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <_printf_i+0x1ca>
 80086b0:	0670      	lsls	r0, r6, #25
 80086b2:	d5fb      	bpl.n	80086ac <_printf_i+0x1c0>
 80086b4:	8019      	strh	r1, [r3, #0]
 80086b6:	2300      	movs	r3, #0
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	4615      	mov	r5, r2
 80086bc:	e7bc      	b.n	8008638 <_printf_i+0x14c>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	1d1a      	adds	r2, r3, #4
 80086c2:	602a      	str	r2, [r5, #0]
 80086c4:	681d      	ldr	r5, [r3, #0]
 80086c6:	6862      	ldr	r2, [r4, #4]
 80086c8:	2100      	movs	r1, #0
 80086ca:	4628      	mov	r0, r5
 80086cc:	f7f7 fd88 	bl	80001e0 <memchr>
 80086d0:	b108      	cbz	r0, 80086d6 <_printf_i+0x1ea>
 80086d2:	1b40      	subs	r0, r0, r5
 80086d4:	6060      	str	r0, [r4, #4]
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	2300      	movs	r3, #0
 80086dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e0:	e7aa      	b.n	8008638 <_printf_i+0x14c>
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	462a      	mov	r2, r5
 80086e6:	4649      	mov	r1, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	47d0      	blx	sl
 80086ec:	3001      	adds	r0, #1
 80086ee:	d0ad      	beq.n	800864c <_printf_i+0x160>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	079b      	lsls	r3, r3, #30
 80086f4:	d413      	bmi.n	800871e <_printf_i+0x232>
 80086f6:	68e0      	ldr	r0, [r4, #12]
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	4298      	cmp	r0, r3
 80086fc:	bfb8      	it	lt
 80086fe:	4618      	movlt	r0, r3
 8008700:	e7a6      	b.n	8008650 <_printf_i+0x164>
 8008702:	2301      	movs	r3, #1
 8008704:	4632      	mov	r2, r6
 8008706:	4649      	mov	r1, r9
 8008708:	4640      	mov	r0, r8
 800870a:	47d0      	blx	sl
 800870c:	3001      	adds	r0, #1
 800870e:	d09d      	beq.n	800864c <_printf_i+0x160>
 8008710:	3501      	adds	r5, #1
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	9903      	ldr	r1, [sp, #12]
 8008716:	1a5b      	subs	r3, r3, r1
 8008718:	42ab      	cmp	r3, r5
 800871a:	dcf2      	bgt.n	8008702 <_printf_i+0x216>
 800871c:	e7eb      	b.n	80086f6 <_printf_i+0x20a>
 800871e:	2500      	movs	r5, #0
 8008720:	f104 0619 	add.w	r6, r4, #25
 8008724:	e7f5      	b.n	8008712 <_printf_i+0x226>
 8008726:	bf00      	nop
 8008728:	0800abda 	.word	0x0800abda
 800872c:	0800abeb 	.word	0x0800abeb

08008730 <std>:
 8008730:	2300      	movs	r3, #0
 8008732:	b510      	push	{r4, lr}
 8008734:	4604      	mov	r4, r0
 8008736:	e9c0 3300 	strd	r3, r3, [r0]
 800873a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800873e:	6083      	str	r3, [r0, #8]
 8008740:	8181      	strh	r1, [r0, #12]
 8008742:	6643      	str	r3, [r0, #100]	; 0x64
 8008744:	81c2      	strh	r2, [r0, #14]
 8008746:	6183      	str	r3, [r0, #24]
 8008748:	4619      	mov	r1, r3
 800874a:	2208      	movs	r2, #8
 800874c:	305c      	adds	r0, #92	; 0x5c
 800874e:	f000 f914 	bl	800897a <memset>
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <std+0x58>)
 8008754:	6263      	str	r3, [r4, #36]	; 0x24
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <std+0x5c>)
 8008758:	62a3      	str	r3, [r4, #40]	; 0x28
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <std+0x60>)
 800875c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800875e:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <std+0x64>)
 8008760:	6323      	str	r3, [r4, #48]	; 0x30
 8008762:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <std+0x68>)
 8008764:	6224      	str	r4, [r4, #32]
 8008766:	429c      	cmp	r4, r3
 8008768:	d006      	beq.n	8008778 <std+0x48>
 800876a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800876e:	4294      	cmp	r4, r2
 8008770:	d002      	beq.n	8008778 <std+0x48>
 8008772:	33d0      	adds	r3, #208	; 0xd0
 8008774:	429c      	cmp	r4, r3
 8008776:	d105      	bne.n	8008784 <std+0x54>
 8008778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800877c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008780:	f000 b978 	b.w	8008a74 <__retarget_lock_init_recursive>
 8008784:	bd10      	pop	{r4, pc}
 8008786:	bf00      	nop
 8008788:	080088f5 	.word	0x080088f5
 800878c:	08008917 	.word	0x08008917
 8008790:	0800894f 	.word	0x0800894f
 8008794:	08008973 	.word	0x08008973
 8008798:	20000490 	.word	0x20000490

0800879c <stdio_exit_handler>:
 800879c:	4a02      	ldr	r2, [pc, #8]	; (80087a8 <stdio_exit_handler+0xc>)
 800879e:	4903      	ldr	r1, [pc, #12]	; (80087ac <stdio_exit_handler+0x10>)
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <stdio_exit_handler+0x14>)
 80087a2:	f000 b869 	b.w	8008878 <_fwalk_sglue>
 80087a6:	bf00      	nop
 80087a8:	200000c4 	.word	0x200000c4
 80087ac:	0800a429 	.word	0x0800a429
 80087b0:	200000d0 	.word	0x200000d0

080087b4 <cleanup_stdio>:
 80087b4:	6841      	ldr	r1, [r0, #4]
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <cleanup_stdio+0x34>)
 80087b8:	4299      	cmp	r1, r3
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	d001      	beq.n	80087c4 <cleanup_stdio+0x10>
 80087c0:	f001 fe32 	bl	800a428 <_fflush_r>
 80087c4:	68a1      	ldr	r1, [r4, #8]
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <cleanup_stdio+0x38>)
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <cleanup_stdio+0x1e>
 80087cc:	4620      	mov	r0, r4
 80087ce:	f001 fe2b 	bl	800a428 <_fflush_r>
 80087d2:	68e1      	ldr	r1, [r4, #12]
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <cleanup_stdio+0x3c>)
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d004      	beq.n	80087e4 <cleanup_stdio+0x30>
 80087da:	4620      	mov	r0, r4
 80087dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e0:	f001 be22 	b.w	800a428 <_fflush_r>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	20000490 	.word	0x20000490
 80087ec:	200004f8 	.word	0x200004f8
 80087f0:	20000560 	.word	0x20000560

080087f4 <global_stdio_init.part.0>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <global_stdio_init.part.0+0x30>)
 80087f8:	4c0b      	ldr	r4, [pc, #44]	; (8008828 <global_stdio_init.part.0+0x34>)
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <global_stdio_init.part.0+0x38>)
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	4620      	mov	r0, r4
 8008800:	2200      	movs	r2, #0
 8008802:	2104      	movs	r1, #4
 8008804:	f7ff ff94 	bl	8008730 <std>
 8008808:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800880c:	2201      	movs	r2, #1
 800880e:	2109      	movs	r1, #9
 8008810:	f7ff ff8e 	bl	8008730 <std>
 8008814:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008818:	2202      	movs	r2, #2
 800881a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881e:	2112      	movs	r1, #18
 8008820:	f7ff bf86 	b.w	8008730 <std>
 8008824:	200005c8 	.word	0x200005c8
 8008828:	20000490 	.word	0x20000490
 800882c:	0800879d 	.word	0x0800879d

08008830 <__sfp_lock_acquire>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__sfp_lock_acquire+0x8>)
 8008832:	f000 b920 	b.w	8008a76 <__retarget_lock_acquire_recursive>
 8008836:	bf00      	nop
 8008838:	200005d1 	.word	0x200005d1

0800883c <__sfp_lock_release>:
 800883c:	4801      	ldr	r0, [pc, #4]	; (8008844 <__sfp_lock_release+0x8>)
 800883e:	f000 b91b 	b.w	8008a78 <__retarget_lock_release_recursive>
 8008842:	bf00      	nop
 8008844:	200005d1 	.word	0x200005d1

08008848 <__sinit>:
 8008848:	b510      	push	{r4, lr}
 800884a:	4604      	mov	r4, r0
 800884c:	f7ff fff0 	bl	8008830 <__sfp_lock_acquire>
 8008850:	6a23      	ldr	r3, [r4, #32]
 8008852:	b11b      	cbz	r3, 800885c <__sinit+0x14>
 8008854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008858:	f7ff bff0 	b.w	800883c <__sfp_lock_release>
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <__sinit+0x28>)
 800885e:	6223      	str	r3, [r4, #32]
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <__sinit+0x2c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f5      	bne.n	8008854 <__sinit+0xc>
 8008868:	f7ff ffc4 	bl	80087f4 <global_stdio_init.part.0>
 800886c:	e7f2      	b.n	8008854 <__sinit+0xc>
 800886e:	bf00      	nop
 8008870:	080087b5 	.word	0x080087b5
 8008874:	200005c8 	.word	0x200005c8

08008878 <_fwalk_sglue>:
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	4607      	mov	r7, r0
 800887e:	4688      	mov	r8, r1
 8008880:	4614      	mov	r4, r2
 8008882:	2600      	movs	r6, #0
 8008884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008888:	f1b9 0901 	subs.w	r9, r9, #1
 800888c:	d505      	bpl.n	800889a <_fwalk_sglue+0x22>
 800888e:	6824      	ldr	r4, [r4, #0]
 8008890:	2c00      	cmp	r4, #0
 8008892:	d1f7      	bne.n	8008884 <_fwalk_sglue+0xc>
 8008894:	4630      	mov	r0, r6
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d907      	bls.n	80088b0 <_fwalk_sglue+0x38>
 80088a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a4:	3301      	adds	r3, #1
 80088a6:	d003      	beq.n	80088b0 <_fwalk_sglue+0x38>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4638      	mov	r0, r7
 80088ac:	47c0      	blx	r8
 80088ae:	4306      	orrs	r6, r0
 80088b0:	3568      	adds	r5, #104	; 0x68
 80088b2:	e7e9      	b.n	8008888 <_fwalk_sglue+0x10>

080088b4 <siprintf>:
 80088b4:	b40e      	push	{r1, r2, r3}
 80088b6:	b500      	push	{lr}
 80088b8:	b09c      	sub	sp, #112	; 0x70
 80088ba:	ab1d      	add	r3, sp, #116	; 0x74
 80088bc:	9002      	str	r0, [sp, #8]
 80088be:	9006      	str	r0, [sp, #24]
 80088c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088c4:	4809      	ldr	r0, [pc, #36]	; (80088ec <siprintf+0x38>)
 80088c6:	9107      	str	r1, [sp, #28]
 80088c8:	9104      	str	r1, [sp, #16]
 80088ca:	4909      	ldr	r1, [pc, #36]	; (80088f0 <siprintf+0x3c>)
 80088cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d0:	9105      	str	r1, [sp, #20]
 80088d2:	6800      	ldr	r0, [r0, #0]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	a902      	add	r1, sp, #8
 80088d8:	f001 fc22 	bl	800a120 <_svfiprintf_r>
 80088dc:	9b02      	ldr	r3, [sp, #8]
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	b01c      	add	sp, #112	; 0x70
 80088e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e8:	b003      	add	sp, #12
 80088ea:	4770      	bx	lr
 80088ec:	2000011c 	.word	0x2000011c
 80088f0:	ffff0208 	.word	0xffff0208

080088f4 <__sread>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	460c      	mov	r4, r1
 80088f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fc:	f000 f86c 	bl	80089d8 <_read_r>
 8008900:	2800      	cmp	r0, #0
 8008902:	bfab      	itete	ge
 8008904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008906:	89a3      	ldrhlt	r3, [r4, #12]
 8008908:	181b      	addge	r3, r3, r0
 800890a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800890e:	bfac      	ite	ge
 8008910:	6563      	strge	r3, [r4, #84]	; 0x54
 8008912:	81a3      	strhlt	r3, [r4, #12]
 8008914:	bd10      	pop	{r4, pc}

08008916 <__swrite>:
 8008916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891a:	461f      	mov	r7, r3
 800891c:	898b      	ldrh	r3, [r1, #12]
 800891e:	05db      	lsls	r3, r3, #23
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	4616      	mov	r6, r2
 8008926:	d505      	bpl.n	8008934 <__swrite+0x1e>
 8008928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892c:	2302      	movs	r3, #2
 800892e:	2200      	movs	r2, #0
 8008930:	f000 f840 	bl	80089b4 <_lseek_r>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800893a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	4628      	mov	r0, r5
 8008946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	f000 b857 	b.w	80089fc <_write_r>

0800894e <__sseek>:
 800894e:	b510      	push	{r4, lr}
 8008950:	460c      	mov	r4, r1
 8008952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008956:	f000 f82d 	bl	80089b4 <_lseek_r>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	bf15      	itete	ne
 8008960:	6560      	strne	r0, [r4, #84]	; 0x54
 8008962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800896a:	81a3      	strheq	r3, [r4, #12]
 800896c:	bf18      	it	ne
 800896e:	81a3      	strhne	r3, [r4, #12]
 8008970:	bd10      	pop	{r4, pc}

08008972 <__sclose>:
 8008972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008976:	f000 b80d 	b.w	8008994 <_close_r>

0800897a <memset>:
 800897a:	4402      	add	r2, r0
 800897c:	4603      	mov	r3, r0
 800897e:	4293      	cmp	r3, r2
 8008980:	d100      	bne.n	8008984 <memset+0xa>
 8008982:	4770      	bx	lr
 8008984:	f803 1b01 	strb.w	r1, [r3], #1
 8008988:	e7f9      	b.n	800897e <memset+0x4>
	...

0800898c <_localeconv_r>:
 800898c:	4800      	ldr	r0, [pc, #0]	; (8008990 <_localeconv_r+0x4>)
 800898e:	4770      	bx	lr
 8008990:	20000210 	.word	0x20000210

08008994 <_close_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d06      	ldr	r5, [pc, #24]	; (80089b0 <_close_r+0x1c>)
 8008998:	2300      	movs	r3, #0
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	602b      	str	r3, [r5, #0]
 80089a0:	f7f8 ff17 	bl	80017d2 <_close>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_close_r+0x1a>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_close_r+0x1a>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	200005cc 	.word	0x200005cc

080089b4 <_lseek_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_lseek_r+0x20>)
 80089b8:	4604      	mov	r4, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7f8 ff2c 	bl	8001820 <_lseek>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_lseek_r+0x1e>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_lseek_r+0x1e>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200005cc 	.word	0x200005cc

080089d8 <_read_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	; (80089f8 <_read_r+0x20>)
 80089dc:	4604      	mov	r4, r0
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7f8 feba 	bl	8001760 <_read>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_read_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_read_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200005cc 	.word	0x200005cc

080089fc <_write_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	; (8008a1c <_write_r+0x20>)
 8008a00:	4604      	mov	r4, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7f8 fec5 	bl	800179a <_write>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_write_r+0x1e>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_write_r+0x1e>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200005cc 	.word	0x200005cc

08008a20 <__errno>:
 8008a20:	4b01      	ldr	r3, [pc, #4]	; (8008a28 <__errno+0x8>)
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	2000011c 	.word	0x2000011c

08008a2c <__libc_init_array>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	4d0d      	ldr	r5, [pc, #52]	; (8008a64 <__libc_init_array+0x38>)
 8008a30:	4c0d      	ldr	r4, [pc, #52]	; (8008a68 <__libc_init_array+0x3c>)
 8008a32:	1b64      	subs	r4, r4, r5
 8008a34:	10a4      	asrs	r4, r4, #2
 8008a36:	2600      	movs	r6, #0
 8008a38:	42a6      	cmp	r6, r4
 8008a3a:	d109      	bne.n	8008a50 <__libc_init_array+0x24>
 8008a3c:	4d0b      	ldr	r5, [pc, #44]	; (8008a6c <__libc_init_array+0x40>)
 8008a3e:	4c0c      	ldr	r4, [pc, #48]	; (8008a70 <__libc_init_array+0x44>)
 8008a40:	f002 f896 	bl	800ab70 <_init>
 8008a44:	1b64      	subs	r4, r4, r5
 8008a46:	10a4      	asrs	r4, r4, #2
 8008a48:	2600      	movs	r6, #0
 8008a4a:	42a6      	cmp	r6, r4
 8008a4c:	d105      	bne.n	8008a5a <__libc_init_array+0x2e>
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a54:	4798      	blx	r3
 8008a56:	3601      	adds	r6, #1
 8008a58:	e7ee      	b.n	8008a38 <__libc_init_array+0xc>
 8008a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5e:	4798      	blx	r3
 8008a60:	3601      	adds	r6, #1
 8008a62:	e7f2      	b.n	8008a4a <__libc_init_array+0x1e>
 8008a64:	0800af44 	.word	0x0800af44
 8008a68:	0800af44 	.word	0x0800af44
 8008a6c:	0800af44 	.word	0x0800af44
 8008a70:	0800af48 	.word	0x0800af48

08008a74 <__retarget_lock_init_recursive>:
 8008a74:	4770      	bx	lr

08008a76 <__retarget_lock_acquire_recursive>:
 8008a76:	4770      	bx	lr

08008a78 <__retarget_lock_release_recursive>:
 8008a78:	4770      	bx	lr

08008a7a <quorem>:
 8008a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7e:	6903      	ldr	r3, [r0, #16]
 8008a80:	690c      	ldr	r4, [r1, #16]
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	4607      	mov	r7, r0
 8008a86:	db7e      	blt.n	8008b86 <quorem+0x10c>
 8008a88:	3c01      	subs	r4, #1
 8008a8a:	f101 0814 	add.w	r8, r1, #20
 8008a8e:	f100 0514 	add.w	r5, r0, #20
 8008a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ab0:	d331      	bcc.n	8008b16 <quorem+0x9c>
 8008ab2:	f04f 0e00 	mov.w	lr, #0
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	46ac      	mov	ip, r5
 8008aba:	46f2      	mov	sl, lr
 8008abc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ac0:	b293      	uxth	r3, r2
 8008ac2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aca:	0c1a      	lsrs	r2, r3, #16
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	ebaa 0303 	sub.w	r3, sl, r3
 8008ad2:	f8dc a000 	ldr.w	sl, [ip]
 8008ad6:	fa13 f38a 	uxtah	r3, r3, sl
 8008ada:	fb06 220e 	mla	r2, r6, lr, r2
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008af0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008af4:	4581      	cmp	r9, r0
 8008af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008afa:	f84c 3b04 	str.w	r3, [ip], #4
 8008afe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b02:	d2db      	bcs.n	8008abc <quorem+0x42>
 8008b04:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b08:	b92b      	cbnz	r3, 8008b16 <quorem+0x9c>
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	d32c      	bcc.n	8008b6e <quorem+0xf4>
 8008b14:	613c      	str	r4, [r7, #16]
 8008b16:	4638      	mov	r0, r7
 8008b18:	f001 f9a8 	bl	8009e6c <__mcmp>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	db22      	blt.n	8008b66 <quorem+0xec>
 8008b20:	3601      	adds	r6, #1
 8008b22:	4629      	mov	r1, r5
 8008b24:	2000      	movs	r0, #0
 8008b26:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b2a:	f8d1 c000 	ldr.w	ip, [r1]
 8008b2e:	b293      	uxth	r3, r2
 8008b30:	1ac3      	subs	r3, r0, r3
 8008b32:	0c12      	lsrs	r2, r2, #16
 8008b34:	fa13 f38c 	uxtah	r3, r3, ip
 8008b38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b46:	45c1      	cmp	r9, r8
 8008b48:	f841 3b04 	str.w	r3, [r1], #4
 8008b4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b50:	d2e9      	bcs.n	8008b26 <quorem+0xac>
 8008b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b5a:	b922      	cbnz	r2, 8008b66 <quorem+0xec>
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	d30a      	bcc.n	8008b7a <quorem+0x100>
 8008b64:	613c      	str	r4, [r7, #16]
 8008b66:	4630      	mov	r0, r6
 8008b68:	b003      	add	sp, #12
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	3b04      	subs	r3, #4
 8008b72:	2a00      	cmp	r2, #0
 8008b74:	d1ce      	bne.n	8008b14 <quorem+0x9a>
 8008b76:	3c01      	subs	r4, #1
 8008b78:	e7c9      	b.n	8008b0e <quorem+0x94>
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	3b04      	subs	r3, #4
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	d1f0      	bne.n	8008b64 <quorem+0xea>
 8008b82:	3c01      	subs	r4, #1
 8008b84:	e7eb      	b.n	8008b5e <quorem+0xe4>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e7ee      	b.n	8008b68 <quorem+0xee>
 8008b8a:	0000      	movs	r0, r0
 8008b8c:	0000      	movs	r0, r0
	...

08008b90 <_dtoa_r>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	ed2d 8b04 	vpush	{d8-d9}
 8008b98:	69c5      	ldr	r5, [r0, #28]
 8008b9a:	b093      	sub	sp, #76	; 0x4c
 8008b9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ba0:	ec57 6b10 	vmov	r6, r7, d0
 8008ba4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ba8:	9107      	str	r1, [sp, #28]
 8008baa:	4604      	mov	r4, r0
 8008bac:	920a      	str	r2, [sp, #40]	; 0x28
 8008bae:	930d      	str	r3, [sp, #52]	; 0x34
 8008bb0:	b975      	cbnz	r5, 8008bd0 <_dtoa_r+0x40>
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	f000 fe2a 	bl	800980c <malloc>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	61e0      	str	r0, [r4, #28]
 8008bbc:	b920      	cbnz	r0, 8008bc8 <_dtoa_r+0x38>
 8008bbe:	4bae      	ldr	r3, [pc, #696]	; (8008e78 <_dtoa_r+0x2e8>)
 8008bc0:	21ef      	movs	r1, #239	; 0xef
 8008bc2:	48ae      	ldr	r0, [pc, #696]	; (8008e7c <_dtoa_r+0x2ec>)
 8008bc4:	f001 fc90 	bl	800a4e8 <__assert_func>
 8008bc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bcc:	6005      	str	r5, [r0, #0]
 8008bce:	60c5      	str	r5, [r0, #12]
 8008bd0:	69e3      	ldr	r3, [r4, #28]
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	b151      	cbz	r1, 8008bec <_dtoa_r+0x5c>
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	604a      	str	r2, [r1, #4]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4093      	lsls	r3, r2
 8008bde:	608b      	str	r3, [r1, #8]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 ff07 	bl	80099f4 <_Bfree>
 8008be6:	69e3      	ldr	r3, [r4, #28]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	1e3b      	subs	r3, r7, #0
 8008bee:	bfbb      	ittet	lt
 8008bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	9303      	strlt	r3, [sp, #12]
 8008bf6:	2300      	movge	r3, #0
 8008bf8:	2201      	movlt	r2, #1
 8008bfa:	bfac      	ite	ge
 8008bfc:	f8c8 3000 	strge.w	r3, [r8]
 8008c00:	f8c8 2000 	strlt.w	r2, [r8]
 8008c04:	4b9e      	ldr	r3, [pc, #632]	; (8008e80 <_dtoa_r+0x2f0>)
 8008c06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c0a:	ea33 0308 	bics.w	r3, r3, r8
 8008c0e:	d11b      	bne.n	8008c48 <_dtoa_r+0xb8>
 8008c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c1c:	4333      	orrs	r3, r6
 8008c1e:	f000 8593 	beq.w	8009748 <_dtoa_r+0xbb8>
 8008c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c24:	b963      	cbnz	r3, 8008c40 <_dtoa_r+0xb0>
 8008c26:	4b97      	ldr	r3, [pc, #604]	; (8008e84 <_dtoa_r+0x2f4>)
 8008c28:	e027      	b.n	8008c7a <_dtoa_r+0xea>
 8008c2a:	4b97      	ldr	r3, [pc, #604]	; (8008e88 <_dtoa_r+0x2f8>)
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	9800      	ldr	r0, [sp, #0]
 8008c36:	b013      	add	sp, #76	; 0x4c
 8008c38:	ecbd 8b04 	vpop	{d8-d9}
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	4b90      	ldr	r3, [pc, #576]	; (8008e84 <_dtoa_r+0x2f4>)
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	3303      	adds	r3, #3
 8008c46:	e7f3      	b.n	8008c30 <_dtoa_r+0xa0>
 8008c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	ec51 0b17 	vmov	r0, r1, d7
 8008c52:	eeb0 8a47 	vmov.f32	s16, s14
 8008c56:	eef0 8a67 	vmov.f32	s17, s15
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f7f7 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c60:	4681      	mov	r9, r0
 8008c62:	b160      	cbz	r0, 8008c7e <_dtoa_r+0xee>
 8008c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c66:	2301      	movs	r3, #1
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8568 	beq.w	8009742 <_dtoa_r+0xbb2>
 8008c72:	4b86      	ldr	r3, [pc, #536]	; (8008e8c <_dtoa_r+0x2fc>)
 8008c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	e7da      	b.n	8008c34 <_dtoa_r+0xa4>
 8008c7e:	aa10      	add	r2, sp, #64	; 0x40
 8008c80:	a911      	add	r1, sp, #68	; 0x44
 8008c82:	4620      	mov	r0, r4
 8008c84:	eeb0 0a48 	vmov.f32	s0, s16
 8008c88:	eef0 0a68 	vmov.f32	s1, s17
 8008c8c:	f001 f994 	bl	8009fb8 <__d2b>
 8008c90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c94:	4682      	mov	sl, r0
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	d07f      	beq.n	8008d9a <_dtoa_r+0x20a>
 8008c9a:	ee18 3a90 	vmov	r3, s17
 8008c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ca2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ca6:	ec51 0b18 	vmov	r0, r1, d8
 8008caa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008cae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	2200      	movs	r2, #0
 8008cba:	4b75      	ldr	r3, [pc, #468]	; (8008e90 <_dtoa_r+0x300>)
 8008cbc:	f7f7 faec 	bl	8000298 <__aeabi_dsub>
 8008cc0:	a367      	add	r3, pc, #412	; (adr r3, 8008e60 <_dtoa_r+0x2d0>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fc9f 	bl	8000608 <__aeabi_dmul>
 8008cca:	a367      	add	r3, pc, #412	; (adr r3, 8008e68 <_dtoa_r+0x2d8>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fae4 	bl	800029c <__adddf3>
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	460f      	mov	r7, r1
 8008cda:	f7f7 fc2b 	bl	8000534 <__aeabi_i2d>
 8008cde:	a364      	add	r3, pc, #400	; (adr r3, 8008e70 <_dtoa_r+0x2e0>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 fad4 	bl	800029c <__adddf3>
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	f7f7 ff36 	bl	8000b68 <__aeabi_d2iz>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4683      	mov	fp, r0
 8008d00:	2300      	movs	r3, #0
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	f7f7 fef1 	bl	8000aec <__aeabi_dcmplt>
 8008d0a:	b148      	cbz	r0, 8008d20 <_dtoa_r+0x190>
 8008d0c:	4658      	mov	r0, fp
 8008d0e:	f7f7 fc11 	bl	8000534 <__aeabi_i2d>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	f7f7 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1a:	b908      	cbnz	r0, 8008d20 <_dtoa_r+0x190>
 8008d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d20:	f1bb 0f16 	cmp.w	fp, #22
 8008d24:	d857      	bhi.n	8008dd6 <_dtoa_r+0x246>
 8008d26:	4b5b      	ldr	r3, [pc, #364]	; (8008e94 <_dtoa_r+0x304>)
 8008d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	ec51 0b18 	vmov	r0, r1, d8
 8008d34:	f7f7 feda 	bl	8000aec <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d04e      	beq.n	8008dda <_dtoa_r+0x24a>
 8008d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d40:	2300      	movs	r3, #0
 8008d42:	930c      	str	r3, [sp, #48]	; 0x30
 8008d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d46:	1b5b      	subs	r3, r3, r5
 8008d48:	1e5a      	subs	r2, r3, #1
 8008d4a:	bf45      	ittet	mi
 8008d4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d50:	9305      	strmi	r3, [sp, #20]
 8008d52:	2300      	movpl	r3, #0
 8008d54:	2300      	movmi	r3, #0
 8008d56:	9206      	str	r2, [sp, #24]
 8008d58:	bf54      	ite	pl
 8008d5a:	9305      	strpl	r3, [sp, #20]
 8008d5c:	9306      	strmi	r3, [sp, #24]
 8008d5e:	f1bb 0f00 	cmp.w	fp, #0
 8008d62:	db3c      	blt.n	8008dde <_dtoa_r+0x24e>
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d6a:	445b      	add	r3, fp
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9308      	str	r3, [sp, #32]
 8008d72:	9b07      	ldr	r3, [sp, #28]
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d868      	bhi.n	8008e4a <_dtoa_r+0x2ba>
 8008d78:	2b05      	cmp	r3, #5
 8008d7a:	bfc4      	itt	gt
 8008d7c:	3b04      	subgt	r3, #4
 8008d7e:	9307      	strgt	r3, [sp, #28]
 8008d80:	9b07      	ldr	r3, [sp, #28]
 8008d82:	f1a3 0302 	sub.w	r3, r3, #2
 8008d86:	bfcc      	ite	gt
 8008d88:	2500      	movgt	r5, #0
 8008d8a:	2501      	movle	r5, #1
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	f200 8085 	bhi.w	8008e9c <_dtoa_r+0x30c>
 8008d92:	e8df f003 	tbb	[pc, r3]
 8008d96:	3b2e      	.short	0x3b2e
 8008d98:	5839      	.short	0x5839
 8008d9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d9e:	441d      	add	r5, r3
 8008da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	bfc1      	itttt	gt
 8008da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8008db0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008db4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008db8:	bfd6      	itet	le
 8008dba:	f1c3 0320 	rsble	r3, r3, #32
 8008dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008dc2:	fa06 f003 	lslle.w	r0, r6, r3
 8008dc6:	f7f7 fba5 	bl	8000514 <__aeabi_ui2d>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008dd0:	3d01      	subs	r5, #1
 8008dd2:	920e      	str	r2, [sp, #56]	; 0x38
 8008dd4:	e76f      	b.n	8008cb6 <_dtoa_r+0x126>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7b3      	b.n	8008d42 <_dtoa_r+0x1b2>
 8008dda:	900c      	str	r0, [sp, #48]	; 0x30
 8008ddc:	e7b2      	b.n	8008d44 <_dtoa_r+0x1b4>
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	eba3 030b 	sub.w	r3, r3, fp
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	f1cb 0300 	rsb	r3, fp, #0
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	2300      	movs	r3, #0
 8008dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008df0:	e7bf      	b.n	8008d72 <_dtoa_r+0x1e2>
 8008df2:	2300      	movs	r3, #0
 8008df4:	9309      	str	r3, [sp, #36]	; 0x24
 8008df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dc52      	bgt.n	8008ea2 <_dtoa_r+0x312>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	461a      	mov	r2, r3
 8008e04:	920a      	str	r2, [sp, #40]	; 0x28
 8008e06:	e00b      	b.n	8008e20 <_dtoa_r+0x290>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e7f3      	b.n	8008df4 <_dtoa_r+0x264>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e12:	445b      	add	r3, fp
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	3301      	adds	r3, #1
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	bfb8      	it	lt
 8008e1e:	2301      	movlt	r3, #1
 8008e20:	69e0      	ldr	r0, [r4, #28]
 8008e22:	2100      	movs	r1, #0
 8008e24:	2204      	movs	r2, #4
 8008e26:	f102 0614 	add.w	r6, r2, #20
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	d93d      	bls.n	8008eaa <_dtoa_r+0x31a>
 8008e2e:	6041      	str	r1, [r0, #4]
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fd9f 	bl	8009974 <_Balloc>
 8008e36:	9000      	str	r0, [sp, #0]
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d139      	bne.n	8008eb0 <_dtoa_r+0x320>
 8008e3c:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <_dtoa_r+0x308>)
 8008e3e:	4602      	mov	r2, r0
 8008e40:	f240 11af 	movw	r1, #431	; 0x1af
 8008e44:	e6bd      	b.n	8008bc2 <_dtoa_r+0x32>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e7e1      	b.n	8008e0e <_dtoa_r+0x27e>
 8008e4a:	2501      	movs	r5, #1
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	9509      	str	r5, [sp, #36]	; 0x24
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2312      	movs	r3, #18
 8008e5e:	e7d1      	b.n	8008e04 <_dtoa_r+0x274>
 8008e60:	636f4361 	.word	0x636f4361
 8008e64:	3fd287a7 	.word	0x3fd287a7
 8008e68:	8b60c8b3 	.word	0x8b60c8b3
 8008e6c:	3fc68a28 	.word	0x3fc68a28
 8008e70:	509f79fb 	.word	0x509f79fb
 8008e74:	3fd34413 	.word	0x3fd34413
 8008e78:	0800ac09 	.word	0x0800ac09
 8008e7c:	0800ac20 	.word	0x0800ac20
 8008e80:	7ff00000 	.word	0x7ff00000
 8008e84:	0800ac05 	.word	0x0800ac05
 8008e88:	0800abfc 	.word	0x0800abfc
 8008e8c:	0800abd9 	.word	0x0800abd9
 8008e90:	3ff80000 	.word	0x3ff80000
 8008e94:	0800ad10 	.word	0x0800ad10
 8008e98:	0800ac78 	.word	0x0800ac78
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	e7d7      	b.n	8008e52 <_dtoa_r+0x2c2>
 8008ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	e7ba      	b.n	8008e20 <_dtoa_r+0x290>
 8008eaa:	3101      	adds	r1, #1
 8008eac:	0052      	lsls	r2, r2, #1
 8008eae:	e7ba      	b.n	8008e26 <_dtoa_r+0x296>
 8008eb0:	69e3      	ldr	r3, [r4, #28]
 8008eb2:	9a00      	ldr	r2, [sp, #0]
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	2b0e      	cmp	r3, #14
 8008eba:	f200 80a8 	bhi.w	800900e <_dtoa_r+0x47e>
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	f000 80a5 	beq.w	800900e <_dtoa_r+0x47e>
 8008ec4:	f1bb 0f00 	cmp.w	fp, #0
 8008ec8:	dd38      	ble.n	8008f3c <_dtoa_r+0x3ac>
 8008eca:	4bc0      	ldr	r3, [pc, #768]	; (80091cc <_dtoa_r+0x63c>)
 8008ecc:	f00b 020f 	and.w	r2, fp, #15
 8008ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ed8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008edc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ee0:	d019      	beq.n	8008f16 <_dtoa_r+0x386>
 8008ee2:	4bbb      	ldr	r3, [pc, #748]	; (80091d0 <_dtoa_r+0x640>)
 8008ee4:	ec51 0b18 	vmov	r0, r1, d8
 8008ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eec:	f7f7 fcb6 	bl	800085c <__aeabi_ddiv>
 8008ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef4:	f008 080f 	and.w	r8, r8, #15
 8008ef8:	2503      	movs	r5, #3
 8008efa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80091d0 <_dtoa_r+0x640>
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	d10a      	bne.n	8008f1a <_dtoa_r+0x38a>
 8008f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f08:	4632      	mov	r2, r6
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	f7f7 fca6 	bl	800085c <__aeabi_ddiv>
 8008f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f14:	e02b      	b.n	8008f6e <_dtoa_r+0x3de>
 8008f16:	2502      	movs	r5, #2
 8008f18:	e7ef      	b.n	8008efa <_dtoa_r+0x36a>
 8008f1a:	f018 0f01 	tst.w	r8, #1
 8008f1e:	d008      	beq.n	8008f32 <_dtoa_r+0x3a2>
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f28:	f7f7 fb6e 	bl	8000608 <__aeabi_dmul>
 8008f2c:	3501      	adds	r5, #1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f36:	f109 0908 	add.w	r9, r9, #8
 8008f3a:	e7e0      	b.n	8008efe <_dtoa_r+0x36e>
 8008f3c:	f000 809f 	beq.w	800907e <_dtoa_r+0x4ee>
 8008f40:	f1cb 0600 	rsb	r6, fp, #0
 8008f44:	4ba1      	ldr	r3, [pc, #644]	; (80091cc <_dtoa_r+0x63c>)
 8008f46:	4fa2      	ldr	r7, [pc, #648]	; (80091d0 <_dtoa_r+0x640>)
 8008f48:	f006 020f 	and.w	r2, r6, #15
 8008f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	ec51 0b18 	vmov	r0, r1, d8
 8008f58:	f7f7 fb56 	bl	8000608 <__aeabi_dmul>
 8008f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f60:	1136      	asrs	r6, r6, #4
 8008f62:	2300      	movs	r3, #0
 8008f64:	2502      	movs	r5, #2
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d17e      	bne.n	8009068 <_dtoa_r+0x4d8>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1d0      	bne.n	8008f10 <_dtoa_r+0x380>
 8008f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8084 	beq.w	8009082 <_dtoa_r+0x4f2>
 8008f7a:	4b96      	ldr	r3, [pc, #600]	; (80091d4 <_dtoa_r+0x644>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 fdb3 	bl	8000aec <__aeabi_dcmplt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d07b      	beq.n	8009082 <_dtoa_r+0x4f2>
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d078      	beq.n	8009082 <_dtoa_r+0x4f2>
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dd39      	ble.n	800900a <_dtoa_r+0x47a>
 8008f96:	4b90      	ldr	r3, [pc, #576]	; (80091d8 <_dtoa_r+0x648>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	f7f7 fb33 	bl	8000608 <__aeabi_dmul>
 8008fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa6:	9e01      	ldr	r6, [sp, #4]
 8008fa8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008fac:	3501      	adds	r5, #1
 8008fae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7f7 fabe 	bl	8000534 <__aeabi_i2d>
 8008fb8:	4642      	mov	r2, r8
 8008fba:	464b      	mov	r3, r9
 8008fbc:	f7f7 fb24 	bl	8000608 <__aeabi_dmul>
 8008fc0:	4b86      	ldr	r3, [pc, #536]	; (80091dc <_dtoa_r+0x64c>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f7f7 f96a 	bl	800029c <__adddf3>
 8008fc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d158      	bne.n	8009088 <_dtoa_r+0x4f8>
 8008fd6:	4b82      	ldr	r3, [pc, #520]	; (80091e0 <_dtoa_r+0x650>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 f95b 	bl	8000298 <__aeabi_dsub>
 8008fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fe6:	4680      	mov	r8, r0
 8008fe8:	4689      	mov	r9, r1
 8008fea:	f7f7 fd9d 	bl	8000b28 <__aeabi_dcmpgt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f040 8296 	bne.w	8009520 <_dtoa_r+0x990>
 8008ff4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 fd74 	bl	8000aec <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	f040 8289 	bne.w	800951c <_dtoa_r+0x98c>
 800900a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800900e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009010:	2b00      	cmp	r3, #0
 8009012:	f2c0 814e 	blt.w	80092b2 <_dtoa_r+0x722>
 8009016:	f1bb 0f0e 	cmp.w	fp, #14
 800901a:	f300 814a 	bgt.w	80092b2 <_dtoa_r+0x722>
 800901e:	4b6b      	ldr	r3, [pc, #428]	; (80091cc <_dtoa_r+0x63c>)
 8009020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	f280 80dc 	bge.w	80091e8 <_dtoa_r+0x658>
 8009030:	9b04      	ldr	r3, [sp, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f300 80d8 	bgt.w	80091e8 <_dtoa_r+0x658>
 8009038:	f040 826f 	bne.w	800951a <_dtoa_r+0x98a>
 800903c:	4b68      	ldr	r3, [pc, #416]	; (80091e0 <_dtoa_r+0x650>)
 800903e:	2200      	movs	r2, #0
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fae0 	bl	8000608 <__aeabi_dmul>
 8009048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800904c:	f7f7 fd62 	bl	8000b14 <__aeabi_dcmpge>
 8009050:	9e04      	ldr	r6, [sp, #16]
 8009052:	4637      	mov	r7, r6
 8009054:	2800      	cmp	r0, #0
 8009056:	f040 8245 	bne.w	80094e4 <_dtoa_r+0x954>
 800905a:	9d00      	ldr	r5, [sp, #0]
 800905c:	2331      	movs	r3, #49	; 0x31
 800905e:	f805 3b01 	strb.w	r3, [r5], #1
 8009062:	f10b 0b01 	add.w	fp, fp, #1
 8009066:	e241      	b.n	80094ec <_dtoa_r+0x95c>
 8009068:	07f2      	lsls	r2, r6, #31
 800906a:	d505      	bpl.n	8009078 <_dtoa_r+0x4e8>
 800906c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009070:	f7f7 faca 	bl	8000608 <__aeabi_dmul>
 8009074:	3501      	adds	r5, #1
 8009076:	2301      	movs	r3, #1
 8009078:	1076      	asrs	r6, r6, #1
 800907a:	3708      	adds	r7, #8
 800907c:	e773      	b.n	8008f66 <_dtoa_r+0x3d6>
 800907e:	2502      	movs	r5, #2
 8009080:	e775      	b.n	8008f6e <_dtoa_r+0x3de>
 8009082:	9e04      	ldr	r6, [sp, #16]
 8009084:	465f      	mov	r7, fp
 8009086:	e792      	b.n	8008fae <_dtoa_r+0x41e>
 8009088:	9900      	ldr	r1, [sp, #0]
 800908a:	4b50      	ldr	r3, [pc, #320]	; (80091cc <_dtoa_r+0x63c>)
 800908c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009090:	4431      	add	r1, r6
 8009092:	9102      	str	r1, [sp, #8]
 8009094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009096:	eeb0 9a47 	vmov.f32	s18, s14
 800909a:	eef0 9a67 	vmov.f32	s19, s15
 800909e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d044      	beq.n	8009134 <_dtoa_r+0x5a4>
 80090aa:	494e      	ldr	r1, [pc, #312]	; (80091e4 <_dtoa_r+0x654>)
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f7 fbd5 	bl	800085c <__aeabi_ddiv>
 80090b2:	ec53 2b19 	vmov	r2, r3, d9
 80090b6:	f7f7 f8ef 	bl	8000298 <__aeabi_dsub>
 80090ba:	9d00      	ldr	r5, [sp, #0]
 80090bc:	ec41 0b19 	vmov	d9, r0, r1
 80090c0:	4649      	mov	r1, r9
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7f7 fd50 	bl	8000b68 <__aeabi_d2iz>
 80090c8:	4606      	mov	r6, r0
 80090ca:	f7f7 fa33 	bl	8000534 <__aeabi_i2d>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	f7f7 f8df 	bl	8000298 <__aeabi_dsub>
 80090da:	3630      	adds	r6, #48	; 0x30
 80090dc:	f805 6b01 	strb.w	r6, [r5], #1
 80090e0:	ec53 2b19 	vmov	r2, r3, d9
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	f7f7 fd00 	bl	8000aec <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d164      	bne.n	80091ba <_dtoa_r+0x62a>
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4937      	ldr	r1, [pc, #220]	; (80091d4 <_dtoa_r+0x644>)
 80090f6:	2000      	movs	r0, #0
 80090f8:	f7f7 f8ce 	bl	8000298 <__aeabi_dsub>
 80090fc:	ec53 2b19 	vmov	r2, r3, d9
 8009100:	f7f7 fcf4 	bl	8000aec <__aeabi_dcmplt>
 8009104:	2800      	cmp	r0, #0
 8009106:	f040 80b6 	bne.w	8009276 <_dtoa_r+0x6e6>
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	429d      	cmp	r5, r3
 800910e:	f43f af7c 	beq.w	800900a <_dtoa_r+0x47a>
 8009112:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <_dtoa_r+0x648>)
 8009114:	ec51 0b19 	vmov	r0, r1, d9
 8009118:	2200      	movs	r2, #0
 800911a:	f7f7 fa75 	bl	8000608 <__aeabi_dmul>
 800911e:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <_dtoa_r+0x648>)
 8009120:	ec41 0b19 	vmov	d9, r0, r1
 8009124:	2200      	movs	r2, #0
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	4680      	mov	r8, r0
 8009130:	4689      	mov	r9, r1
 8009132:	e7c5      	b.n	80090c0 <_dtoa_r+0x530>
 8009134:	ec51 0b17 	vmov	r0, r1, d7
 8009138:	f7f7 fa66 	bl	8000608 <__aeabi_dmul>
 800913c:	9b02      	ldr	r3, [sp, #8]
 800913e:	9d00      	ldr	r5, [sp, #0]
 8009140:	930f      	str	r3, [sp, #60]	; 0x3c
 8009142:	ec41 0b19 	vmov	d9, r0, r1
 8009146:	4649      	mov	r1, r9
 8009148:	4640      	mov	r0, r8
 800914a:	f7f7 fd0d 	bl	8000b68 <__aeabi_d2iz>
 800914e:	4606      	mov	r6, r0
 8009150:	f7f7 f9f0 	bl	8000534 <__aeabi_i2d>
 8009154:	3630      	adds	r6, #48	; 0x30
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 f89b 	bl	8000298 <__aeabi_dsub>
 8009162:	f805 6b01 	strb.w	r6, [r5], #1
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	429d      	cmp	r5, r3
 800916a:	4680      	mov	r8, r0
 800916c:	4689      	mov	r9, r1
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	d124      	bne.n	80091be <_dtoa_r+0x62e>
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <_dtoa_r+0x654>)
 8009176:	ec51 0b19 	vmov	r0, r1, d9
 800917a:	f7f7 f88f 	bl	800029c <__adddf3>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800918a:	2800      	cmp	r0, #0
 800918c:	d173      	bne.n	8009276 <_dtoa_r+0x6e6>
 800918e:	ec53 2b19 	vmov	r2, r3, d9
 8009192:	4914      	ldr	r1, [pc, #80]	; (80091e4 <_dtoa_r+0x654>)
 8009194:	2000      	movs	r0, #0
 8009196:	f7f7 f87f 	bl	8000298 <__aeabi_dsub>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	f7f7 fca3 	bl	8000aec <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f43f af2f 	beq.w	800900a <_dtoa_r+0x47a>
 80091ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091ae:	1e6b      	subs	r3, r5, #1
 80091b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091b6:	2b30      	cmp	r3, #48	; 0x30
 80091b8:	d0f8      	beq.n	80091ac <_dtoa_r+0x61c>
 80091ba:	46bb      	mov	fp, r7
 80091bc:	e04a      	b.n	8009254 <_dtoa_r+0x6c4>
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <_dtoa_r+0x648>)
 80091c0:	f7f7 fa22 	bl	8000608 <__aeabi_dmul>
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e7bd      	b.n	8009146 <_dtoa_r+0x5b6>
 80091ca:	bf00      	nop
 80091cc:	0800ad10 	.word	0x0800ad10
 80091d0:	0800ace8 	.word	0x0800ace8
 80091d4:	3ff00000 	.word	0x3ff00000
 80091d8:	40240000 	.word	0x40240000
 80091dc:	401c0000 	.word	0x401c0000
 80091e0:	40140000 	.word	0x40140000
 80091e4:	3fe00000 	.word	0x3fe00000
 80091e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091ec:	9d00      	ldr	r5, [sp, #0]
 80091ee:	4642      	mov	r2, r8
 80091f0:	464b      	mov	r3, r9
 80091f2:	4630      	mov	r0, r6
 80091f4:	4639      	mov	r1, r7
 80091f6:	f7f7 fb31 	bl	800085c <__aeabi_ddiv>
 80091fa:	f7f7 fcb5 	bl	8000b68 <__aeabi_d2iz>
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	f7f7 f998 	bl	8000534 <__aeabi_i2d>
 8009204:	4642      	mov	r2, r8
 8009206:	464b      	mov	r3, r9
 8009208:	f7f7 f9fe 	bl	8000608 <__aeabi_dmul>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f840 	bl	8000298 <__aeabi_dsub>
 8009218:	9e01      	ldr	r6, [sp, #4]
 800921a:	9f04      	ldr	r7, [sp, #16]
 800921c:	3630      	adds	r6, #48	; 0x30
 800921e:	f805 6b01 	strb.w	r6, [r5], #1
 8009222:	9e00      	ldr	r6, [sp, #0]
 8009224:	1bae      	subs	r6, r5, r6
 8009226:	42b7      	cmp	r7, r6
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	d134      	bne.n	8009298 <_dtoa_r+0x708>
 800922e:	f7f7 f835 	bl	800029c <__adddf3>
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	4606      	mov	r6, r0
 8009238:	460f      	mov	r7, r1
 800923a:	f7f7 fc75 	bl	8000b28 <__aeabi_dcmpgt>
 800923e:	b9c8      	cbnz	r0, 8009274 <_dtoa_r+0x6e4>
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	4630      	mov	r0, r6
 8009246:	4639      	mov	r1, r7
 8009248:	f7f7 fc46 	bl	8000ad8 <__aeabi_dcmpeq>
 800924c:	b110      	cbz	r0, 8009254 <_dtoa_r+0x6c4>
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	07db      	lsls	r3, r3, #31
 8009252:	d40f      	bmi.n	8009274 <_dtoa_r+0x6e4>
 8009254:	4651      	mov	r1, sl
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fbcc 	bl	80099f4 <_Bfree>
 800925c:	2300      	movs	r3, #0
 800925e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009260:	702b      	strb	r3, [r5, #0]
 8009262:	f10b 0301 	add.w	r3, fp, #1
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800926a:	2b00      	cmp	r3, #0
 800926c:	f43f ace2 	beq.w	8008c34 <_dtoa_r+0xa4>
 8009270:	601d      	str	r5, [r3, #0]
 8009272:	e4df      	b.n	8008c34 <_dtoa_r+0xa4>
 8009274:	465f      	mov	r7, fp
 8009276:	462b      	mov	r3, r5
 8009278:	461d      	mov	r5, r3
 800927a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800927e:	2a39      	cmp	r2, #57	; 0x39
 8009280:	d106      	bne.n	8009290 <_dtoa_r+0x700>
 8009282:	9a00      	ldr	r2, [sp, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d1f7      	bne.n	8009278 <_dtoa_r+0x6e8>
 8009288:	9900      	ldr	r1, [sp, #0]
 800928a:	2230      	movs	r2, #48	; 0x30
 800928c:	3701      	adds	r7, #1
 800928e:	700a      	strb	r2, [r1, #0]
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	3201      	adds	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e790      	b.n	80091ba <_dtoa_r+0x62a>
 8009298:	4ba3      	ldr	r3, [pc, #652]	; (8009528 <_dtoa_r+0x998>)
 800929a:	2200      	movs	r2, #0
 800929c:	f7f7 f9b4 	bl	8000608 <__aeabi_dmul>
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	f7f7 fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d09e      	beq.n	80091ee <_dtoa_r+0x65e>
 80092b0:	e7d0      	b.n	8009254 <_dtoa_r+0x6c4>
 80092b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	f000 80ca 	beq.w	800944e <_dtoa_r+0x8be>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	2a01      	cmp	r2, #1
 80092be:	f300 80ad 	bgt.w	800941c <_dtoa_r+0x88c>
 80092c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	f000 80a5 	beq.w	8009414 <_dtoa_r+0x884>
 80092ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092ce:	9e08      	ldr	r6, [sp, #32]
 80092d0:	9d05      	ldr	r5, [sp, #20]
 80092d2:	9a05      	ldr	r2, [sp, #20]
 80092d4:	441a      	add	r2, r3
 80092d6:	9205      	str	r2, [sp, #20]
 80092d8:	9a06      	ldr	r2, [sp, #24]
 80092da:	2101      	movs	r1, #1
 80092dc:	441a      	add	r2, r3
 80092de:	4620      	mov	r0, r4
 80092e0:	9206      	str	r2, [sp, #24]
 80092e2:	f000 fc3d 	bl	8009b60 <__i2b>
 80092e6:	4607      	mov	r7, r0
 80092e8:	b165      	cbz	r5, 8009304 <_dtoa_r+0x774>
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd09      	ble.n	8009304 <_dtoa_r+0x774>
 80092f0:	42ab      	cmp	r3, r5
 80092f2:	9a05      	ldr	r2, [sp, #20]
 80092f4:	bfa8      	it	ge
 80092f6:	462b      	movge	r3, r5
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	9205      	str	r2, [sp, #20]
 80092fc:	9a06      	ldr	r2, [sp, #24]
 80092fe:	1aed      	subs	r5, r5, r3
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	9306      	str	r3, [sp, #24]
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	b1f3      	cbz	r3, 8009346 <_dtoa_r+0x7b6>
 8009308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80a3 	beq.w	8009456 <_dtoa_r+0x8c6>
 8009310:	2e00      	cmp	r6, #0
 8009312:	dd10      	ble.n	8009336 <_dtoa_r+0x7a6>
 8009314:	4639      	mov	r1, r7
 8009316:	4632      	mov	r2, r6
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fce1 	bl	8009ce0 <__pow5mult>
 800931e:	4652      	mov	r2, sl
 8009320:	4601      	mov	r1, r0
 8009322:	4607      	mov	r7, r0
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fc31 	bl	8009b8c <__multiply>
 800932a:	4651      	mov	r1, sl
 800932c:	4680      	mov	r8, r0
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fb60 	bl	80099f4 <_Bfree>
 8009334:	46c2      	mov	sl, r8
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	1b9a      	subs	r2, r3, r6
 800933a:	d004      	beq.n	8009346 <_dtoa_r+0x7b6>
 800933c:	4651      	mov	r1, sl
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fcce 	bl	8009ce0 <__pow5mult>
 8009344:	4682      	mov	sl, r0
 8009346:	2101      	movs	r1, #1
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fc09 	bl	8009b60 <__i2b>
 800934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009350:	2b00      	cmp	r3, #0
 8009352:	4606      	mov	r6, r0
 8009354:	f340 8081 	ble.w	800945a <_dtoa_r+0x8ca>
 8009358:	461a      	mov	r2, r3
 800935a:	4601      	mov	r1, r0
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fcbf 	bl	8009ce0 <__pow5mult>
 8009362:	9b07      	ldr	r3, [sp, #28]
 8009364:	2b01      	cmp	r3, #1
 8009366:	4606      	mov	r6, r0
 8009368:	dd7a      	ble.n	8009460 <_dtoa_r+0x8d0>
 800936a:	f04f 0800 	mov.w	r8, #0
 800936e:	6933      	ldr	r3, [r6, #16]
 8009370:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009374:	6918      	ldr	r0, [r3, #16]
 8009376:	f000 fba5 	bl	8009ac4 <__hi0bits>
 800937a:	f1c0 0020 	rsb	r0, r0, #32
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	4418      	add	r0, r3
 8009382:	f010 001f 	ands.w	r0, r0, #31
 8009386:	f000 8094 	beq.w	80094b2 <_dtoa_r+0x922>
 800938a:	f1c0 0320 	rsb	r3, r0, #32
 800938e:	2b04      	cmp	r3, #4
 8009390:	f340 8085 	ble.w	800949e <_dtoa_r+0x90e>
 8009394:	9b05      	ldr	r3, [sp, #20]
 8009396:	f1c0 001c 	rsb	r0, r0, #28
 800939a:	4403      	add	r3, r0
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	4403      	add	r3, r0
 80093a2:	4405      	add	r5, r0
 80093a4:	9306      	str	r3, [sp, #24]
 80093a6:	9b05      	ldr	r3, [sp, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dd05      	ble.n	80093b8 <_dtoa_r+0x828>
 80093ac:	4651      	mov	r1, sl
 80093ae:	461a      	mov	r2, r3
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fcef 	bl	8009d94 <__lshift>
 80093b6:	4682      	mov	sl, r0
 80093b8:	9b06      	ldr	r3, [sp, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dd05      	ble.n	80093ca <_dtoa_r+0x83a>
 80093be:	4631      	mov	r1, r6
 80093c0:	461a      	mov	r2, r3
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fce6 	bl	8009d94 <__lshift>
 80093c8:	4606      	mov	r6, r0
 80093ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d072      	beq.n	80094b6 <_dtoa_r+0x926>
 80093d0:	4631      	mov	r1, r6
 80093d2:	4650      	mov	r0, sl
 80093d4:	f000 fd4a 	bl	8009e6c <__mcmp>
 80093d8:	2800      	cmp	r0, #0
 80093da:	da6c      	bge.n	80094b6 <_dtoa_r+0x926>
 80093dc:	2300      	movs	r3, #0
 80093de:	4651      	mov	r1, sl
 80093e0:	220a      	movs	r2, #10
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fb28 	bl	8009a38 <__multadd>
 80093e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093ee:	4682      	mov	sl, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 81b0 	beq.w	8009756 <_dtoa_r+0xbc6>
 80093f6:	2300      	movs	r3, #0
 80093f8:	4639      	mov	r1, r7
 80093fa:	220a      	movs	r2, #10
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fb1b 	bl	8009a38 <__multadd>
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	4607      	mov	r7, r0
 8009408:	f300 8096 	bgt.w	8009538 <_dtoa_r+0x9a8>
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	2b02      	cmp	r3, #2
 8009410:	dc59      	bgt.n	80094c6 <_dtoa_r+0x936>
 8009412:	e091      	b.n	8009538 <_dtoa_r+0x9a8>
 8009414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800941a:	e758      	b.n	80092ce <_dtoa_r+0x73e>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	1e5e      	subs	r6, r3, #1
 8009420:	9b08      	ldr	r3, [sp, #32]
 8009422:	42b3      	cmp	r3, r6
 8009424:	bfbf      	itttt	lt
 8009426:	9b08      	ldrlt	r3, [sp, #32]
 8009428:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800942a:	9608      	strlt	r6, [sp, #32]
 800942c:	1af3      	sublt	r3, r6, r3
 800942e:	bfb4      	ite	lt
 8009430:	18d2      	addlt	r2, r2, r3
 8009432:	1b9e      	subge	r6, r3, r6
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	bfbc      	itt	lt
 8009438:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800943a:	2600      	movlt	r6, #0
 800943c:	2b00      	cmp	r3, #0
 800943e:	bfb7      	itett	lt
 8009440:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009444:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009448:	1a9d      	sublt	r5, r3, r2
 800944a:	2300      	movlt	r3, #0
 800944c:	e741      	b.n	80092d2 <_dtoa_r+0x742>
 800944e:	9e08      	ldr	r6, [sp, #32]
 8009450:	9d05      	ldr	r5, [sp, #20]
 8009452:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009454:	e748      	b.n	80092e8 <_dtoa_r+0x758>
 8009456:	9a08      	ldr	r2, [sp, #32]
 8009458:	e770      	b.n	800933c <_dtoa_r+0x7ac>
 800945a:	9b07      	ldr	r3, [sp, #28]
 800945c:	2b01      	cmp	r3, #1
 800945e:	dc19      	bgt.n	8009494 <_dtoa_r+0x904>
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	b9bb      	cbnz	r3, 8009494 <_dtoa_r+0x904>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800946a:	b99b      	cbnz	r3, 8009494 <_dtoa_r+0x904>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009472:	0d1b      	lsrs	r3, r3, #20
 8009474:	051b      	lsls	r3, r3, #20
 8009476:	b183      	cbz	r3, 800949a <_dtoa_r+0x90a>
 8009478:	9b05      	ldr	r3, [sp, #20]
 800947a:	3301      	adds	r3, #1
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	3301      	adds	r3, #1
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	f04f 0801 	mov.w	r8, #1
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	f47f af6f 	bne.w	800936e <_dtoa_r+0x7de>
 8009490:	2001      	movs	r0, #1
 8009492:	e774      	b.n	800937e <_dtoa_r+0x7ee>
 8009494:	f04f 0800 	mov.w	r8, #0
 8009498:	e7f6      	b.n	8009488 <_dtoa_r+0x8f8>
 800949a:	4698      	mov	r8, r3
 800949c:	e7f4      	b.n	8009488 <_dtoa_r+0x8f8>
 800949e:	d082      	beq.n	80093a6 <_dtoa_r+0x816>
 80094a0:	9a05      	ldr	r2, [sp, #20]
 80094a2:	331c      	adds	r3, #28
 80094a4:	441a      	add	r2, r3
 80094a6:	9205      	str	r2, [sp, #20]
 80094a8:	9a06      	ldr	r2, [sp, #24]
 80094aa:	441a      	add	r2, r3
 80094ac:	441d      	add	r5, r3
 80094ae:	9206      	str	r2, [sp, #24]
 80094b0:	e779      	b.n	80093a6 <_dtoa_r+0x816>
 80094b2:	4603      	mov	r3, r0
 80094b4:	e7f4      	b.n	80094a0 <_dtoa_r+0x910>
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dc37      	bgt.n	800952c <_dtoa_r+0x99c>
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dd34      	ble.n	800952c <_dtoa_r+0x99c>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	b963      	cbnz	r3, 80094e4 <_dtoa_r+0x954>
 80094ca:	4631      	mov	r1, r6
 80094cc:	2205      	movs	r2, #5
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fab2 	bl	8009a38 <__multadd>
 80094d4:	4601      	mov	r1, r0
 80094d6:	4606      	mov	r6, r0
 80094d8:	4650      	mov	r0, sl
 80094da:	f000 fcc7 	bl	8009e6c <__mcmp>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f73f adbb 	bgt.w	800905a <_dtoa_r+0x4ca>
 80094e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e6:	9d00      	ldr	r5, [sp, #0]
 80094e8:	ea6f 0b03 	mvn.w	fp, r3
 80094ec:	f04f 0800 	mov.w	r8, #0
 80094f0:	4631      	mov	r1, r6
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fa7e 	bl	80099f4 <_Bfree>
 80094f8:	2f00      	cmp	r7, #0
 80094fa:	f43f aeab 	beq.w	8009254 <_dtoa_r+0x6c4>
 80094fe:	f1b8 0f00 	cmp.w	r8, #0
 8009502:	d005      	beq.n	8009510 <_dtoa_r+0x980>
 8009504:	45b8      	cmp	r8, r7
 8009506:	d003      	beq.n	8009510 <_dtoa_r+0x980>
 8009508:	4641      	mov	r1, r8
 800950a:	4620      	mov	r0, r4
 800950c:	f000 fa72 	bl	80099f4 <_Bfree>
 8009510:	4639      	mov	r1, r7
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fa6e 	bl	80099f4 <_Bfree>
 8009518:	e69c      	b.n	8009254 <_dtoa_r+0x6c4>
 800951a:	2600      	movs	r6, #0
 800951c:	4637      	mov	r7, r6
 800951e:	e7e1      	b.n	80094e4 <_dtoa_r+0x954>
 8009520:	46bb      	mov	fp, r7
 8009522:	4637      	mov	r7, r6
 8009524:	e599      	b.n	800905a <_dtoa_r+0x4ca>
 8009526:	bf00      	nop
 8009528:	40240000 	.word	0x40240000
 800952c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80c8 	beq.w	80096c4 <_dtoa_r+0xb34>
 8009534:	9b04      	ldr	r3, [sp, #16]
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	2d00      	cmp	r5, #0
 800953a:	dd05      	ble.n	8009548 <_dtoa_r+0x9b8>
 800953c:	4639      	mov	r1, r7
 800953e:	462a      	mov	r2, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fc27 	bl	8009d94 <__lshift>
 8009546:	4607      	mov	r7, r0
 8009548:	f1b8 0f00 	cmp.w	r8, #0
 800954c:	d05b      	beq.n	8009606 <_dtoa_r+0xa76>
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fa0f 	bl	8009974 <_Balloc>
 8009556:	4605      	mov	r5, r0
 8009558:	b928      	cbnz	r0, 8009566 <_dtoa_r+0x9d6>
 800955a:	4b83      	ldr	r3, [pc, #524]	; (8009768 <_dtoa_r+0xbd8>)
 800955c:	4602      	mov	r2, r0
 800955e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009562:	f7ff bb2e 	b.w	8008bc2 <_dtoa_r+0x32>
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	3202      	adds	r2, #2
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	f107 010c 	add.w	r1, r7, #12
 8009570:	300c      	adds	r0, #12
 8009572:	f000 ffab 	bl	800a4cc <memcpy>
 8009576:	2201      	movs	r2, #1
 8009578:	4629      	mov	r1, r5
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fc0a 	bl	8009d94 <__lshift>
 8009580:	9b00      	ldr	r3, [sp, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800958a:	4413      	add	r3, r2
 800958c:	9308      	str	r3, [sp, #32]
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	46b8      	mov	r8, r7
 8009596:	9306      	str	r3, [sp, #24]
 8009598:	4607      	mov	r7, r0
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	4631      	mov	r1, r6
 800959e:	3b01      	subs	r3, #1
 80095a0:	4650      	mov	r0, sl
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	f7ff fa69 	bl	8008a7a <quorem>
 80095a8:	4641      	mov	r1, r8
 80095aa:	9002      	str	r0, [sp, #8]
 80095ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095b0:	4650      	mov	r0, sl
 80095b2:	f000 fc5b 	bl	8009e6c <__mcmp>
 80095b6:	463a      	mov	r2, r7
 80095b8:	9005      	str	r0, [sp, #20]
 80095ba:	4631      	mov	r1, r6
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fc71 	bl	8009ea4 <__mdiff>
 80095c2:	68c2      	ldr	r2, [r0, #12]
 80095c4:	4605      	mov	r5, r0
 80095c6:	bb02      	cbnz	r2, 800960a <_dtoa_r+0xa7a>
 80095c8:	4601      	mov	r1, r0
 80095ca:	4650      	mov	r0, sl
 80095cc:	f000 fc4e 	bl	8009e6c <__mcmp>
 80095d0:	4602      	mov	r2, r0
 80095d2:	4629      	mov	r1, r5
 80095d4:	4620      	mov	r0, r4
 80095d6:	9209      	str	r2, [sp, #36]	; 0x24
 80095d8:	f000 fa0c 	bl	80099f4 <_Bfree>
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e0:	9d04      	ldr	r5, [sp, #16]
 80095e2:	ea43 0102 	orr.w	r1, r3, r2
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	4319      	orrs	r1, r3
 80095ea:	d110      	bne.n	800960e <_dtoa_r+0xa7e>
 80095ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095f0:	d029      	beq.n	8009646 <_dtoa_r+0xab6>
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd02      	ble.n	80095fe <_dtoa_r+0xa6e>
 80095f8:	9b02      	ldr	r3, [sp, #8]
 80095fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	f883 9000 	strb.w	r9, [r3]
 8009604:	e774      	b.n	80094f0 <_dtoa_r+0x960>
 8009606:	4638      	mov	r0, r7
 8009608:	e7ba      	b.n	8009580 <_dtoa_r+0x9f0>
 800960a:	2201      	movs	r2, #1
 800960c:	e7e1      	b.n	80095d2 <_dtoa_r+0xa42>
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	db04      	blt.n	800961e <_dtoa_r+0xa8e>
 8009614:	9907      	ldr	r1, [sp, #28]
 8009616:	430b      	orrs	r3, r1
 8009618:	9906      	ldr	r1, [sp, #24]
 800961a:	430b      	orrs	r3, r1
 800961c:	d120      	bne.n	8009660 <_dtoa_r+0xad0>
 800961e:	2a00      	cmp	r2, #0
 8009620:	dded      	ble.n	80095fe <_dtoa_r+0xa6e>
 8009622:	4651      	mov	r1, sl
 8009624:	2201      	movs	r2, #1
 8009626:	4620      	mov	r0, r4
 8009628:	f000 fbb4 	bl	8009d94 <__lshift>
 800962c:	4631      	mov	r1, r6
 800962e:	4682      	mov	sl, r0
 8009630:	f000 fc1c 	bl	8009e6c <__mcmp>
 8009634:	2800      	cmp	r0, #0
 8009636:	dc03      	bgt.n	8009640 <_dtoa_r+0xab0>
 8009638:	d1e1      	bne.n	80095fe <_dtoa_r+0xa6e>
 800963a:	f019 0f01 	tst.w	r9, #1
 800963e:	d0de      	beq.n	80095fe <_dtoa_r+0xa6e>
 8009640:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009644:	d1d8      	bne.n	80095f8 <_dtoa_r+0xa68>
 8009646:	9a01      	ldr	r2, [sp, #4]
 8009648:	2339      	movs	r3, #57	; 0x39
 800964a:	7013      	strb	r3, [r2, #0]
 800964c:	462b      	mov	r3, r5
 800964e:	461d      	mov	r5, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009656:	2a39      	cmp	r2, #57	; 0x39
 8009658:	d06c      	beq.n	8009734 <_dtoa_r+0xba4>
 800965a:	3201      	adds	r2, #1
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e747      	b.n	80094f0 <_dtoa_r+0x960>
 8009660:	2a00      	cmp	r2, #0
 8009662:	dd07      	ble.n	8009674 <_dtoa_r+0xae4>
 8009664:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009668:	d0ed      	beq.n	8009646 <_dtoa_r+0xab6>
 800966a:	9a01      	ldr	r2, [sp, #4]
 800966c:	f109 0301 	add.w	r3, r9, #1
 8009670:	7013      	strb	r3, [r2, #0]
 8009672:	e73d      	b.n	80094f0 <_dtoa_r+0x960>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	9a08      	ldr	r2, [sp, #32]
 8009678:	f803 9c01 	strb.w	r9, [r3, #-1]
 800967c:	4293      	cmp	r3, r2
 800967e:	d043      	beq.n	8009708 <_dtoa_r+0xb78>
 8009680:	4651      	mov	r1, sl
 8009682:	2300      	movs	r3, #0
 8009684:	220a      	movs	r2, #10
 8009686:	4620      	mov	r0, r4
 8009688:	f000 f9d6 	bl	8009a38 <__multadd>
 800968c:	45b8      	cmp	r8, r7
 800968e:	4682      	mov	sl, r0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	f04f 020a 	mov.w	r2, #10
 8009698:	4641      	mov	r1, r8
 800969a:	4620      	mov	r0, r4
 800969c:	d107      	bne.n	80096ae <_dtoa_r+0xb1e>
 800969e:	f000 f9cb 	bl	8009a38 <__multadd>
 80096a2:	4680      	mov	r8, r0
 80096a4:	4607      	mov	r7, r0
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	3301      	adds	r3, #1
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	e775      	b.n	800959a <_dtoa_r+0xa0a>
 80096ae:	f000 f9c3 	bl	8009a38 <__multadd>
 80096b2:	4639      	mov	r1, r7
 80096b4:	4680      	mov	r8, r0
 80096b6:	2300      	movs	r3, #0
 80096b8:	220a      	movs	r2, #10
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f9bc 	bl	8009a38 <__multadd>
 80096c0:	4607      	mov	r7, r0
 80096c2:	e7f0      	b.n	80096a6 <_dtoa_r+0xb16>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	9d00      	ldr	r5, [sp, #0]
 80096ca:	4631      	mov	r1, r6
 80096cc:	4650      	mov	r0, sl
 80096ce:	f7ff f9d4 	bl	8008a7a <quorem>
 80096d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096d6:	9b00      	ldr	r3, [sp, #0]
 80096d8:	f805 9b01 	strb.w	r9, [r5], #1
 80096dc:	1aea      	subs	r2, r5, r3
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	4293      	cmp	r3, r2
 80096e2:	dd07      	ble.n	80096f4 <_dtoa_r+0xb64>
 80096e4:	4651      	mov	r1, sl
 80096e6:	2300      	movs	r3, #0
 80096e8:	220a      	movs	r2, #10
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f9a4 	bl	8009a38 <__multadd>
 80096f0:	4682      	mov	sl, r0
 80096f2:	e7ea      	b.n	80096ca <_dtoa_r+0xb3a>
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfc8      	it	gt
 80096fa:	461d      	movgt	r5, r3
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	bfd8      	it	le
 8009700:	2501      	movle	r5, #1
 8009702:	441d      	add	r5, r3
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	4651      	mov	r1, sl
 800970a:	2201      	movs	r2, #1
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fb41 	bl	8009d94 <__lshift>
 8009712:	4631      	mov	r1, r6
 8009714:	4682      	mov	sl, r0
 8009716:	f000 fba9 	bl	8009e6c <__mcmp>
 800971a:	2800      	cmp	r0, #0
 800971c:	dc96      	bgt.n	800964c <_dtoa_r+0xabc>
 800971e:	d102      	bne.n	8009726 <_dtoa_r+0xb96>
 8009720:	f019 0f01 	tst.w	r9, #1
 8009724:	d192      	bne.n	800964c <_dtoa_r+0xabc>
 8009726:	462b      	mov	r3, r5
 8009728:	461d      	mov	r5, r3
 800972a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800972e:	2a30      	cmp	r2, #48	; 0x30
 8009730:	d0fa      	beq.n	8009728 <_dtoa_r+0xb98>
 8009732:	e6dd      	b.n	80094f0 <_dtoa_r+0x960>
 8009734:	9a00      	ldr	r2, [sp, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d189      	bne.n	800964e <_dtoa_r+0xabe>
 800973a:	f10b 0b01 	add.w	fp, fp, #1
 800973e:	2331      	movs	r3, #49	; 0x31
 8009740:	e796      	b.n	8009670 <_dtoa_r+0xae0>
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <_dtoa_r+0xbdc>)
 8009744:	f7ff ba99 	b.w	8008c7a <_dtoa_r+0xea>
 8009748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800974a:	2b00      	cmp	r3, #0
 800974c:	f47f aa6d 	bne.w	8008c2a <_dtoa_r+0x9a>
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <_dtoa_r+0xbe0>)
 8009752:	f7ff ba92 	b.w	8008c7a <_dtoa_r+0xea>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dcb5      	bgt.n	80096c8 <_dtoa_r+0xb38>
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	2b02      	cmp	r3, #2
 8009760:	f73f aeb1 	bgt.w	80094c6 <_dtoa_r+0x936>
 8009764:	e7b0      	b.n	80096c8 <_dtoa_r+0xb38>
 8009766:	bf00      	nop
 8009768:	0800ac78 	.word	0x0800ac78
 800976c:	0800abd8 	.word	0x0800abd8
 8009770:	0800abfc 	.word	0x0800abfc

08009774 <_free_r>:
 8009774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009776:	2900      	cmp	r1, #0
 8009778:	d044      	beq.n	8009804 <_free_r+0x90>
 800977a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800977e:	9001      	str	r0, [sp, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f1a1 0404 	sub.w	r4, r1, #4
 8009786:	bfb8      	it	lt
 8009788:	18e4      	addlt	r4, r4, r3
 800978a:	f000 f8e7 	bl	800995c <__malloc_lock>
 800978e:	4a1e      	ldr	r2, [pc, #120]	; (8009808 <_free_r+0x94>)
 8009790:	9801      	ldr	r0, [sp, #4]
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	b933      	cbnz	r3, 80097a4 <_free_r+0x30>
 8009796:	6063      	str	r3, [r4, #4]
 8009798:	6014      	str	r4, [r2, #0]
 800979a:	b003      	add	sp, #12
 800979c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a0:	f000 b8e2 	b.w	8009968 <__malloc_unlock>
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d908      	bls.n	80097ba <_free_r+0x46>
 80097a8:	6825      	ldr	r5, [r4, #0]
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf01      	itttt	eq
 80097b0:	6819      	ldreq	r1, [r3, #0]
 80097b2:	685b      	ldreq	r3, [r3, #4]
 80097b4:	1949      	addeq	r1, r1, r5
 80097b6:	6021      	streq	r1, [r4, #0]
 80097b8:	e7ed      	b.n	8009796 <_free_r+0x22>
 80097ba:	461a      	mov	r2, r3
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	b10b      	cbz	r3, 80097c4 <_free_r+0x50>
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d9fa      	bls.n	80097ba <_free_r+0x46>
 80097c4:	6811      	ldr	r1, [r2, #0]
 80097c6:	1855      	adds	r5, r2, r1
 80097c8:	42a5      	cmp	r5, r4
 80097ca:	d10b      	bne.n	80097e4 <_free_r+0x70>
 80097cc:	6824      	ldr	r4, [r4, #0]
 80097ce:	4421      	add	r1, r4
 80097d0:	1854      	adds	r4, r2, r1
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	6011      	str	r1, [r2, #0]
 80097d6:	d1e0      	bne.n	800979a <_free_r+0x26>
 80097d8:	681c      	ldr	r4, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	6053      	str	r3, [r2, #4]
 80097de:	440c      	add	r4, r1
 80097e0:	6014      	str	r4, [r2, #0]
 80097e2:	e7da      	b.n	800979a <_free_r+0x26>
 80097e4:	d902      	bls.n	80097ec <_free_r+0x78>
 80097e6:	230c      	movs	r3, #12
 80097e8:	6003      	str	r3, [r0, #0]
 80097ea:	e7d6      	b.n	800979a <_free_r+0x26>
 80097ec:	6825      	ldr	r5, [r4, #0]
 80097ee:	1961      	adds	r1, r4, r5
 80097f0:	428b      	cmp	r3, r1
 80097f2:	bf04      	itt	eq
 80097f4:	6819      	ldreq	r1, [r3, #0]
 80097f6:	685b      	ldreq	r3, [r3, #4]
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	bf04      	itt	eq
 80097fc:	1949      	addeq	r1, r1, r5
 80097fe:	6021      	streq	r1, [r4, #0]
 8009800:	6054      	str	r4, [r2, #4]
 8009802:	e7ca      	b.n	800979a <_free_r+0x26>
 8009804:	b003      	add	sp, #12
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	200005d4 	.word	0x200005d4

0800980c <malloc>:
 800980c:	4b02      	ldr	r3, [pc, #8]	; (8009818 <malloc+0xc>)
 800980e:	4601      	mov	r1, r0
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	f000 b823 	b.w	800985c <_malloc_r>
 8009816:	bf00      	nop
 8009818:	2000011c 	.word	0x2000011c

0800981c <sbrk_aligned>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	4e0e      	ldr	r6, [pc, #56]	; (8009858 <sbrk_aligned+0x3c>)
 8009820:	460c      	mov	r4, r1
 8009822:	6831      	ldr	r1, [r6, #0]
 8009824:	4605      	mov	r5, r0
 8009826:	b911      	cbnz	r1, 800982e <sbrk_aligned+0x12>
 8009828:	f000 fe40 	bl	800a4ac <_sbrk_r>
 800982c:	6030      	str	r0, [r6, #0]
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f000 fe3b 	bl	800a4ac <_sbrk_r>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	d00a      	beq.n	8009850 <sbrk_aligned+0x34>
 800983a:	1cc4      	adds	r4, r0, #3
 800983c:	f024 0403 	bic.w	r4, r4, #3
 8009840:	42a0      	cmp	r0, r4
 8009842:	d007      	beq.n	8009854 <sbrk_aligned+0x38>
 8009844:	1a21      	subs	r1, r4, r0
 8009846:	4628      	mov	r0, r5
 8009848:	f000 fe30 	bl	800a4ac <_sbrk_r>
 800984c:	3001      	adds	r0, #1
 800984e:	d101      	bne.n	8009854 <sbrk_aligned+0x38>
 8009850:	f04f 34ff 	mov.w	r4, #4294967295
 8009854:	4620      	mov	r0, r4
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	200005d8 	.word	0x200005d8

0800985c <_malloc_r>:
 800985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009860:	1ccd      	adds	r5, r1, #3
 8009862:	f025 0503 	bic.w	r5, r5, #3
 8009866:	3508      	adds	r5, #8
 8009868:	2d0c      	cmp	r5, #12
 800986a:	bf38      	it	cc
 800986c:	250c      	movcc	r5, #12
 800986e:	2d00      	cmp	r5, #0
 8009870:	4607      	mov	r7, r0
 8009872:	db01      	blt.n	8009878 <_malloc_r+0x1c>
 8009874:	42a9      	cmp	r1, r5
 8009876:	d905      	bls.n	8009884 <_malloc_r+0x28>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	2600      	movs	r6, #0
 800987e:	4630      	mov	r0, r6
 8009880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009958 <_malloc_r+0xfc>
 8009888:	f000 f868 	bl	800995c <__malloc_lock>
 800988c:	f8d8 3000 	ldr.w	r3, [r8]
 8009890:	461c      	mov	r4, r3
 8009892:	bb5c      	cbnz	r4, 80098ec <_malloc_r+0x90>
 8009894:	4629      	mov	r1, r5
 8009896:	4638      	mov	r0, r7
 8009898:	f7ff ffc0 	bl	800981c <sbrk_aligned>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	4604      	mov	r4, r0
 80098a0:	d155      	bne.n	800994e <_malloc_r+0xf2>
 80098a2:	f8d8 4000 	ldr.w	r4, [r8]
 80098a6:	4626      	mov	r6, r4
 80098a8:	2e00      	cmp	r6, #0
 80098aa:	d145      	bne.n	8009938 <_malloc_r+0xdc>
 80098ac:	2c00      	cmp	r4, #0
 80098ae:	d048      	beq.n	8009942 <_malloc_r+0xe6>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	4631      	mov	r1, r6
 80098b4:	4638      	mov	r0, r7
 80098b6:	eb04 0903 	add.w	r9, r4, r3
 80098ba:	f000 fdf7 	bl	800a4ac <_sbrk_r>
 80098be:	4581      	cmp	r9, r0
 80098c0:	d13f      	bne.n	8009942 <_malloc_r+0xe6>
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	1a6d      	subs	r5, r5, r1
 80098c6:	4629      	mov	r1, r5
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7ff ffa7 	bl	800981c <sbrk_aligned>
 80098ce:	3001      	adds	r0, #1
 80098d0:	d037      	beq.n	8009942 <_malloc_r+0xe6>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	442b      	add	r3, r5
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	f8d8 3000 	ldr.w	r3, [r8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d038      	beq.n	8009952 <_malloc_r+0xf6>
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	42a2      	cmp	r2, r4
 80098e4:	d12b      	bne.n	800993e <_malloc_r+0xe2>
 80098e6:	2200      	movs	r2, #0
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	e00f      	b.n	800990c <_malloc_r+0xb0>
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	1b52      	subs	r2, r2, r5
 80098f0:	d41f      	bmi.n	8009932 <_malloc_r+0xd6>
 80098f2:	2a0b      	cmp	r2, #11
 80098f4:	d917      	bls.n	8009926 <_malloc_r+0xca>
 80098f6:	1961      	adds	r1, r4, r5
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	6025      	str	r5, [r4, #0]
 80098fc:	bf18      	it	ne
 80098fe:	6059      	strne	r1, [r3, #4]
 8009900:	6863      	ldr	r3, [r4, #4]
 8009902:	bf08      	it	eq
 8009904:	f8c8 1000 	streq.w	r1, [r8]
 8009908:	5162      	str	r2, [r4, r5]
 800990a:	604b      	str	r3, [r1, #4]
 800990c:	4638      	mov	r0, r7
 800990e:	f104 060b 	add.w	r6, r4, #11
 8009912:	f000 f829 	bl	8009968 <__malloc_unlock>
 8009916:	f026 0607 	bic.w	r6, r6, #7
 800991a:	1d23      	adds	r3, r4, #4
 800991c:	1af2      	subs	r2, r6, r3
 800991e:	d0ae      	beq.n	800987e <_malloc_r+0x22>
 8009920:	1b9b      	subs	r3, r3, r6
 8009922:	50a3      	str	r3, [r4, r2]
 8009924:	e7ab      	b.n	800987e <_malloc_r+0x22>
 8009926:	42a3      	cmp	r3, r4
 8009928:	6862      	ldr	r2, [r4, #4]
 800992a:	d1dd      	bne.n	80098e8 <_malloc_r+0x8c>
 800992c:	f8c8 2000 	str.w	r2, [r8]
 8009930:	e7ec      	b.n	800990c <_malloc_r+0xb0>
 8009932:	4623      	mov	r3, r4
 8009934:	6864      	ldr	r4, [r4, #4]
 8009936:	e7ac      	b.n	8009892 <_malloc_r+0x36>
 8009938:	4634      	mov	r4, r6
 800993a:	6876      	ldr	r6, [r6, #4]
 800993c:	e7b4      	b.n	80098a8 <_malloc_r+0x4c>
 800993e:	4613      	mov	r3, r2
 8009940:	e7cc      	b.n	80098dc <_malloc_r+0x80>
 8009942:	230c      	movs	r3, #12
 8009944:	603b      	str	r3, [r7, #0]
 8009946:	4638      	mov	r0, r7
 8009948:	f000 f80e 	bl	8009968 <__malloc_unlock>
 800994c:	e797      	b.n	800987e <_malloc_r+0x22>
 800994e:	6025      	str	r5, [r4, #0]
 8009950:	e7dc      	b.n	800990c <_malloc_r+0xb0>
 8009952:	605b      	str	r3, [r3, #4]
 8009954:	deff      	udf	#255	; 0xff
 8009956:	bf00      	nop
 8009958:	200005d4 	.word	0x200005d4

0800995c <__malloc_lock>:
 800995c:	4801      	ldr	r0, [pc, #4]	; (8009964 <__malloc_lock+0x8>)
 800995e:	f7ff b88a 	b.w	8008a76 <__retarget_lock_acquire_recursive>
 8009962:	bf00      	nop
 8009964:	200005d0 	.word	0x200005d0

08009968 <__malloc_unlock>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__malloc_unlock+0x8>)
 800996a:	f7ff b885 	b.w	8008a78 <__retarget_lock_release_recursive>
 800996e:	bf00      	nop
 8009970:	200005d0 	.word	0x200005d0

08009974 <_Balloc>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	69c6      	ldr	r6, [r0, #28]
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	b976      	cbnz	r6, 800999c <_Balloc+0x28>
 800997e:	2010      	movs	r0, #16
 8009980:	f7ff ff44 	bl	800980c <malloc>
 8009984:	4602      	mov	r2, r0
 8009986:	61e0      	str	r0, [r4, #28]
 8009988:	b920      	cbnz	r0, 8009994 <_Balloc+0x20>
 800998a:	4b18      	ldr	r3, [pc, #96]	; (80099ec <_Balloc+0x78>)
 800998c:	4818      	ldr	r0, [pc, #96]	; (80099f0 <_Balloc+0x7c>)
 800998e:	216b      	movs	r1, #107	; 0x6b
 8009990:	f000 fdaa 	bl	800a4e8 <__assert_func>
 8009994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009998:	6006      	str	r6, [r0, #0]
 800999a:	60c6      	str	r6, [r0, #12]
 800999c:	69e6      	ldr	r6, [r4, #28]
 800999e:	68f3      	ldr	r3, [r6, #12]
 80099a0:	b183      	cbz	r3, 80099c4 <_Balloc+0x50>
 80099a2:	69e3      	ldr	r3, [r4, #28]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099aa:	b9b8      	cbnz	r0, 80099dc <_Balloc+0x68>
 80099ac:	2101      	movs	r1, #1
 80099ae:	fa01 f605 	lsl.w	r6, r1, r5
 80099b2:	1d72      	adds	r2, r6, #5
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fdb4 	bl	800a524 <_calloc_r>
 80099bc:	b160      	cbz	r0, 80099d8 <_Balloc+0x64>
 80099be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099c2:	e00e      	b.n	80099e2 <_Balloc+0x6e>
 80099c4:	2221      	movs	r2, #33	; 0x21
 80099c6:	2104      	movs	r1, #4
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fdab 	bl	800a524 <_calloc_r>
 80099ce:	69e3      	ldr	r3, [r4, #28]
 80099d0:	60f0      	str	r0, [r6, #12]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e4      	bne.n	80099a2 <_Balloc+0x2e>
 80099d8:	2000      	movs	r0, #0
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	6802      	ldr	r2, [r0, #0]
 80099de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099e2:	2300      	movs	r3, #0
 80099e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099e8:	e7f7      	b.n	80099da <_Balloc+0x66>
 80099ea:	bf00      	nop
 80099ec:	0800ac09 	.word	0x0800ac09
 80099f0:	0800ac89 	.word	0x0800ac89

080099f4 <_Bfree>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	69c6      	ldr	r6, [r0, #28]
 80099f8:	4605      	mov	r5, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	b976      	cbnz	r6, 8009a1c <_Bfree+0x28>
 80099fe:	2010      	movs	r0, #16
 8009a00:	f7ff ff04 	bl	800980c <malloc>
 8009a04:	4602      	mov	r2, r0
 8009a06:	61e8      	str	r0, [r5, #28]
 8009a08:	b920      	cbnz	r0, 8009a14 <_Bfree+0x20>
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <_Bfree+0x3c>)
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <_Bfree+0x40>)
 8009a0e:	218f      	movs	r1, #143	; 0x8f
 8009a10:	f000 fd6a 	bl	800a4e8 <__assert_func>
 8009a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a18:	6006      	str	r6, [r0, #0]
 8009a1a:	60c6      	str	r6, [r0, #12]
 8009a1c:	b13c      	cbz	r4, 8009a2e <_Bfree+0x3a>
 8009a1e:	69eb      	ldr	r3, [r5, #28]
 8009a20:	6862      	ldr	r2, [r4, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a28:	6021      	str	r1, [r4, #0]
 8009a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	0800ac09 	.word	0x0800ac09
 8009a34:	0800ac89 	.word	0x0800ac89

08009a38 <__multadd>:
 8009a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3c:	690d      	ldr	r5, [r1, #16]
 8009a3e:	4607      	mov	r7, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	461e      	mov	r6, r3
 8009a44:	f101 0c14 	add.w	ip, r1, #20
 8009a48:	2000      	movs	r0, #0
 8009a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a4e:	b299      	uxth	r1, r3
 8009a50:	fb02 6101 	mla	r1, r2, r1, r6
 8009a54:	0c1e      	lsrs	r6, r3, #16
 8009a56:	0c0b      	lsrs	r3, r1, #16
 8009a58:	fb02 3306 	mla	r3, r2, r6, r3
 8009a5c:	b289      	uxth	r1, r1
 8009a5e:	3001      	adds	r0, #1
 8009a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a64:	4285      	cmp	r5, r0
 8009a66:	f84c 1b04 	str.w	r1, [ip], #4
 8009a6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a6e:	dcec      	bgt.n	8009a4a <__multadd+0x12>
 8009a70:	b30e      	cbz	r6, 8009ab6 <__multadd+0x7e>
 8009a72:	68a3      	ldr	r3, [r4, #8]
 8009a74:	42ab      	cmp	r3, r5
 8009a76:	dc19      	bgt.n	8009aac <__multadd+0x74>
 8009a78:	6861      	ldr	r1, [r4, #4]
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	3101      	adds	r1, #1
 8009a7e:	f7ff ff79 	bl	8009974 <_Balloc>
 8009a82:	4680      	mov	r8, r0
 8009a84:	b928      	cbnz	r0, 8009a92 <__multadd+0x5a>
 8009a86:	4602      	mov	r2, r0
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <__multadd+0x84>)
 8009a8a:	480d      	ldr	r0, [pc, #52]	; (8009ac0 <__multadd+0x88>)
 8009a8c:	21ba      	movs	r1, #186	; 0xba
 8009a8e:	f000 fd2b 	bl	800a4e8 <__assert_func>
 8009a92:	6922      	ldr	r2, [r4, #16]
 8009a94:	3202      	adds	r2, #2
 8009a96:	f104 010c 	add.w	r1, r4, #12
 8009a9a:	0092      	lsls	r2, r2, #2
 8009a9c:	300c      	adds	r0, #12
 8009a9e:	f000 fd15 	bl	800a4cc <memcpy>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7ff ffa5 	bl	80099f4 <_Bfree>
 8009aaa:	4644      	mov	r4, r8
 8009aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ab0:	3501      	adds	r5, #1
 8009ab2:	615e      	str	r6, [r3, #20]
 8009ab4:	6125      	str	r5, [r4, #16]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009abc:	0800ac78 	.word	0x0800ac78
 8009ac0:	0800ac89 	.word	0x0800ac89

08009ac4 <__hi0bits>:
 8009ac4:	0c03      	lsrs	r3, r0, #16
 8009ac6:	041b      	lsls	r3, r3, #16
 8009ac8:	b9d3      	cbnz	r3, 8009b00 <__hi0bits+0x3c>
 8009aca:	0400      	lsls	r0, r0, #16
 8009acc:	2310      	movs	r3, #16
 8009ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ad2:	bf04      	itt	eq
 8009ad4:	0200      	lsleq	r0, r0, #8
 8009ad6:	3308      	addeq	r3, #8
 8009ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009adc:	bf04      	itt	eq
 8009ade:	0100      	lsleq	r0, r0, #4
 8009ae0:	3304      	addeq	r3, #4
 8009ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ae6:	bf04      	itt	eq
 8009ae8:	0080      	lsleq	r0, r0, #2
 8009aea:	3302      	addeq	r3, #2
 8009aec:	2800      	cmp	r0, #0
 8009aee:	db05      	blt.n	8009afc <__hi0bits+0x38>
 8009af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009af4:	f103 0301 	add.w	r3, r3, #1
 8009af8:	bf08      	it	eq
 8009afa:	2320      	moveq	r3, #32
 8009afc:	4618      	mov	r0, r3
 8009afe:	4770      	bx	lr
 8009b00:	2300      	movs	r3, #0
 8009b02:	e7e4      	b.n	8009ace <__hi0bits+0xa>

08009b04 <__lo0bits>:
 8009b04:	6803      	ldr	r3, [r0, #0]
 8009b06:	f013 0207 	ands.w	r2, r3, #7
 8009b0a:	d00c      	beq.n	8009b26 <__lo0bits+0x22>
 8009b0c:	07d9      	lsls	r1, r3, #31
 8009b0e:	d422      	bmi.n	8009b56 <__lo0bits+0x52>
 8009b10:	079a      	lsls	r2, r3, #30
 8009b12:	bf49      	itett	mi
 8009b14:	085b      	lsrmi	r3, r3, #1
 8009b16:	089b      	lsrpl	r3, r3, #2
 8009b18:	6003      	strmi	r3, [r0, #0]
 8009b1a:	2201      	movmi	r2, #1
 8009b1c:	bf5c      	itt	pl
 8009b1e:	6003      	strpl	r3, [r0, #0]
 8009b20:	2202      	movpl	r2, #2
 8009b22:	4610      	mov	r0, r2
 8009b24:	4770      	bx	lr
 8009b26:	b299      	uxth	r1, r3
 8009b28:	b909      	cbnz	r1, 8009b2e <__lo0bits+0x2a>
 8009b2a:	0c1b      	lsrs	r3, r3, #16
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	b2d9      	uxtb	r1, r3
 8009b30:	b909      	cbnz	r1, 8009b36 <__lo0bits+0x32>
 8009b32:	3208      	adds	r2, #8
 8009b34:	0a1b      	lsrs	r3, r3, #8
 8009b36:	0719      	lsls	r1, r3, #28
 8009b38:	bf04      	itt	eq
 8009b3a:	091b      	lsreq	r3, r3, #4
 8009b3c:	3204      	addeq	r2, #4
 8009b3e:	0799      	lsls	r1, r3, #30
 8009b40:	bf04      	itt	eq
 8009b42:	089b      	lsreq	r3, r3, #2
 8009b44:	3202      	addeq	r2, #2
 8009b46:	07d9      	lsls	r1, r3, #31
 8009b48:	d403      	bmi.n	8009b52 <__lo0bits+0x4e>
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	f102 0201 	add.w	r2, r2, #1
 8009b50:	d003      	beq.n	8009b5a <__lo0bits+0x56>
 8009b52:	6003      	str	r3, [r0, #0]
 8009b54:	e7e5      	b.n	8009b22 <__lo0bits+0x1e>
 8009b56:	2200      	movs	r2, #0
 8009b58:	e7e3      	b.n	8009b22 <__lo0bits+0x1e>
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	e7e1      	b.n	8009b22 <__lo0bits+0x1e>
	...

08009b60 <__i2b>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	460c      	mov	r4, r1
 8009b64:	2101      	movs	r1, #1
 8009b66:	f7ff ff05 	bl	8009974 <_Balloc>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	b928      	cbnz	r0, 8009b7a <__i2b+0x1a>
 8009b6e:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <__i2b+0x24>)
 8009b70:	4805      	ldr	r0, [pc, #20]	; (8009b88 <__i2b+0x28>)
 8009b72:	f240 1145 	movw	r1, #325	; 0x145
 8009b76:	f000 fcb7 	bl	800a4e8 <__assert_func>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	6144      	str	r4, [r0, #20]
 8009b7e:	6103      	str	r3, [r0, #16]
 8009b80:	bd10      	pop	{r4, pc}
 8009b82:	bf00      	nop
 8009b84:	0800ac78 	.word	0x0800ac78
 8009b88:	0800ac89 	.word	0x0800ac89

08009b8c <__multiply>:
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	4691      	mov	r9, r2
 8009b92:	690a      	ldr	r2, [r1, #16]
 8009b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	bfb8      	it	lt
 8009b9c:	460b      	movlt	r3, r1
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	bfbc      	itt	lt
 8009ba2:	464c      	movlt	r4, r9
 8009ba4:	4699      	movlt	r9, r3
 8009ba6:	6927      	ldr	r7, [r4, #16]
 8009ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	6861      	ldr	r1, [r4, #4]
 8009bb0:	eb07 060a 	add.w	r6, r7, sl
 8009bb4:	42b3      	cmp	r3, r6
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	bfb8      	it	lt
 8009bba:	3101      	addlt	r1, #1
 8009bbc:	f7ff feda 	bl	8009974 <_Balloc>
 8009bc0:	b930      	cbnz	r0, 8009bd0 <__multiply+0x44>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	4b44      	ldr	r3, [pc, #272]	; (8009cd8 <__multiply+0x14c>)
 8009bc6:	4845      	ldr	r0, [pc, #276]	; (8009cdc <__multiply+0x150>)
 8009bc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009bcc:	f000 fc8c 	bl	800a4e8 <__assert_func>
 8009bd0:	f100 0514 	add.w	r5, r0, #20
 8009bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bd8:	462b      	mov	r3, r5
 8009bda:	2200      	movs	r2, #0
 8009bdc:	4543      	cmp	r3, r8
 8009bde:	d321      	bcc.n	8009c24 <__multiply+0x98>
 8009be0:	f104 0314 	add.w	r3, r4, #20
 8009be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009be8:	f109 0314 	add.w	r3, r9, #20
 8009bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bf0:	9202      	str	r2, [sp, #8]
 8009bf2:	1b3a      	subs	r2, r7, r4
 8009bf4:	3a15      	subs	r2, #21
 8009bf6:	f022 0203 	bic.w	r2, r2, #3
 8009bfa:	3204      	adds	r2, #4
 8009bfc:	f104 0115 	add.w	r1, r4, #21
 8009c00:	428f      	cmp	r7, r1
 8009c02:	bf38      	it	cc
 8009c04:	2204      	movcc	r2, #4
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	9a02      	ldr	r2, [sp, #8]
 8009c0a:	9303      	str	r3, [sp, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d80c      	bhi.n	8009c2a <__multiply+0x9e>
 8009c10:	2e00      	cmp	r6, #0
 8009c12:	dd03      	ble.n	8009c1c <__multiply+0x90>
 8009c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d05b      	beq.n	8009cd4 <__multiply+0x148>
 8009c1c:	6106      	str	r6, [r0, #16]
 8009c1e:	b005      	add	sp, #20
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	f843 2b04 	str.w	r2, [r3], #4
 8009c28:	e7d8      	b.n	8009bdc <__multiply+0x50>
 8009c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c2e:	f1ba 0f00 	cmp.w	sl, #0
 8009c32:	d024      	beq.n	8009c7e <__multiply+0xf2>
 8009c34:	f104 0e14 	add.w	lr, r4, #20
 8009c38:	46a9      	mov	r9, r5
 8009c3a:	f04f 0c00 	mov.w	ip, #0
 8009c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c42:	f8d9 1000 	ldr.w	r1, [r9]
 8009c46:	fa1f fb82 	uxth.w	fp, r2
 8009c4a:	b289      	uxth	r1, r1
 8009c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c54:	f8d9 2000 	ldr.w	r2, [r9]
 8009c58:	4461      	add	r1, ip
 8009c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c66:	b289      	uxth	r1, r1
 8009c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c6c:	4577      	cmp	r7, lr
 8009c6e:	f849 1b04 	str.w	r1, [r9], #4
 8009c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c76:	d8e2      	bhi.n	8009c3e <__multiply+0xb2>
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	f845 c002 	str.w	ip, [r5, r2]
 8009c7e:	9a03      	ldr	r2, [sp, #12]
 8009c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c84:	3304      	adds	r3, #4
 8009c86:	f1b9 0f00 	cmp.w	r9, #0
 8009c8a:	d021      	beq.n	8009cd0 <__multiply+0x144>
 8009c8c:	6829      	ldr	r1, [r5, #0]
 8009c8e:	f104 0c14 	add.w	ip, r4, #20
 8009c92:	46ae      	mov	lr, r5
 8009c94:	f04f 0a00 	mov.w	sl, #0
 8009c98:	f8bc b000 	ldrh.w	fp, [ip]
 8009c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ca4:	4452      	add	r2, sl
 8009ca6:	b289      	uxth	r1, r1
 8009ca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cac:	f84e 1b04 	str.w	r1, [lr], #4
 8009cb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cb8:	f8be 1000 	ldrh.w	r1, [lr]
 8009cbc:	fb09 110a 	mla	r1, r9, sl, r1
 8009cc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009cc4:	4567      	cmp	r7, ip
 8009cc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cca:	d8e5      	bhi.n	8009c98 <__multiply+0x10c>
 8009ccc:	9a01      	ldr	r2, [sp, #4]
 8009cce:	50a9      	str	r1, [r5, r2]
 8009cd0:	3504      	adds	r5, #4
 8009cd2:	e799      	b.n	8009c08 <__multiply+0x7c>
 8009cd4:	3e01      	subs	r6, #1
 8009cd6:	e79b      	b.n	8009c10 <__multiply+0x84>
 8009cd8:	0800ac78 	.word	0x0800ac78
 8009cdc:	0800ac89 	.word	0x0800ac89

08009ce0 <__pow5mult>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	4615      	mov	r5, r2
 8009ce6:	f012 0203 	ands.w	r2, r2, #3
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	d007      	beq.n	8009d00 <__pow5mult+0x20>
 8009cf0:	4c25      	ldr	r4, [pc, #148]	; (8009d88 <__pow5mult+0xa8>)
 8009cf2:	3a01      	subs	r2, #1
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cfa:	f7ff fe9d 	bl	8009a38 <__multadd>
 8009cfe:	4607      	mov	r7, r0
 8009d00:	10ad      	asrs	r5, r5, #2
 8009d02:	d03d      	beq.n	8009d80 <__pow5mult+0xa0>
 8009d04:	69f4      	ldr	r4, [r6, #28]
 8009d06:	b97c      	cbnz	r4, 8009d28 <__pow5mult+0x48>
 8009d08:	2010      	movs	r0, #16
 8009d0a:	f7ff fd7f 	bl	800980c <malloc>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	61f0      	str	r0, [r6, #28]
 8009d12:	b928      	cbnz	r0, 8009d20 <__pow5mult+0x40>
 8009d14:	4b1d      	ldr	r3, [pc, #116]	; (8009d8c <__pow5mult+0xac>)
 8009d16:	481e      	ldr	r0, [pc, #120]	; (8009d90 <__pow5mult+0xb0>)
 8009d18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d1c:	f000 fbe4 	bl	800a4e8 <__assert_func>
 8009d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d24:	6004      	str	r4, [r0, #0]
 8009d26:	60c4      	str	r4, [r0, #12]
 8009d28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d30:	b94c      	cbnz	r4, 8009d46 <__pow5mult+0x66>
 8009d32:	f240 2171 	movw	r1, #625	; 0x271
 8009d36:	4630      	mov	r0, r6
 8009d38:	f7ff ff12 	bl	8009b60 <__i2b>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d42:	4604      	mov	r4, r0
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	07eb      	lsls	r3, r5, #31
 8009d4c:	d50a      	bpl.n	8009d64 <__pow5mult+0x84>
 8009d4e:	4639      	mov	r1, r7
 8009d50:	4622      	mov	r2, r4
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ff1a 	bl	8009b8c <__multiply>
 8009d58:	4639      	mov	r1, r7
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7ff fe49 	bl	80099f4 <_Bfree>
 8009d62:	4647      	mov	r7, r8
 8009d64:	106d      	asrs	r5, r5, #1
 8009d66:	d00b      	beq.n	8009d80 <__pow5mult+0xa0>
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	b938      	cbnz	r0, 8009d7c <__pow5mult+0x9c>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff ff0b 	bl	8009b8c <__multiply>
 8009d76:	6020      	str	r0, [r4, #0]
 8009d78:	f8c0 9000 	str.w	r9, [r0]
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	e7e4      	b.n	8009d4a <__pow5mult+0x6a>
 8009d80:	4638      	mov	r0, r7
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d86:	bf00      	nop
 8009d88:	0800add8 	.word	0x0800add8
 8009d8c:	0800ac09 	.word	0x0800ac09
 8009d90:	0800ac89 	.word	0x0800ac89

08009d94 <__lshift>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	460c      	mov	r4, r1
 8009d9a:	6849      	ldr	r1, [r1, #4]
 8009d9c:	6923      	ldr	r3, [r4, #16]
 8009d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	4607      	mov	r7, r0
 8009da6:	4691      	mov	r9, r2
 8009da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dac:	f108 0601 	add.w	r6, r8, #1
 8009db0:	42b3      	cmp	r3, r6
 8009db2:	db0b      	blt.n	8009dcc <__lshift+0x38>
 8009db4:	4638      	mov	r0, r7
 8009db6:	f7ff fddd 	bl	8009974 <_Balloc>
 8009dba:	4605      	mov	r5, r0
 8009dbc:	b948      	cbnz	r0, 8009dd2 <__lshift+0x3e>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <__lshift+0xd0>)
 8009dc2:	4829      	ldr	r0, [pc, #164]	; (8009e68 <__lshift+0xd4>)
 8009dc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009dc8:	f000 fb8e 	bl	800a4e8 <__assert_func>
 8009dcc:	3101      	adds	r1, #1
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	e7ee      	b.n	8009db0 <__lshift+0x1c>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f100 0114 	add.w	r1, r0, #20
 8009dd8:	f100 0210 	add.w	r2, r0, #16
 8009ddc:	4618      	mov	r0, r3
 8009dde:	4553      	cmp	r3, sl
 8009de0:	db33      	blt.n	8009e4a <__lshift+0xb6>
 8009de2:	6920      	ldr	r0, [r4, #16]
 8009de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009de8:	f104 0314 	add.w	r3, r4, #20
 8009dec:	f019 091f 	ands.w	r9, r9, #31
 8009df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009df8:	d02b      	beq.n	8009e52 <__lshift+0xbe>
 8009dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8009dfe:	468a      	mov	sl, r1
 8009e00:	2200      	movs	r2, #0
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	fa00 f009 	lsl.w	r0, r0, r9
 8009e08:	4310      	orrs	r0, r2
 8009e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e12:	459c      	cmp	ip, r3
 8009e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e18:	d8f3      	bhi.n	8009e02 <__lshift+0x6e>
 8009e1a:	ebac 0304 	sub.w	r3, ip, r4
 8009e1e:	3b15      	subs	r3, #21
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	3304      	adds	r3, #4
 8009e26:	f104 0015 	add.w	r0, r4, #21
 8009e2a:	4584      	cmp	ip, r0
 8009e2c:	bf38      	it	cc
 8009e2e:	2304      	movcc	r3, #4
 8009e30:	50ca      	str	r2, [r1, r3]
 8009e32:	b10a      	cbz	r2, 8009e38 <__lshift+0xa4>
 8009e34:	f108 0602 	add.w	r6, r8, #2
 8009e38:	3e01      	subs	r6, #1
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	612e      	str	r6, [r5, #16]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	f7ff fdd8 	bl	80099f4 <_Bfree>
 8009e44:	4628      	mov	r0, r5
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e4e:	3301      	adds	r3, #1
 8009e50:	e7c5      	b.n	8009dde <__lshift+0x4a>
 8009e52:	3904      	subs	r1, #4
 8009e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e5c:	459c      	cmp	ip, r3
 8009e5e:	d8f9      	bhi.n	8009e54 <__lshift+0xc0>
 8009e60:	e7ea      	b.n	8009e38 <__lshift+0xa4>
 8009e62:	bf00      	nop
 8009e64:	0800ac78 	.word	0x0800ac78
 8009e68:	0800ac89 	.word	0x0800ac89

08009e6c <__mcmp>:
 8009e6c:	b530      	push	{r4, r5, lr}
 8009e6e:	6902      	ldr	r2, [r0, #16]
 8009e70:	690c      	ldr	r4, [r1, #16]
 8009e72:	1b12      	subs	r2, r2, r4
 8009e74:	d10e      	bne.n	8009e94 <__mcmp+0x28>
 8009e76:	f100 0314 	add.w	r3, r0, #20
 8009e7a:	3114      	adds	r1, #20
 8009e7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e8c:	42a5      	cmp	r5, r4
 8009e8e:	d003      	beq.n	8009e98 <__mcmp+0x2c>
 8009e90:	d305      	bcc.n	8009e9e <__mcmp+0x32>
 8009e92:	2201      	movs	r2, #1
 8009e94:	4610      	mov	r0, r2
 8009e96:	bd30      	pop	{r4, r5, pc}
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d3f3      	bcc.n	8009e84 <__mcmp+0x18>
 8009e9c:	e7fa      	b.n	8009e94 <__mcmp+0x28>
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea2:	e7f7      	b.n	8009e94 <__mcmp+0x28>

08009ea4 <__mdiff>:
 8009ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	4606      	mov	r6, r0
 8009eac:	4611      	mov	r1, r2
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4690      	mov	r8, r2
 8009eb2:	f7ff ffdb 	bl	8009e6c <__mcmp>
 8009eb6:	1e05      	subs	r5, r0, #0
 8009eb8:	d110      	bne.n	8009edc <__mdiff+0x38>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff fd59 	bl	8009974 <_Balloc>
 8009ec2:	b930      	cbnz	r0, 8009ed2 <__mdiff+0x2e>
 8009ec4:	4b3a      	ldr	r3, [pc, #232]	; (8009fb0 <__mdiff+0x10c>)
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	f240 2137 	movw	r1, #567	; 0x237
 8009ecc:	4839      	ldr	r0, [pc, #228]	; (8009fb4 <__mdiff+0x110>)
 8009ece:	f000 fb0b 	bl	800a4e8 <__assert_func>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	bfa4      	itt	ge
 8009ede:	4643      	movge	r3, r8
 8009ee0:	46a0      	movge	r8, r4
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ee8:	bfa6      	itte	ge
 8009eea:	461c      	movge	r4, r3
 8009eec:	2500      	movge	r5, #0
 8009eee:	2501      	movlt	r5, #1
 8009ef0:	f7ff fd40 	bl	8009974 <_Balloc>
 8009ef4:	b920      	cbnz	r0, 8009f00 <__mdiff+0x5c>
 8009ef6:	4b2e      	ldr	r3, [pc, #184]	; (8009fb0 <__mdiff+0x10c>)
 8009ef8:	4602      	mov	r2, r0
 8009efa:	f240 2145 	movw	r1, #581	; 0x245
 8009efe:	e7e5      	b.n	8009ecc <__mdiff+0x28>
 8009f00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f04:	6926      	ldr	r6, [r4, #16]
 8009f06:	60c5      	str	r5, [r0, #12]
 8009f08:	f104 0914 	add.w	r9, r4, #20
 8009f0c:	f108 0514 	add.w	r5, r8, #20
 8009f10:	f100 0e14 	add.w	lr, r0, #20
 8009f14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f1c:	f108 0210 	add.w	r2, r8, #16
 8009f20:	46f2      	mov	sl, lr
 8009f22:	2100      	movs	r1, #0
 8009f24:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f2c:	fa11 f88b 	uxtah	r8, r1, fp
 8009f30:	b299      	uxth	r1, r3
 8009f32:	0c1b      	lsrs	r3, r3, #16
 8009f34:	eba8 0801 	sub.w	r8, r8, r1
 8009f38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f40:	fa1f f888 	uxth.w	r8, r8
 8009f44:	1419      	asrs	r1, r3, #16
 8009f46:	454e      	cmp	r6, r9
 8009f48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f4c:	f84a 3b04 	str.w	r3, [sl], #4
 8009f50:	d8e8      	bhi.n	8009f24 <__mdiff+0x80>
 8009f52:	1b33      	subs	r3, r6, r4
 8009f54:	3b15      	subs	r3, #21
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	3415      	adds	r4, #21
 8009f5e:	42a6      	cmp	r6, r4
 8009f60:	bf38      	it	cc
 8009f62:	2304      	movcc	r3, #4
 8009f64:	441d      	add	r5, r3
 8009f66:	4473      	add	r3, lr
 8009f68:	469e      	mov	lr, r3
 8009f6a:	462e      	mov	r6, r5
 8009f6c:	4566      	cmp	r6, ip
 8009f6e:	d30e      	bcc.n	8009f8e <__mdiff+0xea>
 8009f70:	f10c 0203 	add.w	r2, ip, #3
 8009f74:	1b52      	subs	r2, r2, r5
 8009f76:	f022 0203 	bic.w	r2, r2, #3
 8009f7a:	3d03      	subs	r5, #3
 8009f7c:	45ac      	cmp	ip, r5
 8009f7e:	bf38      	it	cc
 8009f80:	2200      	movcc	r2, #0
 8009f82:	4413      	add	r3, r2
 8009f84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f88:	b17a      	cbz	r2, 8009faa <__mdiff+0x106>
 8009f8a:	6107      	str	r7, [r0, #16]
 8009f8c:	e7a4      	b.n	8009ed8 <__mdiff+0x34>
 8009f8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f92:	fa11 f288 	uxtah	r2, r1, r8
 8009f96:	1414      	asrs	r4, r2, #16
 8009f98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fa2:	f84e 2b04 	str.w	r2, [lr], #4
 8009fa6:	1421      	asrs	r1, r4, #16
 8009fa8:	e7e0      	b.n	8009f6c <__mdiff+0xc8>
 8009faa:	3f01      	subs	r7, #1
 8009fac:	e7ea      	b.n	8009f84 <__mdiff+0xe0>
 8009fae:	bf00      	nop
 8009fb0:	0800ac78 	.word	0x0800ac78
 8009fb4:	0800ac89 	.word	0x0800ac89

08009fb8 <__d2b>:
 8009fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	ec59 8b10 	vmov	r8, r9, d0
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	f7ff fcd5 	bl	8009974 <_Balloc>
 8009fca:	4604      	mov	r4, r0
 8009fcc:	b930      	cbnz	r0, 8009fdc <__d2b+0x24>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4b24      	ldr	r3, [pc, #144]	; (800a064 <__d2b+0xac>)
 8009fd2:	4825      	ldr	r0, [pc, #148]	; (800a068 <__d2b+0xb0>)
 8009fd4:	f240 310f 	movw	r1, #783	; 0x30f
 8009fd8:	f000 fa86 	bl	800a4e8 <__assert_func>
 8009fdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fe4:	bb2d      	cbnz	r5, 800a032 <__d2b+0x7a>
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	f1b8 0300 	subs.w	r3, r8, #0
 8009fec:	d026      	beq.n	800a03c <__d2b+0x84>
 8009fee:	4668      	mov	r0, sp
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	f7ff fd87 	bl	8009b04 <__lo0bits>
 8009ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ffa:	b1e8      	cbz	r0, 800a038 <__d2b+0x80>
 8009ffc:	f1c0 0320 	rsb	r3, r0, #32
 800a000:	fa02 f303 	lsl.w	r3, r2, r3
 800a004:	430b      	orrs	r3, r1
 800a006:	40c2      	lsrs	r2, r0
 800a008:	6163      	str	r3, [r4, #20]
 800a00a:	9201      	str	r2, [sp, #4]
 800a00c:	9b01      	ldr	r3, [sp, #4]
 800a00e:	61a3      	str	r3, [r4, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bf14      	ite	ne
 800a014:	2202      	movne	r2, #2
 800a016:	2201      	moveq	r2, #1
 800a018:	6122      	str	r2, [r4, #16]
 800a01a:	b1bd      	cbz	r5, 800a04c <__d2b+0x94>
 800a01c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a020:	4405      	add	r5, r0
 800a022:	603d      	str	r5, [r7, #0]
 800a024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a028:	6030      	str	r0, [r6, #0]
 800a02a:	4620      	mov	r0, r4
 800a02c:	b003      	add	sp, #12
 800a02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a036:	e7d6      	b.n	8009fe6 <__d2b+0x2e>
 800a038:	6161      	str	r1, [r4, #20]
 800a03a:	e7e7      	b.n	800a00c <__d2b+0x54>
 800a03c:	a801      	add	r0, sp, #4
 800a03e:	f7ff fd61 	bl	8009b04 <__lo0bits>
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	6163      	str	r3, [r4, #20]
 800a046:	3020      	adds	r0, #32
 800a048:	2201      	movs	r2, #1
 800a04a:	e7e5      	b.n	800a018 <__d2b+0x60>
 800a04c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a054:	6038      	str	r0, [r7, #0]
 800a056:	6918      	ldr	r0, [r3, #16]
 800a058:	f7ff fd34 	bl	8009ac4 <__hi0bits>
 800a05c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a060:	e7e2      	b.n	800a028 <__d2b+0x70>
 800a062:	bf00      	nop
 800a064:	0800ac78 	.word	0x0800ac78
 800a068:	0800ac89 	.word	0x0800ac89

0800a06c <__ssputs_r>:
 800a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	688e      	ldr	r6, [r1, #8]
 800a072:	461f      	mov	r7, r3
 800a074:	42be      	cmp	r6, r7
 800a076:	680b      	ldr	r3, [r1, #0]
 800a078:	4682      	mov	sl, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	4690      	mov	r8, r2
 800a07e:	d82c      	bhi.n	800a0da <__ssputs_r+0x6e>
 800a080:	898a      	ldrh	r2, [r1, #12]
 800a082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a086:	d026      	beq.n	800a0d6 <__ssputs_r+0x6a>
 800a088:	6965      	ldr	r5, [r4, #20]
 800a08a:	6909      	ldr	r1, [r1, #16]
 800a08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a090:	eba3 0901 	sub.w	r9, r3, r1
 800a094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a098:	1c7b      	adds	r3, r7, #1
 800a09a:	444b      	add	r3, r9
 800a09c:	106d      	asrs	r5, r5, #1
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	bf38      	it	cc
 800a0a2:	461d      	movcc	r5, r3
 800a0a4:	0553      	lsls	r3, r2, #21
 800a0a6:	d527      	bpl.n	800a0f8 <__ssputs_r+0x8c>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7ff fbd7 	bl	800985c <_malloc_r>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	b360      	cbz	r0, 800a10c <__ssputs_r+0xa0>
 800a0b2:	6921      	ldr	r1, [r4, #16]
 800a0b4:	464a      	mov	r2, r9
 800a0b6:	f000 fa09 	bl	800a4cc <memcpy>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6126      	str	r6, [r4, #16]
 800a0c8:	6165      	str	r5, [r4, #20]
 800a0ca:	444e      	add	r6, r9
 800a0cc:	eba5 0509 	sub.w	r5, r5, r9
 800a0d0:	6026      	str	r6, [r4, #0]
 800a0d2:	60a5      	str	r5, [r4, #8]
 800a0d4:	463e      	mov	r6, r7
 800a0d6:	42be      	cmp	r6, r7
 800a0d8:	d900      	bls.n	800a0dc <__ssputs_r+0x70>
 800a0da:	463e      	mov	r6, r7
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	f000 f9c9 	bl	800a478 <memmove>
 800a0e6:	68a3      	ldr	r3, [r4, #8]
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	4433      	add	r3, r6
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	f000 fa3b 	bl	800a574 <_realloc_r>
 800a0fe:	4606      	mov	r6, r0
 800a100:	2800      	cmp	r0, #0
 800a102:	d1e0      	bne.n	800a0c6 <__ssputs_r+0x5a>
 800a104:	6921      	ldr	r1, [r4, #16]
 800a106:	4650      	mov	r0, sl
 800a108:	f7ff fb34 	bl	8009774 <_free_r>
 800a10c:	230c      	movs	r3, #12
 800a10e:	f8ca 3000 	str.w	r3, [sl]
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295
 800a11e:	e7e9      	b.n	800a0f4 <__ssputs_r+0x88>

0800a120 <_svfiprintf_r>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4698      	mov	r8, r3
 800a126:	898b      	ldrh	r3, [r1, #12]
 800a128:	061b      	lsls	r3, r3, #24
 800a12a:	b09d      	sub	sp, #116	; 0x74
 800a12c:	4607      	mov	r7, r0
 800a12e:	460d      	mov	r5, r1
 800a130:	4614      	mov	r4, r2
 800a132:	d50e      	bpl.n	800a152 <_svfiprintf_r+0x32>
 800a134:	690b      	ldr	r3, [r1, #16]
 800a136:	b963      	cbnz	r3, 800a152 <_svfiprintf_r+0x32>
 800a138:	2140      	movs	r1, #64	; 0x40
 800a13a:	f7ff fb8f 	bl	800985c <_malloc_r>
 800a13e:	6028      	str	r0, [r5, #0]
 800a140:	6128      	str	r0, [r5, #16]
 800a142:	b920      	cbnz	r0, 800a14e <_svfiprintf_r+0x2e>
 800a144:	230c      	movs	r3, #12
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e0d0      	b.n	800a2f0 <_svfiprintf_r+0x1d0>
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	616b      	str	r3, [r5, #20]
 800a152:	2300      	movs	r3, #0
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	2320      	movs	r3, #32
 800a158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a15c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a160:	2330      	movs	r3, #48	; 0x30
 800a162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a308 <_svfiprintf_r+0x1e8>
 800a166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a16a:	f04f 0901 	mov.w	r9, #1
 800a16e:	4623      	mov	r3, r4
 800a170:	469a      	mov	sl, r3
 800a172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a176:	b10a      	cbz	r2, 800a17c <_svfiprintf_r+0x5c>
 800a178:	2a25      	cmp	r2, #37	; 0x25
 800a17a:	d1f9      	bne.n	800a170 <_svfiprintf_r+0x50>
 800a17c:	ebba 0b04 	subs.w	fp, sl, r4
 800a180:	d00b      	beq.n	800a19a <_svfiprintf_r+0x7a>
 800a182:	465b      	mov	r3, fp
 800a184:	4622      	mov	r2, r4
 800a186:	4629      	mov	r1, r5
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff ff6f 	bl	800a06c <__ssputs_r>
 800a18e:	3001      	adds	r0, #1
 800a190:	f000 80a9 	beq.w	800a2e6 <_svfiprintf_r+0x1c6>
 800a194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a196:	445a      	add	r2, fp
 800a198:	9209      	str	r2, [sp, #36]	; 0x24
 800a19a:	f89a 3000 	ldrb.w	r3, [sl]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 80a1 	beq.w	800a2e6 <_svfiprintf_r+0x1c6>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ae:	f10a 0a01 	add.w	sl, sl, #1
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	9307      	str	r3, [sp, #28]
 800a1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a1bc:	4654      	mov	r4, sl
 800a1be:	2205      	movs	r2, #5
 800a1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c4:	4850      	ldr	r0, [pc, #320]	; (800a308 <_svfiprintf_r+0x1e8>)
 800a1c6:	f7f6 f80b 	bl	80001e0 <memchr>
 800a1ca:	9a04      	ldr	r2, [sp, #16]
 800a1cc:	b9d8      	cbnz	r0, 800a206 <_svfiprintf_r+0xe6>
 800a1ce:	06d0      	lsls	r0, r2, #27
 800a1d0:	bf44      	itt	mi
 800a1d2:	2320      	movmi	r3, #32
 800a1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d8:	0711      	lsls	r1, r2, #28
 800a1da:	bf44      	itt	mi
 800a1dc:	232b      	movmi	r3, #43	; 0x2b
 800a1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e8:	d015      	beq.n	800a216 <_svfiprintf_r+0xf6>
 800a1ea:	9a07      	ldr	r2, [sp, #28]
 800a1ec:	4654      	mov	r4, sl
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f04f 0c0a 	mov.w	ip, #10
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1fa:	3b30      	subs	r3, #48	; 0x30
 800a1fc:	2b09      	cmp	r3, #9
 800a1fe:	d94d      	bls.n	800a29c <_svfiprintf_r+0x17c>
 800a200:	b1b0      	cbz	r0, 800a230 <_svfiprintf_r+0x110>
 800a202:	9207      	str	r2, [sp, #28]
 800a204:	e014      	b.n	800a230 <_svfiprintf_r+0x110>
 800a206:	eba0 0308 	sub.w	r3, r0, r8
 800a20a:	fa09 f303 	lsl.w	r3, r9, r3
 800a20e:	4313      	orrs	r3, r2
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	46a2      	mov	sl, r4
 800a214:	e7d2      	b.n	800a1bc <_svfiprintf_r+0x9c>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	1d19      	adds	r1, r3, #4
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	9103      	str	r1, [sp, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbb      	ittet	lt
 800a222:	425b      	neglt	r3, r3
 800a224:	f042 0202 	orrlt.w	r2, r2, #2
 800a228:	9307      	strge	r3, [sp, #28]
 800a22a:	9307      	strlt	r3, [sp, #28]
 800a22c:	bfb8      	it	lt
 800a22e:	9204      	strlt	r2, [sp, #16]
 800a230:	7823      	ldrb	r3, [r4, #0]
 800a232:	2b2e      	cmp	r3, #46	; 0x2e
 800a234:	d10c      	bne.n	800a250 <_svfiprintf_r+0x130>
 800a236:	7863      	ldrb	r3, [r4, #1]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d134      	bne.n	800a2a6 <_svfiprintf_r+0x186>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1d1a      	adds	r2, r3, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	9203      	str	r2, [sp, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	bfb8      	it	lt
 800a248:	f04f 33ff 	movlt.w	r3, #4294967295
 800a24c:	3402      	adds	r4, #2
 800a24e:	9305      	str	r3, [sp, #20]
 800a250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a318 <_svfiprintf_r+0x1f8>
 800a254:	7821      	ldrb	r1, [r4, #0]
 800a256:	2203      	movs	r2, #3
 800a258:	4650      	mov	r0, sl
 800a25a:	f7f5 ffc1 	bl	80001e0 <memchr>
 800a25e:	b138      	cbz	r0, 800a270 <_svfiprintf_r+0x150>
 800a260:	9b04      	ldr	r3, [sp, #16]
 800a262:	eba0 000a 	sub.w	r0, r0, sl
 800a266:	2240      	movs	r2, #64	; 0x40
 800a268:	4082      	lsls	r2, r0
 800a26a:	4313      	orrs	r3, r2
 800a26c:	3401      	adds	r4, #1
 800a26e:	9304      	str	r3, [sp, #16]
 800a270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a274:	4825      	ldr	r0, [pc, #148]	; (800a30c <_svfiprintf_r+0x1ec>)
 800a276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a27a:	2206      	movs	r2, #6
 800a27c:	f7f5 ffb0 	bl	80001e0 <memchr>
 800a280:	2800      	cmp	r0, #0
 800a282:	d038      	beq.n	800a2f6 <_svfiprintf_r+0x1d6>
 800a284:	4b22      	ldr	r3, [pc, #136]	; (800a310 <_svfiprintf_r+0x1f0>)
 800a286:	bb1b      	cbnz	r3, 800a2d0 <_svfiprintf_r+0x1b0>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	3307      	adds	r3, #7
 800a28c:	f023 0307 	bic.w	r3, r3, #7
 800a290:	3308      	adds	r3, #8
 800a292:	9303      	str	r3, [sp, #12]
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	4433      	add	r3, r6
 800a298:	9309      	str	r3, [sp, #36]	; 0x24
 800a29a:	e768      	b.n	800a16e <_svfiprintf_r+0x4e>
 800a29c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	e7a6      	b.n	800a1f4 <_svfiprintf_r+0xd4>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f04f 0c0a 	mov.w	ip, #10
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b8:	3a30      	subs	r2, #48	; 0x30
 800a2ba:	2a09      	cmp	r2, #9
 800a2bc:	d903      	bls.n	800a2c6 <_svfiprintf_r+0x1a6>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0c6      	beq.n	800a250 <_svfiprintf_r+0x130>
 800a2c2:	9105      	str	r1, [sp, #20]
 800a2c4:	e7c4      	b.n	800a250 <_svfiprintf_r+0x130>
 800a2c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e7f0      	b.n	800a2b2 <_svfiprintf_r+0x192>
 800a2d0:	ab03      	add	r3, sp, #12
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <_svfiprintf_r+0x1f4>)
 800a2d8:	a904      	add	r1, sp, #16
 800a2da:	4638      	mov	r0, r7
 800a2dc:	f7fd fe62 	bl	8007fa4 <_printf_float>
 800a2e0:	1c42      	adds	r2, r0, #1
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	d1d6      	bne.n	800a294 <_svfiprintf_r+0x174>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	065b      	lsls	r3, r3, #25
 800a2ea:	f53f af2d 	bmi.w	800a148 <_svfiprintf_r+0x28>
 800a2ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2f0:	b01d      	add	sp, #116	; 0x74
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <_svfiprintf_r+0x1f4>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	4638      	mov	r0, r7
 800a302:	f7fe f8f3 	bl	80084ec <_printf_i>
 800a306:	e7eb      	b.n	800a2e0 <_svfiprintf_r+0x1c0>
 800a308:	0800ade4 	.word	0x0800ade4
 800a30c:	0800adee 	.word	0x0800adee
 800a310:	08007fa5 	.word	0x08007fa5
 800a314:	0800a06d 	.word	0x0800a06d
 800a318:	0800adea 	.word	0x0800adea

0800a31c <__sflush_r>:
 800a31c:	898a      	ldrh	r2, [r1, #12]
 800a31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	4605      	mov	r5, r0
 800a324:	0710      	lsls	r0, r2, #28
 800a326:	460c      	mov	r4, r1
 800a328:	d458      	bmi.n	800a3dc <__sflush_r+0xc0>
 800a32a:	684b      	ldr	r3, [r1, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dc05      	bgt.n	800a33c <__sflush_r+0x20>
 800a330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	dc02      	bgt.n	800a33c <__sflush_r+0x20>
 800a336:	2000      	movs	r0, #0
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d0f9      	beq.n	800a336 <__sflush_r+0x1a>
 800a342:	2300      	movs	r3, #0
 800a344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a348:	682f      	ldr	r7, [r5, #0]
 800a34a:	6a21      	ldr	r1, [r4, #32]
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	d032      	beq.n	800a3b6 <__sflush_r+0x9a>
 800a350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	075a      	lsls	r2, r3, #29
 800a356:	d505      	bpl.n	800a364 <__sflush_r+0x48>
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	1ac0      	subs	r0, r0, r3
 800a35c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a35e:	b10b      	cbz	r3, 800a364 <__sflush_r+0x48>
 800a360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a362:	1ac0      	subs	r0, r0, r3
 800a364:	2300      	movs	r3, #0
 800a366:	4602      	mov	r2, r0
 800a368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a36a:	6a21      	ldr	r1, [r4, #32]
 800a36c:	4628      	mov	r0, r5
 800a36e:	47b0      	blx	r6
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	d106      	bne.n	800a384 <__sflush_r+0x68>
 800a376:	6829      	ldr	r1, [r5, #0]
 800a378:	291d      	cmp	r1, #29
 800a37a:	d82b      	bhi.n	800a3d4 <__sflush_r+0xb8>
 800a37c:	4a29      	ldr	r2, [pc, #164]	; (800a424 <__sflush_r+0x108>)
 800a37e:	410a      	asrs	r2, r1
 800a380:	07d6      	lsls	r6, r2, #31
 800a382:	d427      	bmi.n	800a3d4 <__sflush_r+0xb8>
 800a384:	2200      	movs	r2, #0
 800a386:	6062      	str	r2, [r4, #4]
 800a388:	04d9      	lsls	r1, r3, #19
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	6022      	str	r2, [r4, #0]
 800a38e:	d504      	bpl.n	800a39a <__sflush_r+0x7e>
 800a390:	1c42      	adds	r2, r0, #1
 800a392:	d101      	bne.n	800a398 <__sflush_r+0x7c>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b903      	cbnz	r3, 800a39a <__sflush_r+0x7e>
 800a398:	6560      	str	r0, [r4, #84]	; 0x54
 800a39a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39c:	602f      	str	r7, [r5, #0]
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	d0c9      	beq.n	800a336 <__sflush_r+0x1a>
 800a3a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a6:	4299      	cmp	r1, r3
 800a3a8:	d002      	beq.n	800a3b0 <__sflush_r+0x94>
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f7ff f9e2 	bl	8009774 <_free_r>
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a3b4:	e7c0      	b.n	800a338 <__sflush_r+0x1c>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b0      	blx	r6
 800a3bc:	1c41      	adds	r1, r0, #1
 800a3be:	d1c8      	bne.n	800a352 <__sflush_r+0x36>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0c5      	beq.n	800a352 <__sflush_r+0x36>
 800a3c6:	2b1d      	cmp	r3, #29
 800a3c8:	d001      	beq.n	800a3ce <__sflush_r+0xb2>
 800a3ca:	2b16      	cmp	r3, #22
 800a3cc:	d101      	bne.n	800a3d2 <__sflush_r+0xb6>
 800a3ce:	602f      	str	r7, [r5, #0]
 800a3d0:	e7b1      	b.n	800a336 <__sflush_r+0x1a>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d8:	81a3      	strh	r3, [r4, #12]
 800a3da:	e7ad      	b.n	800a338 <__sflush_r+0x1c>
 800a3dc:	690f      	ldr	r7, [r1, #16]
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	d0a9      	beq.n	800a336 <__sflush_r+0x1a>
 800a3e2:	0793      	lsls	r3, r2, #30
 800a3e4:	680e      	ldr	r6, [r1, #0]
 800a3e6:	bf08      	it	eq
 800a3e8:	694b      	ldreq	r3, [r1, #20]
 800a3ea:	600f      	str	r7, [r1, #0]
 800a3ec:	bf18      	it	ne
 800a3ee:	2300      	movne	r3, #0
 800a3f0:	eba6 0807 	sub.w	r8, r6, r7
 800a3f4:	608b      	str	r3, [r1, #8]
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	dd9c      	ble.n	800a336 <__sflush_r+0x1a>
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a400:	4643      	mov	r3, r8
 800a402:	463a      	mov	r2, r7
 800a404:	4628      	mov	r0, r5
 800a406:	47b0      	blx	r6
 800a408:	2800      	cmp	r0, #0
 800a40a:	dc06      	bgt.n	800a41a <__sflush_r+0xfe>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e78e      	b.n	800a338 <__sflush_r+0x1c>
 800a41a:	4407      	add	r7, r0
 800a41c:	eba8 0800 	sub.w	r8, r8, r0
 800a420:	e7e9      	b.n	800a3f6 <__sflush_r+0xda>
 800a422:	bf00      	nop
 800a424:	dfbffffe 	.word	0xdfbffffe

0800a428 <_fflush_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	690b      	ldr	r3, [r1, #16]
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	b913      	cbnz	r3, 800a438 <_fflush_r+0x10>
 800a432:	2500      	movs	r5, #0
 800a434:	4628      	mov	r0, r5
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	b118      	cbz	r0, 800a442 <_fflush_r+0x1a>
 800a43a:	6a03      	ldr	r3, [r0, #32]
 800a43c:	b90b      	cbnz	r3, 800a442 <_fflush_r+0x1a>
 800a43e:	f7fe fa03 	bl	8008848 <__sinit>
 800a442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0f3      	beq.n	800a432 <_fflush_r+0xa>
 800a44a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a44c:	07d0      	lsls	r0, r2, #31
 800a44e:	d404      	bmi.n	800a45a <_fflush_r+0x32>
 800a450:	0599      	lsls	r1, r3, #22
 800a452:	d402      	bmi.n	800a45a <_fflush_r+0x32>
 800a454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a456:	f7fe fb0e 	bl	8008a76 <__retarget_lock_acquire_recursive>
 800a45a:	4628      	mov	r0, r5
 800a45c:	4621      	mov	r1, r4
 800a45e:	f7ff ff5d 	bl	800a31c <__sflush_r>
 800a462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a464:	07da      	lsls	r2, r3, #31
 800a466:	4605      	mov	r5, r0
 800a468:	d4e4      	bmi.n	800a434 <_fflush_r+0xc>
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	059b      	lsls	r3, r3, #22
 800a46e:	d4e1      	bmi.n	800a434 <_fflush_r+0xc>
 800a470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a472:	f7fe fb01 	bl	8008a78 <__retarget_lock_release_recursive>
 800a476:	e7dd      	b.n	800a434 <_fflush_r+0xc>

0800a478 <memmove>:
 800a478:	4288      	cmp	r0, r1
 800a47a:	b510      	push	{r4, lr}
 800a47c:	eb01 0402 	add.w	r4, r1, r2
 800a480:	d902      	bls.n	800a488 <memmove+0x10>
 800a482:	4284      	cmp	r4, r0
 800a484:	4623      	mov	r3, r4
 800a486:	d807      	bhi.n	800a498 <memmove+0x20>
 800a488:	1e43      	subs	r3, r0, #1
 800a48a:	42a1      	cmp	r1, r4
 800a48c:	d008      	beq.n	800a4a0 <memmove+0x28>
 800a48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a492:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a496:	e7f8      	b.n	800a48a <memmove+0x12>
 800a498:	4402      	add	r2, r0
 800a49a:	4601      	mov	r1, r0
 800a49c:	428a      	cmp	r2, r1
 800a49e:	d100      	bne.n	800a4a2 <memmove+0x2a>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4aa:	e7f7      	b.n	800a49c <memmove+0x24>

0800a4ac <_sbrk_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d06      	ldr	r5, [pc, #24]	; (800a4c8 <_sbrk_r+0x1c>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	f7f7 f9c0 	bl	800183c <_sbrk>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_sbrk_r+0x1a>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_sbrk_r+0x1a>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	200005cc 	.word	0x200005cc

0800a4cc <memcpy>:
 800a4cc:	440a      	add	r2, r1
 800a4ce:	4291      	cmp	r1, r2
 800a4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4d4:	d100      	bne.n	800a4d8 <memcpy+0xc>
 800a4d6:	4770      	bx	lr
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4e2:	4291      	cmp	r1, r2
 800a4e4:	d1f9      	bne.n	800a4da <memcpy+0xe>
 800a4e6:	bd10      	pop	{r4, pc}

0800a4e8 <__assert_func>:
 800a4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4b09      	ldr	r3, [pc, #36]	; (800a514 <__assert_func+0x2c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	68d8      	ldr	r0, [r3, #12]
 800a4f6:	b14c      	cbz	r4, 800a50c <__assert_func+0x24>
 800a4f8:	4b07      	ldr	r3, [pc, #28]	; (800a518 <__assert_func+0x30>)
 800a4fa:	9100      	str	r1, [sp, #0]
 800a4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a500:	4906      	ldr	r1, [pc, #24]	; (800a51c <__assert_func+0x34>)
 800a502:	462b      	mov	r3, r5
 800a504:	f000 f872 	bl	800a5ec <fiprintf>
 800a508:	f000 f882 	bl	800a610 <abort>
 800a50c:	4b04      	ldr	r3, [pc, #16]	; (800a520 <__assert_func+0x38>)
 800a50e:	461c      	mov	r4, r3
 800a510:	e7f3      	b.n	800a4fa <__assert_func+0x12>
 800a512:	bf00      	nop
 800a514:	2000011c 	.word	0x2000011c
 800a518:	0800adff 	.word	0x0800adff
 800a51c:	0800ae0c 	.word	0x0800ae0c
 800a520:	0800ae3a 	.word	0x0800ae3a

0800a524 <_calloc_r>:
 800a524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a526:	fba1 2402 	umull	r2, r4, r1, r2
 800a52a:	b94c      	cbnz	r4, 800a540 <_calloc_r+0x1c>
 800a52c:	4611      	mov	r1, r2
 800a52e:	9201      	str	r2, [sp, #4]
 800a530:	f7ff f994 	bl	800985c <_malloc_r>
 800a534:	9a01      	ldr	r2, [sp, #4]
 800a536:	4605      	mov	r5, r0
 800a538:	b930      	cbnz	r0, 800a548 <_calloc_r+0x24>
 800a53a:	4628      	mov	r0, r5
 800a53c:	b003      	add	sp, #12
 800a53e:	bd30      	pop	{r4, r5, pc}
 800a540:	220c      	movs	r2, #12
 800a542:	6002      	str	r2, [r0, #0]
 800a544:	2500      	movs	r5, #0
 800a546:	e7f8      	b.n	800a53a <_calloc_r+0x16>
 800a548:	4621      	mov	r1, r4
 800a54a:	f7fe fa16 	bl	800897a <memset>
 800a54e:	e7f4      	b.n	800a53a <_calloc_r+0x16>

0800a550 <__ascii_mbtowc>:
 800a550:	b082      	sub	sp, #8
 800a552:	b901      	cbnz	r1, 800a556 <__ascii_mbtowc+0x6>
 800a554:	a901      	add	r1, sp, #4
 800a556:	b142      	cbz	r2, 800a56a <__ascii_mbtowc+0x1a>
 800a558:	b14b      	cbz	r3, 800a56e <__ascii_mbtowc+0x1e>
 800a55a:	7813      	ldrb	r3, [r2, #0]
 800a55c:	600b      	str	r3, [r1, #0]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	1e10      	subs	r0, r2, #0
 800a562:	bf18      	it	ne
 800a564:	2001      	movne	r0, #1
 800a566:	b002      	add	sp, #8
 800a568:	4770      	bx	lr
 800a56a:	4610      	mov	r0, r2
 800a56c:	e7fb      	b.n	800a566 <__ascii_mbtowc+0x16>
 800a56e:	f06f 0001 	mvn.w	r0, #1
 800a572:	e7f8      	b.n	800a566 <__ascii_mbtowc+0x16>

0800a574 <_realloc_r>:
 800a574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a578:	4680      	mov	r8, r0
 800a57a:	4614      	mov	r4, r2
 800a57c:	460e      	mov	r6, r1
 800a57e:	b921      	cbnz	r1, 800a58a <_realloc_r+0x16>
 800a580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4611      	mov	r1, r2
 800a586:	f7ff b969 	b.w	800985c <_malloc_r>
 800a58a:	b92a      	cbnz	r2, 800a598 <_realloc_r+0x24>
 800a58c:	f7ff f8f2 	bl	8009774 <_free_r>
 800a590:	4625      	mov	r5, r4
 800a592:	4628      	mov	r0, r5
 800a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a598:	f000 f841 	bl	800a61e <_malloc_usable_size_r>
 800a59c:	4284      	cmp	r4, r0
 800a59e:	4607      	mov	r7, r0
 800a5a0:	d802      	bhi.n	800a5a8 <_realloc_r+0x34>
 800a5a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5a6:	d812      	bhi.n	800a5ce <_realloc_r+0x5a>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	f7ff f956 	bl	800985c <_malloc_r>
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d0ed      	beq.n	800a592 <_realloc_r+0x1e>
 800a5b6:	42bc      	cmp	r4, r7
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	bf28      	it	cs
 800a5be:	463a      	movcs	r2, r7
 800a5c0:	f7ff ff84 	bl	800a4cc <memcpy>
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f7ff f8d4 	bl	8009774 <_free_r>
 800a5cc:	e7e1      	b.n	800a592 <_realloc_r+0x1e>
 800a5ce:	4635      	mov	r5, r6
 800a5d0:	e7df      	b.n	800a592 <_realloc_r+0x1e>

0800a5d2 <__ascii_wctomb>:
 800a5d2:	b149      	cbz	r1, 800a5e8 <__ascii_wctomb+0x16>
 800a5d4:	2aff      	cmp	r2, #255	; 0xff
 800a5d6:	bf85      	ittet	hi
 800a5d8:	238a      	movhi	r3, #138	; 0x8a
 800a5da:	6003      	strhi	r3, [r0, #0]
 800a5dc:	700a      	strbls	r2, [r1, #0]
 800a5de:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5e2:	bf98      	it	ls
 800a5e4:	2001      	movls	r0, #1
 800a5e6:	4770      	bx	lr
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4770      	bx	lr

0800a5ec <fiprintf>:
 800a5ec:	b40e      	push	{r1, r2, r3}
 800a5ee:	b503      	push	{r0, r1, lr}
 800a5f0:	4601      	mov	r1, r0
 800a5f2:	ab03      	add	r3, sp, #12
 800a5f4:	4805      	ldr	r0, [pc, #20]	; (800a60c <fiprintf+0x20>)
 800a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fa:	6800      	ldr	r0, [r0, #0]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f000 f83f 	bl	800a680 <_vfiprintf_r>
 800a602:	b002      	add	sp, #8
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b003      	add	sp, #12
 800a60a:	4770      	bx	lr
 800a60c:	2000011c 	.word	0x2000011c

0800a610 <abort>:
 800a610:	b508      	push	{r3, lr}
 800a612:	2006      	movs	r0, #6
 800a614:	f000 fa0c 	bl	800aa30 <raise>
 800a618:	2001      	movs	r0, #1
 800a61a:	f7f7 f897 	bl	800174c <_exit>

0800a61e <_malloc_usable_size_r>:
 800a61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a622:	1f18      	subs	r0, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	bfbc      	itt	lt
 800a628:	580b      	ldrlt	r3, [r1, r0]
 800a62a:	18c0      	addlt	r0, r0, r3
 800a62c:	4770      	bx	lr

0800a62e <__sfputc_r>:
 800a62e:	6893      	ldr	r3, [r2, #8]
 800a630:	3b01      	subs	r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	b410      	push	{r4}
 800a636:	6093      	str	r3, [r2, #8]
 800a638:	da08      	bge.n	800a64c <__sfputc_r+0x1e>
 800a63a:	6994      	ldr	r4, [r2, #24]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	db01      	blt.n	800a644 <__sfputc_r+0x16>
 800a640:	290a      	cmp	r1, #10
 800a642:	d103      	bne.n	800a64c <__sfputc_r+0x1e>
 800a644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a648:	f000 b934 	b.w	800a8b4 <__swbuf_r>
 800a64c:	6813      	ldr	r3, [r2, #0]
 800a64e:	1c58      	adds	r0, r3, #1
 800a650:	6010      	str	r0, [r2, #0]
 800a652:	7019      	strb	r1, [r3, #0]
 800a654:	4608      	mov	r0, r1
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <__sfputs_r>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	4606      	mov	r6, r0
 800a660:	460f      	mov	r7, r1
 800a662:	4614      	mov	r4, r2
 800a664:	18d5      	adds	r5, r2, r3
 800a666:	42ac      	cmp	r4, r5
 800a668:	d101      	bne.n	800a66e <__sfputs_r+0x12>
 800a66a:	2000      	movs	r0, #0
 800a66c:	e007      	b.n	800a67e <__sfputs_r+0x22>
 800a66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a672:	463a      	mov	r2, r7
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff ffda 	bl	800a62e <__sfputc_r>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d1f3      	bne.n	800a666 <__sfputs_r+0xa>
 800a67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a680 <_vfiprintf_r>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	460d      	mov	r5, r1
 800a686:	b09d      	sub	sp, #116	; 0x74
 800a688:	4614      	mov	r4, r2
 800a68a:	4698      	mov	r8, r3
 800a68c:	4606      	mov	r6, r0
 800a68e:	b118      	cbz	r0, 800a698 <_vfiprintf_r+0x18>
 800a690:	6a03      	ldr	r3, [r0, #32]
 800a692:	b90b      	cbnz	r3, 800a698 <_vfiprintf_r+0x18>
 800a694:	f7fe f8d8 	bl	8008848 <__sinit>
 800a698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a69a:	07d9      	lsls	r1, r3, #31
 800a69c:	d405      	bmi.n	800a6aa <_vfiprintf_r+0x2a>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	059a      	lsls	r2, r3, #22
 800a6a2:	d402      	bmi.n	800a6aa <_vfiprintf_r+0x2a>
 800a6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a6:	f7fe f9e6 	bl	8008a76 <__retarget_lock_acquire_recursive>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	071b      	lsls	r3, r3, #28
 800a6ae:	d501      	bpl.n	800a6b4 <_vfiprintf_r+0x34>
 800a6b0:	692b      	ldr	r3, [r5, #16]
 800a6b2:	b99b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x5c>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 f93a 	bl	800a930 <__swsetup_r>
 800a6bc:	b170      	cbz	r0, 800a6dc <_vfiprintf_r+0x5c>
 800a6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6c0:	07dc      	lsls	r4, r3, #31
 800a6c2:	d504      	bpl.n	800a6ce <_vfiprintf_r+0x4e>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	b01d      	add	sp, #116	; 0x74
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	0598      	lsls	r0, r3, #22
 800a6d2:	d4f7      	bmi.n	800a6c4 <_vfiprintf_r+0x44>
 800a6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d6:	f7fe f9cf 	bl	8008a78 <__retarget_lock_release_recursive>
 800a6da:	e7f3      	b.n	800a6c4 <_vfiprintf_r+0x44>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e0:	2320      	movs	r3, #32
 800a6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ea:	2330      	movs	r3, #48	; 0x30
 800a6ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8a0 <_vfiprintf_r+0x220>
 800a6f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6f4:	f04f 0901 	mov.w	r9, #1
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	469a      	mov	sl, r3
 800a6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a700:	b10a      	cbz	r2, 800a706 <_vfiprintf_r+0x86>
 800a702:	2a25      	cmp	r2, #37	; 0x25
 800a704:	d1f9      	bne.n	800a6fa <_vfiprintf_r+0x7a>
 800a706:	ebba 0b04 	subs.w	fp, sl, r4
 800a70a:	d00b      	beq.n	800a724 <_vfiprintf_r+0xa4>
 800a70c:	465b      	mov	r3, fp
 800a70e:	4622      	mov	r2, r4
 800a710:	4629      	mov	r1, r5
 800a712:	4630      	mov	r0, r6
 800a714:	f7ff ffa2 	bl	800a65c <__sfputs_r>
 800a718:	3001      	adds	r0, #1
 800a71a:	f000 80a9 	beq.w	800a870 <_vfiprintf_r+0x1f0>
 800a71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a720:	445a      	add	r2, fp
 800a722:	9209      	str	r2, [sp, #36]	; 0x24
 800a724:	f89a 3000 	ldrb.w	r3, [sl]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 80a1 	beq.w	800a870 <_vfiprintf_r+0x1f0>
 800a72e:	2300      	movs	r3, #0
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a738:	f10a 0a01 	add.w	sl, sl, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	9307      	str	r3, [sp, #28]
 800a740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a744:	931a      	str	r3, [sp, #104]	; 0x68
 800a746:	4654      	mov	r4, sl
 800a748:	2205      	movs	r2, #5
 800a74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74e:	4854      	ldr	r0, [pc, #336]	; (800a8a0 <_vfiprintf_r+0x220>)
 800a750:	f7f5 fd46 	bl	80001e0 <memchr>
 800a754:	9a04      	ldr	r2, [sp, #16]
 800a756:	b9d8      	cbnz	r0, 800a790 <_vfiprintf_r+0x110>
 800a758:	06d1      	lsls	r1, r2, #27
 800a75a:	bf44      	itt	mi
 800a75c:	2320      	movmi	r3, #32
 800a75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a762:	0713      	lsls	r3, r2, #28
 800a764:	bf44      	itt	mi
 800a766:	232b      	movmi	r3, #43	; 0x2b
 800a768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76c:	f89a 3000 	ldrb.w	r3, [sl]
 800a770:	2b2a      	cmp	r3, #42	; 0x2a
 800a772:	d015      	beq.n	800a7a0 <_vfiprintf_r+0x120>
 800a774:	9a07      	ldr	r2, [sp, #28]
 800a776:	4654      	mov	r4, sl
 800a778:	2000      	movs	r0, #0
 800a77a:	f04f 0c0a 	mov.w	ip, #10
 800a77e:	4621      	mov	r1, r4
 800a780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a784:	3b30      	subs	r3, #48	; 0x30
 800a786:	2b09      	cmp	r3, #9
 800a788:	d94d      	bls.n	800a826 <_vfiprintf_r+0x1a6>
 800a78a:	b1b0      	cbz	r0, 800a7ba <_vfiprintf_r+0x13a>
 800a78c:	9207      	str	r2, [sp, #28]
 800a78e:	e014      	b.n	800a7ba <_vfiprintf_r+0x13a>
 800a790:	eba0 0308 	sub.w	r3, r0, r8
 800a794:	fa09 f303 	lsl.w	r3, r9, r3
 800a798:	4313      	orrs	r3, r2
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	46a2      	mov	sl, r4
 800a79e:	e7d2      	b.n	800a746 <_vfiprintf_r+0xc6>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	1d19      	adds	r1, r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	9103      	str	r1, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bfbb      	ittet	lt
 800a7ac:	425b      	neglt	r3, r3
 800a7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b2:	9307      	strge	r3, [sp, #28]
 800a7b4:	9307      	strlt	r3, [sp, #28]
 800a7b6:	bfb8      	it	lt
 800a7b8:	9204      	strlt	r2, [sp, #16]
 800a7ba:	7823      	ldrb	r3, [r4, #0]
 800a7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a7be:	d10c      	bne.n	800a7da <_vfiprintf_r+0x15a>
 800a7c0:	7863      	ldrb	r3, [r4, #1]
 800a7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c4:	d134      	bne.n	800a830 <_vfiprintf_r+0x1b0>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d1a      	adds	r2, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9203      	str	r2, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfb8      	it	lt
 800a7d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7d6:	3402      	adds	r4, #2
 800a7d8:	9305      	str	r3, [sp, #20]
 800a7da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8b0 <_vfiprintf_r+0x230>
 800a7de:	7821      	ldrb	r1, [r4, #0]
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	f7f5 fcfc 	bl	80001e0 <memchr>
 800a7e8:	b138      	cbz	r0, 800a7fa <_vfiprintf_r+0x17a>
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	eba0 000a 	sub.w	r0, r0, sl
 800a7f0:	2240      	movs	r2, #64	; 0x40
 800a7f2:	4082      	lsls	r2, r0
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	3401      	adds	r4, #1
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fe:	4829      	ldr	r0, [pc, #164]	; (800a8a4 <_vfiprintf_r+0x224>)
 800a800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a804:	2206      	movs	r2, #6
 800a806:	f7f5 fceb 	bl	80001e0 <memchr>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d03f      	beq.n	800a88e <_vfiprintf_r+0x20e>
 800a80e:	4b26      	ldr	r3, [pc, #152]	; (800a8a8 <_vfiprintf_r+0x228>)
 800a810:	bb1b      	cbnz	r3, 800a85a <_vfiprintf_r+0x1da>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	3307      	adds	r3, #7
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	3308      	adds	r3, #8
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a820:	443b      	add	r3, r7
 800a822:	9309      	str	r3, [sp, #36]	; 0x24
 800a824:	e768      	b.n	800a6f8 <_vfiprintf_r+0x78>
 800a826:	fb0c 3202 	mla	r2, ip, r2, r3
 800a82a:	460c      	mov	r4, r1
 800a82c:	2001      	movs	r0, #1
 800a82e:	e7a6      	b.n	800a77e <_vfiprintf_r+0xfe>
 800a830:	2300      	movs	r3, #0
 800a832:	3401      	adds	r4, #1
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	4619      	mov	r1, r3
 800a838:	f04f 0c0a 	mov.w	ip, #10
 800a83c:	4620      	mov	r0, r4
 800a83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a842:	3a30      	subs	r2, #48	; 0x30
 800a844:	2a09      	cmp	r2, #9
 800a846:	d903      	bls.n	800a850 <_vfiprintf_r+0x1d0>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0c6      	beq.n	800a7da <_vfiprintf_r+0x15a>
 800a84c:	9105      	str	r1, [sp, #20]
 800a84e:	e7c4      	b.n	800a7da <_vfiprintf_r+0x15a>
 800a850:	fb0c 2101 	mla	r1, ip, r1, r2
 800a854:	4604      	mov	r4, r0
 800a856:	2301      	movs	r3, #1
 800a858:	e7f0      	b.n	800a83c <_vfiprintf_r+0x1bc>
 800a85a:	ab03      	add	r3, sp, #12
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	462a      	mov	r2, r5
 800a860:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <_vfiprintf_r+0x22c>)
 800a862:	a904      	add	r1, sp, #16
 800a864:	4630      	mov	r0, r6
 800a866:	f7fd fb9d 	bl	8007fa4 <_printf_float>
 800a86a:	4607      	mov	r7, r0
 800a86c:	1c78      	adds	r0, r7, #1
 800a86e:	d1d6      	bne.n	800a81e <_vfiprintf_r+0x19e>
 800a870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a872:	07d9      	lsls	r1, r3, #31
 800a874:	d405      	bmi.n	800a882 <_vfiprintf_r+0x202>
 800a876:	89ab      	ldrh	r3, [r5, #12]
 800a878:	059a      	lsls	r2, r3, #22
 800a87a:	d402      	bmi.n	800a882 <_vfiprintf_r+0x202>
 800a87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a87e:	f7fe f8fb 	bl	8008a78 <__retarget_lock_release_recursive>
 800a882:	89ab      	ldrh	r3, [r5, #12]
 800a884:	065b      	lsls	r3, r3, #25
 800a886:	f53f af1d 	bmi.w	800a6c4 <_vfiprintf_r+0x44>
 800a88a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88c:	e71c      	b.n	800a6c8 <_vfiprintf_r+0x48>
 800a88e:	ab03      	add	r3, sp, #12
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	462a      	mov	r2, r5
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <_vfiprintf_r+0x22c>)
 800a896:	a904      	add	r1, sp, #16
 800a898:	4630      	mov	r0, r6
 800a89a:	f7fd fe27 	bl	80084ec <_printf_i>
 800a89e:	e7e4      	b.n	800a86a <_vfiprintf_r+0x1ea>
 800a8a0:	0800ade4 	.word	0x0800ade4
 800a8a4:	0800adee 	.word	0x0800adee
 800a8a8:	08007fa5 	.word	0x08007fa5
 800a8ac:	0800a65d 	.word	0x0800a65d
 800a8b0:	0800adea 	.word	0x0800adea

0800a8b4 <__swbuf_r>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	460e      	mov	r6, r1
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	b118      	cbz	r0, 800a8c6 <__swbuf_r+0x12>
 800a8be:	6a03      	ldr	r3, [r0, #32]
 800a8c0:	b90b      	cbnz	r3, 800a8c6 <__swbuf_r+0x12>
 800a8c2:	f7fd ffc1 	bl	8008848 <__sinit>
 800a8c6:	69a3      	ldr	r3, [r4, #24]
 800a8c8:	60a3      	str	r3, [r4, #8]
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	071a      	lsls	r2, r3, #28
 800a8ce:	d525      	bpl.n	800a91c <__swbuf_r+0x68>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	b31b      	cbz	r3, 800a91c <__swbuf_r+0x68>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	6922      	ldr	r2, [r4, #16]
 800a8d8:	1a98      	subs	r0, r3, r2
 800a8da:	6963      	ldr	r3, [r4, #20]
 800a8dc:	b2f6      	uxtb	r6, r6
 800a8de:	4283      	cmp	r3, r0
 800a8e0:	4637      	mov	r7, r6
 800a8e2:	dc04      	bgt.n	800a8ee <__swbuf_r+0x3a>
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7ff fd9e 	bl	800a428 <_fflush_r>
 800a8ec:	b9e0      	cbnz	r0, 800a928 <__swbuf_r+0x74>
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	60a3      	str	r3, [r4, #8]
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	6022      	str	r2, [r4, #0]
 800a8fa:	701e      	strb	r6, [r3, #0]
 800a8fc:	6962      	ldr	r2, [r4, #20]
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	429a      	cmp	r2, r3
 800a902:	d004      	beq.n	800a90e <__swbuf_r+0x5a>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	07db      	lsls	r3, r3, #31
 800a908:	d506      	bpl.n	800a918 <__swbuf_r+0x64>
 800a90a:	2e0a      	cmp	r6, #10
 800a90c:	d104      	bne.n	800a918 <__swbuf_r+0x64>
 800a90e:	4621      	mov	r1, r4
 800a910:	4628      	mov	r0, r5
 800a912:	f7ff fd89 	bl	800a428 <_fflush_r>
 800a916:	b938      	cbnz	r0, 800a928 <__swbuf_r+0x74>
 800a918:	4638      	mov	r0, r7
 800a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a91c:	4621      	mov	r1, r4
 800a91e:	4628      	mov	r0, r5
 800a920:	f000 f806 	bl	800a930 <__swsetup_r>
 800a924:	2800      	cmp	r0, #0
 800a926:	d0d5      	beq.n	800a8d4 <__swbuf_r+0x20>
 800a928:	f04f 37ff 	mov.w	r7, #4294967295
 800a92c:	e7f4      	b.n	800a918 <__swbuf_r+0x64>
	...

0800a930 <__swsetup_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4b2a      	ldr	r3, [pc, #168]	; (800a9dc <__swsetup_r+0xac>)
 800a934:	4605      	mov	r5, r0
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	460c      	mov	r4, r1
 800a93a:	b118      	cbz	r0, 800a944 <__swsetup_r+0x14>
 800a93c:	6a03      	ldr	r3, [r0, #32]
 800a93e:	b90b      	cbnz	r3, 800a944 <__swsetup_r+0x14>
 800a940:	f7fd ff82 	bl	8008848 <__sinit>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a94a:	0718      	lsls	r0, r3, #28
 800a94c:	d422      	bmi.n	800a994 <__swsetup_r+0x64>
 800a94e:	06d9      	lsls	r1, r3, #27
 800a950:	d407      	bmi.n	800a962 <__swsetup_r+0x32>
 800a952:	2309      	movs	r3, #9
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e034      	b.n	800a9cc <__swsetup_r+0x9c>
 800a962:	0758      	lsls	r0, r3, #29
 800a964:	d512      	bpl.n	800a98c <__swsetup_r+0x5c>
 800a966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a968:	b141      	cbz	r1, 800a97c <__swsetup_r+0x4c>
 800a96a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a96e:	4299      	cmp	r1, r3
 800a970:	d002      	beq.n	800a978 <__swsetup_r+0x48>
 800a972:	4628      	mov	r0, r5
 800a974:	f7fe fefe 	bl	8009774 <_free_r>
 800a978:	2300      	movs	r3, #0
 800a97a:	6363      	str	r3, [r4, #52]	; 0x34
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	2300      	movs	r3, #0
 800a986:	6063      	str	r3, [r4, #4]
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	f043 0308 	orr.w	r3, r3, #8
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	6923      	ldr	r3, [r4, #16]
 800a996:	b94b      	cbnz	r3, 800a9ac <__swsetup_r+0x7c>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a99e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9a2:	d003      	beq.n	800a9ac <__swsetup_r+0x7c>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 f884 	bl	800aab4 <__smakebuf_r>
 800a9ac:	89a0      	ldrh	r0, [r4, #12]
 800a9ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9b2:	f010 0301 	ands.w	r3, r0, #1
 800a9b6:	d00a      	beq.n	800a9ce <__swsetup_r+0x9e>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60a3      	str	r3, [r4, #8]
 800a9bc:	6963      	ldr	r3, [r4, #20]
 800a9be:	425b      	negs	r3, r3
 800a9c0:	61a3      	str	r3, [r4, #24]
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	b943      	cbnz	r3, 800a9d8 <__swsetup_r+0xa8>
 800a9c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ca:	d1c4      	bne.n	800a956 <__swsetup_r+0x26>
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	0781      	lsls	r1, r0, #30
 800a9d0:	bf58      	it	pl
 800a9d2:	6963      	ldrpl	r3, [r4, #20]
 800a9d4:	60a3      	str	r3, [r4, #8]
 800a9d6:	e7f4      	b.n	800a9c2 <__swsetup_r+0x92>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e7f7      	b.n	800a9cc <__swsetup_r+0x9c>
 800a9dc:	2000011c 	.word	0x2000011c

0800a9e0 <_raise_r>:
 800a9e0:	291f      	cmp	r1, #31
 800a9e2:	b538      	push	{r3, r4, r5, lr}
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	d904      	bls.n	800a9f4 <_raise_r+0x14>
 800a9ea:	2316      	movs	r3, #22
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9f6:	b112      	cbz	r2, 800a9fe <_raise_r+0x1e>
 800a9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9fc:	b94b      	cbnz	r3, 800aa12 <_raise_r+0x32>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 f830 	bl	800aa64 <_getpid_r>
 800aa04:	462a      	mov	r2, r5
 800aa06:	4601      	mov	r1, r0
 800aa08:	4620      	mov	r0, r4
 800aa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa0e:	f000 b817 	b.w	800aa40 <_kill_r>
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d00a      	beq.n	800aa2c <_raise_r+0x4c>
 800aa16:	1c59      	adds	r1, r3, #1
 800aa18:	d103      	bne.n	800aa22 <_raise_r+0x42>
 800aa1a:	2316      	movs	r3, #22
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	2001      	movs	r0, #1
 800aa20:	e7e7      	b.n	800a9f2 <_raise_r+0x12>
 800aa22:	2400      	movs	r4, #0
 800aa24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa28:	4628      	mov	r0, r5
 800aa2a:	4798      	blx	r3
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e7e0      	b.n	800a9f2 <_raise_r+0x12>

0800aa30 <raise>:
 800aa30:	4b02      	ldr	r3, [pc, #8]	; (800aa3c <raise+0xc>)
 800aa32:	4601      	mov	r1, r0
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	f7ff bfd3 	b.w	800a9e0 <_raise_r>
 800aa3a:	bf00      	nop
 800aa3c:	2000011c 	.word	0x2000011c

0800aa40 <_kill_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d07      	ldr	r5, [pc, #28]	; (800aa60 <_kill_r+0x20>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	f7f6 fe6d 	bl	800172c <_kill>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_kill_r+0x1c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_kill_r+0x1c>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	200005cc 	.word	0x200005cc

0800aa64 <_getpid_r>:
 800aa64:	f7f6 be5a 	b.w	800171c <_getpid>

0800aa68 <__swhatbuf_r>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa70:	2900      	cmp	r1, #0
 800aa72:	b096      	sub	sp, #88	; 0x58
 800aa74:	4615      	mov	r5, r2
 800aa76:	461e      	mov	r6, r3
 800aa78:	da0d      	bge.n	800aa96 <__swhatbuf_r+0x2e>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa80:	f04f 0100 	mov.w	r1, #0
 800aa84:	bf0c      	ite	eq
 800aa86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa8a:	2340      	movne	r3, #64	; 0x40
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	6031      	str	r1, [r6, #0]
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	b016      	add	sp, #88	; 0x58
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	466a      	mov	r2, sp
 800aa98:	f000 f848 	bl	800ab2c <_fstat_r>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dbec      	blt.n	800aa7a <__swhatbuf_r+0x12>
 800aaa0:	9901      	ldr	r1, [sp, #4]
 800aaa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aaa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aaaa:	4259      	negs	r1, r3
 800aaac:	4159      	adcs	r1, r3
 800aaae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab2:	e7eb      	b.n	800aa8c <__swhatbuf_r+0x24>

0800aab4 <__smakebuf_r>:
 800aab4:	898b      	ldrh	r3, [r1, #12]
 800aab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aab8:	079d      	lsls	r5, r3, #30
 800aaba:	4606      	mov	r6, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	d507      	bpl.n	800aad0 <__smakebuf_r+0x1c>
 800aac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	6123      	str	r3, [r4, #16]
 800aac8:	2301      	movs	r3, #1
 800aaca:	6163      	str	r3, [r4, #20]
 800aacc:	b002      	add	sp, #8
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	ab01      	add	r3, sp, #4
 800aad2:	466a      	mov	r2, sp
 800aad4:	f7ff ffc8 	bl	800aa68 <__swhatbuf_r>
 800aad8:	9900      	ldr	r1, [sp, #0]
 800aada:	4605      	mov	r5, r0
 800aadc:	4630      	mov	r0, r6
 800aade:	f7fe febd 	bl	800985c <_malloc_r>
 800aae2:	b948      	cbnz	r0, 800aaf8 <__smakebuf_r+0x44>
 800aae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae8:	059a      	lsls	r2, r3, #22
 800aaea:	d4ef      	bmi.n	800aacc <__smakebuf_r+0x18>
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	f043 0302 	orr.w	r3, r3, #2
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	e7e3      	b.n	800aac0 <__smakebuf_r+0xc>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	6020      	str	r0, [r4, #0]
 800aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	9b00      	ldr	r3, [sp, #0]
 800ab04:	6163      	str	r3, [r4, #20]
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	6120      	str	r0, [r4, #16]
 800ab0a:	b15b      	cbz	r3, 800ab24 <__smakebuf_r+0x70>
 800ab0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab10:	4630      	mov	r0, r6
 800ab12:	f000 f81d 	bl	800ab50 <_isatty_r>
 800ab16:	b128      	cbz	r0, 800ab24 <__smakebuf_r+0x70>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f023 0303 	bic.w	r3, r3, #3
 800ab1e:	f043 0301 	orr.w	r3, r3, #1
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	431d      	orrs	r5, r3
 800ab28:	81a5      	strh	r5, [r4, #12]
 800ab2a:	e7cf      	b.n	800aacc <__smakebuf_r+0x18>

0800ab2c <_fstat_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_fstat_r+0x20>)
 800ab30:	2300      	movs	r3, #0
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	f7f6 fe56 	bl	80017ea <_fstat>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d102      	bne.n	800ab48 <_fstat_r+0x1c>
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	b103      	cbz	r3, 800ab48 <_fstat_r+0x1c>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200005cc 	.word	0x200005cc

0800ab50 <_isatty_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_isatty_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f6 fe55 	bl	800180a <_isatty>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_isatty_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_isatty_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	200005cc 	.word	0x200005cc

0800ab70 <_init>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	bf00      	nop
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr

0800ab7c <_fini>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	bf00      	nop
 800ab80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab82:	bc08      	pop	{r3}
 800ab84:	469e      	mov	lr, r3
 800ab86:	4770      	bx	lr
