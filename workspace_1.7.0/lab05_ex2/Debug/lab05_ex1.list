
lab05_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000130  0800a0cc  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800a0cc  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b5dc  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034cb  00000000  00000000  0004b77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002518  00000000  00000000  0004ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d07  00000000  00000000  00051168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d77  00000000  00000000  00052e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206d7  00000000  00000000  0006bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e33e  00000000  00000000  0008c2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a728  00000000  00000000  0012a5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00134d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000130 	.word	0x20000130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ed8 	.word	0x08009ed8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000134 	.word	0x20000134
 80001dc:	08009ed8 	.word	0x08009ed8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int tim2Flag = 0; //Create a flag for the timer

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	tim2Flag = 1; // The interrupt func is going to set the flag every 500 ms
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
} // The flag will be cleared in the while loop.
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200001dc 	.word	0x200001dc

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b0a1      	sub	sp, #132	; 0x84
 80005b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f005 fa89 	bl	8005ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f879 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f95b 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f92f 	bl	8000820 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c2:	f000 f8df 	bl	8000784 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t status_acc; // Variable to check that there was no error when collecting data from accelerometer
  int32_t status_gyro; // Variable to check that there was no error when collecting data from gyroscope
  char error_message[] = "ERROR READING DATA \r\n"; // Message to transmit in case of any error when reading the data
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <main+0xe8>)
 80005c8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d6:	6020      	str	r0, [r4, #0]
 80005d8:	3404      	adds	r4, #4
 80005da:	8021      	strh	r1, [r4, #0]
  char welcome_message[] = "Program has started \r\n"; // Message to transmit in case of any error when reading the data
 80005dc:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <main+0xec>)
 80005de:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ec:	6020      	str	r0, [r4, #0]
 80005ee:	3404      	adds	r4, #4
 80005f0:	8021      	strh	r1, [r4, #0]
 80005f2:	3402      	adds	r4, #2
 80005f4:	0c0b      	lsrs	r3, r1, #16
 80005f6:	7023      	strb	r3, [r4, #0]


  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO); // Initialize the gyroscope sensor
 80005f8:	2101      	movs	r1, #1
 80005fa:	2000      	movs	r0, #0
 80005fc:	f004 fed2 	bl	80053a4 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Initialize the accelerometer sensor
 8000600:	2102      	movs	r1, #2
 8000602:	2001      	movs	r0, #1
 8000604:	f004 fece 	bl	80053a4 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO); // Enable the gyro sensor
 8000608:	2101      	movs	r1, #1
 800060a:	2000      	movs	r0, #0
 800060c:	f004 ffc6 	bl	800559c <IKS01A3_MOTION_SENSOR_Enable>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO); // Enable the acc sensor
 8000610:	2102      	movs	r1, #2
 8000612:	2001      	movs	r0, #1
 8000614:	f004 ffc2 	bl	800559c <IKS01A3_MOTION_SENSOR_Enable>

  HAL_TIM_Base_Start_IT(&htim3);// Start the timer; This will enable interrupts every time the timer is reloaded (every 0.5 sec)
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <main+0xf0>)
 800061a:	f007 fc7b 	bl	8007f14 <HAL_TIM_Base_Start_IT>
  IKS01A3_MOTION_SENSOR_Axes_t gyro_axes; // Struct to save the data of angular velocity measured in each axis of space (X Y and Z);

  char buffer_acc[40]; // This will help the data transmission

  // Print welcome message
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)welcome_message, sizeof(char)*strlen(welcome_message));
 800061e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fddc 	bl	80001e0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000630:	4619      	mov	r1, r3
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0xf4>)
 8000634:	f008 f8a8 	bl	8008788 <HAL_UART_Transmit_IT>


  while (1)
  {

	 if(tim2Flag == 1){
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <main+0xf8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1fb      	bne.n	8000638 <main+0x8c>
		  tim2Flag = 0; //Clear the interrupt flag of the timer
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0xf8>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &gyro_axes); // This function will save the data in the array gyro_axes, and return a value that can be useful to finding errors;
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	461a      	mov	r2, r3
 800064c:	2101      	movs	r1, #1
 800064e:	2000      	movs	r0, #0
 8000650:	f004 ffe6 	bl	8005620 <IKS01A3_MOTION_SENSOR_GetAxes>
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &acc_axes); // This function will save the data in the array acc_axes, and return a value that can be useful to finding errors;
 8000654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000658:	461a      	mov	r2, r3
 800065a:	2102      	movs	r1, #2
 800065c:	2001      	movs	r0, #1
 800065e:	f004 ffdf 	bl	8005620 <IKS01A3_MOTION_SENSOR_GetAxes>


		  HAL_UART_Transmit_IT(&huart2, buffer_acc, sprintf(buffer_acc, " %d, %d, %d, %d, %d, %d; \r\n ",
 8000662:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8000664:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8000666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800066a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800066c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800066e:	463c      	mov	r4, r7
 8000670:	9003      	str	r0, [sp, #12]
 8000672:	9102      	str	r1, [sp, #8]
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4633      	mov	r3, r6
 800067a:	462a      	mov	r2, r5
 800067c:	490a      	ldr	r1, [pc, #40]	; (80006a8 <main+0xfc>)
 800067e:	4620      	mov	r0, r4
 8000680:	f008 ff86 	bl	8009590 <siprintf>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <main+0xf4>)
 800068e:	f008 f87b 	bl	8008788 <HAL_UART_Transmit_IT>
	 if(tim2Flag == 1){
 8000692:	e7d1      	b.n	8000638 <main+0x8c>
 8000694:	08009f10 	.word	0x08009f10
 8000698:	08009f28 	.word	0x08009f28
 800069c:	2000014c 	.word	0x2000014c
 80006a0:	20000194 	.word	0x20000194
 80006a4:	200001dc 	.word	0x200001dc
 80006a8:	08009ef0 	.word	0x08009ef0

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 ff88 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemClock_Config+0xd0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a28      	ldr	r2, [pc, #160]	; (800077c <SystemClock_Config+0xd0>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd4>)
 80006fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000720:	2310      	movs	r3, #16
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000724:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072a:	2304      	movs	r3, #4
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072e:	2307      	movs	r3, #7
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	4618      	mov	r0, r3
 8000738:	f006 ff04 	bl	8007544 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f905 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2102      	movs	r1, #2
 8000762:	4618      	mov	r0, r3
 8000764:	f007 f966 	bl	8007a34 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076e:	f000 f8ef 	bl	8000950 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_TIM3_Init+0x94>)
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_TIM3_Init+0x98>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_TIM3_Init+0x94>)
 80007a8:	f640 0233 	movw	r2, #2099	; 0x833
 80007ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_TIM3_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_TIM3_Init+0x94>)
 80007b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_TIM3_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_TIM3_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <MX_TIM3_Init+0x94>)
 80007ca:	f007 fb53 	bl	8007e74 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007d4:	f000 f8bc 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_TIM3_Init+0x94>)
 80007e6:	f007 fce7 	bl	80081b8 <HAL_TIM_ConfigClockSource>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 f8ae 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_TIM3_Init+0x94>)
 8000802:	f007 feef 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f8a0 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000014c 	.word	0x2000014c
 800081c:	40000400 	.word	0x40000400

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f007 ff46 	bl	80086e8 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f875 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000194 	.word	0x20000194
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000900:	f005 fd84 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_GPIO_Init+0xd8>)
 800091c:	f005 fb0e 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000938:	f005 fb00 	bl	8005f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020800 	.word	0x40020800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f005 f9fa 	bl	8005d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_TIM_Base_MspInit+0x48>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d115      	bne.n	80009ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_TIM_Base_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <HAL_TIM_Base_MspInit+0x4c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_TIM_Base_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	201d      	movs	r0, #29
 80009e0:	f005 f9e3 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e4:	201d      	movs	r0, #29
 80009e6:	f005 f9fc 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40000400 	.word	0x40000400
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0x94>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d133      	bne.n	8000a86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a72:	f005 fa63 	bl	8005f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2026      	movs	r0, #38	; 0x26
 8000a7c:	f005 f995 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a80:	2026      	movs	r0, #38	; 0x26
 8000a82:	f005 f9ae 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f005 f840 	bl	8005b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM3_IRQHandler+0x10>)
 8000af6:	f007 fa6f 	bl	8007fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000014c 	.word	0x2000014c

08000b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART2_IRQHandler+0x10>)
 8000b0a:	f007 fe73 	bl	80087f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000194 	.word	0x20000194

08000b18 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <BSP_I2C1_Init+0x58>)
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <BSP_I2C1_Init+0x5c>)
 8000b26:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <BSP_I2C1_Init+0x60>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	4912      	ldr	r1, [pc, #72]	; (8000b78 <BSP_I2C1_Init+0x60>)
 8000b30:	600a      	str	r2, [r1, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d117      	bne.n	8000b66 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <BSP_I2C1_Init+0x58>)
 8000b38:	f006 f936 	bl	8006da8 <HAL_I2C_GetState>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <BSP_I2C1_Init+0x58>)
 8000b44:	f000 f8e2 	bl	8000d0c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10b      	bne.n	8000b66 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <BSP_I2C1_Init+0x58>)
 8000b50:	f000 f8a8 	bl	8000ca4 <MX_I2C1_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b5a:	f06f 0307 	mvn.w	r3, #7
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	e001      	b.n	8000b66 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b66:	687b      	ldr	r3, [r7, #4]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001e0 	.word	0x200001e0
 8000b74:	40005400 	.word	0x40005400
 8000b78:	20000234 	.word	0x20000234

08000b7c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <BSP_I2C1_DeInit+0x48>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d014      	beq.n	8000bb8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <BSP_I2C1_DeInit+0x48>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <BSP_I2C1_DeInit+0x48>)
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <BSP_I2C1_DeInit+0x48>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <BSP_I2C1_DeInit+0x4c>)
 8000ba2:	f000 f8fd 	bl	8000da0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <BSP_I2C1_DeInit+0x4c>)
 8000ba8:	f005 fd8e 	bl	80066c8 <HAL_I2C_DeInit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000bb2:	f06f 0307 	mvn.w	r3, #7
 8000bb6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000234 	.word	0x20000234
 8000bc8:	200001e0 	.word	0x200001e0

08000bcc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	81fb      	strh	r3, [r7, #14]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	81bb      	strh	r3, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000be6:	89ba      	ldrh	r2, [r7, #12]
 8000be8:	89f9      	ldrh	r1, [r7, #14]
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <BSP_I2C1_WriteReg+0x60>)
 8000bfc:	f005 fda8 	bl	8006750 <HAL_I2C_Mem_Write>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <BSP_I2C1_WriteReg+0x60>)
 8000c08:	f006 f8dc 	bl	8006dc4 <HAL_I2C_GetError>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d103      	bne.n	8000c1a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e002      	b.n	8000c20 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c1a:	f06f 0303 	mvn.w	r3, #3
 8000c1e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c20:	697b      	ldr	r3, [r7, #20]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001e0 	.word	0x200001e0

08000c30 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	60ba      	str	r2, [r7, #8]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	81fb      	strh	r3, [r7, #14]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	81bb      	strh	r3, [r7, #12]
 8000c42:	4613      	mov	r3, r2
 8000c44:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c4a:	89ba      	ldrh	r2, [r7, #12]
 8000c4c:	89f9      	ldrh	r1, [r7, #14]
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <BSP_I2C1_ReadReg+0x60>)
 8000c60:	f005 fe70 	bl	8006944 <HAL_I2C_Mem_Read>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00c      	beq.n	8000c84 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <BSP_I2C1_ReadReg+0x60>)
 8000c6c:	f006 f8aa 	bl	8006dc4 <HAL_I2C_GetError>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d103      	bne.n	8000c7e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c76:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e002      	b.n	8000c84 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c7e:	f06f 0303 	mvn.w	r3, #3
 8000c82:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c84:	697b      	ldr	r3, [r7, #20]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001e0 	.word	0x200001e0

08000c94 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c98:	f004 ff7c 	bl	8005b94 <HAL_GetTick>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <MX_I2C1_Init+0x60>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <MX_I2C1_Init+0x64>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f005 fba9 	bl	8006440 <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40005400 	.word	0x40005400
 8000d08:	00061a80 	.word	0x00061a80

08000d0c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	2312      	movs	r3, #18
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d42:	2304      	movs	r3, #4
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <I2C1_MspInit+0x90>)
 8000d4e:	f005 f8f5 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d64:	2304      	movs	r3, #4
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <I2C1_MspInit+0x90>)
 8000d70:	f005 f8e4 	bl	8005f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <I2C1_MspInit+0x8c>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <I2C1_MspDeInit+0x30>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <I2C1_MspDeInit+0x30>)
 8000dae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <I2C1_MspDeInit+0x34>)
 8000dba:	f005 fa43 	bl	8006244 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <I2C1_MspDeInit+0x34>)
 8000dc4:	f005 fa3e 	bl	8006244 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f008 fbea 	bl	80095e0 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20018000 	.word	0x20018000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000238 	.word	0x20000238
 8000e40:	20000478 	.word	0x20000478

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e6c:	f7ff ffea 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f008 fba9 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb87 	bl	80005ac <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000eac:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8000eb0:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000eb4:	20000478 	.word	0x20000478

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e051      	b.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	7b1a      	ldrb	r2, [r3, #12]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	699a      	ldr	r2, [r3, #24]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <LIS2DW12_RegisterBusIO+0xcc>)
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <LIS2DW12_RegisterBusIO+0xd0>)
 8000f1a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	69da      	ldr	r2, [r3, #28]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e020      	b.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4798      	blx	r3
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e016      	b.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d112      	bne.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10d      	bne.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000f60:	2305      	movs	r3, #5
 8000f62:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	461a      	mov	r2, r3
 8000f68:	2121      	movs	r1, #33	; 0x21
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fcc1 	bl	80018f2 <LIS2DW12_Write_Reg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08001c85 	.word	0x08001c85
 8000f8c:	08001cbb 	.word	0x08001cbb

08000f90 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3320      	adds	r3, #32
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f9ce 	bl	8002340 <lis2dw12_auto_increment_set>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e04b      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3320      	adds	r3, #32
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f8e2 	bl	8002180 <lis2dw12_block_data_update_set>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e03f      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3320      	adds	r3, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f9dc 	bl	800238c <lis2dw12_fifo_mode_set>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e033      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3320      	adds	r3, #32
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 feb2 	bl	8001d50 <lis2dw12_power_mode_set>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e027      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <LIS2DW12_Init+0xc0>)
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3320      	adds	r3, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f000 ffa3 	bl	8001f60 <lis2dw12_data_rate_set>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	e010      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3320      	adds	r3, #32
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f8cd 	bl	80021cc <lis2dw12_full_scale_set>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	e004      	b.n	8001048 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	42c80000 	.word	0x42c80000

08001054 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f888 	bl	8001172 <LIS2DW12_ACC_Disable>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	e010      	b.n	8001090 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3320      	adds	r3, #32
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f938 	bl	800231e <lis2dw12_device_id_get>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e000      	b.n	80010bc <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2210      	movs	r2, #16
 80010f0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <LIS2DW12_GetCapabilities+0x58>)
 8001104:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	44c80000 	.word	0x44c80000

08001120 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e019      	b.n	800116a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001148:	461a      	mov	r2, r3
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fbea 	bl	8001928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e004      	b.n	800116a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e010      	b.n	80011aa <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3320      	adds	r3, #32
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fee6 	bl	8001f60 <lis2dw12_data_rate_set>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e004      	b.n	80011aa <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3320      	adds	r3, #32
 80011c6:	f107 020b 	add.w	r2, r7, #11
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f823 	bl	8002218 <lis2dw12_full_scale_get>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e080      	b.n	80012e0 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3320      	adds	r3, #32
 80011e2:	f107 020a 	add.w	r2, r7, #10
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fdff 	bl	8001dec <lis2dw12_power_mode_get>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e072      	b.n	80012e0 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 80011fa:	7abb      	ldrb	r3, [r7, #10]
 80011fc:	2b1b      	cmp	r3, #27
 80011fe:	bf8c      	ite	hi
 8001200:	2201      	movhi	r2, #1
 8001202:	2200      	movls	r2, #0
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	2a00      	cmp	r2, #0
 8001208:	d162      	bne.n	80012d0 <LIS2DW12_ACC_GetSensitivity+0x11c>
 800120a:	2201      	movs	r2, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8001212:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf14      	ite	ne
 800121a:	2301      	movne	r3, #1
 800121c:	2300      	moveq	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d12f      	bne.n	8001284 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8001224:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d04c      	beq.n	80012d0 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d81b      	bhi.n	8001274 <LIS2DW12_ACC_GetSensitivity+0xc0>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <LIS2DW12_ACC_GetSensitivity+0x90>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001255 	.word	0x08001255
 8001248:	0800125d 	.word	0x0800125d
 800124c:	08001265 	.word	0x08001265
 8001250:	0800126d 	.word	0x0800126d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001258:	601a      	str	r2, [r3, #0]
          break;
 800125a:	e012      	b.n	8001282 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4a23      	ldr	r2, [pc, #140]	; (80012ec <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001260:	601a      	str	r2, [r3, #0]
          break;
 8001262:	e00e      	b.n	8001282 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8001268:	601a      	str	r2, [r3, #0]
          break;
 800126a:	e00a      	b.n	8001282 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8001270:	601a      	str	r2, [r3, #0]
          break;
 8001272:	e006      	b.n	8001282 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001278:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	60fb      	str	r3, [r7, #12]
          break;
 8001280:	bf00      	nop
      }
      break;
 8001282:	e02c      	b.n	80012de <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d81a      	bhi.n	80012c0 <LIS2DW12_ACC_GetSensitivity+0x10c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a9 	.word	0x080012a9
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012b9 	.word	0x080012b9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <LIS2DW12_ACC_GetSensitivity+0x148>)
 80012a4:	601a      	str	r2, [r3, #0]
          break;
 80012a6:	e012      	b.n	80012ce <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 80012ac:	601a      	str	r2, [r3, #0]
          break;
 80012ae:	e00e      	b.n	80012ce <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LIS2DW12_ACC_GetSensitivity+0x134>)
 80012b4:	601a      	str	r2, [r3, #0]
          break;
 80012b6:	e00a      	b.n	80012ce <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <LIS2DW12_ACC_GetSensitivity+0x138>)
 80012bc:	601a      	str	r2, [r3, #0]
          break;
 80012be:	e006      	b.n	80012ce <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 80012c4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	60fb      	str	r3, [r7, #12]
          break;
 80012cc:	bf00      	nop
      }
      break;
 80012ce:	e006      	b.n	80012de <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 80012d4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	60fb      	str	r3, [r7, #12]
      break;
 80012dc:	bf00      	nop
  }

  return ret;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	3f79db23 	.word	0x3f79db23
 80012ec:	3ff9db23 	.word	0x3ff9db23
 80012f0:	4079db23 	.word	0x4079db23
 80012f4:	40f9db23 	.word	0x40f9db23
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3e79db23 	.word	0x3e79db23
 8001300:	3ef9db23 	.word	0x3ef9db23

08001304 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3320      	adds	r3, #32
 8001316:	f107 020b 	add.w	r2, r7, #11
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fe65 	bl	8001fec <lis2dw12_data_rate_get>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	e14f      	b.n	80015ce <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3320      	adds	r3, #32
 8001332:	f107 020a 	add.w	r2, r7, #10
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd57 	bl	8001dec <lis2dw12_power_mode_get>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e141      	b.n	80015ce <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	2b32      	cmp	r3, #50	; 0x32
 800134e:	f200 8136 	bhi.w	80015be <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001425 	.word	0x08001425
 800135c:	0800142f 	.word	0x0800142f
 8001360:	08001489 	.word	0x08001489
 8001364:	08001491 	.word	0x08001491
 8001368:	08001499 	.word	0x08001499
 800136c:	080014a1 	.word	0x080014a1
 8001370:	080014a9 	.word	0x080014a9
 8001374:	080014b1 	.word	0x080014b1
 8001378:	0800150b 	.word	0x0800150b
 800137c:	08001565 	.word	0x08001565
 8001380:	080015bf 	.word	0x080015bf
 8001384:	080015bf 	.word	0x080015bf
 8001388:	080015bf 	.word	0x080015bf
 800138c:	080015bf 	.word	0x080015bf
 8001390:	080015bf 	.word	0x080015bf
 8001394:	080015bf 	.word	0x080015bf
 8001398:	080015bf 	.word	0x080015bf
 800139c:	080015bf 	.word	0x080015bf
 80013a0:	08001425 	.word	0x08001425
 80013a4:	080015bf 	.word	0x080015bf
 80013a8:	080015bf 	.word	0x080015bf
 80013ac:	080015bf 	.word	0x080015bf
 80013b0:	080015bf 	.word	0x080015bf
 80013b4:	080015bf 	.word	0x080015bf
 80013b8:	080015bf 	.word	0x080015bf
 80013bc:	080015bf 	.word	0x080015bf
 80013c0:	080015bf 	.word	0x080015bf
 80013c4:	080015bf 	.word	0x080015bf
 80013c8:	080015bf 	.word	0x080015bf
 80013cc:	080015bf 	.word	0x080015bf
 80013d0:	080015bf 	.word	0x080015bf
 80013d4:	080015bf 	.word	0x080015bf
 80013d8:	080015bf 	.word	0x080015bf
 80013dc:	080015bf 	.word	0x080015bf
 80013e0:	080015bf 	.word	0x080015bf
 80013e4:	080015bf 	.word	0x080015bf
 80013e8:	080015bf 	.word	0x080015bf
 80013ec:	080015bf 	.word	0x080015bf
 80013f0:	080015bf 	.word	0x080015bf
 80013f4:	080015bf 	.word	0x080015bf
 80013f8:	080015bf 	.word	0x080015bf
 80013fc:	080015bf 	.word	0x080015bf
 8001400:	080015bf 	.word	0x080015bf
 8001404:	080015bf 	.word	0x080015bf
 8001408:	080015bf 	.word	0x080015bf
 800140c:	080015bf 	.word	0x080015bf
 8001410:	080015bf 	.word	0x080015bf
 8001414:	080015bf 	.word	0x080015bf
 8001418:	080015bf 	.word	0x080015bf
 800141c:	080015bf 	.word	0x080015bf
 8001420:	08001425 	.word	0x08001425
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
      break;
 800142c:	e0ce      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800142e:	7abb      	ldrb	r3, [r7, #10]
 8001430:	2b1b      	cmp	r3, #27
 8001432:	bf8c      	ite	hi
 8001434:	2201      	movhi	r2, #1
 8001436:	2200      	movls	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	2a00      	cmp	r2, #0
 800143c:	d11c      	bne.n	8001478 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 800143e:	2201      	movs	r2, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001448:	2a00      	cmp	r2, #0
 800144a:	bf14      	ite	ne
 800144c:	2201      	movne	r2, #1
 800144e:	2200      	moveq	r2, #0
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	2a00      	cmp	r2, #0
 8001454:	d10c      	bne.n	8001470 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8001456:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 800146c:	601a      	str	r2, [r3, #0]
          break;
 800146e:	e00a      	b.n	8001486 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4a5a      	ldr	r2, [pc, #360]	; (80015dc <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8001474:	601a      	str	r2, [r3, #0]
          break;
 8001476:	e006      	b.n	8001486 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a59      	ldr	r2, [pc, #356]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800147c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	60fb      	str	r3, [r7, #12]
          break;
 8001484:	bf00      	nop
      }
      break;
 8001486:	e0a1      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a53      	ldr	r2, [pc, #332]	; (80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 800148c:	601a      	str	r2, [r3, #0]
      break;
 800148e:	e09d      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8001494:	601a      	str	r2, [r3, #0]
      break;
 8001496:	e099      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 800149c:	601a      	str	r2, [r3, #0]
      break;
 800149e:	e095      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a52      	ldr	r2, [pc, #328]	; (80015ec <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 80014a4:	601a      	str	r2, [r3, #0]
      break;
 80014a6:	e091      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80014ac:	601a      	str	r2, [r3, #0]
      break;
 80014ae:	e08d      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80014b0:	7abb      	ldrb	r3, [r7, #10]
 80014b2:	2b1b      	cmp	r3, #27
 80014b4:	bf8c      	ite	hi
 80014b6:	2201      	movhi	r2, #1
 80014b8:	2200      	movls	r2, #0
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d11c      	bne.n	80014fa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2201      	movne	r2, #1
 80014d0:	2200      	moveq	r2, #0
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d10c      	bne.n	80014f2 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 80014d8:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a41      	ldr	r2, [pc, #260]	; (80015f4 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 80014ee:	601a      	str	r2, [r3, #0]
          break;
 80014f0:	e00a      	b.n	8001508 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80014f6:	601a      	str	r2, [r3, #0]
          break;
 80014f8:	e006      	b.n	8001508 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80014fe:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	60fb      	str	r3, [r7, #12]
          break;
 8001506:	bf00      	nop
      }
      break;
 8001508:	e060      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800150a:	7abb      	ldrb	r3, [r7, #10]
 800150c:	2b1b      	cmp	r3, #27
 800150e:	bf8c      	ite	hi
 8001510:	2201      	movhi	r2, #1
 8001512:	2200      	movls	r2, #0
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	2a00      	cmp	r2, #0
 8001518:	d11c      	bne.n	8001554 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800151a:	2201      	movs	r2, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001524:	2a00      	cmp	r2, #0
 8001526:	bf14      	ite	ne
 8001528:	2201      	movne	r2, #1
 800152a:	2200      	moveq	r2, #0
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	2a00      	cmp	r2, #0
 8001530:	d10c      	bne.n	800154c <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8001532:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8001548:	601a      	str	r2, [r3, #0]
          break;
 800154a:	e00a      	b.n	8001562 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001550:	601a      	str	r2, [r3, #0]
          break;
 8001552:	e006      	b.n	8001562 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8001558:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	60fb      	str	r3, [r7, #12]
          break;
 8001560:	bf00      	nop
      }
      break;
 8001562:	e033      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	2b1b      	cmp	r3, #27
 8001568:	bf8c      	ite	hi
 800156a:	2201      	movhi	r2, #1
 800156c:	2200      	movls	r2, #0
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	2a00      	cmp	r2, #0
 8001572:	d11c      	bne.n	80015ae <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8001574:	2201      	movs	r2, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800157e:	2a00      	cmp	r2, #0
 8001580:	bf14      	ite	ne
 8001582:	2201      	movne	r2, #1
 8001584:	2200      	moveq	r2, #0
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	2a00      	cmp	r2, #0
 800158a:	d10c      	bne.n	80015a6 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 800158c:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80015a2:	601a      	str	r2, [r3, #0]
          break;
 80015a4:	e00a      	b.n	80015bc <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80015aa:	601a      	str	r2, [r3, #0]
          break;
 80015ac:	e006      	b.n	80015bc <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80015b2:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	60fb      	str	r3, [r7, #12]
          break;
 80015ba:	bf00      	nop
      }
      break;
 80015bc:	e006      	b.n	80015cc <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80015c2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	60fb      	str	r3, [r7, #12]
      break;
 80015ca:	bf00      	nop
  }

  return ret;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	41480000 	.word	0x41480000
 80015dc:	3fcccccd 	.word	0x3fcccccd
 80015e0:	bf800000 	.word	0xbf800000
 80015e4:	41c80000 	.word	0x41c80000
 80015e8:	42480000 	.word	0x42480000
 80015ec:	42c80000 	.word	0x42c80000
 80015f0:	43480000 	.word	0x43480000
 80015f4:	43c80000 	.word	0x43c80000
 80015f8:	44480000 	.word	0x44480000
 80015fc:	44c80000 	.word	0x44c80000

08001600 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	ed97 0a00 	vldr	s0, [r7]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f805 	bl	8001624 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800161a:	4603      	mov	r3, r0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001630:	460b      	mov	r3, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800163e:	2b01      	cmp	r3, #1
 8001640:	d109      	bne.n	8001656 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001642:	79ba      	ldrb	r2, [r7, #6]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4619      	mov	r1, r3
 8001648:	ed97 0a02 	vldr	s0, [r7, #8]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f96b 	bl	8001928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001652:	4603      	mov	r3, r0
 8001654:	e008      	b.n	8001668 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001656:	79ba      	ldrb	r2, [r7, #6]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4619      	mov	r1, r3
 800165c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fa7d 	bl	8001b60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8001666:	4603      	mov	r3, r0
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3320      	adds	r3, #32
 8001682:	f107 020b 	add.w	r2, r7, #11
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fdc5 	bl	8002218 <lis2dw12_full_scale_get>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	e027      	b.n	80016ea <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d81b      	bhi.n	80016d8 <LIS2DW12_ACC_GetFullScale+0x68>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	080016c1 	.word	0x080016c1
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	080016d1 	.word	0x080016d1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
      break;
 80016be:	e013      	b.n	80016e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2204      	movs	r2, #4
 80016c4:	601a      	str	r2, [r3, #0]
      break;
 80016c6:	e00f      	b.n	80016e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2208      	movs	r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
      break;
 80016ce:	e00b      	b.n	80016e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2210      	movs	r2, #16
 80016d4:	601a      	str	r2, [r3, #0]
      break;
 80016d6:	e007      	b.n	80016e8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f04f 32ff 	mov.w	r2, #4294967295
 80016de:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	60fb      	str	r3, [r7, #12]
      break;
 80016e6:	bf00      	nop
  }

  return ret;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop

080016f4 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	dd0b      	ble.n	800171c <LIS2DW12_ACC_SetFullScale+0x28>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b04      	cmp	r3, #4
 8001708:	dd06      	ble.n	8001718 <LIS2DW12_ACC_SetFullScale+0x24>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b08      	cmp	r3, #8
 800170e:	dc01      	bgt.n	8001714 <LIS2DW12_ACC_SetFullScale+0x20>
 8001710:	2302      	movs	r3, #2
 8001712:	e004      	b.n	800171e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001714:	2303      	movs	r3, #3
 8001716:	e002      	b.n	800171e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LIS2DW12_ACC_SetFullScale+0x2a>
 800171c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800171e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3320      	adds	r3, #32
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fd4f 	bl	80021cc <lis2dw12_full_scale_set>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	e000      	b.n	800173c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3320      	adds	r3, #32
 8001756:	f107 020b 	add.w	r2, r7, #11
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fb45 	bl	8001dec <lis2dw12_power_mode_get>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	e068      	b.n	8001840 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3320      	adds	r3, #32
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fd85 	bl	8002288 <lis2dw12_acceleration_raw_get>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e05a      	b.n	8001840 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	2b1b      	cmp	r3, #27
 800178e:	bf8c      	ite	hi
 8001790:	2201      	movhi	r2, #1
 8001792:	2200      	movls	r2, #0
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	2a00      	cmp	r2, #0
 8001798:	d14d      	bne.n	8001836 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 80017a2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d124      	bne.n	80017fe <LIS2DW12_ACC_GetAxesRaw+0xba>
 80017b4:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d037      	beq.n	8001836 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80017c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da00      	bge.n	80017d0 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 80017ce:	330f      	adds	r3, #15
 80017d0:	111b      	asrs	r3, r3, #4
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80017d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da00      	bge.n	80017e2 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 80017e0:	330f      	adds	r3, #15
 80017e2:	111b      	asrs	r3, r3, #4
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80017ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da00      	bge.n	80017f4 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 80017f2:	330f      	adds	r3, #15
 80017f4:	111b      	asrs	r3, r3, #4
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	809a      	strh	r2, [r3, #4]
      break;
 80017fc:	e01f      	b.n	800183e <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80017fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da00      	bge.n	8001808 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8001806:	3303      	adds	r3, #3
 8001808:	109b      	asrs	r3, r3, #2
 800180a:	b21a      	sxth	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da00      	bge.n	800181a <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8001818:	3303      	adds	r3, #3
 800181a:	109b      	asrs	r3, r3, #2
 800181c:	b21a      	sxth	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001822:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da00      	bge.n	800182c <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800182a:	3303      	adds	r3, #3
 800182c:	109b      	asrs	r3, r3, #2
 800182e:	b21a      	sxth	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	809a      	strh	r2, [r3, #4]
      break;
 8001834:	e003      	b.n	800183e <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	617b      	str	r3, [r7, #20]
      break;
 800183c:	bf00      	nop
  }

  return ret;
 800183e:	697b      	ldr	r3, [r7, #20]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ff70 	bl	8001744 <LIS2DW12_ACC_GetAxesRaw>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e03c      	b.n	80018ea <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fc9c 	bl	80011b4 <LIS2DW12_ACC_GetSensitivity>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e030      	b.n	80018ea <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001888:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	edd7 7a03 	vldr	s15, [r7, #12]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a0:	ee17 2a90 	vmov	r2, s15
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80018a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c0:	ee17 2a90 	vmov	r2, s15
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80018c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e0:	ee17 2a90 	vmov	r2, s15
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	4613      	mov	r3, r2
 8001900:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 0020 	add.w	r0, r3, #32
 8001908:	1cba      	adds	r2, r7, #2
 800190a:	78f9      	ldrb	r1, [r7, #3]
 800190c:	2301      	movs	r3, #1
 800190e:	f000 fa07 	bl	8001d20 <lis2dw12_write_reg>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	e000      	b.n	8001920 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	ed87 0a02 	vstr	s0, [r7, #8]
 8001934:	460b      	mov	r3, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b01      	subs	r3, #1
 8001940:	2b03      	cmp	r3, #3
 8001942:	d80b      	bhi.n	800195c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001989 	.word	0x08001989
 8001950:	080019b5 	.word	0x080019b5
 8001954:	080019e1 	.word	0x080019e1
 8001958:	08001a0d 	.word	0x08001a0d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d002      	beq.n	8001968 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001962:	2304      	movs	r3, #4
 8001964:	75fb      	strb	r3, [r7, #23]
          break;
 8001966:	e002      	b.n	800196e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001968:	2314      	movs	r3, #20
 800196a:	75fb      	strb	r3, [r7, #23]
          break;
 800196c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800196e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001972:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d400      	bmi.n	8001982 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001980:	e05a      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	e057      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d002      	beq.n	8001994 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800198e:	2303      	movs	r3, #3
 8001990:	75fb      	strb	r3, [r7, #23]
          break;
 8001992:	e002      	b.n	800199a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001994:	2313      	movs	r3, #19
 8001996:	75fb      	strb	r3, [r7, #23]
          break;
 8001998:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dc00      	bgt.n	80019ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80019ac:	e044      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80019ae:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80019b0:	60bb      	str	r3, [r7, #8]
      break;
 80019b2:	e041      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d002      	beq.n	80019c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	75fb      	strb	r3, [r7, #23]
          break;
 80019be:	e002      	b.n	80019c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80019c0:	2312      	movs	r3, #18
 80019c2:	75fb      	strb	r3, [r7, #23]
          break;
 80019c4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80019c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ca:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	dc00      	bgt.n	80019da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80019d8:	e02e      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80019dc:	60bb      	str	r3, [r7, #8]
      break;
 80019de:	e02b      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d002      	beq.n	80019ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
          break;
 80019ea:	e002      	b.n	80019f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80019ec:	2311      	movs	r3, #17
 80019ee:	75fb      	strb	r3, [r7, #23]
          break;
 80019f0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80019f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	dc00      	bgt.n	8001a06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001a04:	e018      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e015      	b.n	8001a38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d002      	beq.n	8001a18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
          break;
 8001a16:	e002      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8001a1c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a22:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dc00      	bgt.n	8001a32 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001a30:	e001      	b.n	8001a36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001a34:	60bb      	str	r3, [r7, #8]
      break;
 8001a36:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001b4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d801      	bhi.n	8001a4e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e04d      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a52:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d801      	bhi.n	8001a64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e042      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a68:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d801      	bhi.n	8001a7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e037      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	d801      	bhi.n	8001a90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	e02c      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d801      	bhi.n	8001aa6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e021      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aaa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001b44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d801      	bhi.n	8001abc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001ab8:	2306      	movs	r3, #6
 8001aba:	e016      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001b58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d801      	bhi.n	8001ad2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00b      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	d801      	bhi.n	8001ae8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e000      	b.n	8001aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ae8:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001aea:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3320      	adds	r3, #32
 8001af0:	7dba      	ldrb	r2, [r7, #22]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fa33 	bl	8001f60 <lis2dw12_data_rate_set>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e018      	b.n	8001b38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3320      	adds	r3, #32
 8001b0a:	7dfa      	ldrb	r2, [r7, #23]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f91e 	bl	8001d50 <lis2dw12_power_mode_set>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e00b      	b.n	8001b38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	79ba      	ldrb	r2, [r7, #6]
 8001b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	41480000 	.word	0x41480000
 8001b44:	43480000 	.word	0x43480000
 8001b48:	43480000 	.word	0x43480000
 8001b4c:	3fcccccd 	.word	0x3fcccccd
 8001b50:	42480000 	.word	0x42480000
 8001b54:	42c80000 	.word	0x42c80000
 8001b58:	43c80000 	.word	0x43c80000
 8001b5c:	44480000 	.word	0x44480000

08001b60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	79fa      	ldrb	r2, [r7, #7]
 8001b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	79ba      	ldrb	r2, [r7, #6]
 8001b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b88:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001c48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d801      	bhi.n	8001b9a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001b98:	e04d      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b9e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d801      	bhi.n	8001bb0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001bae:	e042      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d801      	bhi.n	8001bc6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001bc4:	e037      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001c58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d801      	bhi.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001bda:	e02c      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d801      	bhi.n	8001bf2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001bf0:	e021      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d801      	bhi.n	8001c08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001c06:	e016      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001c70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d801      	bhi.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001c1c:	e00b      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c22:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001c78 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d801      	bhi.n	8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001c32:	e000      	b.n	8001c36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	3fcccccd 	.word	0x3fcccccd
 8001c4c:	3fcccccd 	.word	0x3fcccccd
 8001c50:	41480000 	.word	0x41480000
 8001c54:	41c80000 	.word	0x41c80000
 8001c58:	42480000 	.word	0x42480000
 8001c5c:	42480000 	.word	0x42480000
 8001c60:	42c80000 	.word	0x42c80000
 8001c64:	42c80000 	.word	0x42c80000
 8001c68:	43480000 	.word	0x43480000
 8001c6c:	43480000 	.word	0x43480000
 8001c70:	43c80000 	.word	0x43c80000
 8001c74:	43c80000 	.word	0x43c80000
 8001c78:	44480000 	.word	0x44480000
 8001c7c:	44480000 	.word	0x44480000
 8001c80:	44c80000 	.word	0x44c80000

08001c84 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	460b      	mov	r3, r1
 8001c92:	72fb      	strb	r3, [r7, #11]
 8001c94:	4613      	mov	r3, r2
 8001c96:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	695c      	ldr	r4, [r3, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	b298      	uxth	r0, r3
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	47a0      	blx	r4
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}

08001cba <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	72fb      	strb	r3, [r7, #11]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	691c      	ldr	r4, [r3, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	7b1b      	ldrb	r3, [r3, #12]
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	47a0      	blx	r4
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	72fb      	strb	r3, [r7, #11]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685c      	ldr	r4, [r3, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68d8      	ldr	r0, [r3, #12]
 8001d0c:	893b      	ldrh	r3, [r7, #8]
 8001d0e:	7af9      	ldrb	r1, [r7, #11]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	47a0      	blx	r4
 8001d14:	6178      	str	r0, [r7, #20]

  return ret;
 8001d16:	697b      	ldr	r3, [r7, #20]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}

08001d20 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	72fb      	strb	r3, [r7, #11]
 8001d30:	4613      	mov	r3, r2
 8001d32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681c      	ldr	r4, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68d8      	ldr	r0, [r3, #12]
 8001d3c:	893b      	ldrh	r3, [r7, #8]
 8001d3e:	7af9      	ldrb	r1, [r7, #11]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	47a0      	blx	r4
 8001d44:	6178      	str	r0, [r7, #20]

  return ret;
 8001d46:	697b      	ldr	r3, [r7, #20]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}

08001d50 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d5c:	f107 0210 	add.w	r2, r7, #16
 8001d60:	2301      	movs	r3, #1
 8001d62:	2120      	movs	r1, #32
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffc3 	bl	8001cf0 <lis2dw12_read_reg>
 8001d6a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	7c3b      	ldrb	r3, [r7, #16]
 8001d7e:	f362 0383 	bfi	r3, r2, #2, #2
 8001d82:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7c3b      	ldrb	r3, [r7, #16]
 8001d8e:	f362 0301 	bfi	r3, r2, #0, #2
 8001d92:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d94:	f107 0210 	add.w	r2, r7, #16
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffbf 	bl	8001d20 <lis2dw12_write_reg>
 8001da2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	2301      	movs	r3, #1
 8001db0:	2125      	movs	r1, #37	; 0x25
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff9c 	bl	8001cf0 <lis2dw12_read_reg>
 8001db8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d110      	bne.n	8001de2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	f362 0382 	bfi	r3, r2, #2, #1
 8001dd0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	2125      	movs	r1, #37	; 0x25
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa0 	bl	8001d20 <lis2dw12_write_reg>
 8001de0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001de2:	697b      	ldr	r3, [r7, #20]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001df6:	f107 0210 	add.w	r2, r7, #16
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff76 	bl	8001cf0 <lis2dw12_read_reg>
 8001e04:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 80a3 	bne.w	8001f54 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001e0e:	f107 020c 	add.w	r2, r7, #12
 8001e12:	2301      	movs	r3, #1
 8001e14:	2125      	movs	r1, #37	; 0x25
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff6a 	bl	8001cf0 <lis2dw12_read_reg>
 8001e1c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001e1e:	7b3b      	ldrb	r3, [r7, #12]
 8001e20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	011a      	lsls	r2, r3, #4
 8001e28:	7c3b      	ldrb	r3, [r7, #16]
 8001e2a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8001e34:	7c3a      	ldrb	r2, [r7, #16]
 8001e36:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001e3a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2b1b      	cmp	r3, #27
 8001e40:	f200 8084 	bhi.w	8001f4c <lis2dw12_power_mode_get+0x160>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <lis2dw12_power_mode_get+0x60>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001edd 	.word	0x08001edd
 8001e50:	08001ed5 	.word	0x08001ed5
 8001e54:	08001ecd 	.word	0x08001ecd
 8001e58:	08001ec5 	.word	0x08001ec5
 8001e5c:	08001ebd 	.word	0x08001ebd
 8001e60:	08001f4d 	.word	0x08001f4d
 8001e64:	08001f4d 	.word	0x08001f4d
 8001e68:	08001f4d 	.word	0x08001f4d
 8001e6c:	08001efd 	.word	0x08001efd
 8001e70:	08001ef5 	.word	0x08001ef5
 8001e74:	08001eed 	.word	0x08001eed
 8001e78:	08001ee5 	.word	0x08001ee5
 8001e7c:	08001f4d 	.word	0x08001f4d
 8001e80:	08001f4d 	.word	0x08001f4d
 8001e84:	08001f4d 	.word	0x08001f4d
 8001e88:	08001f4d 	.word	0x08001f4d
 8001e8c:	08001f25 	.word	0x08001f25
 8001e90:	08001f1d 	.word	0x08001f1d
 8001e94:	08001f15 	.word	0x08001f15
 8001e98:	08001f0d 	.word	0x08001f0d
 8001e9c:	08001f05 	.word	0x08001f05
 8001ea0:	08001f4d 	.word	0x08001f4d
 8001ea4:	08001f4d 	.word	0x08001f4d
 8001ea8:	08001f4d 	.word	0x08001f4d
 8001eac:	08001f45 	.word	0x08001f45
 8001eb0:	08001f3d 	.word	0x08001f3d
 8001eb4:	08001f35 	.word	0x08001f35
 8001eb8:	08001f2d 	.word	0x08001f2d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
        break;
 8001ec2:	e047      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	701a      	strb	r2, [r3, #0]
        break;
 8001eca:	e043      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	701a      	strb	r2, [r3, #0]
        break;
 8001ed2:	e03f      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
        break;
 8001eda:	e03b      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
        break;
 8001ee2:	e037      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	220b      	movs	r2, #11
 8001ee8:	701a      	strb	r2, [r3, #0]
        break;
 8001eea:	e033      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	220a      	movs	r2, #10
 8001ef0:	701a      	strb	r2, [r3, #0]
        break;
 8001ef2:	e02f      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2209      	movs	r2, #9
 8001ef8:	701a      	strb	r2, [r3, #0]
        break;
 8001efa:	e02b      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	701a      	strb	r2, [r3, #0]
        break;
 8001f02:	e027      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2214      	movs	r2, #20
 8001f08:	701a      	strb	r2, [r3, #0]
        break;
 8001f0a:	e023      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2213      	movs	r2, #19
 8001f10:	701a      	strb	r2, [r3, #0]
        break;
 8001f12:	e01f      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2212      	movs	r2, #18
 8001f18:	701a      	strb	r2, [r3, #0]
        break;
 8001f1a:	e01b      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2211      	movs	r2, #17
 8001f20:	701a      	strb	r2, [r3, #0]
        break;
 8001f22:	e017      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2210      	movs	r2, #16
 8001f28:	701a      	strb	r2, [r3, #0]
        break;
 8001f2a:	e013      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	221b      	movs	r2, #27
 8001f30:	701a      	strb	r2, [r3, #0]
        break;
 8001f32:	e00f      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	221a      	movs	r2, #26
 8001f38:	701a      	strb	r2, [r3, #0]
        break;
 8001f3a:	e00b      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2219      	movs	r2, #25
 8001f40:	701a      	strb	r2, [r3, #0]
        break;
 8001f42:	e007      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2218      	movs	r2, #24
 8001f48:	701a      	strb	r2, [r3, #0]
        break;
 8001f4a:	e003      	b.n	8001f54 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	701a      	strb	r2, [r3, #0]
        break;
 8001f52:	bf00      	nop
    }
  }

  return ret;
 8001f54:	697b      	ldr	r3, [r7, #20]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop

08001f60 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f6c:	f107 0210 	add.w	r2, r7, #16
 8001f70:	2301      	movs	r3, #1
 8001f72:	2120      	movs	r1, #32
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff febb 	bl	8001cf0 <lis2dw12_read_reg>
 8001f7a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10f      	bne.n	8001fa2 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	7c3b      	ldrb	r3, [r7, #16]
 8001f8c:	f362 1307 	bfi	r3, r2, #4, #4
 8001f90:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f92:	f107 0210 	add.w	r2, r7, #16
 8001f96:	2301      	movs	r3, #1
 8001f98:	2120      	movs	r1, #32
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fec0 	bl	8001d20 <lis2dw12_write_reg>
 8001fa0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001fa8:	f107 020c 	add.w	r2, r7, #12
 8001fac:	2301      	movs	r3, #1
 8001fae:	2122      	movs	r1, #34	; 0x22
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fe9d 	bl	8001cf0 <lis2dw12_read_reg>
 8001fb6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d110      	bne.n	8001fe0 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	f362 0301 	bfi	r3, r2, #0, #2
 8001fce:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001fd0:	f107 020c 	add.w	r2, r7, #12
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	2122      	movs	r1, #34	; 0x22
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fea1 	bl	8001d20 <lis2dw12_write_reg>
 8001fde:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001fe0:	697b      	ldr	r3, [r7, #20]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ff6:	f107 0210 	add.w	r2, r7, #16
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fe76 	bl	8001cf0 <lis2dw12_read_reg>
 8002004:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 80b3 	bne.w	8002174 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800200e:	f107 020c 	add.w	r2, r7, #12
 8002012:	2301      	movs	r3, #1
 8002014:	2122      	movs	r1, #34	; 0x22
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fe6a 	bl	8001cf0 <lis2dw12_read_reg>
 800201c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	7c3a      	ldrb	r2, [r7, #16]
 800202a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4413      	add	r3, r2
 8002032:	2b32      	cmp	r3, #50	; 0x32
 8002034:	f200 809a 	bhi.w	800216c <lis2dw12_data_rate_get+0x180>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <lis2dw12_data_rate_get+0x54>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	0800210d 	.word	0x0800210d
 8002044:	08002115 	.word	0x08002115
 8002048:	0800211d 	.word	0x0800211d
 800204c:	08002125 	.word	0x08002125
 8002050:	0800212d 	.word	0x0800212d
 8002054:	08002135 	.word	0x08002135
 8002058:	0800213d 	.word	0x0800213d
 800205c:	08002145 	.word	0x08002145
 8002060:	0800214d 	.word	0x0800214d
 8002064:	08002155 	.word	0x08002155
 8002068:	0800216d 	.word	0x0800216d
 800206c:	0800216d 	.word	0x0800216d
 8002070:	0800216d 	.word	0x0800216d
 8002074:	0800216d 	.word	0x0800216d
 8002078:	0800216d 	.word	0x0800216d
 800207c:	0800216d 	.word	0x0800216d
 8002080:	0800216d 	.word	0x0800216d
 8002084:	0800216d 	.word	0x0800216d
 8002088:	08002165 	.word	0x08002165
 800208c:	0800216d 	.word	0x0800216d
 8002090:	0800216d 	.word	0x0800216d
 8002094:	0800216d 	.word	0x0800216d
 8002098:	0800216d 	.word	0x0800216d
 800209c:	0800216d 	.word	0x0800216d
 80020a0:	0800216d 	.word	0x0800216d
 80020a4:	0800216d 	.word	0x0800216d
 80020a8:	0800216d 	.word	0x0800216d
 80020ac:	0800216d 	.word	0x0800216d
 80020b0:	0800216d 	.word	0x0800216d
 80020b4:	0800216d 	.word	0x0800216d
 80020b8:	0800216d 	.word	0x0800216d
 80020bc:	0800216d 	.word	0x0800216d
 80020c0:	0800216d 	.word	0x0800216d
 80020c4:	0800216d 	.word	0x0800216d
 80020c8:	0800216d 	.word	0x0800216d
 80020cc:	0800216d 	.word	0x0800216d
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	0800216d 	.word	0x0800216d
 80020d8:	0800216d 	.word	0x0800216d
 80020dc:	0800216d 	.word	0x0800216d
 80020e0:	0800216d 	.word	0x0800216d
 80020e4:	0800216d 	.word	0x0800216d
 80020e8:	0800216d 	.word	0x0800216d
 80020ec:	0800216d 	.word	0x0800216d
 80020f0:	0800216d 	.word	0x0800216d
 80020f4:	0800216d 	.word	0x0800216d
 80020f8:	0800216d 	.word	0x0800216d
 80020fc:	0800216d 	.word	0x0800216d
 8002100:	0800216d 	.word	0x0800216d
 8002104:	0800216d 	.word	0x0800216d
 8002108:	0800215d 	.word	0x0800215d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
        break;
 8002112:	e02f      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
        break;
 800211a:	e02b      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
        break;
 8002122:	e027      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2203      	movs	r2, #3
 8002128:	701a      	strb	r2, [r3, #0]
        break;
 800212a:	e023      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	701a      	strb	r2, [r3, #0]
        break;
 8002132:	e01f      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2205      	movs	r2, #5
 8002138:	701a      	strb	r2, [r3, #0]
        break;
 800213a:	e01b      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2206      	movs	r2, #6
 8002140:	701a      	strb	r2, [r3, #0]
        break;
 8002142:	e017      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2207      	movs	r2, #7
 8002148:	701a      	strb	r2, [r3, #0]
        break;
 800214a:	e013      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2208      	movs	r2, #8
 8002150:	701a      	strb	r2, [r3, #0]
        break;
 8002152:	e00f      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2209      	movs	r2, #9
 8002158:	701a      	strb	r2, [r3, #0]
        break;
 800215a:	e00b      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2232      	movs	r2, #50	; 0x32
 8002160:	701a      	strb	r2, [r3, #0]
        break;
 8002162:	e007      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2212      	movs	r2, #18
 8002168:	701a      	strb	r2, [r3, #0]
        break;
 800216a:	e003      	b.n	8002174 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
        break;
 8002172:	bf00      	nop
    }
  }

  return ret;
 8002174:	697b      	ldr	r3, [r7, #20]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop

08002180 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800218c:	f107 0208 	add.w	r2, r7, #8
 8002190:	2301      	movs	r3, #1
 8002192:	2121      	movs	r1, #33	; 0x21
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fdab 	bl	8001cf0 <lis2dw12_read_reg>
 800219a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	7a3b      	ldrb	r3, [r7, #8]
 80021ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80021b0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80021b2:	f107 0208 	add.w	r2, r7, #8
 80021b6:	2301      	movs	r3, #1
 80021b8:	2121      	movs	r1, #33	; 0x21
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fdb0 	bl	8001d20 <lis2dw12_write_reg>
 80021c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	2301      	movs	r3, #1
 80021de:	2125      	movs	r1, #37	; 0x25
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fd85 	bl	8001cf0 <lis2dw12_read_reg>
 80021e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	7a3b      	ldrb	r3, [r7, #8]
 80021f8:	f362 1305 	bfi	r3, r2, #4, #2
 80021fc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80021fe:	f107 0208 	add.w	r2, r7, #8
 8002202:	2301      	movs	r3, #1
 8002204:	2125      	movs	r1, #37	; 0x25
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fd8a 	bl	8001d20 <lis2dw12_write_reg>
 800220c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002222:	f107 0208 	add.w	r2, r7, #8
 8002226:	2301      	movs	r3, #1
 8002228:	2125      	movs	r1, #37	; 0x25
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fd60 	bl	8001cf0 <lis2dw12_read_reg>
 8002230:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002232:	7a3b      	ldrb	r3, [r7, #8]
 8002234:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b03      	cmp	r3, #3
 800223c:	d81a      	bhi.n	8002274 <lis2dw12_full_scale_get+0x5c>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <lis2dw12_full_scale_get+0x2c>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	0800225d 	.word	0x0800225d
 800224c:	08002265 	.word	0x08002265
 8002250:	0800226d 	.word	0x0800226d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e00f      	b.n	800227c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e00b      	b.n	800227c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
      break;
 800226a:	e007      	b.n	800227c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
      break;
 8002272:	e003      	b.n	800227c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	bf00      	nop
  }

  return ret;
 800227c:	68fb      	ldr	r3, [r7, #12]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002292:	f107 020c 	add.w	r2, r7, #12
 8002296:	2306      	movs	r3, #6
 8002298:	2128      	movs	r1, #40	; 0x28
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fd28 	bl	8001cf0 <lis2dw12_read_reg>
 80022a0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80022a2:	7b7b      	ldrb	r3, [r7, #13]
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	7b3b      	ldrb	r3, [r7, #12]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b21a      	sxth	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3302      	adds	r3, #2
 80022ca:	b212      	sxth	r2, r2
 80022cc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3302      	adds	r3, #2
 80022d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b29a      	uxth	r2, r3
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3302      	adds	r3, #2
 80022e8:	b212      	sxth	r2, r2
 80022ea:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80022ec:	7c7a      	ldrb	r2, [r7, #17]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3304      	adds	r3, #4
 80022f2:	b212      	sxth	r2, r2
 80022f4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b29a      	uxth	r2, r3
 8002304:	7c3b      	ldrb	r3, [r7, #16]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b29a      	uxth	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	3304      	adds	r3, #4
 8002310:	b212      	sxth	r2, r2
 8002312:	801a      	strh	r2, [r3, #0]

  return ret;
 8002314:	697b      	ldr	r3, [r7, #20]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002328:	2301      	movs	r3, #1
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	210f      	movs	r1, #15
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fcde 	bl	8001cf0 <lis2dw12_read_reg>
 8002334:	60f8      	str	r0, [r7, #12]

  return ret;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800234c:	f107 0208 	add.w	r2, r7, #8
 8002350:	2301      	movs	r3, #1
 8002352:	2121      	movs	r1, #33	; 0x21
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fccb 	bl	8001cf0 <lis2dw12_read_reg>
 800235a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f362 0382 	bfi	r3, r2, #2, #1
 8002370:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002372:	f107 0208 	add.w	r2, r7, #8
 8002376:	2301      	movs	r3, #1
 8002378:	2121      	movs	r1, #33	; 0x21
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fcd0 	bl	8001d20 <lis2dw12_write_reg>
 8002380:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002398:	f107 0208 	add.w	r2, r7, #8
 800239c:	2301      	movs	r3, #1
 800239e:	212e      	movs	r1, #46	; 0x2e
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fca5 	bl	8001cf0 <lis2dw12_read_reg>
 80023a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	f362 1347 	bfi	r3, r2, #5, #3
 80023bc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80023be:	f107 0208 	add.w	r2, r7, #8
 80023c2:	2301      	movs	r3, #1
 80023c4:	212e      	movs	r1, #46	; 0x2e
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fcaa 	bl	8001d20 <lis2dw12_write_reg>
 80023cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e067      	b.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7b1a      	ldrb	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <LIS2MDL_RegisterBusIO+0xf8>)
 8002430:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <LIS2MDL_RegisterBusIO+0xfc>)
 8002436:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e036      	b.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4798      	blx	r3
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e02c      	b.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d028      	beq.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d123      	bne.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10d      	bne.n	80024a0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002484:	2334      	movs	r3, #52	; 0x34
 8002486:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	461a      	mov	r2, r3
 800248c:	2162      	movs	r1, #98	; 0x62
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fb1b 	bl	8002aca <LIS2MDL_Write_Reg>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e012      	b.n	80024c6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d101      	bne.n	80024ac <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	e00c      	b.n	80024c6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3320      	adds	r3, #32
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 ff70 	bl	8003398 <lis2mdl_i2c_interface_set>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e000      	b.n	80024c6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	08002b21 	.word	0x08002b21
 80024d4:	08002ba3 	.word	0x08002ba3

080024d8 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d144      	bne.n	8002572 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80024e8:	f107 0208 	add.w	r2, r7, #8
 80024ec:	2301      	movs	r3, #1
 80024ee:	2162      	movs	r1, #98	; 0x62
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fb97 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	e06c      	b.n	80025dc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	2301      	movs	r3, #1
 8002508:	2160      	movs	r1, #96	; 0x60
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fb8a 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	e05f      	b.n	80025dc <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800251c:	7a3b      	ldrb	r3, [r7, #8]
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8002524:	7a3b      	ldrb	r3, [r7, #8]
 8002526:	f36f 0341 	bfc	r3, #1, #1
 800252a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800252c:	7b3b      	ldrb	r3, [r7, #12]
 800252e:	2202      	movs	r2, #2
 8002530:	f362 0301 	bfi	r3, r2, #0, #2
 8002534:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	f043 030c 	orr.w	r3, r3, #12
 800253c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800253e:	f107 0208 	add.w	r2, r7, #8
 8002542:	2301      	movs	r3, #1
 8002544:	2162      	movs	r1, #98	; 0x62
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fcab 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e041      	b.n	80025dc <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002558:	f107 020c 	add.w	r2, r7, #12
 800255c:	2301      	movs	r3, #1
 800255e:	2160      	movs	r1, #96	; 0x60
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fc9e 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d032      	beq.n	80025d2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e034      	b.n	80025dc <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3320      	adds	r3, #32
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fe65 	bl	8003248 <lis2mdl_block_data_update_set>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	e028      	b.n	80025dc <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3320      	adds	r3, #32
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fdd4 	bl	800313e <lis2mdl_operating_mode_set>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e01c      	b.n	80025dc <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3320      	adds	r3, #32
 80025a6:	2103      	movs	r1, #3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fdee 	bl	800318a <lis2mdl_data_rate_set>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e010      	b.n	80025dc <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3320      	adds	r3, #32
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fec3 	bl	800334c <lis2mdl_self_test_set>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e004      	b.n	80025dc <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8a5 	bl	800273c <LIS2MDL_MAG_Disable>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	e004      	b.n	8002608 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d10b      	bne.n	800263a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002622:	2301      	movs	r3, #1
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	214f      	movs	r1, #79	; 0x4f
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fafb 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	e00c      	b.n	8002654 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3320      	adds	r3, #32
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fe72 	bl	800332a <lis2mdl_device_id_get>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	e000      	b.n	8002654 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2232      	movs	r2, #50	; 0x32
 800268e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <LIS2MDL_GetCapabilities+0x58>)
 80026a4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	42c80000 	.word	0x42c80000

080026b8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e032      	b.n	8002734 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d11d      	bne.n	8002712 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026d6:	f107 020c 	add.w	r2, r7, #12
 80026da:	2301      	movs	r3, #1
 80026dc:	2160      	movs	r1, #96	; 0x60
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 faa0 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e021      	b.n	8002734 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80026f0:	7b3b      	ldrb	r3, [r7, #12]
 80026f2:	f36f 0301 	bfc	r3, #0, #2
 80026f6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026f8:	f107 020c 	add.w	r2, r7, #12
 80026fc:	2301      	movs	r3, #1
 80026fe:	2160      	movs	r1, #96	; 0x60
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fbce 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e010      	b.n	8002734 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3320      	adds	r3, #32
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fd10 	bl	800313e <lis2mdl_operating_mode_set>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	e004      	b.n	8002734 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e033      	b.n	80027ba <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d11e      	bne.n	8002798 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800275a:	f107 020c 	add.w	r2, r7, #12
 800275e:	2301      	movs	r3, #1
 8002760:	2160      	movs	r1, #96	; 0x60
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa5e 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e022      	b.n	80027ba <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002774:	7b3b      	ldrb	r3, [r7, #12]
 8002776:	2202      	movs	r2, #2
 8002778:	f362 0301 	bfi	r3, r2, #0, #2
 800277c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800277e:	f107 020c 	add.w	r2, r7, #12
 8002782:	2301      	movs	r3, #1
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fb8b 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00e      	beq.n	80027b0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e010      	b.n	80027ba <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3320      	adds	r3, #32
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fccd 	bl	800313e <lis2mdl_operating_mode_set>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e004      	b.n	80027ba <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80027d2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3320      	adds	r3, #32
 80027f6:	f107 020b 	add.w	r2, r7, #11
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fceb 	bl	80031d8 <lis2mdl_data_rate_get>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e023      	b.n	8002856 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d81b      	bhi.n	800284c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002814:	a201      	add	r2, pc, #4	; (adr r2, 800281c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002835 	.word	0x08002835
 8002824:	0800283d 	.word	0x0800283d
 8002828:	08002845 	.word	0x08002845
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002830:	601a      	str	r2, [r3, #0]
      break;
 8002832:	e00f      	b.n	8002854 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002838:	601a      	str	r2, [r3, #0]
      break;
 800283a:	e00b      	b.n	8002854 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002840:	601a      	str	r2, [r3, #0]
      break;
 8002842:	e007      	b.n	8002854 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002848:	601a      	str	r2, [r3, #0]
      break;
 800284a:	e003      	b.n	8002854 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	60fb      	str	r3, [r7, #12]
      break;
 8002852:	bf00      	nop
  }

  return ret;
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	41200000 	.word	0x41200000
 8002864:	41a00000 	.word	0x41a00000
 8002868:	42480000 	.word	0x42480000
 800286c:	42c80000 	.word	0x42c80000

08002870 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800287c:	edd7 7a00 	vldr	s15, [r7]
 8002880:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	d801      	bhi.n	8002892 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800288e:	2300      	movs	r3, #0
 8002890:	e016      	b.n	80028c0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002892:	edd7 7a00 	vldr	s15, [r7]
 8002896:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800289a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a2:	d801      	bhi.n	80028a8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e00b      	b.n	80028c0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80028a8:	edd7 7a00 	vldr	s15, [r7]
 80028ac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002934 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80028b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	d801      	bhi.n	80028be <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e000      	b.n	80028c0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80028be:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80028c0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d121      	bne.n	800290e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80028ca:	f107 020c 	add.w	r2, r7, #12
 80028ce:	2301      	movs	r3, #1
 80028d0:	2160      	movs	r1, #96	; 0x60
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9a6 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e022      	b.n	800292a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7b3b      	ldrb	r3, [r7, #12]
 80028ee:	f362 0383 	bfi	r3, r2, #2, #2
 80028f2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80028f4:	f107 020c 	add.w	r2, r7, #12
 80028f8:	2301      	movs	r3, #1
 80028fa:	2160      	movs	r1, #96	; 0x60
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fad0 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e00d      	b.n	800292a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3320      	adds	r3, #32
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc37 	bl	800318a <lis2mdl_data_rate_set>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e000      	b.n	800292a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	42480000 	.word	0x42480000

08002938 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2232      	movs	r2, #50	; 0x32
 8002946:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3320      	adds	r3, #32
 800297c:	f107 0208 	add.w	r2, r7, #8
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fc86 	bl	8003294 <lis2mdl_magnetic_raw_get>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e00c      	b.n	80029ae <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002994:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800299c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80029a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d137      	bne.n	8002a38 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80029c8:	f107 0218 	add.w	r2, r7, #24
 80029cc:	2306      	movs	r3, #6
 80029ce:	2168      	movs	r1, #104	; 0x68
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f927 	bl	8002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e06f      	b.n	8002ac2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80029e2:	7e7b      	ldrb	r3, [r7, #25]
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80029e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	7e3b      	ldrb	r3, [r7, #24]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80029fe:	7efb      	ldrb	r3, [r7, #27]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002a04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	7ebb      	ldrb	r3, [r7, #26]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002a1a:	7f7b      	ldrb	r3, [r7, #29]
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002a20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	7f3b      	ldrb	r3, [r7, #28]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	82bb      	strh	r3, [r7, #20]
 8002a36:	e00d      	b.n	8002a54 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3320      	adds	r3, #32
 8002a3c:	f107 0210 	add.w	r2, r7, #16
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fc26 	bl	8003294 <lis2mdl_magnetic_raw_get>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e036      	b.n	8002ac2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff feb1 	bl	80027c2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002a60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a78:	ee17 2a90 	vmov	r2, s15
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002a80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a98:	ee17 2a90 	vmov	r2, s15
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002aa0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab8:	ee17 2a90 	vmov	r2, s15
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d10b      	bne.n	8002afa <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002ae2:	1cba      	adds	r2, r7, #2
 8002ae4:	78f9      	ldrb	r1, [r7, #3]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9da 	bl	8002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	e00e      	b.n	8002b18 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f103 0020 	add.w	r0, r3, #32
 8002b00:	1cba      	adds	r2, r7, #2
 8002b02:	78f9      	ldrb	r1, [r7, #3]
 8002b04:	2301      	movs	r3, #1
 8002b06:	f000 fb02 	bl	800310e <lis2mdl_write_reg>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	e000      	b.n	8002b18 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	72fb      	strb	r3, [r7, #11]
 8002b30:	4613      	mov	r3, r2
 8002b32:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10e      	bne.n	8002b5e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	695c      	ldr	r4, [r3, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	7b1b      	ldrb	r3, [r3, #12]
 8002b48:	b298      	uxth	r0, r3
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	b299      	uxth	r1, r3
 8002b54:	893b      	ldrh	r3, [r7, #8]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	47a0      	blx	r4
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	e01d      	b.n	8002b9a <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d10b      	bne.n	8002b7e <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	695c      	ldr	r4, [r3, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	7b1b      	ldrb	r3, [r3, #12]
 8002b6e:	b298      	uxth	r0, r3
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	b299      	uxth	r1, r3
 8002b74:	893b      	ldrh	r3, [r7, #8]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	47a0      	blx	r4
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	e00d      	b.n	8002b9a <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	695c      	ldr	r4, [r3, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	7b1b      	ldrb	r3, [r3, #12]
 8002b86:	b298      	uxth	r0, r3
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	b299      	uxth	r1, r3
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	47a0      	blx	r4
 8002b98:	4603      	mov	r3, r0
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	461a      	mov	r2, r3
 8002bae:	460b      	mov	r3, r1
 8002bb0:	72fb      	strb	r3, [r7, #11]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	691c      	ldr	r4, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	7b1b      	ldrb	r3, [r3, #12]
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	893b      	ldrh	r3, [r7, #8]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	47a0      	blx	r4
 8002bdc:	4603      	mov	r3, r0
 8002bde:	e01d      	b.n	8002c1c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d10b      	bne.n	8002c00 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	7b1b      	ldrb	r3, [r3, #12]
 8002bf0:	b298      	uxth	r0, r3
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	b299      	uxth	r1, r3
 8002bf6:	893b      	ldrh	r3, [r7, #8]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	47a0      	blx	r4
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	e00d      	b.n	8002c1c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	691c      	ldr	r4, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	b299      	uxth	r1, r3
 8002c14:	893b      	ldrh	r3, [r7, #8]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	47a0      	blx	r4
 8002c1a:	4603      	mov	r3, r0
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	460b      	mov	r3, r1
 8002c32:	72fb      	strb	r3, [r7, #11]
 8002c34:	4613      	mov	r3, r2
 8002c36:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002c4a:	233d      	movs	r3, #61	; 0x3d
 8002c4c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002c4e:	2315      	movs	r3, #21
 8002c50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002c54:	2316      	movs	r3, #22
 8002c56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002c5a:	2317      	movs	r3, #23
 8002c5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002c60:	2314      	movs	r3, #20
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002c66:	2344      	movs	r3, #68	; 0x44
 8002c68:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002c70:	2339      	movs	r3, #57	; 0x39
 8002c72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002c7c:	2329      	movs	r3, #41	; 0x29
 8002c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002c82:	231e      	movs	r3, #30
 8002c84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002c8e:	893b      	ldrh	r3, [r7, #8]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002c94:	2310      	movs	r3, #16
 8002c96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f103 0020 	add.w	r0, r3, #32
 8002cac:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002cb0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f000 fa2a 	bl	800310e <lis2mdl_write_reg>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e0e9      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f103 0020 	add.w	r0, r3, #32
 8002ccc:	f107 021f 	add.w	r2, r7, #31
 8002cd0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f000 fa1a 	bl	800310e <lis2mdl_write_reg>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	e0d9      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f103 0020 	add.w	r0, r3, #32
 8002cec:	f107 020b 	add.w	r2, r7, #11
 8002cf0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f000 fa0a 	bl	800310e <lis2mdl_write_reg>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	e0c9      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f103 0020 	add.w	r0, r3, #32
 8002d0c:	f107 021d 	add.w	r2, r7, #29
 8002d10:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002d14:	2301      	movs	r3, #1
 8002d16:	f000 f9fa 	bl	800310e <lis2mdl_write_reg>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e0b9      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f103 0020 	add.w	r0, r3, #32
 8002d2c:	f107 021e 	add.w	r2, r7, #30
 8002d30:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002d34:	2301      	movs	r3, #1
 8002d36:	f000 f9ea 	bl	800310e <lis2mdl_write_reg>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	e0a9      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f103 0020 	add.w	r0, r3, #32
 8002d4c:	f107 0220 	add.w	r2, r7, #32
 8002d50:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002d54:	2301      	movs	r3, #1
 8002d56:	f000 f9da 	bl	800310e <lis2mdl_write_reg>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e099      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f103 0020 	add.w	r0, r3, #32
 8002d6c:	f107 021c 	add.w	r2, r7, #28
 8002d70:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 f9b2 	bl	80030de <lis2mdl_read_reg>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e089      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002d86:	7f3b      	ldrb	r3, [r7, #28]
 8002d88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d102      	bne.n	8002d96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002d90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002d94:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f103 0020 	add.w	r0, r3, #32
 8002d9c:	f107 021c 	add.w	r2, r7, #28
 8002da0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002da4:	2301      	movs	r3, #1
 8002da6:	f000 f9b2 	bl	800310e <lis2mdl_write_reg>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	e071      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f103 0020 	add.w	r0, r3, #32
 8002dbc:	f107 0214 	add.w	r2, r7, #20
 8002dc0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002dc4:	2306      	movs	r3, #6
 8002dc6:	f000 f98a 	bl	80030de <lis2mdl_read_reg>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	e061      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f103 0020 	add.w	r0, r3, #32
 8002ddc:	f107 021b 	add.w	r2, r7, #27
 8002de0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002de4:	2301      	movs	r3, #1
 8002de6:	f000 f97a 	bl	80030de <lis2mdl_read_reg>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	e051      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8002df6:	7efa      	ldrb	r2, [r7, #27]
 8002df8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1e6      	bne.n	8002dd6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f103 0020 	add.w	r0, r3, #32
 8002e0e:	f107 021b 	add.w	r2, r7, #27
 8002e12:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8002e16:	2301      	movs	r3, #1
 8002e18:	f000 f961 	bl	80030de <lis2mdl_read_reg>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e038      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002e28:	7efa      	ldrb	r2, [r7, #27]
 8002e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d1e6      	bne.n	8002e08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f103 0020 	add.w	r0, r3, #32
 8002e40:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002e44:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f000 f960 	bl	800310e <lis2mdl_write_reg>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	e01f      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f103 0020 	add.w	r0, r3, #32
 8002e60:	893b      	ldrh	r3, [r7, #8]
 8002e62:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	f000 f939 	bl	80030de <lis2mdl_read_reg>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e010      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f103 0020 	add.w	r0, r3, #32
 8002e7e:	f107 0220 	add.w	r2, r7, #32
 8002e82:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e86:	2301      	movs	r3, #1
 8002e88:	f000 f941 	bl	800310e <lis2mdl_write_reg>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e000      	b.n	8002e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08c      	sub	sp, #48	; 0x30
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	461a      	mov	r2, r3
 8002eae:	460b      	mov	r3, r1
 8002eb0:	72fb      	strb	r3, [r7, #11]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002ec8:	233c      	movs	r3, #60	; 0x3c
 8002eca:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002ecc:	2315      	movs	r3, #21
 8002ece:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002ed2:	2316      	movs	r3, #22
 8002ed4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002ed8:	2317      	movs	r3, #23
 8002eda:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8002ee2:	2314      	movs	r3, #20
 8002ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002ee8:	2344      	movs	r3, #68	; 0x44
 8002eea:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8002eec:	2339      	movs	r3, #57	; 0x39
 8002eee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002ef8:	2329      	movs	r3, #41	; 0x29
 8002efa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002efe:	231e      	movs	r3, #30
 8002f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8002f1c:	230e      	movs	r3, #14
 8002f1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f103 0020 	add.w	r0, r3, #32
 8002f28:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f2c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f30:	2301      	movs	r3, #1
 8002f32:	f000 f8ec 	bl	800310e <lis2mdl_write_reg>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	e0c9      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f103 0020 	add.w	r0, r3, #32
 8002f48:	f107 021f 	add.w	r2, r7, #31
 8002f4c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002f50:	2301      	movs	r3, #1
 8002f52:	f000 f8dc 	bl	800310e <lis2mdl_write_reg>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e0b9      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f103 0020 	add.w	r0, r3, #32
 8002f68:	f107 020b 	add.w	r2, r7, #11
 8002f6c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002f70:	2301      	movs	r3, #1
 8002f72:	f000 f8cc 	bl	800310e <lis2mdl_write_reg>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e0a9      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f103 0020 	add.w	r0, r3, #32
 8002f88:	f107 021e 	add.w	r2, r7, #30
 8002f8c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002f90:	2301      	movs	r3, #1
 8002f92:	f000 f8bc 	bl	800310e <lis2mdl_write_reg>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa0:	e099      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f103 0020 	add.w	r0, r3, #32
 8002fa8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002fac:	2301      	movs	r3, #1
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	f000 f8ad 	bl	800310e <lis2mdl_write_reg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e08a      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f103 0020 	add.w	r0, r3, #32
 8002fc6:	f107 021d 	add.w	r2, r7, #29
 8002fca:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f000 f89d 	bl	800310e <lis2mdl_write_reg>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e07a      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f103 0020 	add.w	r0, r3, #32
 8002fe6:	f107 0220 	add.w	r2, r7, #32
 8002fea:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f000 f88d 	bl	800310e <lis2mdl_write_reg>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e06a      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f103 0020 	add.w	r0, r3, #32
 8003006:	f107 021c 	add.w	r2, r7, #28
 800300a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800300e:	2301      	movs	r3, #1
 8003010:	f000 f865 	bl	80030de <lis2mdl_read_reg>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e05a      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003020:	7f3b      	ldrb	r3, [r7, #28]
 8003022:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003026:	429a      	cmp	r2, r3
 8003028:	d102      	bne.n	8003030 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800302a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800302e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f103 0020 	add.w	r0, r3, #32
 8003036:	f107 021c 	add.w	r2, r7, #28
 800303a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800303e:	2301      	movs	r3, #1
 8003040:	f000 f865 	bl	800310e <lis2mdl_write_reg>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e042      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f103 0020 	add.w	r0, r3, #32
 8003056:	f107 0214 	add.w	r2, r7, #20
 800305a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800305e:	2306      	movs	r3, #6
 8003060:	f000 f83d 	bl	80030de <lis2mdl_read_reg>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	e032      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f103 0020 	add.w	r0, r3, #32
 8003076:	f107 021b 	add.w	r2, r7, #27
 800307a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800307e:	2301      	movs	r3, #1
 8003080:	f000 f82d 	bl	80030de <lis2mdl_read_reg>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e022      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003090:	7efa      	ldrb	r2, [r7, #27]
 8003092:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003096:	4013      	ands	r3, r2
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800309e:	429a      	cmp	r2, r3
 80030a0:	d1e6      	bne.n	8003070 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f103 0020 	add.w	r0, r3, #32
 80030a8:	f107 021b 	add.w	r2, r7, #27
 80030ac:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80030b0:	2301      	movs	r3, #1
 80030b2:	f000 f814 	bl	80030de <lis2mdl_read_reg>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e009      	b.n	80030d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80030c2:	7efa      	ldrb	r2, [r7, #27]
 80030c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030c8:	4013      	ands	r3, r2
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1e6      	bne.n	80030a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80030de:	b590      	push	{r4, r7, lr}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	460b      	mov	r3, r1
 80030ec:	72fb      	strb	r3, [r7, #11]
 80030ee:	4613      	mov	r3, r2
 80030f0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685c      	ldr	r4, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68d8      	ldr	r0, [r3, #12]
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	7af9      	ldrb	r1, [r7, #11]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	47a0      	blx	r4
 8003102:	6178      	str	r0, [r7, #20]

  return ret;
 8003104:	697b      	ldr	r3, [r7, #20]
}
 8003106:	4618      	mov	r0, r3
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}

0800310e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800310e:	b590      	push	{r4, r7, lr}
 8003110:	b087      	sub	sp, #28
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	461a      	mov	r2, r3
 800311a:	460b      	mov	r3, r1
 800311c:	72fb      	strb	r3, [r7, #11]
 800311e:	4613      	mov	r3, r2
 8003120:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68d8      	ldr	r0, [r3, #12]
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	7af9      	ldrb	r1, [r7, #11]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	47a0      	blx	r4
 8003132:	6178      	str	r0, [r7, #20]

  return ret;
 8003134:	697b      	ldr	r3, [r7, #20]
}
 8003136:	4618      	mov	r0, r3
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}

0800313e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800314a:	f107 0208 	add.w	r2, r7, #8
 800314e:	2301      	movs	r3, #1
 8003150:	2160      	movs	r1, #96	; 0x60
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffc3 	bl	80030de <lis2mdl_read_reg>
 8003158:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	b2da      	uxtb	r2, r3
 8003168:	7a3b      	ldrb	r3, [r7, #8]
 800316a:	f362 0301 	bfi	r3, r2, #0, #2
 800316e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003170:	f107 0208 	add.w	r2, r7, #8
 8003174:	2301      	movs	r3, #1
 8003176:	2160      	movs	r1, #96	; 0x60
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ffc8 	bl	800310e <lis2mdl_write_reg>
 800317e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003180:	68fb      	ldr	r3, [r7, #12]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003196:	f107 0208 	add.w	r2, r7, #8
 800319a:	2301      	movs	r3, #1
 800319c:	2160      	movs	r1, #96	; 0x60
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff9d 	bl	80030de <lis2mdl_read_reg>
 80031a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10f      	bne.n	80031cc <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	7a3b      	ldrb	r3, [r7, #8]
 80031b6:	f362 0383 	bfi	r3, r2, #2, #2
 80031ba:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80031bc:	f107 0208 	add.w	r2, r7, #8
 80031c0:	2301      	movs	r3, #1
 80031c2:	2160      	movs	r1, #96	; 0x60
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ffa2 	bl	800310e <lis2mdl_write_reg>
 80031ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80031e2:	f107 0208 	add.w	r2, r7, #8
 80031e6:	2301      	movs	r3, #1
 80031e8:	2160      	movs	r1, #96	; 0x60
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff77 	bl	80030de <lis2mdl_read_reg>
 80031f0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80031f2:	7a3b      	ldrb	r3, [r7, #8]
 80031f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d81a      	bhi.n	8003234 <lis2mdl_data_rate_get+0x5c>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <lis2mdl_data_rate_get+0x2c>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003215 	.word	0x08003215
 8003208:	0800321d 	.word	0x0800321d
 800320c:	08003225 	.word	0x08003225
 8003210:	0800322d 	.word	0x0800322d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
      break;
 800321a:	e00f      	b.n	800323c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	e00b      	b.n	800323c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
      break;
 800322a:	e007      	b.n	800323c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2203      	movs	r2, #3
 8003230:	701a      	strb	r2, [r3, #0]
      break;
 8003232:	e003      	b.n	800323c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
      break;
 800323a:	bf00      	nop
  }

  return ret;
 800323c:	68fb      	ldr	r3, [r7, #12]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003254:	f107 0208 	add.w	r2, r7, #8
 8003258:	2301      	movs	r3, #1
 800325a:	2162      	movs	r1, #98	; 0x62
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff3e 	bl	80030de <lis2mdl_read_reg>
 8003262:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7a3b      	ldrb	r3, [r7, #8]
 8003274:	f362 1304 	bfi	r3, r2, #4, #1
 8003278:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800327a:	f107 0208 	add.w	r2, r7, #8
 800327e:	2301      	movs	r3, #1
 8003280:	2162      	movs	r1, #98	; 0x62
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ff43 	bl	800310e <lis2mdl_write_reg>
 8003288:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800329e:	f107 020c 	add.w	r2, r7, #12
 80032a2:	2306      	movs	r3, #6
 80032a4:	2168      	movs	r1, #104	; 0x68
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff19 	bl	80030de <lis2mdl_read_reg>
 80032ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b21a      	sxth	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	3302      	adds	r3, #2
 80032d6:	b212      	sxth	r2, r2
 80032d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3302      	adds	r3, #2
 80032de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	7bbb      	ldrb	r3, [r7, #14]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	3302      	adds	r3, #2
 80032f4:	b212      	sxth	r2, r2
 80032f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80032f8:	7c7a      	ldrb	r2, [r7, #17]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3304      	adds	r3, #4
 80032fe:	b212      	sxth	r2, r2
 8003300:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	b29b      	uxth	r3, r3
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b29a      	uxth	r2, r3
 8003310:	7c3b      	ldrb	r3, [r7, #16]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4413      	add	r3, r2
 8003316:	b29a      	uxth	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3304      	adds	r3, #4
 800331c:	b212      	sxth	r2, r2
 800331e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003320:	697b      	ldr	r3, [r7, #20]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003334:	2301      	movs	r3, #1
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	214f      	movs	r1, #79	; 0x4f
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fecf 	bl	80030de <lis2mdl_read_reg>
 8003340:	60f8      	str	r0, [r7, #12]

  return ret;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003358:	f107 0208 	add.w	r2, r7, #8
 800335c:	2301      	movs	r3, #1
 800335e:	2162      	movs	r1, #98	; 0x62
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff febc 	bl	80030de <lis2mdl_read_reg>
 8003366:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	7a3b      	ldrb	r3, [r7, #8]
 8003378:	f362 0341 	bfi	r3, r2, #1, #1
 800337c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800337e:	f107 0208 	add.w	r2, r7, #8
 8003382:	2301      	movs	r3, #1
 8003384:	2162      	movs	r1, #98	; 0x62
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fec1 	bl	800310e <lis2mdl_write_reg>
 800338c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80033a4:	f107 0208 	add.w	r2, r7, #8
 80033a8:	2301      	movs	r3, #1
 80033aa:	2162      	movs	r1, #98	; 0x62
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fe96 	bl	80030de <lis2mdl_read_reg>
 80033b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	7a3b      	ldrb	r3, [r7, #8]
 80033c4:	f362 1345 	bfi	r3, r2, #5, #1
 80033c8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	2301      	movs	r3, #1
 80033d0:	2162      	movs	r1, #98	; 0x62
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fe9b 	bl	800310e <lis2mdl_write_reg>
 80033d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e051      	b.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7b1a      	ldrb	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <LSM6DSO_RegisterBusIO+0xcc>)
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <LSM6DSO_RegisterBusIO+0xd0>)
 8003442:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e020      	b.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4798      	blx	r3
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e016      	b.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d112      	bne.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003488:	230c      	movs	r3, #12
 800348a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800348c:	7afb      	ldrb	r3, [r7, #11]
 800348e:	461a      	mov	r2, r3
 8003490:	2112      	movs	r1, #18
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ff5d 	bl	8004352 <LSM6DSO_Write_Reg>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80034a4:	68fb      	ldr	r3, [r7, #12]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	080047f5 	.word	0x080047f5
 80034b4:	0800482b 	.word	0x0800482b

080034b8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d00b      	beq.n	80034e0 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3320      	adds	r3, #32
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fe8a 	bl	80051e8 <lsm6dso_i3c_disable_set>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e060      	b.n	80035a2 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3320      	adds	r3, #32
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fe58 	bl	800519c <lsm6dso_auto_increment_set>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e054      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3320      	adds	r3, #32
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fd62 	bl	8004fc8 <lsm6dso_block_data_update_set>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e048      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3320      	adds	r3, #32
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f001 feae 	bl	8005278 <lsm6dso_fifo_mode_set>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
 8003526:	e03c      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2204      	movs	r2, #4
 800352c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fa20 	bl	800497c <lsm6dso_xl_data_rate_set>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e02c      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3320      	adds	r3, #32
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f9b6 	bl	80048c0 <lsm6dso_xl_full_scale_set>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	e020      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2204      	movs	r2, #4
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3320      	adds	r3, #32
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fbce 	bl	8004d10 <lsm6dso_gy_data_rate_set>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e010      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3320      	adds	r3, #32
 8003584:	2106      	movs	r1, #6
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fb5a 	bl	8004c40 <lsm6dso_gy_full_scale_set>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e004      	b.n	80035a2 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f888 	bl	80036c8 <LSM6DSO_ACC_Disable>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e015      	b.n	80035f0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fc2e 	bl	8003e26 <LSM6DSO_GYRO_Disable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	e00c      	b.n	80035f0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fdb6 	bl	800517a <lsm6dso_device_id_get>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	e000      	b.n	800361c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2201      	movs	r2, #1
 8003638:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800364c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <LSM6DSO_GetCapabilities+0x58>)
 800365e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <LSM6DSO_GetCapabilities+0x58>)
 8003664:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	45d02000 	.word	0x45d02000

08003680 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e014      	b.n	80036c0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0220 	add.w	r2, r3, #32
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f001 f969 	bl	800497c <lsm6dso_xl_data_rate_set>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	e004      	b.n	80036c0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e01f      	b.n	800371e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 0220 	add.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3333      	adds	r3, #51	; 0x33
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f001 fa40 	bl	8004b70 <lsm6dso_xl_data_rate_get>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
 80036fa:	e010      	b.n	800371e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3320      	adds	r3, #32
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f93a 	bl	800497c <lsm6dso_xl_data_rate_set>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e004      	b.n	800371e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3320      	adds	r3, #32
 800373a:	f107 020b 	add.w	r2, r7, #11
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f001 f8e3 	bl	800490c <lsm6dso_xl_full_scale_get>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	e023      	b.n	800379a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003752:	7afb      	ldrb	r3, [r7, #11]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d81b      	bhi.n	8003790 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003789 	.word	0x08003789
 8003768:	08003779 	.word	0x08003779
 800376c:	08003781 	.word	0x08003781
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4a0c      	ldr	r2, [pc, #48]	; (80037a4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003774:	601a      	str	r2, [r3, #0]
      break;
 8003776:	e00f      	b.n	8003798 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800377c:	601a      	str	r2, [r3, #0]
      break;
 800377e:	e00b      	b.n	8003798 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003784:	601a      	str	r2, [r3, #0]
      break;
 8003786:	e007      	b.n	8003798 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800378c:	601a      	str	r2, [r3, #0]
      break;
 800378e:	e003      	b.n	8003798 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	60fb      	str	r3, [r7, #12]
      break;
 8003796:	bf00      	nop
  }

  return ret;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	3d79db23 	.word	0x3d79db23
 80037a8:	3df9db23 	.word	0x3df9db23
 80037ac:	3e79db23 	.word	0x3e79db23
 80037b0:	3ef9db23 	.word	0x3ef9db23

080037b4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3320      	adds	r3, #32
 80037c6:	f107 020b 	add.w	r2, r7, #11
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 f9cf 	bl	8004b70 <lsm6dso_xl_data_rate_get>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	e054      	b.n	8003888 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80037de:	7afb      	ldrb	r3, [r7, #11]
 80037e0:	2b0b      	cmp	r3, #11
 80037e2:	d84c      	bhi.n	800387e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	0800382f 	.word	0x0800382f
 80037f4:	08003837 	.word	0x08003837
 80037f8:	0800383f 	.word	0x0800383f
 80037fc:	08003847 	.word	0x08003847
 8003800:	0800384f 	.word	0x0800384f
 8003804:	08003857 	.word	0x08003857
 8003808:	0800385f 	.word	0x0800385f
 800380c:	08003867 	.word	0x08003867
 8003810:	0800386f 	.word	0x0800386f
 8003814:	08003877 	.word	0x08003877
 8003818:	08003827 	.word	0x08003827
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
      break;
 8003824:	e02f      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800382a:	601a      	str	r2, [r3, #0]
      break;
 800382c:	e02b      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003832:	601a      	str	r2, [r3, #0]
      break;
 8003834:	e027      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800383a:	601a      	str	r2, [r3, #0]
      break;
 800383c:	e023      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003842:	601a      	str	r2, [r3, #0]
      break;
 8003844:	e01f      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800384a:	601a      	str	r2, [r3, #0]
      break;
 800384c:	e01b      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003852:	601a      	str	r2, [r3, #0]
      break;
 8003854:	e017      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800385a:	601a      	str	r2, [r3, #0]
      break;
 800385c:	e013      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4a12      	ldr	r2, [pc, #72]	; (80038ac <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003862:	601a      	str	r2, [r3, #0]
      break;
 8003864:	e00f      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800386a:	601a      	str	r2, [r3, #0]
      break;
 800386c:	e00b      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003872:	601a      	str	r2, [r3, #0]
      break;
 8003874:	e007      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800387a:	601a      	str	r2, [r3, #0]
      break;
 800387c:	e003      	b.n	8003886 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	60fb      	str	r3, [r7, #12]
      break;
 8003884:	bf00      	nop
  }

  return ret;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	3fcccccd 	.word	0x3fcccccd
 8003894:	41480000 	.word	0x41480000
 8003898:	41d00000 	.word	0x41d00000
 800389c:	42500000 	.word	0x42500000
 80038a0:	42d00000 	.word	0x42d00000
 80038a4:	43500000 	.word	0x43500000
 80038a8:	43d08000 	.word	0x43d08000
 80038ac:	44504000 	.word	0x44504000
 80038b0:	44d06000 	.word	0x44d06000
 80038b4:	45505000 	.word	0x45505000
 80038b8:	45d05800 	.word	0x45d05800

080038bc <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80038c8:	2100      	movs	r1, #0
 80038ca:	ed97 0a00 	vldr	s0, [r7]
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f806 	bl	80038e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038ec:	460b      	mov	r3, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	f000 80ea 	beq.w	8003ad4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003900:	2b02      	cmp	r3, #2
 8003902:	f300 8163 	bgt.w	8003bcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800390a:	2b01      	cmp	r3, #1
 800390c:	d074      	beq.n	80039f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800390e:	e15d      	b.n	8003bcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f103 0020 	add.w	r0, r3, #32
 8003916:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800391a:	2301      	movs	r3, #1
 800391c:	2114      	movs	r1, #20
 800391e:	f000 ff9f 	bl	8004860 <lsm6dso_read_reg>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	e16c      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800392e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d025      	beq.n	8003988 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10b      	bne.n	800395e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3320      	adds	r3, #32
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f815 	bl	800497c <lsm6dso_xl_data_rate_set>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	e154      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800395e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003962:	f36f 13c7 	bfc	r3, #7, #1
 8003966:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f103 0020 	add.w	r0, r3, #32
 8003970:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003974:	2301      	movs	r3, #1
 8003976:	2114      	movs	r1, #20
 8003978:	f000 ff8a 	bl	8004890 <lsm6dso_write_reg>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e13f      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f103 0020 	add.w	r0, r3, #32
 800398e:	f107 0220 	add.w	r2, r7, #32
 8003992:	2301      	movs	r3, #1
 8003994:	2115      	movs	r1, #21
 8003996:	f000 ff63 	bl	8004860 <lsm6dso_read_reg>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	e130      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80039a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d014      	beq.n	80039de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80039b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039b8:	f36f 1304 	bfc	r3, #4, #1
 80039bc:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f103 0020 	add.w	r0, r3, #32
 80039c6:	f107 0220 	add.w	r2, r7, #32
 80039ca:	2301      	movs	r3, #1
 80039cc:	2115      	movs	r1, #21
 80039ce:	f000 ff5f 	bl	8004890 <lsm6dso_write_reg>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e114      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80039de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80039e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	d400      	bmi.n	80039f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80039f0:	e0f0      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f6:	e0ed      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f103 0020 	add.w	r0, r3, #32
 80039fe:	f107 021c 	add.w	r2, r7, #28
 8003a02:	2301      	movs	r3, #1
 8003a04:	2114      	movs	r1, #20
 8003a06:	f000 ff2b 	bl	8004860 <lsm6dso_read_reg>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	e0f8      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003a16:	7f3b      	ldrb	r3, [r7, #28]
 8003a18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d023      	beq.n	8003a6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10b      	bne.n	8003a44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3320      	adds	r3, #32
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 ffa2 	bl	800497c <lsm6dso_xl_data_rate_set>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e0e1      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003a44:	7f3b      	ldrb	r3, [r7, #28]
 8003a46:	f36f 13c7 	bfc	r3, #7, #1
 8003a4a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f103 0020 	add.w	r0, r3, #32
 8003a52:	f107 021c 	add.w	r2, r7, #28
 8003a56:	2301      	movs	r3, #1
 8003a58:	2114      	movs	r1, #20
 8003a5a:	f000 ff19 	bl	8004890 <lsm6dso_write_reg>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e0ce      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f103 0020 	add.w	r0, r3, #32
 8003a70:	f107 0218 	add.w	r2, r7, #24
 8003a74:	2301      	movs	r3, #1
 8003a76:	2115      	movs	r1, #21
 8003a78:	f000 fef2 	bl	8004860 <lsm6dso_read_reg>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e0bf      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003a88:	7e3b      	ldrb	r3, [r7, #24]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d112      	bne.n	8003aba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003a94:	7e3b      	ldrb	r3, [r7, #24]
 8003a96:	f043 0310 	orr.w	r3, r3, #16
 8003a9a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f103 0020 	add.w	r0, r3, #32
 8003aa2:	f107 0218 	add.w	r2, r7, #24
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2115      	movs	r1, #21
 8003aaa:	f000 fef1 	bl	8004890 <lsm6dso_write_reg>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab8:	e0a6      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003aba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003abe:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003c14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dc00      	bgt.n	8003ace <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003acc:	e082      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003ace:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	e07f      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f103 0020 	add.w	r0, r3, #32
 8003ada:	f107 0210 	add.w	r2, r7, #16
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2115      	movs	r1, #21
 8003ae2:	f000 febd 	bl	8004860 <lsm6dso_read_reg>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	e08a      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003af2:	7c3b      	ldrb	r3, [r7, #16]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d012      	beq.n	8003b24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003afe:	7c3b      	ldrb	r3, [r7, #16]
 8003b00:	f36f 1304 	bfc	r3, #4, #1
 8003b04:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f103 0020 	add.w	r0, r3, #32
 8003b0c:	f107 0210 	add.w	r2, r7, #16
 8003b10:	2301      	movs	r3, #1
 8003b12:	2115      	movs	r1, #21
 8003b14:	f000 febc 	bl	8004890 <lsm6dso_write_reg>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	e071      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d108      	bne.n	8003b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f979 	bl	8003e26 <LSM6DSO_GYRO_Disable>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e063      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f103 0020 	add.w	r0, r3, #32
 8003b46:	f107 0214 	add.w	r2, r7, #20
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	2114      	movs	r1, #20
 8003b4e:	f000 fe87 	bl	8004860 <lsm6dso_read_reg>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5c:	e054      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003b5e:	7d3b      	ldrb	r3, [r7, #20]
 8003b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d123      	bne.n	8003bb2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10b      	bne.n	8003b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3320      	adds	r3, #32
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fefe 	bl	800497c <lsm6dso_xl_data_rate_set>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e03d      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003b8c:	7d3b      	ldrb	r3, [r7, #20]
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b92:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f103 0020 	add.w	r0, r3, #32
 8003b9a:	f107 0214 	add.w	r2, r7, #20
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2114      	movs	r1, #20
 8003ba2:	f000 fe75 	bl	8004890 <lsm6dso_write_reg>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	e02a      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003bb2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003bb6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003c14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	dc00      	bgt.n	8003bc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003bc4:	e006      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	e003      	b.n	8003bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003bd2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d102      	bne.n	8003be2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003be0:	e012      	b.n	8003c08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003bec:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fbc9 	bl	8004388 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003bf6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003bf8:	e005      	b.n	8003c06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003bfa:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fc5a 	bl	80044b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003c04:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3730      	adds	r7, #48	; 0x30
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	41480000 	.word	0x41480000
 8003c14:	43500000 	.word	0x43500000
 8003c18:	43500000 	.word	0x43500000

08003c1c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3320      	adds	r3, #32
 8003c2e:	f107 020b 	add.w	r2, r7, #11
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fe69 	bl	800490c <lsm6dso_xl_full_scale_get>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e023      	b.n	8003c8e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d81b      	bhi.n	8003c84 <LSM6DSO_ACC_GetFullScale+0x68>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c75 	.word	0x08003c75
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2202      	movs	r2, #2
 8003c68:	601a      	str	r2, [r3, #0]
      break;
 8003c6a:	e00f      	b.n	8003c8c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	601a      	str	r2, [r3, #0]
      break;
 8003c72:	e00b      	b.n	8003c8c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2208      	movs	r2, #8
 8003c78:	601a      	str	r2, [r3, #0]
      break;
 8003c7a:	e007      	b.n	8003c8c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	601a      	str	r2, [r3, #0]
      break;
 8003c82:	e003      	b.n	8003c8c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	60fb      	str	r3, [r7, #12]
      break;
 8003c8a:	bf00      	nop
  }

  return ret;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop

08003c98 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	dd0b      	ble.n	8003cc0 <LSM6DSO_ACC_SetFullScale+0x28>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	dd06      	ble.n	8003cbc <LSM6DSO_ACC_SetFullScale+0x24>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	dc01      	bgt.n	8003cb8 <LSM6DSO_ACC_SetFullScale+0x20>
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e004      	b.n	8003cc2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e002      	b.n	8003cc2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e000      	b.n	8003cc2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003cc0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003cc2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3320      	adds	r3, #32
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fdf7 	bl	80048c0 <lsm6dso_xl_full_scale_set>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e000      	b.n	8003ce0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3320      	adds	r3, #32
 8003cf6:	f107 0208 	add.w	r2, r7, #8
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f9d4 	bl	80050aa <lsm6dso_acceleration_raw_get>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	e00c      	b.n	8003d28 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003d0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003d16:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003d1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	f107 0210 	add.w	r2, r7, #16
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f9ad 	bl	80050aa <lsm6dso_acceleration_raw_get>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	e03c      	b.n	8003dd6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003d5c:	f107 030c 	add.w	r3, r7, #12
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fce0 	bl	8003728 <LSM6DSO_ACC_GetSensitivity>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	e030      	b.n	8003dd6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003d74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8c:	ee17 2a90 	vmov	r2, s15
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dac:	ee17 2a90 	vmov	r2, s15
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003db4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dcc:	ee17 2a90 	vmov	r2, s15
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e014      	b.n	8003e1e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f103 0220 	add.w	r2, r3, #32
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 ff84 	bl	8004d10 <lsm6dso_gy_data_rate_set>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e004      	b.n	8003e1e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e01f      	b.n	8003e7c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 0220 	add.w	r2, r3, #32
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3334      	adds	r3, #52	; 0x34
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f001 f85b 	bl	8004f04 <lsm6dso_gy_data_rate_get>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e010      	b.n	8003e7c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 ff55 	bl	8004d10 <lsm6dso_gy_data_rate_set>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	e004      	b.n	8003e7c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3320      	adds	r3, #32
 8003e96:	f107 020b 	add.w	r2, r7, #11
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fef5 	bl	8004c8c <lsm6dso_gy_full_scale_get>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	e02d      	b.n	8003f0a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d825      	bhi.n	8003f00 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003f01 	.word	0x08003f01
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003ef9 	.word	0x08003ef9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003edc:	601a      	str	r2, [r3, #0]
      break;
 8003ede:	e013      	b.n	8003f08 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003ee4:	601a      	str	r2, [r3, #0]
      break;
 8003ee6:	e00f      	b.n	8003f08 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003eec:	601a      	str	r2, [r3, #0]
      break;
 8003eee:	e00b      	b.n	8003f08 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003ef4:	601a      	str	r2, [r3, #0]
      break;
 8003ef6:	e007      	b.n	8003f08 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003efc:	601a      	str	r2, [r3, #0]
      break;
 8003efe:	e003      	b.n	8003f08 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	60fb      	str	r3, [r7, #12]
      break;
 8003f06:	bf00      	nop
  }

  return ret;
 8003f08:	68fb      	ldr	r3, [r7, #12]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	408c0000 	.word	0x408c0000
 8003f18:	410c0000 	.word	0x410c0000
 8003f1c:	418c0000 	.word	0x418c0000
 8003f20:	420c0000 	.word	0x420c0000
 8003f24:	428c0000 	.word	0x428c0000

08003f28 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3320      	adds	r3, #32
 8003f3a:	f107 020b 	add.w	r2, r7, #11
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 ffdf 	bl	8004f04 <lsm6dso_gy_data_rate_get>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	e04e      	b.n	8003ff0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	2b0a      	cmp	r3, #10
 8003f56:	d846      	bhi.n	8003fe6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003fa7 	.word	0x08003fa7
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003fb7 	.word	0x08003fb7
 8003f78:	08003fbf 	.word	0x08003fbf
 8003f7c:	08003fc7 	.word	0x08003fc7
 8003f80:	08003fcf 	.word	0x08003fcf
 8003f84:	08003fd7 	.word	0x08003fd7
 8003f88:	08003fdf 	.word	0x08003fdf
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
      break;
 8003f94:	e02b      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8003f9a:	601a      	str	r2, [r3, #0]
      break;
 8003f9c:	e027      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8003fa2:	601a      	str	r2, [r3, #0]
      break;
 8003fa4:	e023      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8003faa:	601a      	str	r2, [r3, #0]
      break;
 8003fac:	e01f      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8003fb2:	601a      	str	r2, [r3, #0]
      break;
 8003fb4:	e01b      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8003fba:	601a      	str	r2, [r3, #0]
      break;
 8003fbc:	e017      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8003fc2:	601a      	str	r2, [r3, #0]
      break;
 8003fc4:	e013      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	4a11      	ldr	r2, [pc, #68]	; (8004010 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8003fca:	601a      	str	r2, [r3, #0]
      break;
 8003fcc:	e00f      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	4a10      	ldr	r2, [pc, #64]	; (8004014 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8003fd2:	601a      	str	r2, [r3, #0]
      break;
 8003fd4:	e00b      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8003fda:	601a      	str	r2, [r3, #0]
      break;
 8003fdc:	e007      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8003fe2:	601a      	str	r2, [r3, #0]
      break;
 8003fe4:	e003      	b.n	8003fee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	60fb      	str	r3, [r7, #12]
      break;
 8003fec:	bf00      	nop
  }

  return ret;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	41480000 	.word	0x41480000
 8003ffc:	41d00000 	.word	0x41d00000
 8004000:	42500000 	.word	0x42500000
 8004004:	42d00000 	.word	0x42d00000
 8004008:	43500000 	.word	0x43500000
 800400c:	43d08000 	.word	0x43d08000
 8004010:	44504000 	.word	0x44504000
 8004014:	44d06000 	.word	0x44d06000
 8004018:	45505000 	.word	0x45505000
 800401c:	45d05800 	.word	0x45d05800

08004020 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800402c:	2100      	movs	r1, #0
 800402e:	ed97 0a00 	vldr	s0, [r7]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f806 	bl	8004044 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004050:	460b      	mov	r3, r1
 8004052:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004066:	e05c      	b.n	8004122 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f103 0020 	add.w	r0, r3, #32
 800406e:	f107 0214 	add.w	r2, r7, #20
 8004072:	2301      	movs	r3, #1
 8004074:	2116      	movs	r1, #22
 8004076:	f000 fbf3 	bl	8004860 <lsm6dso_read_reg>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	e06c      	b.n	8004160 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004086:	7d3b      	ldrb	r3, [r7, #20]
 8004088:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d04b      	beq.n	800412a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004092:	7d3b      	ldrb	r3, [r7, #20]
 8004094:	f36f 13c7 	bfc	r3, #7, #1
 8004098:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f103 0020 	add.w	r0, r3, #32
 80040a0:	f107 0214 	add.w	r2, r7, #20
 80040a4:	2301      	movs	r3, #1
 80040a6:	2116      	movs	r1, #22
 80040a8:	f000 fbf2 	bl	8004890 <lsm6dso_write_reg>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03b      	beq.n	800412a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e053      	b.n	8004160 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f103 0020 	add.w	r0, r3, #32
 80040be:	f107 0210 	add.w	r2, r7, #16
 80040c2:	2301      	movs	r3, #1
 80040c4:	2116      	movs	r1, #22
 80040c6:	f000 fbcb 	bl	8004860 <lsm6dso_read_reg>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e044      	b.n	8004160 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80040d6:	7c3b      	ldrb	r3, [r7, #16]
 80040d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d112      	bne.n	8004108 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80040e2:	7c3b      	ldrb	r3, [r7, #16]
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f103 0020 	add.w	r0, r3, #32
 80040f0:	f107 0210 	add.w	r2, r7, #16
 80040f4:	2301      	movs	r3, #1
 80040f6:	2116      	movs	r1, #22
 80040f8:	f000 fbca 	bl	8004890 <lsm6dso_write_reg>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	e02b      	b.n	8004160 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004108:	edd7 7a06 	vldr	s15, [r7, #24]
 800410c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	dc00      	bgt.n	800411c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800411a:	e007      	b.n	800412c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e004      	b.n	800412c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	61fb      	str	r3, [r7, #28]
      break;
 8004128:	e000      	b.n	800412c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800412a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d102      	bne.n	800413a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	e012      	b.n	8004160 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004140:	2b01      	cmp	r3, #1
 8004142:	d106      	bne.n	8004152 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004144:	ed97 0a06 	vldr	s0, [r7, #24]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa45 	bl	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800414e:	61f8      	str	r0, [r7, #28]
 8004150:	e005      	b.n	800415e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004152:	ed97 0a06 	vldr	s0, [r7, #24]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 faca 	bl	80046f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800415c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800415e:	69fb      	ldr	r3, [r7, #28]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	43500000 	.word	0x43500000
 800416c:	43500000 	.word	0x43500000

08004170 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3320      	adds	r3, #32
 8004182:	f107 020b 	add.w	r2, r7, #11
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fd7f 	bl	8004c8c <lsm6dso_gy_full_scale_get>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	e030      	b.n	80041fc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	2b06      	cmp	r3, #6
 800419e:	d828      	bhi.n	80041f2 <LSM6DSO_GYRO_GetFullScale+0x82>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041c5 	.word	0x080041c5
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041f3 	.word	0x080041f3
 80041b8:	080041df 	.word	0x080041df
 80041bc:	080041f3 	.word	0x080041f3
 80041c0:	080041e9 	.word	0x080041e9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	227d      	movs	r2, #125	; 0x7d
 80041c8:	601a      	str	r2, [r3, #0]
      break;
 80041ca:	e016      	b.n	80041fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	22fa      	movs	r2, #250	; 0xfa
 80041d0:	601a      	str	r2, [r3, #0]
      break;
 80041d2:	e012      	b.n	80041fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041da:	601a      	str	r2, [r3, #0]
      break;
 80041dc:	e00d      	b.n	80041fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041e4:	601a      	str	r2, [r3, #0]
      break;
 80041e6:	e008      	b.n	80041fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80041ee:	601a      	str	r2, [r3, #0]
      break;
 80041f0:	e003      	b.n	80041fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
 80041f6:	60fb      	str	r3, [r7, #12]
      break;
 80041f8:	bf00      	nop
  }

  return ret;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b7d      	cmp	r3, #125	; 0x7d
 8004212:	dd12      	ble.n	800423a <LSM6DSO_GYRO_SetFullScale+0x36>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2bfa      	cmp	r3, #250	; 0xfa
 8004218:	dd0d      	ble.n	8004236 <LSM6DSO_GYRO_SetFullScale+0x32>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004220:	dd07      	ble.n	8004232 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004228:	dc01      	bgt.n	800422e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800422a:	2304      	movs	r3, #4
 800422c:	e006      	b.n	800423c <LSM6DSO_GYRO_SetFullScale+0x38>
 800422e:	2306      	movs	r3, #6
 8004230:	e004      	b.n	800423c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004232:	2302      	movs	r3, #2
 8004234:	e002      	b.n	800423c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <LSM6DSO_GYRO_SetFullScale+0x38>
 800423a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800423c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3320      	adds	r3, #32
 8004242:	7bfa      	ldrb	r2, [r7, #15]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fcfa 	bl	8004c40 <lsm6dso_gy_full_scale_set>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	e000      	b.n	800425a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3320      	adds	r3, #32
 8004270:	f107 0208 	add.w	r2, r7, #8
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fecc 	bl	8005014 <lsm6dso_angular_rate_raw_get>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e00c      	b.n	80042a2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004288:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004290:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004298:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3320      	adds	r3, #32
 80042b8:	f107 0210 	add.w	r2, r7, #16
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fea8 	bl	8005014 <lsm6dso_angular_rate_raw_get>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e03c      	b.n	800434a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fdd4 	bl	8003e84 <LSM6DSO_GYRO_GetSensitivity>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e030      	b.n	800434a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80042e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004300:	ee17 2a90 	vmov	r2, s15
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004308:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004314:	edd7 7a03 	vldr	s15, [r7, #12]
 8004318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004320:	ee17 2a90 	vmov	r2, s15
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004334:	edd7 7a03 	vldr	s15, [r7, #12]
 8004338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004340:	ee17 2a90 	vmov	r2, s15
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
 800435e:	4613      	mov	r3, r2
 8004360:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f103 0020 	add.w	r0, r3, #32
 8004368:	1cba      	adds	r2, r7, #2
 800436a:	78f9      	ldrb	r1, [r7, #3]
 800436c:	2301      	movs	r3, #1
 800436e:	f000 fa8f 	bl	8004890 <lsm6dso_write_reg>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	e000      	b.n	8004380 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004394:	edd7 7a00 	vldr	s15, [r7]
 8004398:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004498 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800439c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d801      	bhi.n	80043aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80043a6:	230b      	movs	r3, #11
 80043a8:	e063      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043aa:	edd7 7a00 	vldr	s15, [r7]
 80043ae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80043b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	d801      	bhi.n	80043c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80043bc:	2301      	movs	r3, #1
 80043be:	e058      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043c0:	edd7 7a00 	vldr	s15, [r7]
 80043c4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80043c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	d801      	bhi.n	80043d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e04d      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043d6:	edd7 7a00 	vldr	s15, [r7]
 80043da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800449c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80043de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	d801      	bhi.n	80043ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80043e8:	2303      	movs	r3, #3
 80043ea:	e042      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80043ec:	edd7 7a00 	vldr	s15, [r7]
 80043f0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80044a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80043f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	d801      	bhi.n	8004402 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80043fe:	2304      	movs	r3, #4
 8004400:	e037      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004402:	edd7 7a00 	vldr	s15, [r7]
 8004406:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80044a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800440a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d801      	bhi.n	8004418 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004414:	2305      	movs	r3, #5
 8004416:	e02c      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004418:	edd7 7a00 	vldr	s15, [r7]
 800441c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80044a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d801      	bhi.n	800442e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800442a:	2306      	movs	r3, #6
 800442c:	e021      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800442e:	edd7 7a00 	vldr	s15, [r7]
 8004432:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80044ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	d801      	bhi.n	8004444 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004440:	2307      	movs	r3, #7
 8004442:	e016      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004444:	edd7 7a00 	vldr	s15, [r7]
 8004448:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80044b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800444c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d801      	bhi.n	800445a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004456:	2308      	movs	r3, #8
 8004458:	e00b      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800445a:	edd7 7a00 	vldr	s15, [r7]
 800445e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80044b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	d801      	bhi.n	8004470 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800446c:	2309      	movs	r3, #9
 800446e:	e000      	b.n	8004472 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004470:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004472:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3320      	adds	r3, #32
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fa7d 	bl	800497c <lsm6dso_xl_data_rate_set>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e000      	b.n	8004490 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	3fcccccd 	.word	0x3fcccccd
 800449c:	42500000 	.word	0x42500000
 80044a0:	42d00000 	.word	0x42d00000
 80044a4:	43500000 	.word	0x43500000
 80044a8:	43d08000 	.word	0x43d08000
 80044ac:	44504000 	.word	0x44504000
 80044b0:	44d06000 	.word	0x44d06000
 80044b4:	45505000 	.word	0x45505000

080044b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80044c4:	edd7 7a00 	vldr	s15, [r7]
 80044c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80045b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80044cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	d801      	bhi.n	80044da <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80044d6:	230b      	movs	r3, #11
 80044d8:	e063      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044da:	edd7 7a00 	vldr	s15, [r7]
 80044de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	d801      	bhi.n	80044f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e058      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044f0:	edd7 7a00 	vldr	s15, [r7]
 80044f4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	d801      	bhi.n	8004506 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004502:	2302      	movs	r3, #2
 8004504:	e04d      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004506:	edd7 7a00 	vldr	s15, [r7]
 800450a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80045bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800450e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d801      	bhi.n	800451c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004518:	2303      	movs	r3, #3
 800451a:	e042      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800451c:	edd7 7a00 	vldr	s15, [r7]
 8004520:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80045c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d801      	bhi.n	8004532 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800452e:	2304      	movs	r3, #4
 8004530:	e037      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004532:	edd7 7a00 	vldr	s15, [r7]
 8004536:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80045c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800453a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d801      	bhi.n	8004548 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004544:	2305      	movs	r3, #5
 8004546:	e02c      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004548:	edd7 7a00 	vldr	s15, [r7]
 800454c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80045c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	d801      	bhi.n	800455e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800455a:	2306      	movs	r3, #6
 800455c:	e021      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800455e:	edd7 7a00 	vldr	s15, [r7]
 8004562:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80045cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456e:	d801      	bhi.n	8004574 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004570:	2307      	movs	r3, #7
 8004572:	e016      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004574:	edd7 7a00 	vldr	s15, [r7]
 8004578:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80045d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800457c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	d801      	bhi.n	800458a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004586:	2308      	movs	r3, #8
 8004588:	e00b      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800458a:	edd7 7a00 	vldr	s15, [r7]
 800458e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80045d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459a:	d801      	bhi.n	80045a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800459c:	2309      	movs	r3, #9
 800459e:	e000      	b.n	80045a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80045a0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	3fcccccd 	.word	0x3fcccccd
 80045bc:	42500000 	.word	0x42500000
 80045c0:	42d00000 	.word	0x42d00000
 80045c4:	43500000 	.word	0x43500000
 80045c8:	43d08000 	.word	0x43d08000
 80045cc:	44504000 	.word	0x44504000
 80045d0:	44d06000 	.word	0x44d06000
 80045d4:	45505000 	.word	0x45505000

080045d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80045e4:	edd7 7a00 	vldr	s15, [r7]
 80045e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f4:	d801      	bhi.n	80045fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e058      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045fa:	edd7 7a00 	vldr	s15, [r7]
 80045fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d801      	bhi.n	8004610 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800460c:	2302      	movs	r3, #2
 800460e:	e04d      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004610:	edd7 7a00 	vldr	s15, [r7]
 8004614:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80046d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d801      	bhi.n	8004626 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004622:	2303      	movs	r3, #3
 8004624:	e042      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004626:	edd7 7a00 	vldr	s15, [r7]
 800462a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80046d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800462e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004636:	d801      	bhi.n	800463c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004638:	2304      	movs	r3, #4
 800463a:	e037      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800463c:	edd7 7a00 	vldr	s15, [r7]
 8004640:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464c:	d801      	bhi.n	8004652 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800464e:	2305      	movs	r3, #5
 8004650:	e02c      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004652:	edd7 7a00 	vldr	s15, [r7]
 8004656:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80046e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800465a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004662:	d801      	bhi.n	8004668 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004664:	2306      	movs	r3, #6
 8004666:	e021      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004668:	edd7 7a00 	vldr	s15, [r7]
 800466c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	d801      	bhi.n	800467e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800467a:	2307      	movs	r3, #7
 800467c:	e016      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800467e:	edd7 7a00 	vldr	s15, [r7]
 8004682:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	d801      	bhi.n	8004694 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004690:	2308      	movs	r3, #8
 8004692:	e00b      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004694:	edd7 7a00 	vldr	s15, [r7]
 8004698:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800469c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	d801      	bhi.n	80046aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80046a6:	2309      	movs	r3, #9
 80046a8:	e000      	b.n	80046ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80046aa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80046ac:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3320      	adds	r3, #32
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fb2a 	bl	8004d10 <lsm6dso_gy_data_rate_set>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e000      	b.n	80046ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	42500000 	.word	0x42500000
 80046d8:	42d00000 	.word	0x42d00000
 80046dc:	43500000 	.word	0x43500000
 80046e0:	43d08000 	.word	0x43d08000
 80046e4:	44504000 	.word	0x44504000
 80046e8:	44d06000 	.word	0x44d06000
 80046ec:	45505000 	.word	0x45505000

080046f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80046fc:	edd7 7a00 	vldr	s15, [r7]
 8004700:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	d801      	bhi.n	8004712 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800470e:	2301      	movs	r3, #1
 8004710:	e058      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004712:	edd7 7a00 	vldr	s15, [r7]
 8004716:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800471a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d801      	bhi.n	8004728 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004724:	2302      	movs	r3, #2
 8004726:	e04d      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004728:	edd7 7a00 	vldr	s15, [r7]
 800472c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80047d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	d801      	bhi.n	800473e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800473a:	2303      	movs	r3, #3
 800473c:	e042      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800473e:	edd7 7a00 	vldr	s15, [r7]
 8004742:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80047dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474e:	d801      	bhi.n	8004754 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004750:	2304      	movs	r3, #4
 8004752:	e037      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004754:	edd7 7a00 	vldr	s15, [r7]
 8004758:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80047e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800475c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	d801      	bhi.n	800476a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004766:	2305      	movs	r3, #5
 8004768:	e02c      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800476a:	edd7 7a00 	vldr	s15, [r7]
 800476e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d801      	bhi.n	8004780 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800477c:	2306      	movs	r3, #6
 800477e:	e021      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004780:	edd7 7a00 	vldr	s15, [r7]
 8004784:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80047e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	d801      	bhi.n	8004796 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004792:	2307      	movs	r3, #7
 8004794:	e016      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004796:	edd7 7a00 	vldr	s15, [r7]
 800479a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80047ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800479e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	d801      	bhi.n	80047ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80047a8:	2308      	movs	r3, #8
 80047aa:	e00b      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80047ac:	edd7 7a00 	vldr	s15, [r7]
 80047b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80047f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80047b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	d801      	bhi.n	80047c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80047be:	2309      	movs	r3, #9
 80047c0:	e000      	b.n	80047c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80047c2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	42500000 	.word	0x42500000
 80047dc:	42d00000 	.word	0x42d00000
 80047e0:	43500000 	.word	0x43500000
 80047e4:	43d08000 	.word	0x43d08000
 80047e8:	44504000 	.word	0x44504000
 80047ec:	44d06000 	.word	0x44d06000
 80047f0:	45505000 	.word	0x45505000

080047f4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	72fb      	strb	r3, [r7, #11]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	695c      	ldr	r4, [r3, #20]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	7b1b      	ldrb	r3, [r3, #12]
 8004814:	b298      	uxth	r0, r3
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	b299      	uxth	r1, r3
 800481a:	893b      	ldrh	r3, [r7, #8]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	47a0      	blx	r4
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}

0800482a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800482a:	b590      	push	{r4, r7, lr}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	461a      	mov	r2, r3
 8004836:	460b      	mov	r3, r1
 8004838:	72fb      	strb	r3, [r7, #11]
 800483a:	4613      	mov	r3, r2
 800483c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	691c      	ldr	r4, [r3, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	7b1b      	ldrb	r3, [r3, #12]
 800484a:	b298      	uxth	r0, r3
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	b299      	uxth	r1, r3
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	47a0      	blx	r4
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd90      	pop	{r4, r7, pc}

08004860 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	460b      	mov	r3, r1
 800486e:	72fb      	strb	r3, [r7, #11]
 8004870:	4613      	mov	r3, r2
 8004872:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685c      	ldr	r4, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68d8      	ldr	r0, [r3, #12]
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	7af9      	ldrb	r1, [r7, #11]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	47a0      	blx	r4
 8004884:	6178      	str	r0, [r7, #20]

  return ret;
 8004886:	697b      	ldr	r3, [r7, #20]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd90      	pop	{r4, r7, pc}

08004890 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	460b      	mov	r3, r1
 800489e:	72fb      	strb	r3, [r7, #11]
 80048a0:	4613      	mov	r3, r2
 80048a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681c      	ldr	r4, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68d8      	ldr	r0, [r3, #12]
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	7af9      	ldrb	r1, [r7, #11]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	47a0      	blx	r4
 80048b4:	6178      	str	r0, [r7, #20]

  return ret;
 80048b6:	697b      	ldr	r3, [r7, #20]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048cc:	f107 0208 	add.w	r2, r7, #8
 80048d0:	2301      	movs	r3, #1
 80048d2:	2110      	movs	r1, #16
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffc3 	bl	8004860 <lsm6dso_read_reg>
 80048da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	7a3b      	ldrb	r3, [r7, #8]
 80048ec:	f362 0383 	bfi	r3, r2, #2, #2
 80048f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048f2:	f107 0208 	add.w	r2, r7, #8
 80048f6:	2301      	movs	r3, #1
 80048f8:	2110      	movs	r1, #16
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ffc8 	bl	8004890 <lsm6dso_write_reg>
 8004900:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004916:	f107 0208 	add.w	r2, r7, #8
 800491a:	2301      	movs	r3, #1
 800491c:	2110      	movs	r1, #16
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff9e 	bl	8004860 <lsm6dso_read_reg>
 8004924:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004926:	7a3b      	ldrb	r3, [r7, #8]
 8004928:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d81a      	bhi.n	8004968 <lsm6dso_xl_full_scale_get+0x5c>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <lsm6dso_xl_full_scale_get+0x2c>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004949 	.word	0x08004949
 800493c:	08004951 	.word	0x08004951
 8004940:	08004959 	.word	0x08004959
 8004944:	08004961 	.word	0x08004961
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
      break;
 800494e:	e00f      	b.n	8004970 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
      break;
 8004956:	e00b      	b.n	8004970 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2202      	movs	r2, #2
 800495c:	701a      	strb	r2, [r3, #0]
      break;
 800495e:	e007      	b.n	8004970 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2203      	movs	r2, #3
 8004964:	701a      	strb	r2, [r3, #0]
      break;
 8004966:	e003      	b.n	8004970 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
      break;
 800496e:	bf00      	nop
  }

  return ret;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop

0800497c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fc96 	bl	80052c4 <lsm6dso_fsm_enable_get>
 8004998:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <lsm6dso_xl_data_rate_set+0x28>
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e0e0      	b.n	8004b66 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80049a4:	7b3b      	ldrb	r3, [r7, #12]
 80049a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80049ac:	7b3b      	ldrb	r3, [r7, #12]
 80049ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80049b2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80049b8:	7b3b      	ldrb	r3, [r7, #12]
 80049ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80049c4:	7b3b      	ldrb	r3, [r7, #12]
 80049c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80049ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80049d0:	7b3b      	ldrb	r3, [r7, #12]
 80049d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80049d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80049d8:	4313      	orrs	r3, r2
 80049da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80049dc:	7b3b      	ldrb	r3, [r7, #12]
 80049de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80049e8:	7b3b      	ldrb	r3, [r7, #12]
 80049ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80049f0:	4313      	orrs	r3, r2
 80049f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80049f4:	7b3b      	ldrb	r3, [r7, #12]
 80049f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004a00:	7b7b      	ldrb	r3, [r7, #13]
 8004a02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004a06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004a0c:	7b7b      	ldrb	r3, [r7, #13]
 8004a0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004a18:	7b7b      	ldrb	r3, [r7, #13]
 8004a1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004a24:	7b7b      	ldrb	r3, [r7, #13]
 8004a26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004a3c:	7b7b      	ldrb	r3, [r7, #13]
 8004a3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004a48:	7b7b      	ldrb	r3, [r7, #13]
 8004a4a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a4e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004a50:	4313      	orrs	r3, r2
 8004a52:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004a54:	7b7b      	ldrb	r3, [r7, #13]
 8004a56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a5a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d164      	bne.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004a64:	f107 030b 	add.w	r3, r7, #11
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fc4c 	bl	8005308 <lsm6dso_fsm_data_rate_get>
 8004a70:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <lsm6dso_xl_data_rate_set+0x100>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	e074      	b.n	8004b66 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d852      	bhi.n	8004b28 <lsm6dso_xl_data_rate_set+0x1ac>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <lsm6dso_xl_data_rate_set+0x10c>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aab 	.word	0x08004aab
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004af3 	.word	0x08004af3
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004aa2:	e044      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	75fb      	strb	r3, [r7, #23]
        break;
 8004aa8:	e041      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004ab4:	e03b      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d102      	bne.n	8004ac2 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004abc:	2302      	movs	r3, #2
 8004abe:	75fb      	strb	r3, [r7, #23]
        break;
 8004ac0:	e035      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	75fb      	strb	r3, [r7, #23]
        break;
 8004ac6:	e032      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004ad2:	e02c      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ada:	2303      	movs	r3, #3
 8004adc:	75fb      	strb	r3, [r7, #23]
        break;
 8004ade:	e026      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d102      	bne.n	8004aec <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8004aea:	e020      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	75fb      	strb	r3, [r7, #23]
        break;
 8004af0:	e01d      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004af8:	2304      	movs	r3, #4
 8004afa:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004afc:	e017      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004b04:	2304      	movs	r3, #4
 8004b06:	75fb      	strb	r3, [r7, #23]
        break;
 8004b08:	e011      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d102      	bne.n	8004b16 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004b10:	2304      	movs	r3, #4
 8004b12:	75fb      	strb	r3, [r7, #23]
        break;
 8004b14:	e00b      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d102      	bne.n	8004b22 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8004b20:	e005      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	75fb      	strb	r3, [r7, #23]
        break;
 8004b26:	e002      	b.n	8004b2e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	75fb      	strb	r3, [r7, #23]
        break;
 8004b2c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b2e:	f107 0208 	add.w	r2, r7, #8
 8004b32:	2301      	movs	r3, #1
 8004b34:	2110      	movs	r1, #16
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe92 	bl	8004860 <lsm6dso_read_reg>
 8004b3c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	7a3b      	ldrb	r3, [r7, #8]
 8004b48:	f362 1307 	bfi	r3, r2, #4, #4
 8004b4c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b4e:	f107 0208 	add.w	r2, r7, #8
 8004b52:	2301      	movs	r3, #1
 8004b54:	2110      	movs	r1, #16
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe9a 	bl	8004890 <lsm6dso_write_reg>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

  return ret;
 8004b64:	693b      	ldr	r3, [r7, #16]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b7a:	f107 0208 	add.w	r2, r7, #8
 8004b7e:	2301      	movs	r3, #1
 8004b80:	2110      	movs	r1, #16
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fe6c 	bl	8004860 <lsm6dso_read_reg>
 8004b88:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004b8a:	7a3b      	ldrb	r3, [r7, #8]
 8004b8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b0b      	cmp	r3, #11
 8004b94:	d84a      	bhi.n	8004c2c <lsm6dso_xl_data_rate_get+0xbc>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <lsm6dso_xl_data_rate_get+0x2c>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bcd 	.word	0x08004bcd
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004bed 	.word	0x08004bed
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c15 	.word	0x08004c15
 8004bc4:	08004c1d 	.word	0x08004c1d
 8004bc8:	08004c25 	.word	0x08004c25
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
      break;
 8004bd2:	e02f      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	e02b      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2202      	movs	r2, #2
 8004be0:	701a      	strb	r2, [r3, #0]
      break;
 8004be2:	e027      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2203      	movs	r2, #3
 8004be8:	701a      	strb	r2, [r3, #0]
      break;
 8004bea:	e023      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2204      	movs	r2, #4
 8004bf0:	701a      	strb	r2, [r3, #0]
      break;
 8004bf2:	e01f      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	701a      	strb	r2, [r3, #0]
      break;
 8004bfa:	e01b      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2206      	movs	r2, #6
 8004c00:	701a      	strb	r2, [r3, #0]
      break;
 8004c02:	e017      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2207      	movs	r2, #7
 8004c08:	701a      	strb	r2, [r3, #0]
      break;
 8004c0a:	e013      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e00f      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2209      	movs	r2, #9
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e00b      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	220a      	movs	r2, #10
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	e007      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	220b      	movs	r2, #11
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e003      	b.n	8004c34 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
      break;
 8004c32:	bf00      	nop
  }

  return ret;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop

08004c40 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c4c:	f107 0208 	add.w	r2, r7, #8
 8004c50:	2301      	movs	r3, #1
 8004c52:	2111      	movs	r1, #17
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fe03 	bl	8004860 <lsm6dso_read_reg>
 8004c5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	7a3b      	ldrb	r3, [r7, #8]
 8004c6c:	f362 0343 	bfi	r3, r2, #1, #3
 8004c70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c72:	f107 0208 	add.w	r2, r7, #8
 8004c76:	2301      	movs	r3, #1
 8004c78:	2111      	movs	r1, #17
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fe08 	bl	8004890 <lsm6dso_write_reg>
 8004c80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004c96:	f107 0208 	add.w	r2, r7, #8
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2111      	movs	r1, #17
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fdde 	bl	8004860 <lsm6dso_read_reg>
 8004ca4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004ca6:	7a3b      	ldrb	r3, [r7, #8]
 8004ca8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d824      	bhi.n	8004cfc <lsm6dso_gy_full_scale_get+0x70>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <lsm6dso_gy_full_scale_get+0x2c>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004cfd 	.word	0x08004cfd
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cfd 	.word	0x08004cfd
 8004cd0:	08004cf5 	.word	0x08004cf5
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e013      	b.n	8004d04 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
      break;
 8004ce2:	e00f      	b.n	8004d04 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	701a      	strb	r2, [r3, #0]
      break;
 8004cea:	e00b      	b.n	8004d04 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	701a      	strb	r2, [r3, #0]
      break;
 8004cf2:	e007      	b.n	8004d04 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2206      	movs	r2, #6
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e003      	b.n	8004d04 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	bf00      	nop
  }

  return ret;
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	4619      	mov	r1, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 facc 	bl	80052c4 <lsm6dso_fsm_enable_get>
 8004d2c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <lsm6dso_gy_data_rate_set+0x28>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	e0e0      	b.n	8004efa <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d38:	7b3b      	ldrb	r3, [r7, #12]
 8004d3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d3e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004d40:	7b3b      	ldrb	r3, [r7, #12]
 8004d42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d46:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004d4c:	7b3b      	ldrb	r3, [r7, #12]
 8004d4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d52:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004d58:	7b3b      	ldrb	r3, [r7, #12]
 8004d5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d5e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004d64:	7b3b      	ldrb	r3, [r7, #12]
 8004d66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004d70:	7b3b      	ldrb	r3, [r7, #12]
 8004d72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004d7c:	7b3b      	ldrb	r3, [r7, #12]
 8004d7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004d84:	4313      	orrs	r3, r2
 8004d86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004d88:	7b3b      	ldrb	r3, [r7, #12]
 8004d8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004d94:	7b7b      	ldrb	r3, [r7, #13]
 8004d96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004da0:	7b7b      	ldrb	r3, [r7, #13]
 8004da2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004da6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004dac:	7b7b      	ldrb	r3, [r7, #13]
 8004dae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004db2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004db8:	7b7b      	ldrb	r3, [r7, #13]
 8004dba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004dbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004dc4:	7b7b      	ldrb	r3, [r7, #13]
 8004dc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004dd0:	7b7b      	ldrb	r3, [r7, #13]
 8004dd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004dd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004ddc:	7b7b      	ldrb	r3, [r7, #13]
 8004dde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004de2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004de8:	7b7b      	ldrb	r3, [r7, #13]
 8004dea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004dee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004df0:	4313      	orrs	r3, r2
 8004df2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d164      	bne.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004df8:	f107 030b 	add.w	r3, r7, #11
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa82 	bl	8005308 <lsm6dso_fsm_data_rate_get>
 8004e04:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <lsm6dso_gy_data_rate_set+0x100>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	e074      	b.n	8004efa <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d852      	bhi.n	8004ebc <lsm6dso_gy_data_rate_set+0x1ac>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <lsm6dso_gy_data_rate_set+0x10c>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e87 	.word	0x08004e87
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e36:	e044      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e3c:	e041      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004e44:	2302      	movs	r3, #2
 8004e46:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e48:	e03b      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d102      	bne.n	8004e56 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004e50:	2302      	movs	r3, #2
 8004e52:	75fb      	strb	r3, [r7, #23]
        break;
 8004e54:	e035      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	75fb      	strb	r3, [r7, #23]
        break;
 8004e5a:	e032      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e62:	2303      	movs	r3, #3
 8004e64:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e66:	e02c      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	75fb      	strb	r3, [r7, #23]
        break;
 8004e72:	e026      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d102      	bne.n	8004e80 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e7e:	e020      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	75fb      	strb	r3, [r7, #23]
        break;
 8004e84:	e01d      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004e90:	e017      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004e98:	2304      	movs	r3, #4
 8004e9a:	75fb      	strb	r3, [r7, #23]
        break;
 8004e9c:	e011      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d102      	bne.n	8004eaa <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea8:	e00b      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d102      	bne.n	8004eb6 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	75fb      	strb	r3, [r7, #23]
        break;
 8004eb4:	e005      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	75fb      	strb	r3, [r7, #23]
        break;
 8004eba:	e002      	b.n	8004ec2 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	75fb      	strb	r3, [r7, #23]
        break;
 8004ec0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004ec2:	f107 0208 	add.w	r2, r7, #8
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	2111      	movs	r1, #17
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fcc8 	bl	8004860 <lsm6dso_read_reg>
 8004ed0:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	7a3b      	ldrb	r3, [r7, #8]
 8004edc:	f362 1307 	bfi	r3, r2, #4, #4
 8004ee0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004ee2:	f107 0208 	add.w	r2, r7, #8
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	2111      	movs	r1, #17
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fcd0 	bl	8004890 <lsm6dso_write_reg>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  return ret;
 8004ef8:	693b      	ldr	r3, [r7, #16]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f0e:	f107 0208 	add.w	r2, r7, #8
 8004f12:	2301      	movs	r3, #1
 8004f14:	2111      	movs	r1, #17
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fca2 	bl	8004860 <lsm6dso_read_reg>
 8004f1c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8004f1e:	7a3b      	ldrb	r3, [r7, #8]
 8004f20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b0a      	cmp	r3, #10
 8004f28:	d844      	bhi.n	8004fb4 <lsm6dso_gy_data_rate_get+0xb0>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <lsm6dso_gy_data_rate_get+0x2c>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f65 	.word	0x08004f65
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f7d 	.word	0x08004f7d
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004fa5 	.word	0x08004fa5
 8004f58:	08004fad 	.word	0x08004fad
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	e02b      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e027      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e023      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2203      	movs	r2, #3
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e01f      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e01b      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2205      	movs	r2, #5
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e017      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2206      	movs	r2, #6
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e013      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2207      	movs	r2, #7
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e00f      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	e00b      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2209      	movs	r2, #9
 8004fa8:	701a      	strb	r2, [r3, #0]
      break;
 8004faa:	e007      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	220a      	movs	r2, #10
 8004fb0:	701a      	strb	r2, [r3, #0]
      break;
 8004fb2:	e003      	b.n	8004fbc <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	bf00      	nop
  }

  return ret;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004fd4:	f107 0208 	add.w	r2, r7, #8
 8004fd8:	2301      	movs	r3, #1
 8004fda:	2112      	movs	r1, #18
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fc3f 	bl	8004860 <lsm6dso_read_reg>
 8004fe2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10f      	bne.n	800500a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	7a3b      	ldrb	r3, [r7, #8]
 8004ff4:	f362 1386 	bfi	r3, r2, #6, #1
 8004ff8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ffa:	f107 0208 	add.w	r2, r7, #8
 8004ffe:	2301      	movs	r3, #1
 8005000:	2112      	movs	r1, #18
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff fc44 	bl	8004890 <lsm6dso_write_reg>
 8005008:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800501e:	f107 020c 	add.w	r2, r7, #12
 8005022:	2306      	movs	r3, #6
 8005024:	2122      	movs	r1, #34	; 0x22
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fc1a 	bl	8004860 <lsm6dso_read_reg>
 800502c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800502e:	7b7b      	ldrb	r3, [r7, #13]
 8005030:	b21a      	sxth	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800503c:	b29b      	uxth	r3, r3
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b29a      	uxth	r2, r3
 8005042:	7b3b      	ldrb	r3, [r7, #12]
 8005044:	b29b      	uxth	r3, r3
 8005046:	4413      	add	r3, r2
 8005048:	b29b      	uxth	r3, r3
 800504a:	b21a      	sxth	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3302      	adds	r3, #2
 8005056:	b212      	sxth	r2, r2
 8005058:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3302      	adds	r3, #2
 800505e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005062:	b29b      	uxth	r3, r3
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	b29a      	uxth	r2, r3
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4413      	add	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	3302      	adds	r3, #2
 8005074:	b212      	sxth	r2, r2
 8005076:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005078:	7c7a      	ldrb	r2, [r7, #17]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3304      	adds	r3, #4
 800507e:	b212      	sxth	r2, r2
 8005080:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3304      	adds	r3, #4
 8005086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800508a:	b29b      	uxth	r3, r3
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	b29a      	uxth	r2, r3
 8005090:	7c3b      	ldrb	r3, [r7, #16]
 8005092:	b29b      	uxth	r3, r3
 8005094:	4413      	add	r3, r2
 8005096:	b29a      	uxth	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	3304      	adds	r3, #4
 800509c:	b212      	sxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]

  return ret;
 80050a0:	697b      	ldr	r3, [r7, #20]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80050b4:	f107 020c 	add.w	r2, r7, #12
 80050b8:	2306      	movs	r3, #6
 80050ba:	2128      	movs	r1, #40	; 0x28
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fbcf 	bl	8004860 <lsm6dso_read_reg>
 80050c2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050c4:	7b7b      	ldrb	r3, [r7, #13]
 80050c6:	b21a      	sxth	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	7b3b      	ldrb	r3, [r7, #12]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	4413      	add	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	3302      	adds	r3, #2
 80050ec:	b212      	sxth	r2, r2
 80050ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	3302      	adds	r3, #2
 80050f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	7bbb      	ldrb	r3, [r7, #14]
 8005100:	b29b      	uxth	r3, r3
 8005102:	4413      	add	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	3302      	adds	r3, #2
 800510a:	b212      	sxth	r2, r2
 800510c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800510e:	7c7a      	ldrb	r2, [r7, #17]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	b212      	sxth	r2, r2
 8005116:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	3304      	adds	r3, #4
 800511c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005120:	b29b      	uxth	r3, r3
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	b29a      	uxth	r2, r3
 8005126:	7c3b      	ldrb	r3, [r7, #16]
 8005128:	b29b      	uxth	r3, r3
 800512a:	4413      	add	r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	b212      	sxth	r2, r2
 8005134:	801a      	strh	r2, [r3, #0]

  return ret;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 800514c:	2300      	movs	r3, #0
 800514e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	b2da      	uxtb	r2, r3
 8005158:	7a3b      	ldrb	r3, [r7, #8]
 800515a:	f362 1387 	bfi	r3, r2, #6, #2
 800515e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005160:	f107 0208 	add.w	r2, r7, #8
 8005164:	2301      	movs	r3, #1
 8005166:	2101      	movs	r1, #1
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fb91 	bl	8004890 <lsm6dso_write_reg>
 800516e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005184:	2301      	movs	r3, #1
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	210f      	movs	r1, #15
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fb68 	bl	8004860 <lsm6dso_read_reg>
 8005190:	60f8      	str	r0, [r7, #12]

  return ret;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80051a8:	f107 0208 	add.w	r2, r7, #8
 80051ac:	2301      	movs	r3, #1
 80051ae:	2112      	movs	r1, #18
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fb55 	bl	8004860 <lsm6dso_read_reg>
 80051b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	7a3b      	ldrb	r3, [r7, #8]
 80051c8:	f362 0382 	bfi	r3, r2, #2, #1
 80051cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80051ce:	f107 0208 	add.w	r2, r7, #8
 80051d2:	2301      	movs	r3, #1
 80051d4:	2112      	movs	r1, #18
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fb5a 	bl	8004890 <lsm6dso_write_reg>
 80051dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80051f4:	f107 020c 	add.w	r2, r7, #12
 80051f8:	2301      	movs	r3, #1
 80051fa:	2118      	movs	r1, #24
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fb2f 	bl	8004860 <lsm6dso_read_reg>
 8005202:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	7b3b      	ldrb	r3, [r7, #12]
 8005212:	f362 0341 	bfi	r3, r2, #1, #1
 8005216:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005218:	f107 020c 	add.w	r2, r7, #12
 800521c:	2301      	movs	r3, #1
 800521e:	2118      	movs	r1, #24
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fb35 	bl	8004890 <lsm6dso_write_reg>
 8005226:	4602      	mov	r2, r0
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4413      	add	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <lsm6dso_i3c_disable_set+0x50>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	e01b      	b.n	8005270 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005238:	f107 0210 	add.w	r2, r7, #16
 800523c:	2301      	movs	r3, #1
 800523e:	2162      	movs	r1, #98	; 0x62
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fb0d 	bl	8004860 <lsm6dso_read_reg>
 8005246:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	b2da      	uxtb	r2, r3
 8005250:	7c3b      	ldrb	r3, [r7, #16]
 8005252:	f362 03c4 	bfi	r3, r2, #3, #2
 8005256:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005258:	f107 0210 	add.w	r2, r7, #16
 800525c:	2301      	movs	r3, #1
 800525e:	2162      	movs	r1, #98	; 0x62
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fb15 	bl	8004890 <lsm6dso_write_reg>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  return ret;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005284:	f107 0208 	add.w	r2, r7, #8
 8005288:	2301      	movs	r3, #1
 800528a:	210a      	movs	r1, #10
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fae7 	bl	8004860 <lsm6dso_read_reg>
 8005292:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	7a3b      	ldrb	r3, [r7, #8]
 80052a4:	f362 0302 	bfi	r3, r2, #0, #3
 80052a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80052aa:	f107 0208 	add.w	r2, r7, #8
 80052ae:	2301      	movs	r3, #1
 80052b0:	210a      	movs	r1, #10
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff faec 	bl	8004890 <lsm6dso_write_reg>
 80052b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052ba:	68fb      	ldr	r3, [r7, #12]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80052ce:	2102      	movs	r1, #2
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff35 	bl	8005140 <lsm6dso_mem_bank_set>
 80052d6:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80052d8:	2302      	movs	r3, #2
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	2146      	movs	r1, #70	; 0x46
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fabe 	bl	8004860 <lsm6dso_read_reg>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80052ec:	2100      	movs	r1, #0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff26 	bl	8005140 <lsm6dso_mem_bank_set>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  return ret;
 80052fc:	68fb      	ldr	r3, [r7, #12]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005312:	2102      	movs	r1, #2
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff13 	bl	8005140 <lsm6dso_mem_bank_set>
 800531a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <lsm6dso_fsm_data_rate_get+0x1e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	e03a      	b.n	800539c <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	2301      	movs	r3, #1
 800532c:	215f      	movs	r1, #95	; 0x5f
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fa96 	bl	8004860 <lsm6dso_read_reg>
 8005334:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d125      	bne.n	8005388 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 800533c:	7a3b      	ldrb	r3, [r7, #8]
 800533e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d81b      	bhi.n	8005380 <lsm6dso_fsm_data_rate_get+0x78>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <lsm6dso_fsm_data_rate_get+0x48>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005369 	.word	0x08005369
 8005358:	08005371 	.word	0x08005371
 800535c:	08005379 	.word	0x08005379
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
      break;
 8005366:	e010      	b.n	800538a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
      break;
 800536e:	e00c      	b.n	800538a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      break;
 8005376:	e008      	b.n	800538a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2203      	movs	r2, #3
 800537c:	701a      	strb	r2, [r3, #0]
      break;
 800537e:	e004      	b.n	800538a <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
      break;
 8005386:	e000      	b.n	800538a <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005388:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800538a:	2100      	movs	r1, #0
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fed7 	bl	8005140 <lsm6dso_mem_bank_set>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  return ret;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80053b2:	2301      	movs	r3, #1
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d06e      	beq.n	800549e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	f200 809d 	bhi.w	8005502 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <IKS01A3_MOTION_SENSOR_Init+0x32>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d032      	beq.n	800543a <IKS01A3_MOTION_SENSOR_Init+0x96>
 80053d4:	e095      	b.n	8005502 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80053d6:	6838      	ldr	r0, [r7, #0]
 80053d8:	f000 f966 	bl	80056a8 <LSM6DSO_0_Probe>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e0cc      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053e8:	4a68      	ldr	r2, [pc, #416]	; (800558c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4967      	ldr	r1, [pc, #412]	; (8005590 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053fa:	f107 010c 	add.w	r1, r7, #12
 80053fe:	4610      	mov	r0, r2
 8005400:	4798      	blx	r3
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005408:	f06f 0306 	mvn.w	r3, #6
 800540c:	e0b9      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800540e:	7b3b      	ldrb	r3, [r7, #12]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d103      	bne.n	800541c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800541c:	7b7b      	ldrb	r3, [r7, #13]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d103      	bne.n	800542a <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d16c      	bne.n	800550a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005438:	e067      	b.n	800550a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800543a:	6838      	ldr	r0, [r7, #0]
 800543c:	f000 f9f4 	bl	8005828 <LIS2DW12_0_Probe>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005446:	f04f 33ff 	mov.w	r3, #4294967295
 800544a:	e09a      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800544c:	4a4f      	ldr	r2, [pc, #316]	; (800558c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	494e      	ldr	r1, [pc, #312]	; (8005590 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800545e:	f107 010c 	add.w	r1, r7, #12
 8005462:	4610      	mov	r0, r2
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800546c:	f06f 0306 	mvn.w	r3, #6
 8005470:	e087      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005472:	7b3b      	ldrb	r3, [r7, #12]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d103      	bne.n	8005480 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005480:	7b7b      	ldrb	r3, [r7, #13]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d103      	bne.n	800548e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d13c      	bne.n	800550e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800549c:	e037      	b.n	800550e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800549e:	6838      	ldr	r0, [r7, #0]
 80054a0:	f000 fa6a 	bl	8005978 <LIS2MDL_0_Probe>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e068      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80054b0:	4a36      	ldr	r2, [pc, #216]	; (800558c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4935      	ldr	r1, [pc, #212]	; (8005590 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054c2:	f107 010c 	add.w	r1, r7, #12
 80054c6:	4610      	mov	r0, r2
 80054c8:	4798      	blx	r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80054d0:	f06f 0306 	mvn.w	r3, #6
 80054d4:	e055      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80054d6:	7b3b      	ldrb	r3, [r7, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d103      	bne.n	80054e4 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f043 0302 	orr.w	r3, r3, #2
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80054e4:	7b7b      	ldrb	r3, [r7, #13]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d103      	bne.n	80054f2 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10c      	bne.n	8005512 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005500:	e007      	b.n	8005512 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005502:	f06f 0301 	mvn.w	r3, #1
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005508:	e004      	b.n	8005514 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005512:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	e031      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005522:	e02a      	b.n	800557a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	4013      	ands	r3, r2
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	429a      	cmp	r2, r3
 800552e:	d11e      	bne.n	800556e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8005530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	4013      	ands	r3, r2
 8005536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005538:	429a      	cmp	r2, r3
 800553a:	d118      	bne.n	800556e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005544:	4814      	ldr	r0, [pc, #80]	; (8005598 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	440b      	add	r3, r1
 8005550:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	490e      	ldr	r1, [pc, #56]	; (8005590 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800555e:	4610      	mov	r0, r2
 8005560:	4798      	blx	r3
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005568:	f06f 0304 	mvn.w	r3, #4
 800556c:	e009      	b.n	8005582 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	3301      	adds	r3, #1
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	2b02      	cmp	r3, #2
 800557e:	d9d1      	bls.n	8005524 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005582:	4618      	mov	r0, r3
 8005584:	3738      	adds	r7, #56	; 0x38
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000026c 	.word	0x2000026c
 8005590:	2000023c 	.word	0x2000023c
 8005594:	200000c4 	.word	0x200000c4
 8005598:	20000248 	.word	0x20000248

0800559c <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d903      	bls.n	80055b4 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055ac:	f06f 0301 	mvn.w	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e028      	b.n	8005606 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80055b4:	4a16      	ldr	r2, [pc, #88]	; (8005610 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4013      	ands	r3, r2
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d11c      	bne.n	8005600 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055ce:	4812      	ldr	r0, [pc, #72]	; (8005618 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	4413      	add	r3, r2
 80055d8:	440b      	add	r3, r1
 80055da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	490e      	ldr	r1, [pc, #56]	; (800561c <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055f2:	f06f 0304 	mvn.w	r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e005      	b.n	8005606 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e002      	b.n	8005606 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005600:	f06f 0301 	mvn.w	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000278 	.word	0x20000278
 8005614:	200000c4 	.word	0x200000c4
 8005618:	20000248 	.word	0x20000248
 800561c:	2000023c 	.word	0x2000023c

08005620 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d903      	bls.n	800563a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005632:	f06f 0301 	mvn.w	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e029      	b.n	800568e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d11d      	bne.n	8005688 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005654:	4812      	ldr	r0, [pc, #72]	; (80056a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	440b      	add	r3, r1
 8005660:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	490f      	ldr	r1, [pc, #60]	; (80056a4 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800567a:	f06f 0304 	mvn.w	r3, #4
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e005      	b.n	800568e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e002      	b.n	800568e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005688:	f06f 0301 	mvn.w	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800568e:	697b      	ldr	r3, [r7, #20]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000278 	.word	0x20000278
 800569c:	200000c4 	.word	0x200000c4
 80056a0:	20000248 	.word	0x20000248
 80056a4:	2000023c 	.word	0x2000023c

080056a8 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b094      	sub	sp, #80	; 0x50
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80056b4:	2300      	movs	r3, #0
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80056b8:	23d7      	movs	r3, #215	; 0xd7
 80056ba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80056be:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <LSM6DSO_0_Probe+0x144>)
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80056c2:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <LSM6DSO_0_Probe+0x148>)
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80056c6:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <LSM6DSO_0_Probe+0x14c>)
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80056ca:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <LSM6DSO_0_Probe+0x150>)
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80056ce:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <LSM6DSO_0_Probe+0x154>)
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80056d2:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <LSM6DSO_0_Probe+0x158>)
 80056d4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80056d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056da:	4619      	mov	r1, r3
 80056dc:	4849      	ldr	r0, [pc, #292]	; (8005804 <LSM6DSO_0_Probe+0x15c>)
 80056de:	f7fd fe81 	bl	80033e4 <LSM6DSO_RegisterBusIO>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056e8:	f06f 0306 	mvn.w	r3, #6
 80056ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ee:	e077      	b.n	80057e0 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80056f0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80056f4:	4619      	mov	r1, r3
 80056f6:	4843      	ldr	r0, [pc, #268]	; (8005804 <LSM6DSO_0_Probe+0x15c>)
 80056f8:	f7fd ff7e 	bl	80035f8 <LSM6DSO_ReadID>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005702:	f06f 0306 	mvn.w	r3, #6
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005708:	e06a      	b.n	80057e0 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800570a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800570e:	2b6c      	cmp	r3, #108	; 0x6c
 8005710:	d003      	beq.n	800571a <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005712:	f06f 0306 	mvn.w	r3, #6
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	e062      	b.n	80057e0 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	4619      	mov	r1, r3
 8005720:	4838      	ldr	r0, [pc, #224]	; (8005804 <LSM6DSO_0_Probe+0x15c>)
 8005722:	f7fd ff7f 	bl	8003624 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005726:	7b7b      	ldrb	r3, [r7, #13]
 8005728:	461a      	mov	r2, r3
 800572a:	7b3b      	ldrb	r3, [r7, #12]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	431a      	orrs	r2, r3
 8005730:	7bbb      	ldrb	r3, [r7, #14]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4313      	orrs	r3, r2
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <LSM6DSO_0_Probe+0x160>)
 8005738:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800573a:	4b34      	ldr	r3, [pc, #208]	; (800580c <LSM6DSO_0_Probe+0x164>)
 800573c:	4a31      	ldr	r2, [pc, #196]	; (8005804 <LSM6DSO_0_Probe+0x15c>)
 800573e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005740:	4b33      	ldr	r3, [pc, #204]	; (8005810 <LSM6DSO_0_Probe+0x168>)
 8005742:	4a34      	ldr	r2, [pc, #208]	; (8005814 <LSM6DSO_0_Probe+0x16c>)
 8005744:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11d      	bne.n	8005788 <LSM6DSO_0_Probe+0xe0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <LSM6DSO_0_Probe+0xe0>
 8005756:	7b7b      	ldrb	r3, [r7, #13]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d115      	bne.n	8005788 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800575c:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <LSM6DSO_0_Probe+0x170>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a2e      	ldr	r2, [pc, #184]	; (800581c <LSM6DSO_0_Probe+0x174>)
 8005762:	492f      	ldr	r1, [pc, #188]	; (8005820 <LSM6DSO_0_Probe+0x178>)
 8005764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005768:	4b29      	ldr	r3, [pc, #164]	; (8005810 <LSM6DSO_0_Probe+0x168>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a27      	ldr	r2, [pc, #156]	; (800580c <LSM6DSO_0_Probe+0x164>)
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	4610      	mov	r0, r2
 8005774:	4798      	blx	r3
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800577c:	f06f 0304 	mvn.w	r3, #4
 8005780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005782:	e001      	b.n	8005788 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11d      	bne.n	80057ca <LSM6DSO_0_Probe+0x122>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d018      	beq.n	80057ca <LSM6DSO_0_Probe+0x122>
 8005798:	7b3b      	ldrb	r3, [r7, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d115      	bne.n	80057ca <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <LSM6DSO_0_Probe+0x170>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <LSM6DSO_0_Probe+0x174>)
 80057a4:	491f      	ldr	r1, [pc, #124]	; (8005824 <LSM6DSO_0_Probe+0x17c>)
 80057a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80057aa:	4b19      	ldr	r3, [pc, #100]	; (8005810 <LSM6DSO_0_Probe+0x168>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a16      	ldr	r2, [pc, #88]	; (800580c <LSM6DSO_0_Probe+0x164>)
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057be:	f06f 0304 	mvn.w	r3, #4
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	e001      	b.n	80057ca <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <LSM6DSO_0_Probe+0x138>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80057da:	f06f 0304 	mvn.w	r3, #4
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80057e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3750      	adds	r7, #80	; 0x50
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	08000b19 	.word	0x08000b19
 80057f0:	08000b7d 	.word	0x08000b7d
 80057f4:	08000c31 	.word	0x08000c31
 80057f8:	08000bcd 	.word	0x08000bcd
 80057fc:	08000c95 	.word	0x08000c95
 8005800:	08005bad 	.word	0x08005bad
 8005804:	20000284 	.word	0x20000284
 8005808:	20000278 	.word	0x20000278
 800580c:	2000023c 	.word	0x2000023c
 8005810:	2000026c 	.word	0x2000026c
 8005814:	2000006c 	.word	0x2000006c
 8005818:	200000c4 	.word	0x200000c4
 800581c:	20000248 	.word	0x20000248
 8005820:	200000a0 	.word	0x200000a0
 8005824:	2000007c 	.word	0x2000007c

08005828 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b094      	sub	sp, #80	; 0x50
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005834:	2300      	movs	r3, #0
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005838:	2333      	movs	r3, #51	; 0x33
 800583a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <LIS2DW12_0_Probe+0x118>)
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005842:	4b40      	ldr	r3, [pc, #256]	; (8005944 <LIS2DW12_0_Probe+0x11c>)
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005846:	4b40      	ldr	r3, [pc, #256]	; (8005948 <LIS2DW12_0_Probe+0x120>)
 8005848:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800584a:	4b40      	ldr	r3, [pc, #256]	; (800594c <LIS2DW12_0_Probe+0x124>)
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800584e:	4b40      	ldr	r3, [pc, #256]	; (8005950 <LIS2DW12_0_Probe+0x128>)
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005852:	4b40      	ldr	r3, [pc, #256]	; (8005954 <LIS2DW12_0_Probe+0x12c>)
 8005854:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800585a:	4619      	mov	r1, r3
 800585c:	483e      	ldr	r0, [pc, #248]	; (8005958 <LIS2DW12_0_Probe+0x130>)
 800585e:	f7fb fb2d 	bl	8000ebc <LIS2DW12_RegisterBusIO>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005868:	f06f 0306 	mvn.w	r3, #6
 800586c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586e:	e062      	b.n	8005936 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005870:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005874:	4619      	mov	r1, r3
 8005876:	4838      	ldr	r0, [pc, #224]	; (8005958 <LIS2DW12_0_Probe+0x130>)
 8005878:	f7fb fc0e 	bl	8001098 <LIS2DW12_ReadID>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005882:	f06f 0306 	mvn.w	r3, #6
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	e055      	b.n	8005936 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800588a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800588e:	2b44      	cmp	r3, #68	; 0x44
 8005890:	d003      	beq.n	800589a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005892:	f06f 0306 	mvn.w	r3, #6
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	e04d      	b.n	8005936 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	4619      	mov	r1, r3
 80058a0:	482d      	ldr	r0, [pc, #180]	; (8005958 <LIS2DW12_0_Probe+0x130>)
 80058a2:	f7fb fc0f 	bl	80010c4 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80058a6:	7b7b      	ldrb	r3, [r7, #13]
 80058a8:	461a      	mov	r2, r3
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	431a      	orrs	r2, r3
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4313      	orrs	r3, r2
 80058b6:	4a29      	ldr	r2, [pc, #164]	; (800595c <LIS2DW12_0_Probe+0x134>)
 80058b8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80058ba:	4b29      	ldr	r3, [pc, #164]	; (8005960 <LIS2DW12_0_Probe+0x138>)
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <LIS2DW12_0_Probe+0x130>)
 80058be:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <LIS2DW12_0_Probe+0x13c>)
 80058c2:	4a29      	ldr	r2, [pc, #164]	; (8005968 <LIS2DW12_0_Probe+0x140>)
 80058c4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11e      	bne.n	800590a <LIS2DW12_0_Probe+0xe2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d019      	beq.n	800590a <LIS2DW12_0_Probe+0xe2>
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d116      	bne.n	800590a <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80058dc:	4b23      	ldr	r3, [pc, #140]	; (800596c <LIS2DW12_0_Probe+0x144>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <LIS2DW12_0_Probe+0x148>)
 80058e2:	3303      	adds	r3, #3
 80058e4:	4923      	ldr	r1, [pc, #140]	; (8005974 <LIS2DW12_0_Probe+0x14c>)
 80058e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80058ea:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <LIS2DW12_0_Probe+0x13c>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <LIS2DW12_0_Probe+0x138>)
 80058f2:	6852      	ldr	r2, [r2, #4]
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058fe:	f06f 0304 	mvn.w	r3, #4
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	e001      	b.n	800590a <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005906:	2300      	movs	r3, #0
 8005908:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800590a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <LIS2DW12_0_Probe+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800591a:	f06f 0304 	mvn.w	r3, #4
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <LIS2DW12_0_Probe+0x10e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005930:	f06f 0304 	mvn.w	r3, #4
 8005934:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005938:	4618      	mov	r0, r3
 800593a:	3750      	adds	r7, #80	; 0x50
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	08000b19 	.word	0x08000b19
 8005944:	08000b7d 	.word	0x08000b7d
 8005948:	08000c31 	.word	0x08000c31
 800594c:	08000bcd 	.word	0x08000bcd
 8005950:	08000c95 	.word	0x08000c95
 8005954:	08005bad 	.word	0x08005bad
 8005958:	200002bc 	.word	0x200002bc
 800595c:	20000278 	.word	0x20000278
 8005960:	2000023c 	.word	0x2000023c
 8005964:	2000026c 	.word	0x2000026c
 8005968:	20000004 	.word	0x20000004
 800596c:	200000c4 	.word	0x200000c4
 8005970:	20000248 	.word	0x20000248
 8005974:	20000014 	.word	0x20000014

08005978 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b094      	sub	sp, #80	; 0x50
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005980:	2300      	movs	r3, #0
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005984:	2300      	movs	r3, #0
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005988:	233d      	movs	r3, #61	; 0x3d
 800598a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800598e:	4b40      	ldr	r3, [pc, #256]	; (8005a90 <LIS2MDL_0_Probe+0x118>)
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005992:	4b40      	ldr	r3, [pc, #256]	; (8005a94 <LIS2MDL_0_Probe+0x11c>)
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <LIS2MDL_0_Probe+0x120>)
 8005998:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <LIS2MDL_0_Probe+0x124>)
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800599e:	4b40      	ldr	r3, [pc, #256]	; (8005aa0 <LIS2MDL_0_Probe+0x128>)
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80059a2:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <LIS2MDL_0_Probe+0x12c>)
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80059a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059aa:	4619      	mov	r1, r3
 80059ac:	483e      	ldr	r0, [pc, #248]	; (8005aa8 <LIS2MDL_0_Probe+0x130>)
 80059ae:	f7fc fd13 	bl	80023d8 <LIS2MDL_RegisterBusIO>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059b8:	f06f 0306 	mvn.w	r3, #6
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059be:	e062      	b.n	8005a86 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80059c0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80059c4:	4619      	mov	r1, r3
 80059c6:	4838      	ldr	r0, [pc, #224]	; (8005aa8 <LIS2MDL_0_Probe+0x130>)
 80059c8:	f7fc fe22 	bl	8002610 <LIS2MDL_ReadID>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059d2:	f06f 0306 	mvn.w	r3, #6
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d8:	e055      	b.n	8005a86 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80059da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d003      	beq.n	80059ea <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059e2:	f06f 0306 	mvn.w	r3, #6
 80059e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e8:	e04d      	b.n	8005a86 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4619      	mov	r1, r3
 80059f0:	482d      	ldr	r0, [pc, #180]	; (8005aa8 <LIS2MDL_0_Probe+0x130>)
 80059f2:	f7fc fe33 	bl	800265c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	461a      	mov	r2, r3
 80059fa:	7b3b      	ldrb	r3, [r7, #12]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	431a      	orrs	r2, r3
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4313      	orrs	r3, r2
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <LIS2MDL_0_Probe+0x134>)
 8005a08:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005a0a:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <LIS2MDL_0_Probe+0x138>)
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <LIS2MDL_0_Probe+0x130>)
 8005a0e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <LIS2MDL_0_Probe+0x13c>)
 8005a12:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <LIS2MDL_0_Probe+0x140>)
 8005a14:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11e      	bne.n	8005a5a <LIS2MDL_0_Probe+0xe2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d019      	beq.n	8005a5a <LIS2MDL_0_Probe+0xe2>
 8005a26:	7bbb      	ldrb	r3, [r7, #14]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d116      	bne.n	8005a5a <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a2c:	4b23      	ldr	r3, [pc, #140]	; (8005abc <LIS2MDL_0_Probe+0x144>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <LIS2MDL_0_Probe+0x148>)
 8005a32:	3306      	adds	r3, #6
 8005a34:	4923      	ldr	r1, [pc, #140]	; (8005ac4 <LIS2MDL_0_Probe+0x14c>)
 8005a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <LIS2MDL_0_Probe+0x13c>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <LIS2MDL_0_Probe+0x138>)
 8005a42:	6892      	ldr	r2, [r2, #8]
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a4e:	f06f 0304 	mvn.w	r3, #4
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a54:	e001      	b.n	8005a5a <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d107      	bne.n	8005a70 <LIS2MDL_0_Probe+0xf8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a6a:	f06f 0304 	mvn.w	r3, #4
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <LIS2MDL_0_Probe+0x10e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a80:	f06f 0304 	mvn.w	r3, #4
 8005a84:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3750      	adds	r7, #80	; 0x50
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	08000b19 	.word	0x08000b19
 8005a94:	08000b7d 	.word	0x08000b7d
 8005a98:	08000c31 	.word	0x08000c31
 8005a9c:	08000bcd 	.word	0x08000bcd
 8005aa0:	08000c95 	.word	0x08000c95
 8005aa4:	08005bad 	.word	0x08005bad
 8005aa8:	200002f8 	.word	0x200002f8
 8005aac:	20000278 	.word	0x20000278
 8005ab0:	2000023c 	.word	0x2000023c
 8005ab4:	2000026c 	.word	0x2000026c
 8005ab8:	20000038 	.word	0x20000038
 8005abc:	200000c4 	.word	0x200000c4
 8005ac0:	20000248 	.word	0x20000248
 8005ac4:	20000048 	.word	0x20000048

08005ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <HAL_Init+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <HAL_Init+0x40>)
 8005ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_Init+0x40>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <HAL_Init+0x40>)
 8005ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <HAL_Init+0x40>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <HAL_Init+0x40>)
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005af0:	2003      	movs	r0, #3
 8005af2:	f000 f94f 	bl	8005d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005af6:	2000      	movs	r0, #0
 8005af8:	f000 f808 	bl	8005b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005afc:	f7fa ff2e 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40023c00 	.word	0x40023c00

08005b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b14:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <HAL_InitTick+0x54>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <HAL_InitTick+0x58>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f967 	bl	8005dfe <HAL_SYSTICK_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e00e      	b.n	8005b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b0f      	cmp	r3, #15
 8005b3e:	d80a      	bhi.n	8005b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b40:	2200      	movs	r2, #0
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	f000 f92f 	bl	8005daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b4c:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <HAL_InitTick+0x5c>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000000 	.word	0x20000000
 8005b64:	200000dc 	.word	0x200000dc
 8005b68:	200000d8 	.word	0x200000d8

08005b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_IncTick+0x20>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_IncTick+0x24>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	4a04      	ldr	r2, [pc, #16]	; (8005b90 <HAL_IncTick+0x24>)
 8005b7e:	6013      	str	r3, [r2, #0]
}
 8005b80:	bf00      	nop
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200000dc 	.word	0x200000dc
 8005b90:	2000032c 	.word	0x2000032c

08005b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return uwTick;
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <HAL_GetTick+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	2000032c 	.word	0x2000032c

08005bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bb4:	f7ff ffee 	bl	8005b94 <HAL_GetTick>
 8005bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d005      	beq.n	8005bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_Delay+0x44>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005bd2:	bf00      	nop
 8005bd4:	f7ff ffde 	bl	8005b94 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d8f7      	bhi.n	8005bd4 <HAL_Delay+0x28>
  {
  }
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	200000dc 	.word	0x200000dc

08005bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <__NVIC_SetPriorityGrouping+0x44>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c10:	4013      	ands	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c26:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <__NVIC_SetPriorityGrouping+0x44>)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	60d3      	str	r3, [r2, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <__NVIC_GetPriorityGrouping+0x18>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	f003 0307 	and.w	r3, r3, #7
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	db0b      	blt.n	8005c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	f003 021f 	and.w	r2, r3, #31
 8005c70:	4907      	ldr	r1, [pc, #28]	; (8005c90 <__NVIC_EnableIRQ+0x38>)
 8005c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2001      	movs	r0, #1
 8005c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000e100 	.word	0xe000e100

08005c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	6039      	str	r1, [r7, #0]
 8005c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	db0a      	blt.n	8005cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	490c      	ldr	r1, [pc, #48]	; (8005ce0 <__NVIC_SetPriority+0x4c>)
 8005cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb2:	0112      	lsls	r2, r2, #4
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cbc:	e00a      	b.n	8005cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	4908      	ldr	r1, [pc, #32]	; (8005ce4 <__NVIC_SetPriority+0x50>)
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	0112      	lsls	r2, r2, #4
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	761a      	strb	r2, [r3, #24]
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	e000e100 	.word	0xe000e100
 8005ce4:	e000ed00 	.word	0xe000ed00

08005ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b089      	sub	sp, #36	; 0x24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f1c3 0307 	rsb	r3, r3, #7
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	bf28      	it	cs
 8005d06:	2304      	movcs	r3, #4
 8005d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2b06      	cmp	r3, #6
 8005d10:	d902      	bls.n	8005d18 <NVIC_EncodePriority+0x30>
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	3b03      	subs	r3, #3
 8005d16:	e000      	b.n	8005d1a <NVIC_EncodePriority+0x32>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d30:	f04f 31ff 	mov.w	r1, #4294967295
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	43d9      	mvns	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d40:	4313      	orrs	r3, r2
         );
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3724      	adds	r7, #36	; 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d60:	d301      	bcc.n	8005d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d62:	2301      	movs	r3, #1
 8005d64:	e00f      	b.n	8005d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <SysTick_Config+0x40>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d6e:	210f      	movs	r1, #15
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	f7ff ff8e 	bl	8005c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <SysTick_Config+0x40>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d7e:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <SysTick_Config+0x40>)
 8005d80:	2207      	movs	r2, #7
 8005d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000e010 	.word	0xe000e010

08005d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff29 	bl	8005bf4 <__NVIC_SetPriorityGrouping>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	4603      	mov	r3, r0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbc:	f7ff ff3e 	bl	8005c3c <__NVIC_GetPriorityGrouping>
 8005dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff ff8e 	bl	8005ce8 <NVIC_EncodePriority>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ff5d 	bl	8005c94 <__NVIC_SetPriority>
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	4603      	mov	r3, r0
 8005dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff31 	bl	8005c58 <__NVIC_EnableIRQ>
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ffa2 	bl	8005d50 <SysTick_Config>
 8005e0c:	4603      	mov	r3, r0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e24:	f7ff feb6 	bl	8005b94 <HAL_GetTick>
 8005e28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d008      	beq.n	8005e48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e052      	b.n	8005eee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0216 	bic.w	r2, r2, #22
 8005e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695a      	ldr	r2, [r3, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <HAL_DMA_Abort+0x62>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0208 	bic.w	r2, r2, #8
 8005e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e98:	e013      	b.n	8005ec2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e9a:	f7ff fe7b 	bl	8005b94 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d90c      	bls.n	8005ec2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e015      	b.n	8005eee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e4      	bne.n	8005e9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed4:	223f      	movs	r2, #63	; 0x3f
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d004      	beq.n	8005f14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e00c      	b.n	8005f2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2205      	movs	r2, #5
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	e159      	b.n	800620c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f58:	2201      	movs	r2, #1
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	f040 8148 	bne.w	8006206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d005      	beq.n	8005f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d130      	bne.n	8005ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	2203      	movs	r2, #3
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 0201 	and.w	r2, r3, #1
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d017      	beq.n	800602c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	2203      	movs	r2, #3
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	4313      	orrs	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d123      	bne.n	8006080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	08da      	lsrs	r2, r3, #3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3208      	adds	r2, #8
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	220f      	movs	r2, #15
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	08da      	lsrs	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3208      	adds	r2, #8
 800607a:	69b9      	ldr	r1, [r7, #24]
 800607c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	2203      	movs	r2, #3
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0203 	and.w	r2, r3, #3
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a2 	beq.w	8006206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	4b57      	ldr	r3, [pc, #348]	; (8006224 <HAL_GPIO_Init+0x2e8>)
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	4a56      	ldr	r2, [pc, #344]	; (8006224 <HAL_GPIO_Init+0x2e8>)
 80060cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060d0:	6453      	str	r3, [r2, #68]	; 0x44
 80060d2:	4b54      	ldr	r3, [pc, #336]	; (8006224 <HAL_GPIO_Init+0x2e8>)
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060de:	4a52      	ldr	r2, [pc, #328]	; (8006228 <HAL_GPIO_Init+0x2ec>)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	089b      	lsrs	r3, r3, #2
 80060e4:	3302      	adds	r3, #2
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a49      	ldr	r2, [pc, #292]	; (800622c <HAL_GPIO_Init+0x2f0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d019      	beq.n	800613e <HAL_GPIO_Init+0x202>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a48      	ldr	r2, [pc, #288]	; (8006230 <HAL_GPIO_Init+0x2f4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_GPIO_Init+0x1fe>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a47      	ldr	r2, [pc, #284]	; (8006234 <HAL_GPIO_Init+0x2f8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00d      	beq.n	8006136 <HAL_GPIO_Init+0x1fa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a46      	ldr	r2, [pc, #280]	; (8006238 <HAL_GPIO_Init+0x2fc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d007      	beq.n	8006132 <HAL_GPIO_Init+0x1f6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a45      	ldr	r2, [pc, #276]	; (800623c <HAL_GPIO_Init+0x300>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <HAL_GPIO_Init+0x1f2>
 800612a:	2304      	movs	r3, #4
 800612c:	e008      	b.n	8006140 <HAL_GPIO_Init+0x204>
 800612e:	2307      	movs	r3, #7
 8006130:	e006      	b.n	8006140 <HAL_GPIO_Init+0x204>
 8006132:	2303      	movs	r3, #3
 8006134:	e004      	b.n	8006140 <HAL_GPIO_Init+0x204>
 8006136:	2302      	movs	r3, #2
 8006138:	e002      	b.n	8006140 <HAL_GPIO_Init+0x204>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_GPIO_Init+0x204>
 800613e:	2300      	movs	r3, #0
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	f002 0203 	and.w	r2, r2, #3
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	4093      	lsls	r3, r2
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006150:	4935      	ldr	r1, [pc, #212]	; (8006228 <HAL_GPIO_Init+0x2ec>)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	3302      	adds	r3, #2
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800615e:	4b38      	ldr	r3, [pc, #224]	; (8006240 <HAL_GPIO_Init+0x304>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006182:	4a2f      	ldr	r2, [pc, #188]	; (8006240 <HAL_GPIO_Init+0x304>)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006188:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <HAL_GPIO_Init+0x304>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ac:	4a24      	ldr	r2, [pc, #144]	; (8006240 <HAL_GPIO_Init+0x304>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <HAL_GPIO_Init+0x304>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061d6:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_GPIO_Init+0x304>)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_GPIO_Init+0x304>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006200:	4a0f      	ldr	r2, [pc, #60]	; (8006240 <HAL_GPIO_Init+0x304>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	3301      	adds	r3, #1
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	f67f aea2 	bls.w	8005f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	3724      	adds	r7, #36	; 0x24
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800
 8006228:	40013800 	.word	0x40013800
 800622c:	40020000 	.word	0x40020000
 8006230:	40020400 	.word	0x40020400
 8006234:	40020800 	.word	0x40020800
 8006238:	40020c00 	.word	0x40020c00
 800623c:	40021000 	.word	0x40021000
 8006240:	40013c00 	.word	0x40013c00

08006244 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e0bb      	b.n	80063d8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006260:	2201      	movs	r2, #1
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4013      	ands	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	f040 80ab 	bne.w	80063d2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800627c:	4a5c      	ldr	r2, [pc, #368]	; (80063f0 <HAL_GPIO_DeInit+0x1ac>)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	3302      	adds	r3, #2
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	220f      	movs	r2, #15
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a54      	ldr	r2, [pc, #336]	; (80063f4 <HAL_GPIO_DeInit+0x1b0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d019      	beq.n	80062da <HAL_GPIO_DeInit+0x96>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a53      	ldr	r2, [pc, #332]	; (80063f8 <HAL_GPIO_DeInit+0x1b4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_GPIO_DeInit+0x92>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a52      	ldr	r2, [pc, #328]	; (80063fc <HAL_GPIO_DeInit+0x1b8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00d      	beq.n	80062d2 <HAL_GPIO_DeInit+0x8e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a51      	ldr	r2, [pc, #324]	; (8006400 <HAL_GPIO_DeInit+0x1bc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <HAL_GPIO_DeInit+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a50      	ldr	r2, [pc, #320]	; (8006404 <HAL_GPIO_DeInit+0x1c0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <HAL_GPIO_DeInit+0x86>
 80062c6:	2304      	movs	r3, #4
 80062c8:	e008      	b.n	80062dc <HAL_GPIO_DeInit+0x98>
 80062ca:	2307      	movs	r3, #7
 80062cc:	e006      	b.n	80062dc <HAL_GPIO_DeInit+0x98>
 80062ce:	2303      	movs	r3, #3
 80062d0:	e004      	b.n	80062dc <HAL_GPIO_DeInit+0x98>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e002      	b.n	80062dc <HAL_GPIO_DeInit+0x98>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <HAL_GPIO_DeInit+0x98>
 80062da:	2300      	movs	r3, #0
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	f002 0203 	and.w	r2, r2, #3
 80062e2:	0092      	lsls	r2, r2, #2
 80062e4:	4093      	lsls	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d132      	bne.n	8006352 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062ec:	4b46      	ldr	r3, [pc, #280]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	43db      	mvns	r3, r3
 80062f4:	4944      	ldr	r1, [pc, #272]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80062fa:	4b43      	ldr	r3, [pc, #268]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	43db      	mvns	r3, r3
 8006302:	4941      	ldr	r1, [pc, #260]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 8006304:	4013      	ands	r3, r2
 8006306:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006308:	4b3f      	ldr	r3, [pc, #252]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	43db      	mvns	r3, r3
 8006310:	493d      	ldr	r1, [pc, #244]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 8006312:	4013      	ands	r3, r2
 8006314:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006316:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	43db      	mvns	r3, r3
 800631e:	493a      	ldr	r1, [pc, #232]	; (8006408 <HAL_GPIO_DeInit+0x1c4>)
 8006320:	4013      	ands	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	220f      	movs	r2, #15
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006334:	4a2e      	ldr	r2, [pc, #184]	; (80063f0 <HAL_GPIO_DeInit+0x1ac>)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	3302      	adds	r3, #2
 800633c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	43da      	mvns	r2, r3
 8006344:	482a      	ldr	r0, [pc, #168]	; (80063f0 <HAL_GPIO_DeInit+0x1ac>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	400a      	ands	r2, r1
 800634c:	3302      	adds	r3, #2
 800634e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	2103      	movs	r1, #3
 800635c:	fa01 f303 	lsl.w	r3, r1, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	401a      	ands	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	08da      	lsrs	r2, r3, #3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3208      	adds	r2, #8
 8006370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	220f      	movs	r2, #15
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	43db      	mvns	r3, r3
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	08d2      	lsrs	r2, r2, #3
 8006388:	4019      	ands	r1, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3208      	adds	r2, #8
 800638e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	2103      	movs	r1, #3
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	2101      	movs	r1, #1
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	401a      	ands	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	2103      	movs	r1, #3
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	43db      	mvns	r3, r3
 80063cc:	401a      	ands	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	3301      	adds	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	f67f af40 	bls.w	8006260 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40013800 	.word	0x40013800
 80063f4:	40020000 	.word	0x40020000
 80063f8:	40020400 	.word	0x40020400
 80063fc:	40020800 	.word	0x40020800
 8006400:	40020c00 	.word	0x40020c00
 8006404:	40021000 	.word	0x40021000
 8006408:	40013c00 	.word	0x40013c00

0800640c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
 8006418:	4613      	mov	r3, r2
 800641a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800641c:	787b      	ldrb	r3, [r7, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006428:	e003      	b.n	8006432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e12b      	b.n	80066aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f95d 	bl	8006726 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	; 0x24
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064a4:	f001 fcbe 	bl	8007e24 <HAL_RCC_GetPCLK1Freq>
 80064a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4a81      	ldr	r2, [pc, #516]	; (80066b4 <HAL_I2C_Init+0x274>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d807      	bhi.n	80064c4 <HAL_I2C_Init+0x84>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4a80      	ldr	r2, [pc, #512]	; (80066b8 <HAL_I2C_Init+0x278>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bf94      	ite	ls
 80064bc:	2301      	movls	r3, #1
 80064be:	2300      	movhi	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e006      	b.n	80064d2 <HAL_I2C_Init+0x92>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a7d      	ldr	r2, [pc, #500]	; (80066bc <HAL_I2C_Init+0x27c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bf94      	ite	ls
 80064cc:	2301      	movls	r3, #1
 80064ce:	2300      	movhi	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0e7      	b.n	80066aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a78      	ldr	r2, [pc, #480]	; (80066c0 <HAL_I2C_Init+0x280>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	0c9b      	lsrs	r3, r3, #18
 80064e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a6a      	ldr	r2, [pc, #424]	; (80066b4 <HAL_I2C_Init+0x274>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d802      	bhi.n	8006514 <HAL_I2C_Init+0xd4>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3301      	adds	r3, #1
 8006512:	e009      	b.n	8006528 <HAL_I2C_Init+0xe8>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	4a69      	ldr	r2, [pc, #420]	; (80066c4 <HAL_I2C_Init+0x284>)
 8006520:	fba2 2303 	umull	r2, r3, r2, r3
 8006524:	099b      	lsrs	r3, r3, #6
 8006526:	3301      	adds	r3, #1
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	430b      	orrs	r3, r1
 800652e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800653a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	495c      	ldr	r1, [pc, #368]	; (80066b4 <HAL_I2C_Init+0x274>)
 8006544:	428b      	cmp	r3, r1
 8006546:	d819      	bhi.n	800657c <HAL_I2C_Init+0x13c>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1e59      	subs	r1, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	fbb1 f3f3 	udiv	r3, r1, r3
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800655c:	400b      	ands	r3, r1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_I2C_Init+0x138>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1e59      	subs	r1, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006570:	3301      	adds	r3, #1
 8006572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006576:	e051      	b.n	800661c <HAL_I2C_Init+0x1dc>
 8006578:	2304      	movs	r3, #4
 800657a:	e04f      	b.n	800661c <HAL_I2C_Init+0x1dc>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d111      	bne.n	80065a8 <HAL_I2C_Init+0x168>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1e58      	subs	r0, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6859      	ldr	r1, [r3, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	440b      	add	r3, r1
 8006592:	fbb0 f3f3 	udiv	r3, r0, r3
 8006596:	3301      	adds	r3, #1
 8006598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800659c:	2b00      	cmp	r3, #0
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e012      	b.n	80065ce <HAL_I2C_Init+0x18e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1e58      	subs	r0, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	0099      	lsls	r1, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80065be:	3301      	adds	r3, #1
 80065c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf0c      	ite	eq
 80065c8:	2301      	moveq	r3, #1
 80065ca:	2300      	movne	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Init+0x196>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e022      	b.n	800661c <HAL_I2C_Init+0x1dc>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10e      	bne.n	80065fc <HAL_I2C_Init+0x1bc>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1e58      	subs	r0, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6859      	ldr	r1, [r3, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	440b      	add	r3, r1
 80065ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	e00f      	b.n	800661c <HAL_I2C_Init+0x1dc>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1e58      	subs	r0, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6859      	ldr	r1, [r3, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	0099      	lsls	r1, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006612:	3301      	adds	r3, #1
 8006614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	6809      	ldr	r1, [r1, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800664a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6911      	ldr	r1, [r2, #16]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68d2      	ldr	r2, [r2, #12]
 8006656:	4311      	orrs	r1, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	430b      	orrs	r3, r1
 800665e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	000186a0 	.word	0x000186a0
 80066b8:	001e847f 	.word	0x001e847f
 80066bc:	003d08ff 	.word	0x003d08ff
 80066c0:	431bde83 	.word	0x431bde83
 80066c4:	10624dd3 	.word	0x10624dd3

080066c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e021      	b.n	800671e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2224      	movs	r2, #36	; 0x24
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0201 	bic.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f821 	bl	800673a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	4603      	mov	r3, r0
 8006760:	817b      	strh	r3, [r7, #10]
 8006762:	460b      	mov	r3, r1
 8006764:	813b      	strh	r3, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800676a:	f7ff fa13 	bl	8005b94 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b20      	cmp	r3, #32
 800677a:	f040 80d9 	bne.w	8006930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	2319      	movs	r3, #25
 8006784:	2201      	movs	r2, #1
 8006786:	496d      	ldr	r1, [pc, #436]	; (800693c <HAL_I2C_Mem_Write+0x1ec>)
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fca5 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
 8006796:	e0cc      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_I2C_Mem_Write+0x56>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e0c5      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d007      	beq.n	80067cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2221      	movs	r2, #33	; 0x21
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a4d      	ldr	r2, [pc, #308]	; (8006940 <HAL_I2C_Mem_Write+0x1f0>)
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800680e:	88f8      	ldrh	r0, [r7, #6]
 8006810:	893a      	ldrh	r2, [r7, #8]
 8006812:	8979      	ldrh	r1, [r7, #10]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4603      	mov	r3, r0
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fadc 	bl	8006ddc <I2C_RequestMemoryWrite>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d052      	beq.n	80068d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e081      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fd6a 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b04      	cmp	r3, #4
 8006844:	d107      	bne.n	8006856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e06b      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d11b      	bne.n	80068d0 <HAL_I2C_Mem_Write+0x180>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1aa      	bne.n	800682e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fd5d 	bl	800739c <I2C_WaitOnBTFFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d107      	bne.n	8006900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e016      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	00100002 	.word	0x00100002
 8006940:	ffff0000 	.word	0xffff0000

08006944 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	; 0x30
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	4608      	mov	r0, r1
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	817b      	strh	r3, [r7, #10]
 8006956:	460b      	mov	r3, r1
 8006958:	813b      	strh	r3, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800695e:	f7ff f919 	bl	8005b94 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b20      	cmp	r3, #32
 800696e:	f040 8214 	bne.w	8006d9a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2319      	movs	r3, #25
 8006978:	2201      	movs	r2, #1
 800697a:	497b      	ldr	r1, [pc, #492]	; (8006b68 <HAL_I2C_Mem_Read+0x224>)
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fbab 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006988:	2302      	movs	r3, #2
 800698a:	e207      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_I2C_Mem_Read+0x56>
 8006996:	2302      	movs	r3, #2
 8006998:	e200      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d007      	beq.n	80069c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2222      	movs	r2, #34	; 0x22
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2240      	movs	r2, #64	; 0x40
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a5b      	ldr	r2, [pc, #364]	; (8006b6c <HAL_I2C_Mem_Read+0x228>)
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a02:	88f8      	ldrh	r0, [r7, #6]
 8006a04:	893a      	ldrh	r2, [r7, #8]
 8006a06:	8979      	ldrh	r1, [r7, #10]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4603      	mov	r3, r0
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fa78 	bl	8006f08 <I2C_RequestMemoryRead>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e1bc      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d113      	bne.n	8006a52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e190      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d11b      	bne.n	8006a92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e170      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d11b      	bne.n	8006ad2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	e150      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ae8:	e144      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	f200 80f1 	bhi.w	8006cd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d123      	bne.n	8006b44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fc93 	bl	800742c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e145      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b42:	e117      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d14e      	bne.n	8006bea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2200      	movs	r2, #0
 8006b54:	4906      	ldr	r1, [pc, #24]	; (8006b70 <HAL_I2C_Mem_Read+0x22c>)
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fabe 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d008      	beq.n	8006b74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e11a      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
 8006b66:	bf00      	nop
 8006b68:	00100002 	.word	0x00100002
 8006b6c:	ffff0000 	.word	0xffff0000
 8006b70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006be8:	e0c4      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	496c      	ldr	r1, [pc, #432]	; (8006da4 <HAL_I2C_Mem_Read+0x460>)
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fa6f 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0cb      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4955      	ldr	r1, [pc, #340]	; (8006da4 <HAL_I2C_Mem_Read+0x460>)
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fa41 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e09d      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cd4:	e04e      	b.n	8006d74 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fba6 	bl	800742c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e058      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d124      	bne.n	8006d74 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d107      	bne.n	8006d42 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d40:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f aeb6 	bne.w	8006aea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	00010004 	.word	0x00010004

08006da8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db6:	b2db      	uxtb	r3, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	461a      	mov	r2, r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	817b      	strh	r3, [r7, #10]
 8006dee:	460b      	mov	r3, r1
 8006df0:	813b      	strh	r3, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f960 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00d      	beq.n	8006e3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2c:	d103      	bne.n	8006e36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e05f      	b.n	8006efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	492d      	ldr	r1, [pc, #180]	; (8006f04 <I2C_RequestMemoryWrite+0x128>)
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f9bb 	bl	80071cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e04c      	b.n	8006efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e78:	6a39      	ldr	r1, [r7, #32]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fa46 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00d      	beq.n	8006ea2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d107      	bne.n	8006e9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e02b      	b.n	8006efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d105      	bne.n	8006eb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	611a      	str	r2, [r3, #16]
 8006eb2:	e021      	b.n	8006ef8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec4:	6a39      	ldr	r1, [r7, #32]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fa20 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d107      	bne.n	8006eea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e005      	b.n	8006efa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eee:	893b      	ldrh	r3, [r7, #8]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	00010002 	.word	0x00010002

08006f08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	817b      	strh	r3, [r7, #10]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	813b      	strh	r3, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f8c2 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f68:	d103      	bne.n	8006f72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e0aa      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f76:	897b      	ldrh	r3, [r7, #10]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	4952      	ldr	r1, [pc, #328]	; (80070d4 <I2C_RequestMemoryRead+0x1cc>)
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f91d 	bl	80071cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e097      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb4:	6a39      	ldr	r1, [r7, #32]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f9a8 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d107      	bne.n	8006fda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e076      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d105      	bne.n	8006ff0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe4:	893b      	ldrh	r3, [r7, #8]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	611a      	str	r2, [r3, #16]
 8006fee:	e021      	b.n	8007034 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007000:	6a39      	ldr	r1, [r7, #32]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f982 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00d      	beq.n	800702a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2b04      	cmp	r3, #4
 8007014:	d107      	bne.n	8007026 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007024:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e050      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800702a:	893b      	ldrh	r3, [r7, #8]
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007036:	6a39      	ldr	r1, [r7, #32]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f967 	bl	800730c <I2C_WaitOnTXEFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	2b04      	cmp	r3, #4
 800704a:	d107      	bne.n	800705c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e035      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800706e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	2200      	movs	r2, #0
 8007078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f82b 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00d      	beq.n	80070a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007096:	d103      	bne.n	80070a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800709e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e013      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070a4:	897b      	ldrh	r3, [r7, #10]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	4906      	ldr	r1, [pc, #24]	; (80070d4 <I2C_RequestMemoryRead+0x1cc>)
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f886 	bl	80071cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	00010002 	.word	0x00010002

080070d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e8:	e048      	b.n	800717c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d044      	beq.n	800717c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f2:	f7fe fd4f 	bl	8005b94 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d139      	bne.n	800717c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b01      	cmp	r3, #1
 8007110:	d10d      	bne.n	800712e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	43da      	mvns	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4013      	ands	r3, r2
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	e00c      	b.n	8007148 <I2C_WaitOnFlagUntilTimeout+0x70>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	43da      	mvns	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	429a      	cmp	r2, r3
 800714c:	d116      	bne.n	800717c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e023      	b.n	80071c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10d      	bne.n	80071a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	43da      	mvns	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4013      	ands	r3, r2
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	e00c      	b.n	80071bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	43da      	mvns	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4013      	ands	r3, r2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d093      	beq.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071da:	e071      	b.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ea:	d123      	bne.n	8007234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f043 0204 	orr.w	r2, r3, #4
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e067      	b.n	8007304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d041      	beq.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723c:	f7fe fcaa 	bl	8005b94 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d136      	bne.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10c      	bne.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	43da      	mvns	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4013      	ands	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e00b      	b.n	800728e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	43da      	mvns	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4013      	ands	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e021      	b.n	8007304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	0c1b      	lsrs	r3, r3, #16
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d10c      	bne.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	43da      	mvns	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	e00b      	b.n	80072fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	43da      	mvns	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2301      	movne	r3, #1
 80072f8:	2300      	moveq	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f af6d 	bne.w	80071dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007318:	e034      	b.n	8007384 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f8e3 	bl	80074e6 <I2C_IsAcknowledgeFailed>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e034      	b.n	8007394 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d028      	beq.n	8007384 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007332:	f7fe fc2f 	bl	8005b94 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d302      	bcc.n	8007348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11d      	bne.n	8007384 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d016      	beq.n	8007384 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e007      	b.n	8007394 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d1c3      	bne.n	800731a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073a8:	e034      	b.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f89b 	bl	80074e6 <I2C_IsAcknowledgeFailed>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e034      	b.n	8007424 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d028      	beq.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c2:	f7fe fbe7 	bl	8005b94 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d11d      	bne.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d016      	beq.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e007      	b.n	8007424 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b04      	cmp	r3, #4
 8007420:	d1c3      	bne.n	80073aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007438:	e049      	b.n	80074ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b10      	cmp	r3, #16
 8007446:	d119      	bne.n	800747c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f06f 0210 	mvn.w	r2, #16
 8007450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e030      	b.n	80074de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747c:	f7fe fb8a 	bl	8005b94 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d11d      	bne.n	80074ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d016      	beq.n	80074ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e007      	b.n	80074de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d1ae      	bne.n	800743a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fc:	d11b      	bne.n	8007536 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007506:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f043 0204 	orr.w	r2, r3, #4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e267      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d075      	beq.n	800764e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007562:	4b88      	ldr	r3, [pc, #544]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
 800756a:	2b04      	cmp	r3, #4
 800756c:	d00c      	beq.n	8007588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800756e:	4b85      	ldr	r3, [pc, #532]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007576:	2b08      	cmp	r3, #8
 8007578:	d112      	bne.n	80075a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800757a:	4b82      	ldr	r3, [pc, #520]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007586:	d10b      	bne.n	80075a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007588:	4b7e      	ldr	r3, [pc, #504]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05b      	beq.n	800764c <HAL_RCC_OscConfig+0x108>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d157      	bne.n	800764c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e242      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a8:	d106      	bne.n	80075b8 <HAL_RCC_OscConfig+0x74>
 80075aa:	4b76      	ldr	r3, [pc, #472]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a75      	ldr	r2, [pc, #468]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e01d      	b.n	80075f4 <HAL_RCC_OscConfig+0xb0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0x98>
 80075c2:	4b70      	ldr	r3, [pc, #448]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a6f      	ldr	r2, [pc, #444]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4b6d      	ldr	r3, [pc, #436]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a6c      	ldr	r2, [pc, #432]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e00b      	b.n	80075f4 <HAL_RCC_OscConfig+0xb0>
 80075dc:	4b69      	ldr	r3, [pc, #420]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a68      	ldr	r2, [pc, #416]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	4b66      	ldr	r3, [pc, #408]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a65      	ldr	r2, [pc, #404]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80075ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fe faca 	bl	8005b94 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007604:	f7fe fac6 	bl	8005b94 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b64      	cmp	r3, #100	; 0x64
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e207      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	4b5b      	ldr	r3, [pc, #364]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0xc0>
 8007622:	e014      	b.n	800764e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007624:	f7fe fab6 	bl	8005b94 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800762c:	f7fe fab2 	bl	8005b94 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b64      	cmp	r3, #100	; 0x64
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e1f3      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763e:	4b51      	ldr	r3, [pc, #324]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0xe8>
 800764a:	e000      	b.n	800764e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d063      	beq.n	8007722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800765a:	4b4a      	ldr	r3, [pc, #296]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007666:	4b47      	ldr	r3, [pc, #284]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800766e:	2b08      	cmp	r3, #8
 8007670:	d11c      	bne.n	80076ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007672:	4b44      	ldr	r3, [pc, #272]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d116      	bne.n	80076ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800767e:	4b41      	ldr	r3, [pc, #260]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d005      	beq.n	8007696 <HAL_RCC_OscConfig+0x152>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d001      	beq.n	8007696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e1c7      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007696:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4937      	ldr	r1, [pc, #220]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	e03a      	b.n	8007722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d020      	beq.n	80076f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076b4:	4b34      	ldr	r3, [pc, #208]	; (8007788 <HAL_RCC_OscConfig+0x244>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fe fa6b 	bl	8005b94 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076c2:	f7fe fa67 	bl	8005b94 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e1a8      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d4:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e0:	4b28      	ldr	r3, [pc, #160]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	4925      	ldr	r1, [pc, #148]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	600b      	str	r3, [r1, #0]
 80076f4:	e015      	b.n	8007722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <HAL_RCC_OscConfig+0x244>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fc:	f7fe fa4a 	bl	8005b94 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007704:	f7fe fa46 	bl	8005b94 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e187      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007716:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d036      	beq.n	800779c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d016      	beq.n	8007764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <HAL_RCC_OscConfig+0x248>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773c:	f7fe fa2a 	bl	8005b94 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007744:	f7fe fa26 	bl	8005b94 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e167      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <HAL_RCC_OscConfig+0x240>)
 8007758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <HAL_RCC_OscConfig+0x200>
 8007762:	e01b      	b.n	800779c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007764:	4b09      	ldr	r3, [pc, #36]	; (800778c <HAL_RCC_OscConfig+0x248>)
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800776a:	f7fe fa13 	bl	8005b94 <HAL_GetTick>
 800776e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007770:	e00e      	b.n	8007790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007772:	f7fe fa0f 	bl	8005b94 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d907      	bls.n	8007790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e150      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
 8007784:	40023800 	.word	0x40023800
 8007788:	42470000 	.word	0x42470000
 800778c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007790:	4b88      	ldr	r3, [pc, #544]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ea      	bne.n	8007772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8097 	beq.w	80078d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ae:	4b81      	ldr	r3, [pc, #516]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10f      	bne.n	80077da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	4b7d      	ldr	r3, [pc, #500]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	4a7c      	ldr	r2, [pc, #496]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80077c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c8:	6413      	str	r3, [r2, #64]	; 0x40
 80077ca:	4b7a      	ldr	r3, [pc, #488]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d2:	60bb      	str	r3, [r7, #8]
 80077d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077d6:	2301      	movs	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077da:	4b77      	ldr	r3, [pc, #476]	; (80079b8 <HAL_RCC_OscConfig+0x474>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d118      	bne.n	8007818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077e6:	4b74      	ldr	r3, [pc, #464]	; (80079b8 <HAL_RCC_OscConfig+0x474>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a73      	ldr	r2, [pc, #460]	; (80079b8 <HAL_RCC_OscConfig+0x474>)
 80077ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077f2:	f7fe f9cf 	bl	8005b94 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077fa:	f7fe f9cb 	bl	8005b94 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e10c      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780c:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCC_OscConfig+0x474>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d106      	bne.n	800782e <HAL_RCC_OscConfig+0x2ea>
 8007820:	4b64      	ldr	r3, [pc, #400]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	4a63      	ldr	r2, [pc, #396]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	6713      	str	r3, [r2, #112]	; 0x70
 800782c:	e01c      	b.n	8007868 <HAL_RCC_OscConfig+0x324>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b05      	cmp	r3, #5
 8007834:	d10c      	bne.n	8007850 <HAL_RCC_OscConfig+0x30c>
 8007836:	4b5f      	ldr	r3, [pc, #380]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	4a5e      	ldr	r2, [pc, #376]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	6713      	str	r3, [r2, #112]	; 0x70
 8007842:	4b5c      	ldr	r3, [pc, #368]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	4a5b      	ldr	r2, [pc, #364]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	6713      	str	r3, [r2, #112]	; 0x70
 800784e:	e00b      	b.n	8007868 <HAL_RCC_OscConfig+0x324>
 8007850:	4b58      	ldr	r3, [pc, #352]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a57      	ldr	r2, [pc, #348]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	4b55      	ldr	r3, [pc, #340]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a54      	ldr	r2, [pc, #336]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007862:	f023 0304 	bic.w	r3, r3, #4
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d015      	beq.n	800789c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007870:	f7fe f990 	bl	8005b94 <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007876:	e00a      	b.n	800788e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007878:	f7fe f98c 	bl	8005b94 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	f241 3288 	movw	r2, #5000	; 0x1388
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e0cb      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800788e:	4b49      	ldr	r3, [pc, #292]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0ee      	beq.n	8007878 <HAL_RCC_OscConfig+0x334>
 800789a:	e014      	b.n	80078c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800789c:	f7fe f97a 	bl	8005b94 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a2:	e00a      	b.n	80078ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078a4:	f7fe f976 	bl	8005b94 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e0b5      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ba:	4b3e      	ldr	r3, [pc, #248]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1ee      	bne.n	80078a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d105      	bne.n	80078d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80078d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80a1 	beq.w	8007a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078e2:	4b34      	ldr	r3, [pc, #208]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 030c 	and.w	r3, r3, #12
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d05c      	beq.n	80079a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d141      	bne.n	800797a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f6:	4b31      	ldr	r3, [pc, #196]	; (80079bc <HAL_RCC_OscConfig+0x478>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078fc:	f7fe f94a 	bl	8005b94 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007904:	f7fe f946 	bl	8005b94 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e087      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007916:	4b27      	ldr	r3, [pc, #156]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	019b      	lsls	r3, r3, #6
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	3b01      	subs	r3, #1
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	061b      	lsls	r3, r3, #24
 8007946:	491b      	ldr	r1, [pc, #108]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 8007948:	4313      	orrs	r3, r2
 800794a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800794c:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <HAL_RCC_OscConfig+0x478>)
 800794e:	2201      	movs	r2, #1
 8007950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007952:	f7fe f91f 	bl	8005b94 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800795a:	f7fe f91b 	bl	8005b94 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e05c      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f0      	beq.n	800795a <HAL_RCC_OscConfig+0x416>
 8007978:	e054      	b.n	8007a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <HAL_RCC_OscConfig+0x478>)
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007980:	f7fe f908 	bl	8005b94 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007988:	f7fe f904 	bl	8005b94 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e045      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_OscConfig+0x470>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x444>
 80079a6:	e03d      	b.n	8007a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d107      	bne.n	80079c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e038      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
 80079b4:	40023800 	.word	0x40023800
 80079b8:	40007000 	.word	0x40007000
 80079bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079c0:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <HAL_RCC_OscConfig+0x4ec>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d028      	beq.n	8007a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d121      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d11a      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079f0:	4013      	ands	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d111      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d107      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40023800 	.word	0x40023800

08007a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0cc      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a48:	4b68      	ldr	r3, [pc, #416]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d90c      	bls.n	8007a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a56:	4b65      	ldr	r3, [pc, #404]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5e:	4b63      	ldr	r3, [pc, #396]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0b8      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d020      	beq.n	8007abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a88:	4b59      	ldr	r3, [pc, #356]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	4a58      	ldr	r2, [pc, #352]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aa0:	4b53      	ldr	r3, [pc, #332]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4a52      	ldr	r2, [pc, #328]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aac:	4b50      	ldr	r3, [pc, #320]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	494d      	ldr	r1, [pc, #308]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d044      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d107      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad2:	4b47      	ldr	r3, [pc, #284]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d119      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e07f      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d107      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af2:	4b3f      	ldr	r3, [pc, #252]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e06f      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b02:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e067      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b12:	4b37      	ldr	r3, [pc, #220]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f023 0203 	bic.w	r2, r3, #3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	4934      	ldr	r1, [pc, #208]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b24:	f7fe f836 	bl	8005b94 <HAL_GetTick>
 8007b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b2c:	f7fe f832 	bl	8005b94 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e04f      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b42:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 020c 	and.w	r2, r3, #12
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d1eb      	bne.n	8007b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b54:	4b25      	ldr	r3, [pc, #148]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d20c      	bcs.n	8007b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b62:	4b22      	ldr	r3, [pc, #136]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6a:	4b20      	ldr	r3, [pc, #128]	; (8007bec <HAL_RCC_ClockConfig+0x1b8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e032      	b.n	8007be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b88:	4b19      	ldr	r3, [pc, #100]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4916      	ldr	r1, [pc, #88]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	490e      	ldr	r1, [pc, #56]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bba:	f000 f821 	bl	8007c00 <HAL_RCC_GetSysClockFreq>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	091b      	lsrs	r3, r3, #4
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	490a      	ldr	r1, [pc, #40]	; (8007bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8007bcc:	5ccb      	ldrb	r3, [r1, r3]
 8007bce:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd2:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd ff96 	bl	8005b0c <HAL_InitTick>

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40023c00 	.word	0x40023c00
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	08009f40 	.word	0x08009f40
 8007bf8:	20000000 	.word	0x20000000
 8007bfc:	200000d8 	.word	0x200000d8

08007c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c04:	b094      	sub	sp, #80	; 0x50
 8007c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c10:	2300      	movs	r3, #0
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c18:	4b79      	ldr	r3, [pc, #484]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 030c 	and.w	r3, r3, #12
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d00d      	beq.n	8007c40 <HAL_RCC_GetSysClockFreq+0x40>
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	f200 80e1 	bhi.w	8007dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_RCC_GetSysClockFreq+0x34>
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d003      	beq.n	8007c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8007c32:	e0db      	b.n	8007dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c34:	4b73      	ldr	r3, [pc, #460]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007c38:	e0db      	b.n	8007df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c3a:	4b73      	ldr	r3, [pc, #460]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c3e:	e0d8      	b.n	8007df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c40:	4b6f      	ldr	r3, [pc, #444]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c4a:	4b6d      	ldr	r3, [pc, #436]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d063      	beq.n	8007d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c56:	4b6a      	ldr	r3, [pc, #424]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	099b      	lsrs	r3, r3, #6
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	633b      	str	r3, [r7, #48]	; 0x30
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c72:	4622      	mov	r2, r4
 8007c74:	462b      	mov	r3, r5
 8007c76:	f04f 0000 	mov.w	r0, #0
 8007c7a:	f04f 0100 	mov.w	r1, #0
 8007c7e:	0159      	lsls	r1, r3, #5
 8007c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c84:	0150      	lsls	r0, r2, #5
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	1a51      	subs	r1, r2, r1
 8007c8e:	6139      	str	r1, [r7, #16]
 8007c90:	4629      	mov	r1, r5
 8007c92:	eb63 0301 	sbc.w	r3, r3, r1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	018b      	lsls	r3, r1, #6
 8007ca8:	4651      	mov	r1, sl
 8007caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007cae:	4651      	mov	r1, sl
 8007cb0:	018a      	lsls	r2, r1, #6
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8007cb8:	4659      	mov	r1, fp
 8007cba:	eb63 0901 	sbc.w	r9, r3, r1
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cd2:	4690      	mov	r8, r2
 8007cd4:	4699      	mov	r9, r3
 8007cd6:	4623      	mov	r3, r4
 8007cd8:	eb18 0303 	adds.w	r3, r8, r3
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	462b      	mov	r3, r5
 8007ce0:	eb49 0303 	adc.w	r3, r9, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	024b      	lsls	r3, r1, #9
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	024a      	lsls	r2, r1, #9
 8007d00:	4610      	mov	r0, r2
 8007d02:	4619      	mov	r1, r3
 8007d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d06:	2200      	movs	r2, #0
 8007d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d10:	f7f8 fabe 	bl	8000290 <__aeabi_uldivmod>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4613      	mov	r3, r2
 8007d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d1c:	e058      	b.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d1e:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	099b      	lsrs	r3, r3, #6
 8007d24:	2200      	movs	r2, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	4611      	mov	r1, r2
 8007d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d2e:	623b      	str	r3, [r7, #32]
 8007d30:	2300      	movs	r3, #0
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	f04f 0000 	mov.w	r0, #0
 8007d40:	f04f 0100 	mov.w	r1, #0
 8007d44:	0159      	lsls	r1, r3, #5
 8007d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d4a:	0150      	lsls	r0, r2, #5
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4641      	mov	r1, r8
 8007d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d56:	4649      	mov	r1, r9
 8007d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d70:	ebb2 040a 	subs.w	r4, r2, sl
 8007d74:	eb63 050b 	sbc.w	r5, r3, fp
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	00eb      	lsls	r3, r5, #3
 8007d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d86:	00e2      	lsls	r2, r4, #3
 8007d88:	4614      	mov	r4, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	18e3      	adds	r3, r4, r3
 8007d90:	603b      	str	r3, [r7, #0]
 8007d92:	464b      	mov	r3, r9
 8007d94:	eb45 0303 	adc.w	r3, r5, r3
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007da6:	4629      	mov	r1, r5
 8007da8:	028b      	lsls	r3, r1, #10
 8007daa:	4621      	mov	r1, r4
 8007dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007db0:	4621      	mov	r1, r4
 8007db2:	028a      	lsls	r2, r1, #10
 8007db4:	4610      	mov	r0, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dba:	2200      	movs	r2, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
 8007dbe:	61fa      	str	r2, [r7, #28]
 8007dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dc4:	f7f8 fa64 	bl	8000290 <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4613      	mov	r3, r2
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	3301      	adds	r3, #1
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dea:	e002      	b.n	8007df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3750      	adds	r7, #80	; 0x50
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dfe:	bf00      	nop
 8007e00:	40023800 	.word	0x40023800
 8007e04:	00f42400 	.word	0x00f42400
 8007e08:	007a1200 	.word	0x007a1200

08007e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e12:	681b      	ldr	r3, [r3, #0]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20000000 	.word	0x20000000

08007e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e28:	f7ff fff0 	bl	8007e0c <HAL_RCC_GetHCLKFreq>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0a9b      	lsrs	r3, r3, #10
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	4903      	ldr	r1, [pc, #12]	; (8007e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e3a:	5ccb      	ldrb	r3, [r1, r3]
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40023800 	.word	0x40023800
 8007e48:	08009f50 	.word	0x08009f50

08007e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e50:	f7ff ffdc 	bl	8007e0c <HAL_RCC_GetHCLKFreq>
 8007e54:	4602      	mov	r2, r0
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	0b5b      	lsrs	r3, r3, #13
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	4903      	ldr	r1, [pc, #12]	; (8007e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e62:	5ccb      	ldrb	r3, [r1, r3]
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	08009f50 	.word	0x08009f50

08007e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e041      	b.n	8007f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d106      	bne.n	8007ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7f8 fd86 	bl	80009ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f000 fa70 	bl	8008398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d001      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e044      	b.n	8007fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d018      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x6c>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f56:	d013      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x6c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00e      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x6c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x6c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x6c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d111      	bne.n	8007fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d010      	beq.n	8007fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0201 	orr.w	r2, r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa2:	e007      	b.n	8007fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40014000 	.word	0x40014000

08007fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d020      	beq.n	800803c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01b      	beq.n	800803c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0202 	mvn.w	r2, #2
 800800c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f999 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f98b 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f99c 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d020      	beq.n	8008088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0204 	mvn.w	r2, #4
 8008058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f973 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 8008074:	e005      	b.n	8008082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f965 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f976 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01b      	beq.n	80080d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0208 	mvn.w	r2, #8
 80080a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2204      	movs	r2, #4
 80080aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f94d 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f93f 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f950 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01b      	beq.n	8008120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2208      	movs	r2, #8
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f927 	bl	800835a <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f919 	bl	8008346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f92a 	bl	800836e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00c      	beq.n	8008144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0201 	mvn.w	r2, #1
 800813c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f8 fa24 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fab6 	bl	80086d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8fb 	bl	8008382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00c      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d007      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0220 	mvn.w	r2, #32
 80081a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa88 	bl	80086c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIM_ConfigClockSource+0x1c>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e0b4      	b.n	800833e <HAL_TIM_ConfigClockSource+0x186>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820c:	d03e      	beq.n	800828c <HAL_TIM_ConfigClockSource+0xd4>
 800820e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008212:	f200 8087 	bhi.w	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821a:	f000 8086 	beq.w	800832a <HAL_TIM_ConfigClockSource+0x172>
 800821e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008222:	d87f      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b70      	cmp	r3, #112	; 0x70
 8008226:	d01a      	beq.n	800825e <HAL_TIM_ConfigClockSource+0xa6>
 8008228:	2b70      	cmp	r3, #112	; 0x70
 800822a:	d87b      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b60      	cmp	r3, #96	; 0x60
 800822e:	d050      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x11a>
 8008230:	2b60      	cmp	r3, #96	; 0x60
 8008232:	d877      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b50      	cmp	r3, #80	; 0x50
 8008236:	d03c      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0xfa>
 8008238:	2b50      	cmp	r3, #80	; 0x50
 800823a:	d873      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d058      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x13a>
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	d86f      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b30      	cmp	r3, #48	; 0x30
 8008246:	d064      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x15a>
 8008248:	2b30      	cmp	r3, #48	; 0x30
 800824a:	d86b      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b20      	cmp	r3, #32
 800824e:	d060      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x15a>
 8008250:	2b20      	cmp	r3, #32
 8008252:	d867      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d05c      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x15a>
 8008258:	2b10      	cmp	r3, #16
 800825a:	d05a      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x15a>
 800825c:	e062      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800826e:	f000 f999 	bl	80085a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	609a      	str	r2, [r3, #8]
      break;
 800828a:	e04f      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800829c:	f000 f982 	bl	80085a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ae:	609a      	str	r2, [r3, #8]
      break;
 80082b0:	e03c      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082be:	461a      	mov	r2, r3
 80082c0:	f000 f8f6 	bl	80084b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2150      	movs	r1, #80	; 0x50
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f94f 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082d0:	e02c      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 f915 	bl	800850e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2160      	movs	r1, #96	; 0x60
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f93f 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 80082f0:	e01c      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fe:	461a      	mov	r2, r3
 8008300:	f000 f8d6 	bl	80084b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2140      	movs	r1, #64	; 0x40
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f92f 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 8008310:	e00c      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4619      	mov	r1, r3
 800831c:	4610      	mov	r0, r2
 800831e:	f000 f926 	bl	800856e <TIM_ITRx_SetConfig>
      break;
 8008322:	e003      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
      break;
 8008328:	e000      	b.n	800832c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800832a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3a      	ldr	r2, [pc, #232]	; (8008494 <TIM_Base_SetConfig+0xfc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00f      	beq.n	80083d0 <TIM_Base_SetConfig+0x38>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b6:	d00b      	beq.n	80083d0 <TIM_Base_SetConfig+0x38>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a37      	ldr	r2, [pc, #220]	; (8008498 <TIM_Base_SetConfig+0x100>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <TIM_Base_SetConfig+0x38>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a36      	ldr	r2, [pc, #216]	; (800849c <TIM_Base_SetConfig+0x104>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_Base_SetConfig+0x38>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a35      	ldr	r2, [pc, #212]	; (80084a0 <TIM_Base_SetConfig+0x108>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d108      	bne.n	80083e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2b      	ldr	r2, [pc, #172]	; (8008494 <TIM_Base_SetConfig+0xfc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d01b      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f0:	d017      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a28      	ldr	r2, [pc, #160]	; (8008498 <TIM_Base_SetConfig+0x100>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a27      	ldr	r2, [pc, #156]	; (800849c <TIM_Base_SetConfig+0x104>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00f      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <TIM_Base_SetConfig+0x108>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a25      	ldr	r2, [pc, #148]	; (80084a4 <TIM_Base_SetConfig+0x10c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d007      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <TIM_Base_SetConfig+0x110>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_Base_SetConfig+0x8a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a23      	ldr	r2, [pc, #140]	; (80084ac <TIM_Base_SetConfig+0x114>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d108      	bne.n	8008434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0e      	ldr	r2, [pc, #56]	; (8008494 <TIM_Base_SetConfig+0xfc>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d103      	bne.n	8008468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	d105      	bne.n	8008486 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f023 0201 	bic.w	r2, r3, #1
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	611a      	str	r2, [r3, #16]
  }
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40010000 	.word	0x40010000
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800

080084b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 030a 	bic.w	r3, r3, #10
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	621a      	str	r2, [r3, #32]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800850e:	b480      	push	{r7}
 8008510:	b087      	sub	sp, #28
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f023 0210 	bic.w	r2, r3, #16
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	031b      	lsls	r3, r3, #12
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800854a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	f043 0307 	orr.w	r3, r3, #7
 8008590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	021a      	lsls	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e050      	b.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d018      	beq.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d013      	beq.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a13      	ldr	r2, [pc, #76]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d10c      	bne.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4313      	orrs	r3, r2
 8008682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40014000 	.word	0x40014000

080086c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e042      	b.n	8008780 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f8 f974 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	; 0x24
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fcbb 	bl	80090a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691a      	ldr	r2, [r3, #16]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	695a      	ldr	r2, [r3, #20]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d121      	bne.n	80087e6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_UART_Transmit_IT+0x26>
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e01a      	b.n	80087e8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	88fa      	ldrh	r2, [r7, #6]
 80087bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2221      	movs	r2, #33	; 0x21
 80087ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e000      	b.n	80087e8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80087e6:	2302      	movs	r3, #2
  }
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b0ba      	sub	sp, #232	; 0xe8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008820:	2300      	movs	r3, #0
 8008822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10f      	bne.n	800885a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_UART_IRQHandler+0x66>
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb69 	bl	8008f2a <UART_Receive_IT>
      return;
 8008858:	e25b      	b.n	8008d12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800885a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80de 	beq.w	8008a20 <HAL_UART_IRQHandler+0x22c>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80d1 	beq.w	8008a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800887e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0xae>
 800888a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	f043 0201 	orr.w	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <HAL_UART_IRQHandler+0xd2>
 80088ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	f043 0202 	orr.w	r2, r3, #2
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <HAL_UART_IRQHandler+0xf6>
 80088d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d011      	beq.n	800891a <HAL_UART_IRQHandler+0x126>
 80088f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d105      	bne.n	800890e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008912:	f043 0208 	orr.w	r2, r3, #8
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 81f2 	beq.w	8008d08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_UART_IRQHandler+0x14e>
 8008930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 faf4 	bl	8008f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	bf0c      	ite	eq
 8008950:	2301      	moveq	r3, #1
 8008952:	2300      	movne	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <HAL_UART_IRQHandler+0x17a>
 8008966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d04f      	beq.n	8008a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f9fc 	bl	8008d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d141      	bne.n	8008a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3314      	adds	r3, #20
 8008988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800899c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3314      	adds	r3, #20
 80089aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1d9      	bne.n	8008982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d013      	beq.n	80089fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	4a7e      	ldr	r2, [pc, #504]	; (8008bd4 <HAL_UART_IRQHandler+0x3e0>)
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fd fa87 	bl	8005ef6 <HAL_DMA_Abort_IT>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d016      	beq.n	8008a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fc:	e00e      	b.n	8008a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f99e 	bl	8008d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	e00a      	b.n	8008a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f99a 	bl	8008d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e006      	b.n	8008a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f996 	bl	8008d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008a1a:	e175      	b.n	8008d08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	bf00      	nop
    return;
 8008a1e:	e173      	b.n	8008d08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	f040 814f 	bne.w	8008cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8148 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8141 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a46:	2300      	movs	r3, #0
 8008a48:	60bb      	str	r3, [r7, #8]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60bb      	str	r3, [r7, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	f040 80b6 	bne.w	8008bd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8145 	beq.w	8008d0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	f080 813e 	bcs.w	8008d0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa2:	f000 8088 	beq.w	8008bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1d9      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3314      	adds	r3, #20
 8008af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e1      	bne.n	8008af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3314      	adds	r3, #20
 8008b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e3      	bne.n	8008b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fd f930 	bl	8005e16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8c1 	bl	8008d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bd2:	e09b      	b.n	8008d0c <HAL_UART_IRQHandler+0x518>
 8008bd4:	08008e33 	.word	0x08008e33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 808e 	beq.w	8008d10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8089 	beq.w	8008d10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c22:	647a      	str	r2, [r7, #68]	; 0x44
 8008c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e3      	bne.n	8008bfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3314      	adds	r3, #20
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	623b      	str	r3, [r7, #32]
   return(result);
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f023 0301 	bic.w	r3, r3, #1
 8008c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e3      	bne.n	8008c36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0310 	bic.w	r3, r3, #16
 8008c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	330c      	adds	r3, #12
 8008c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ca0:	61fa      	str	r2, [r7, #28]
 8008ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	69b9      	ldr	r1, [r7, #24]
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	617b      	str	r3, [r7, #20]
   return(result);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e3      	bne.n	8008c7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f847 	bl	8008d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cc6:	e023      	b.n	8008d10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x4f4>
 8008cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f8ba 	bl	8008e5a <UART_Transmit_IT>
    return;
 8008ce6:	e014      	b.n	8008d12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00e      	beq.n	8008d12 <HAL_UART_IRQHandler+0x51e>
 8008cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d008      	beq.n	8008d12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f8fa 	bl	8008efa <UART_EndTransmit_IT>
    return;
 8008d06:	e004      	b.n	8008d12 <HAL_UART_IRQHandler+0x51e>
    return;
 8008d08:	bf00      	nop
 8008d0a:	e002      	b.n	8008d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d0c:	bf00      	nop
 8008d0e:	e000      	b.n	8008d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d10:	bf00      	nop
  }
}
 8008d12:	37e8      	adds	r7, #232	; 0xe8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b095      	sub	sp, #84	; 0x54
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d94:	643a      	str	r2, [r7, #64]	; 0x40
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d9c:	e841 2300 	strex	r3, r2, [r1]
 8008da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e5      	bne.n	8008d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3314      	adds	r3, #20
 8008dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd0:	e841 2300 	strex	r3, r2, [r1]
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e5      	bne.n	8008da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d119      	bne.n	8008e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f023 0310 	bic.w	r3, r3, #16
 8008dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e04:	61ba      	str	r2, [r7, #24]
 8008e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6979      	ldr	r1, [r7, #20]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	613b      	str	r3, [r7, #16]
   return(result);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e26:	bf00      	nop
 8008e28:	3754      	adds	r7, #84	; 0x54
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff ff77 	bl	8008d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b21      	cmp	r3, #33	; 0x21
 8008e6c:	d13e      	bne.n	8008eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e76:	d114      	bne.n	8008ea2 <UART_Transmit_IT+0x48>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d110      	bne.n	8008ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	1c9a      	adds	r2, r3, #2
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	621a      	str	r2, [r3, #32]
 8008ea0:	e008      	b.n	8008eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	1c59      	adds	r1, r3, #1
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6211      	str	r1, [r2, #32]
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e000      	b.n	8008eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008eec:	2302      	movs	r3, #2
  }
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fefc 	bl	8008d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b08c      	sub	sp, #48	; 0x30
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b22      	cmp	r3, #34	; 0x22
 8008f3c:	f040 80ae 	bne.w	800909c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f48:	d117      	bne.n	8008f7a <UART_Receive_IT+0x50>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d113      	bne.n	8008f7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	1c9a      	adds	r2, r3, #2
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	629a      	str	r2, [r3, #40]	; 0x28
 8008f78:	e026      	b.n	8008fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8c:	d007      	beq.n	8008f9e <UART_Receive_IT+0x74>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <UART_Receive_IT+0x82>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	e008      	b.n	8008fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d15d      	bne.n	8009098 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 0220 	bic.w	r2, r2, #32
 8008fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695a      	ldr	r2, [r3, #20]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901e:	2b01      	cmp	r3, #1
 8009020:	d135      	bne.n	800908e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	613b      	str	r3, [r7, #16]
   return(result);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f023 0310 	bic.w	r3, r3, #16
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009048:	623a      	str	r2, [r7, #32]
 800904a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	69f9      	ldr	r1, [r7, #28]
 800904e:	6a3a      	ldr	r2, [r7, #32]
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	61bb      	str	r3, [r7, #24]
   return(result);
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e5      	bne.n	8009028 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b10      	cmp	r3, #16
 8009068:	d10a      	bne.n	8009080 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fe64 	bl	8008d54 <HAL_UARTEx_RxEventCallback>
 800908c:	e002      	b.n	8009094 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fe4c 	bl	8008d2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e002      	b.n	800909e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e000      	b.n	800909e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
  }
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3730      	adds	r7, #48	; 0x30
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090ac:	b0c0      	sub	sp, #256	; 0x100
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c4:	68d9      	ldr	r1, [r3, #12]
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	ea40 0301 	orr.w	r3, r0, r1
 80090d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	431a      	orrs	r2, r3
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	431a      	orrs	r2, r3
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009100:	f021 010c 	bic.w	r1, r1, #12
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800910e:	430b      	orrs	r3, r1
 8009110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800911e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009122:	6999      	ldr	r1, [r3, #24]
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	ea40 0301 	orr.w	r3, r0, r1
 800912e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b8f      	ldr	r3, [pc, #572]	; (8009374 <UART_SetConfig+0x2cc>)
 8009138:	429a      	cmp	r2, r3
 800913a:	d005      	beq.n	8009148 <UART_SetConfig+0xa0>
 800913c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b8d      	ldr	r3, [pc, #564]	; (8009378 <UART_SetConfig+0x2d0>)
 8009144:	429a      	cmp	r2, r3
 8009146:	d104      	bne.n	8009152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009148:	f7fe fe80 	bl	8007e4c <HAL_RCC_GetPCLK2Freq>
 800914c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009150:	e003      	b.n	800915a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009152:	f7fe fe67 	bl	8007e24 <HAL_RCC_GetPCLK1Freq>
 8009156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800915a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009164:	f040 810c 	bne.w	8009380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800916c:	2200      	movs	r2, #0
 800916e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800917a:	4622      	mov	r2, r4
 800917c:	462b      	mov	r3, r5
 800917e:	1891      	adds	r1, r2, r2
 8009180:	65b9      	str	r1, [r7, #88]	; 0x58
 8009182:	415b      	adcs	r3, r3
 8009184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800918a:	4621      	mov	r1, r4
 800918c:	eb12 0801 	adds.w	r8, r2, r1
 8009190:	4629      	mov	r1, r5
 8009192:	eb43 0901 	adc.w	r9, r3, r1
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091aa:	4690      	mov	r8, r2
 80091ac:	4699      	mov	r9, r3
 80091ae:	4623      	mov	r3, r4
 80091b0:	eb18 0303 	adds.w	r3, r8, r3
 80091b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091b8:	462b      	mov	r3, r5
 80091ba:	eb49 0303 	adc.w	r3, r9, r3
 80091be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091d6:	460b      	mov	r3, r1
 80091d8:	18db      	adds	r3, r3, r3
 80091da:	653b      	str	r3, [r7, #80]	; 0x50
 80091dc:	4613      	mov	r3, r2
 80091de:	eb42 0303 	adc.w	r3, r2, r3
 80091e2:	657b      	str	r3, [r7, #84]	; 0x54
 80091e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80091ec:	f7f7 f850 	bl	8000290 <__aeabi_uldivmod>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4b61      	ldr	r3, [pc, #388]	; (800937c <UART_SetConfig+0x2d4>)
 80091f6:	fba3 2302 	umull	r2, r3, r3, r2
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	011c      	lsls	r4, r3, #4
 80091fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009202:	2200      	movs	r2, #0
 8009204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800920c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	1891      	adds	r1, r2, r2
 8009216:	64b9      	str	r1, [r7, #72]	; 0x48
 8009218:	415b      	adcs	r3, r3
 800921a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800921c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009220:	4641      	mov	r1, r8
 8009222:	eb12 0a01 	adds.w	sl, r2, r1
 8009226:	4649      	mov	r1, r9
 8009228:	eb43 0b01 	adc.w	fp, r3, r1
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800923c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009240:	4692      	mov	sl, r2
 8009242:	469b      	mov	fp, r3
 8009244:	4643      	mov	r3, r8
 8009246:	eb1a 0303 	adds.w	r3, sl, r3
 800924a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800924e:	464b      	mov	r3, r9
 8009250:	eb4b 0303 	adc.w	r3, fp, r3
 8009254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800926c:	460b      	mov	r3, r1
 800926e:	18db      	adds	r3, r3, r3
 8009270:	643b      	str	r3, [r7, #64]	; 0x40
 8009272:	4613      	mov	r3, r2
 8009274:	eb42 0303 	adc.w	r3, r2, r3
 8009278:	647b      	str	r3, [r7, #68]	; 0x44
 800927a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800927e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009282:	f7f7 f805 	bl	8000290 <__aeabi_uldivmod>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4611      	mov	r1, r2
 800928c:	4b3b      	ldr	r3, [pc, #236]	; (800937c <UART_SetConfig+0x2d4>)
 800928e:	fba3 2301 	umull	r2, r3, r3, r1
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	2264      	movs	r2, #100	; 0x64
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	1acb      	subs	r3, r1, r3
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092a2:	4b36      	ldr	r3, [pc, #216]	; (800937c <UART_SetConfig+0x2d4>)
 80092a4:	fba3 2302 	umull	r2, r3, r3, r2
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092b0:	441c      	add	r4, r3
 80092b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	1891      	adds	r1, r2, r2
 80092ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80092cc:	415b      	adcs	r3, r3
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092d4:	4641      	mov	r1, r8
 80092d6:	1851      	adds	r1, r2, r1
 80092d8:	6339      	str	r1, [r7, #48]	; 0x30
 80092da:	4649      	mov	r1, r9
 80092dc:	414b      	adcs	r3, r1
 80092de:	637b      	str	r3, [r7, #52]	; 0x34
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80092ec:	4659      	mov	r1, fp
 80092ee:	00cb      	lsls	r3, r1, #3
 80092f0:	4651      	mov	r1, sl
 80092f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092f6:	4651      	mov	r1, sl
 80092f8:	00ca      	lsls	r2, r1, #3
 80092fa:	4610      	mov	r0, r2
 80092fc:	4619      	mov	r1, r3
 80092fe:	4603      	mov	r3, r0
 8009300:	4642      	mov	r2, r8
 8009302:	189b      	adds	r3, r3, r2
 8009304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009308:	464b      	mov	r3, r9
 800930a:	460a      	mov	r2, r1
 800930c:	eb42 0303 	adc.w	r3, r2, r3
 8009310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009328:	460b      	mov	r3, r1
 800932a:	18db      	adds	r3, r3, r3
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
 800932e:	4613      	mov	r3, r2
 8009330:	eb42 0303 	adc.w	r3, r2, r3
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800933a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800933e:	f7f6 ffa7 	bl	8000290 <__aeabi_uldivmod>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4b0d      	ldr	r3, [pc, #52]	; (800937c <UART_SetConfig+0x2d4>)
 8009348:	fba3 1302 	umull	r1, r3, r3, r2
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	2164      	movs	r1, #100	; 0x64
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	3332      	adds	r3, #50	; 0x32
 800935a:	4a08      	ldr	r2, [pc, #32]	; (800937c <UART_SetConfig+0x2d4>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	095b      	lsrs	r3, r3, #5
 8009362:	f003 0207 	and.w	r2, r3, #7
 8009366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4422      	add	r2, r4
 800936e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009370:	e106      	b.n	8009580 <UART_SetConfig+0x4d8>
 8009372:	bf00      	nop
 8009374:	40011000 	.word	0x40011000
 8009378:	40011400 	.word	0x40011400
 800937c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009384:	2200      	movs	r2, #0
 8009386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800938a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800938e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009392:	4642      	mov	r2, r8
 8009394:	464b      	mov	r3, r9
 8009396:	1891      	adds	r1, r2, r2
 8009398:	6239      	str	r1, [r7, #32]
 800939a:	415b      	adcs	r3, r3
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
 800939e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093a2:	4641      	mov	r1, r8
 80093a4:	1854      	adds	r4, r2, r1
 80093a6:	4649      	mov	r1, r9
 80093a8:	eb43 0501 	adc.w	r5, r3, r1
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	00eb      	lsls	r3, r5, #3
 80093b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ba:	00e2      	lsls	r2, r4, #3
 80093bc:	4614      	mov	r4, r2
 80093be:	461d      	mov	r5, r3
 80093c0:	4643      	mov	r3, r8
 80093c2:	18e3      	adds	r3, r4, r3
 80093c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093c8:	464b      	mov	r3, r9
 80093ca:	eb45 0303 	adc.w	r3, r5, r3
 80093ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80093ee:	4629      	mov	r1, r5
 80093f0:	008b      	lsls	r3, r1, #2
 80093f2:	4621      	mov	r1, r4
 80093f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093f8:	4621      	mov	r1, r4
 80093fa:	008a      	lsls	r2, r1, #2
 80093fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009400:	f7f6 ff46 	bl	8000290 <__aeabi_uldivmod>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4b60      	ldr	r3, [pc, #384]	; (800958c <UART_SetConfig+0x4e4>)
 800940a:	fba3 2302 	umull	r2, r3, r3, r2
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	011c      	lsls	r4, r3, #4
 8009412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009416:	2200      	movs	r2, #0
 8009418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800941c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009424:	4642      	mov	r2, r8
 8009426:	464b      	mov	r3, r9
 8009428:	1891      	adds	r1, r2, r2
 800942a:	61b9      	str	r1, [r7, #24]
 800942c:	415b      	adcs	r3, r3
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009434:	4641      	mov	r1, r8
 8009436:	1851      	adds	r1, r2, r1
 8009438:	6139      	str	r1, [r7, #16]
 800943a:	4649      	mov	r1, r9
 800943c:	414b      	adcs	r3, r1
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800944c:	4659      	mov	r1, fp
 800944e:	00cb      	lsls	r3, r1, #3
 8009450:	4651      	mov	r1, sl
 8009452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009456:	4651      	mov	r1, sl
 8009458:	00ca      	lsls	r2, r1, #3
 800945a:	4610      	mov	r0, r2
 800945c:	4619      	mov	r1, r3
 800945e:	4603      	mov	r3, r0
 8009460:	4642      	mov	r2, r8
 8009462:	189b      	adds	r3, r3, r2
 8009464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009468:	464b      	mov	r3, r9
 800946a:	460a      	mov	r2, r1
 800946c:	eb42 0303 	adc.w	r3, r2, r3
 8009470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	67bb      	str	r3, [r7, #120]	; 0x78
 800947e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800948c:	4649      	mov	r1, r9
 800948e:	008b      	lsls	r3, r1, #2
 8009490:	4641      	mov	r1, r8
 8009492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009496:	4641      	mov	r1, r8
 8009498:	008a      	lsls	r2, r1, #2
 800949a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800949e:	f7f6 fef7 	bl	8000290 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4611      	mov	r1, r2
 80094a8:	4b38      	ldr	r3, [pc, #224]	; (800958c <UART_SetConfig+0x4e4>)
 80094aa:	fba3 2301 	umull	r2, r3, r3, r1
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	2264      	movs	r2, #100	; 0x64
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	1acb      	subs	r3, r1, r3
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	3332      	adds	r3, #50	; 0x32
 80094bc:	4a33      	ldr	r2, [pc, #204]	; (800958c <UART_SetConfig+0x4e4>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094c8:	441c      	add	r4, r3
 80094ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ce:	2200      	movs	r2, #0
 80094d0:	673b      	str	r3, [r7, #112]	; 0x70
 80094d2:	677a      	str	r2, [r7, #116]	; 0x74
 80094d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	1891      	adds	r1, r2, r2
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	415b      	adcs	r3, r3
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094e8:	4641      	mov	r1, r8
 80094ea:	1851      	adds	r1, r2, r1
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	4649      	mov	r1, r9
 80094f0:	414b      	adcs	r3, r1
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009500:	4659      	mov	r1, fp
 8009502:	00cb      	lsls	r3, r1, #3
 8009504:	4651      	mov	r1, sl
 8009506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800950a:	4651      	mov	r1, sl
 800950c:	00ca      	lsls	r2, r1, #3
 800950e:	4610      	mov	r0, r2
 8009510:	4619      	mov	r1, r3
 8009512:	4603      	mov	r3, r0
 8009514:	4642      	mov	r2, r8
 8009516:	189b      	adds	r3, r3, r2
 8009518:	66bb      	str	r3, [r7, #104]	; 0x68
 800951a:	464b      	mov	r3, r9
 800951c:	460a      	mov	r2, r1
 800951e:	eb42 0303 	adc.w	r3, r2, r3
 8009522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	663b      	str	r3, [r7, #96]	; 0x60
 800952e:	667a      	str	r2, [r7, #100]	; 0x64
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800953c:	4649      	mov	r1, r9
 800953e:	008b      	lsls	r3, r1, #2
 8009540:	4641      	mov	r1, r8
 8009542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009546:	4641      	mov	r1, r8
 8009548:	008a      	lsls	r2, r1, #2
 800954a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800954e:	f7f6 fe9f 	bl	8000290 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <UART_SetConfig+0x4e4>)
 8009558:	fba3 1302 	umull	r1, r3, r3, r2
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	2164      	movs	r1, #100	; 0x64
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	3332      	adds	r3, #50	; 0x32
 800956a:	4a08      	ldr	r2, [pc, #32]	; (800958c <UART_SetConfig+0x4e4>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4422      	add	r2, r4
 800957e:	609a      	str	r2, [r3, #8]
}
 8009580:	bf00      	nop
 8009582:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009586:	46bd      	mov	sp, r7
 8009588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800958c:	51eb851f 	.word	0x51eb851f

08009590 <siprintf>:
 8009590:	b40e      	push	{r1, r2, r3}
 8009592:	b500      	push	{lr}
 8009594:	b09c      	sub	sp, #112	; 0x70
 8009596:	ab1d      	add	r3, sp, #116	; 0x74
 8009598:	9002      	str	r0, [sp, #8]
 800959a:	9006      	str	r0, [sp, #24]
 800959c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095a0:	4809      	ldr	r0, [pc, #36]	; (80095c8 <siprintf+0x38>)
 80095a2:	9107      	str	r1, [sp, #28]
 80095a4:	9104      	str	r1, [sp, #16]
 80095a6:	4909      	ldr	r1, [pc, #36]	; (80095cc <siprintf+0x3c>)
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	a902      	add	r1, sp, #8
 80095b4:	f000 f992 	bl	80098dc <_svfiprintf_r>
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	b01c      	add	sp, #112	; 0x70
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	b003      	add	sp, #12
 80095c6:	4770      	bx	lr
 80095c8:	2000012c 	.word	0x2000012c
 80095cc:	ffff0208 	.word	0xffff0208

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <__errno>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	; (80095e8 <__errno+0x8>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	2000012c 	.word	0x2000012c

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4d0d      	ldr	r5, [pc, #52]	; (8009624 <__libc_init_array+0x38>)
 80095f0:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f2:	1b64      	subs	r4, r4, r5
 80095f4:	10a4      	asrs	r4, r4, #2
 80095f6:	2600      	movs	r6, #0
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	4d0b      	ldr	r5, [pc, #44]	; (800962c <__libc_init_array+0x40>)
 80095fe:	4c0c      	ldr	r4, [pc, #48]	; (8009630 <__libc_init_array+0x44>)
 8009600:	f000 fc6a 	bl	8009ed8 <_init>
 8009604:	1b64      	subs	r4, r4, r5
 8009606:	10a4      	asrs	r4, r4, #2
 8009608:	2600      	movs	r6, #0
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	08009f94 	.word	0x08009f94
 8009628:	08009f94 	.word	0x08009f94
 800962c:	08009f94 	.word	0x08009f94
 8009630:	08009f98 	.word	0x08009f98

08009634 <__retarget_lock_acquire_recursive>:
 8009634:	4770      	bx	lr

08009636 <__retarget_lock_release_recursive>:
 8009636:	4770      	bx	lr

08009638 <_free_r>:
 8009638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963a:	2900      	cmp	r1, #0
 800963c:	d044      	beq.n	80096c8 <_free_r+0x90>
 800963e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009642:	9001      	str	r0, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f1a1 0404 	sub.w	r4, r1, #4
 800964a:	bfb8      	it	lt
 800964c:	18e4      	addlt	r4, r4, r3
 800964e:	f000 f8df 	bl	8009810 <__malloc_lock>
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <_free_r+0x94>)
 8009654:	9801      	ldr	r0, [sp, #4]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x30>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	f000 b8da 	b.w	800981c <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x46>
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	1961      	adds	r1, r4, r5
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1949      	addeq	r1, r1, r5
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x22>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x50>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x46>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1855      	adds	r5, r2, r1
 800968c:	42a5      	cmp	r5, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x70>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	4421      	add	r1, r4
 8009694:	1854      	adds	r4, r2, r1
 8009696:	42a3      	cmp	r3, r4
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x26>
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	440c      	add	r4, r1
 80096a4:	6014      	str	r4, [r2, #0]
 80096a6:	e7da      	b.n	800965e <_free_r+0x26>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x78>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x26>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7ca      	b.n	800965e <_free_r+0x26>
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	20000470 	.word	0x20000470

080096d0 <sbrk_aligned>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4e0e      	ldr	r6, [pc, #56]	; (800970c <sbrk_aligned+0x3c>)
 80096d4:	460c      	mov	r4, r1
 80096d6:	6831      	ldr	r1, [r6, #0]
 80096d8:	4605      	mov	r5, r0
 80096da:	b911      	cbnz	r1, 80096e2 <sbrk_aligned+0x12>
 80096dc:	f000 fba6 	bl	8009e2c <_sbrk_r>
 80096e0:	6030      	str	r0, [r6, #0]
 80096e2:	4621      	mov	r1, r4
 80096e4:	4628      	mov	r0, r5
 80096e6:	f000 fba1 	bl	8009e2c <_sbrk_r>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	d00a      	beq.n	8009704 <sbrk_aligned+0x34>
 80096ee:	1cc4      	adds	r4, r0, #3
 80096f0:	f024 0403 	bic.w	r4, r4, #3
 80096f4:	42a0      	cmp	r0, r4
 80096f6:	d007      	beq.n	8009708 <sbrk_aligned+0x38>
 80096f8:	1a21      	subs	r1, r4, r0
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 fb96 	bl	8009e2c <_sbrk_r>
 8009700:	3001      	adds	r0, #1
 8009702:	d101      	bne.n	8009708 <sbrk_aligned+0x38>
 8009704:	f04f 34ff 	mov.w	r4, #4294967295
 8009708:	4620      	mov	r0, r4
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	20000474 	.word	0x20000474

08009710 <_malloc_r>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	1ccd      	adds	r5, r1, #3
 8009716:	f025 0503 	bic.w	r5, r5, #3
 800971a:	3508      	adds	r5, #8
 800971c:	2d0c      	cmp	r5, #12
 800971e:	bf38      	it	cc
 8009720:	250c      	movcc	r5, #12
 8009722:	2d00      	cmp	r5, #0
 8009724:	4607      	mov	r7, r0
 8009726:	db01      	blt.n	800972c <_malloc_r+0x1c>
 8009728:	42a9      	cmp	r1, r5
 800972a:	d905      	bls.n	8009738 <_malloc_r+0x28>
 800972c:	230c      	movs	r3, #12
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	2600      	movs	r6, #0
 8009732:	4630      	mov	r0, r6
 8009734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009738:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800980c <_malloc_r+0xfc>
 800973c:	f000 f868 	bl	8009810 <__malloc_lock>
 8009740:	f8d8 3000 	ldr.w	r3, [r8]
 8009744:	461c      	mov	r4, r3
 8009746:	bb5c      	cbnz	r4, 80097a0 <_malloc_r+0x90>
 8009748:	4629      	mov	r1, r5
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ffc0 	bl	80096d0 <sbrk_aligned>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	4604      	mov	r4, r0
 8009754:	d155      	bne.n	8009802 <_malloc_r+0xf2>
 8009756:	f8d8 4000 	ldr.w	r4, [r8]
 800975a:	4626      	mov	r6, r4
 800975c:	2e00      	cmp	r6, #0
 800975e:	d145      	bne.n	80097ec <_malloc_r+0xdc>
 8009760:	2c00      	cmp	r4, #0
 8009762:	d048      	beq.n	80097f6 <_malloc_r+0xe6>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	4631      	mov	r1, r6
 8009768:	4638      	mov	r0, r7
 800976a:	eb04 0903 	add.w	r9, r4, r3
 800976e:	f000 fb5d 	bl	8009e2c <_sbrk_r>
 8009772:	4581      	cmp	r9, r0
 8009774:	d13f      	bne.n	80097f6 <_malloc_r+0xe6>
 8009776:	6821      	ldr	r1, [r4, #0]
 8009778:	1a6d      	subs	r5, r5, r1
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ffa7 	bl	80096d0 <sbrk_aligned>
 8009782:	3001      	adds	r0, #1
 8009784:	d037      	beq.n	80097f6 <_malloc_r+0xe6>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	442b      	add	r3, r5
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	f8d8 3000 	ldr.w	r3, [r8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d038      	beq.n	8009806 <_malloc_r+0xf6>
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	42a2      	cmp	r2, r4
 8009798:	d12b      	bne.n	80097f2 <_malloc_r+0xe2>
 800979a:	2200      	movs	r2, #0
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	e00f      	b.n	80097c0 <_malloc_r+0xb0>
 80097a0:	6822      	ldr	r2, [r4, #0]
 80097a2:	1b52      	subs	r2, r2, r5
 80097a4:	d41f      	bmi.n	80097e6 <_malloc_r+0xd6>
 80097a6:	2a0b      	cmp	r2, #11
 80097a8:	d917      	bls.n	80097da <_malloc_r+0xca>
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	6059      	strne	r1, [r3, #4]
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	bf08      	it	eq
 80097b8:	f8c8 1000 	streq.w	r1, [r8]
 80097bc:	5162      	str	r2, [r4, r5]
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4638      	mov	r0, r7
 80097c2:	f104 060b 	add.w	r6, r4, #11
 80097c6:	f000 f829 	bl	800981c <__malloc_unlock>
 80097ca:	f026 0607 	bic.w	r6, r6, #7
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	1af2      	subs	r2, r6, r3
 80097d2:	d0ae      	beq.n	8009732 <_malloc_r+0x22>
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	50a3      	str	r3, [r4, r2]
 80097d8:	e7ab      	b.n	8009732 <_malloc_r+0x22>
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6862      	ldr	r2, [r4, #4]
 80097de:	d1dd      	bne.n	800979c <_malloc_r+0x8c>
 80097e0:	f8c8 2000 	str.w	r2, [r8]
 80097e4:	e7ec      	b.n	80097c0 <_malloc_r+0xb0>
 80097e6:	4623      	mov	r3, r4
 80097e8:	6864      	ldr	r4, [r4, #4]
 80097ea:	e7ac      	b.n	8009746 <_malloc_r+0x36>
 80097ec:	4634      	mov	r4, r6
 80097ee:	6876      	ldr	r6, [r6, #4]
 80097f0:	e7b4      	b.n	800975c <_malloc_r+0x4c>
 80097f2:	4613      	mov	r3, r2
 80097f4:	e7cc      	b.n	8009790 <_malloc_r+0x80>
 80097f6:	230c      	movs	r3, #12
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	4638      	mov	r0, r7
 80097fc:	f000 f80e 	bl	800981c <__malloc_unlock>
 8009800:	e797      	b.n	8009732 <_malloc_r+0x22>
 8009802:	6025      	str	r5, [r4, #0]
 8009804:	e7dc      	b.n	80097c0 <_malloc_r+0xb0>
 8009806:	605b      	str	r3, [r3, #4]
 8009808:	deff      	udf	#255	; 0xff
 800980a:	bf00      	nop
 800980c:	20000470 	.word	0x20000470

08009810 <__malloc_lock>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__malloc_lock+0x8>)
 8009812:	f7ff bf0f 	b.w	8009634 <__retarget_lock_acquire_recursive>
 8009816:	bf00      	nop
 8009818:	2000046c 	.word	0x2000046c

0800981c <__malloc_unlock>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__malloc_unlock+0x8>)
 800981e:	f7ff bf0a 	b.w	8009636 <__retarget_lock_release_recursive>
 8009822:	bf00      	nop
 8009824:	2000046c 	.word	0x2000046c

08009828 <__ssputs_r>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	688e      	ldr	r6, [r1, #8]
 800982e:	461f      	mov	r7, r3
 8009830:	42be      	cmp	r6, r7
 8009832:	680b      	ldr	r3, [r1, #0]
 8009834:	4682      	mov	sl, r0
 8009836:	460c      	mov	r4, r1
 8009838:	4690      	mov	r8, r2
 800983a:	d82c      	bhi.n	8009896 <__ssputs_r+0x6e>
 800983c:	898a      	ldrh	r2, [r1, #12]
 800983e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009842:	d026      	beq.n	8009892 <__ssputs_r+0x6a>
 8009844:	6965      	ldr	r5, [r4, #20]
 8009846:	6909      	ldr	r1, [r1, #16]
 8009848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800984c:	eba3 0901 	sub.w	r9, r3, r1
 8009850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009854:	1c7b      	adds	r3, r7, #1
 8009856:	444b      	add	r3, r9
 8009858:	106d      	asrs	r5, r5, #1
 800985a:	429d      	cmp	r5, r3
 800985c:	bf38      	it	cc
 800985e:	461d      	movcc	r5, r3
 8009860:	0553      	lsls	r3, r2, #21
 8009862:	d527      	bpl.n	80098b4 <__ssputs_r+0x8c>
 8009864:	4629      	mov	r1, r5
 8009866:	f7ff ff53 	bl	8009710 <_malloc_r>
 800986a:	4606      	mov	r6, r0
 800986c:	b360      	cbz	r0, 80098c8 <__ssputs_r+0xa0>
 800986e:	6921      	ldr	r1, [r4, #16]
 8009870:	464a      	mov	r2, r9
 8009872:	f000 faeb 	bl	8009e4c <memcpy>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6126      	str	r6, [r4, #16]
 8009884:	6165      	str	r5, [r4, #20]
 8009886:	444e      	add	r6, r9
 8009888:	eba5 0509 	sub.w	r5, r5, r9
 800988c:	6026      	str	r6, [r4, #0]
 800988e:	60a5      	str	r5, [r4, #8]
 8009890:	463e      	mov	r6, r7
 8009892:	42be      	cmp	r6, r7
 8009894:	d900      	bls.n	8009898 <__ssputs_r+0x70>
 8009896:	463e      	mov	r6, r7
 8009898:	6820      	ldr	r0, [r4, #0]
 800989a:	4632      	mov	r2, r6
 800989c:	4641      	mov	r1, r8
 800989e:	f000 faab 	bl	8009df8 <memmove>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	1b9b      	subs	r3, r3, r6
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	4433      	add	r3, r6
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2000      	movs	r0, #0
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	462a      	mov	r2, r5
 80098b6:	f000 fad7 	bl	8009e68 <_realloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e0      	bne.n	8009882 <__ssputs_r+0x5a>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7ff feb8 	bl	8009638 <_free_r>
 80098c8:	230c      	movs	r3, #12
 80098ca:	f8ca 3000 	str.w	r3, [sl]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	e7e9      	b.n	80098b0 <__ssputs_r+0x88>

080098dc <_svfiprintf_r>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	4698      	mov	r8, r3
 80098e2:	898b      	ldrh	r3, [r1, #12]
 80098e4:	061b      	lsls	r3, r3, #24
 80098e6:	b09d      	sub	sp, #116	; 0x74
 80098e8:	4607      	mov	r7, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	d50e      	bpl.n	800990e <_svfiprintf_r+0x32>
 80098f0:	690b      	ldr	r3, [r1, #16]
 80098f2:	b963      	cbnz	r3, 800990e <_svfiprintf_r+0x32>
 80098f4:	2140      	movs	r1, #64	; 0x40
 80098f6:	f7ff ff0b 	bl	8009710 <_malloc_r>
 80098fa:	6028      	str	r0, [r5, #0]
 80098fc:	6128      	str	r0, [r5, #16]
 80098fe:	b920      	cbnz	r0, 800990a <_svfiprintf_r+0x2e>
 8009900:	230c      	movs	r3, #12
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e0d0      	b.n	8009aac <_svfiprintf_r+0x1d0>
 800990a:	2340      	movs	r3, #64	; 0x40
 800990c:	616b      	str	r3, [r5, #20]
 800990e:	2300      	movs	r3, #0
 8009910:	9309      	str	r3, [sp, #36]	; 0x24
 8009912:	2320      	movs	r3, #32
 8009914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009918:	f8cd 800c 	str.w	r8, [sp, #12]
 800991c:	2330      	movs	r3, #48	; 0x30
 800991e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ac4 <_svfiprintf_r+0x1e8>
 8009922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009926:	f04f 0901 	mov.w	r9, #1
 800992a:	4623      	mov	r3, r4
 800992c:	469a      	mov	sl, r3
 800992e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009932:	b10a      	cbz	r2, 8009938 <_svfiprintf_r+0x5c>
 8009934:	2a25      	cmp	r2, #37	; 0x25
 8009936:	d1f9      	bne.n	800992c <_svfiprintf_r+0x50>
 8009938:	ebba 0b04 	subs.w	fp, sl, r4
 800993c:	d00b      	beq.n	8009956 <_svfiprintf_r+0x7a>
 800993e:	465b      	mov	r3, fp
 8009940:	4622      	mov	r2, r4
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ff6f 	bl	8009828 <__ssputs_r>
 800994a:	3001      	adds	r0, #1
 800994c:	f000 80a9 	beq.w	8009aa2 <_svfiprintf_r+0x1c6>
 8009950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009952:	445a      	add	r2, fp
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	f89a 3000 	ldrb.w	r3, [sl]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80a1 	beq.w	8009aa2 <_svfiprintf_r+0x1c6>
 8009960:	2300      	movs	r3, #0
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800996a:	f10a 0a01 	add.w	sl, sl, #1
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	9307      	str	r3, [sp, #28]
 8009972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009976:	931a      	str	r3, [sp, #104]	; 0x68
 8009978:	4654      	mov	r4, sl
 800997a:	2205      	movs	r2, #5
 800997c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009980:	4850      	ldr	r0, [pc, #320]	; (8009ac4 <_svfiprintf_r+0x1e8>)
 8009982:	f7f6 fc35 	bl	80001f0 <memchr>
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	b9d8      	cbnz	r0, 80099c2 <_svfiprintf_r+0xe6>
 800998a:	06d0      	lsls	r0, r2, #27
 800998c:	bf44      	itt	mi
 800998e:	2320      	movmi	r3, #32
 8009990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009994:	0711      	lsls	r1, r2, #28
 8009996:	bf44      	itt	mi
 8009998:	232b      	movmi	r3, #43	; 0x2b
 800999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999e:	f89a 3000 	ldrb.w	r3, [sl]
 80099a2:	2b2a      	cmp	r3, #42	; 0x2a
 80099a4:	d015      	beq.n	80099d2 <_svfiprintf_r+0xf6>
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	4654      	mov	r4, sl
 80099aa:	2000      	movs	r0, #0
 80099ac:	f04f 0c0a 	mov.w	ip, #10
 80099b0:	4621      	mov	r1, r4
 80099b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b6:	3b30      	subs	r3, #48	; 0x30
 80099b8:	2b09      	cmp	r3, #9
 80099ba:	d94d      	bls.n	8009a58 <_svfiprintf_r+0x17c>
 80099bc:	b1b0      	cbz	r0, 80099ec <_svfiprintf_r+0x110>
 80099be:	9207      	str	r2, [sp, #28]
 80099c0:	e014      	b.n	80099ec <_svfiprintf_r+0x110>
 80099c2:	eba0 0308 	sub.w	r3, r0, r8
 80099c6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ca:	4313      	orrs	r3, r2
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	46a2      	mov	sl, r4
 80099d0:	e7d2      	b.n	8009978 <_svfiprintf_r+0x9c>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	1d19      	adds	r1, r3, #4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	9103      	str	r1, [sp, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfbb      	ittet	lt
 80099de:	425b      	neglt	r3, r3
 80099e0:	f042 0202 	orrlt.w	r2, r2, #2
 80099e4:	9307      	strge	r3, [sp, #28]
 80099e6:	9307      	strlt	r3, [sp, #28]
 80099e8:	bfb8      	it	lt
 80099ea:	9204      	strlt	r2, [sp, #16]
 80099ec:	7823      	ldrb	r3, [r4, #0]
 80099ee:	2b2e      	cmp	r3, #46	; 0x2e
 80099f0:	d10c      	bne.n	8009a0c <_svfiprintf_r+0x130>
 80099f2:	7863      	ldrb	r3, [r4, #1]
 80099f4:	2b2a      	cmp	r3, #42	; 0x2a
 80099f6:	d134      	bne.n	8009a62 <_svfiprintf_r+0x186>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	9203      	str	r2, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfb8      	it	lt
 8009a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a08:	3402      	adds	r4, #2
 8009a0a:	9305      	str	r3, [sp, #20]
 8009a0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ad4 <_svfiprintf_r+0x1f8>
 8009a10:	7821      	ldrb	r1, [r4, #0]
 8009a12:	2203      	movs	r2, #3
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7f6 fbeb 	bl	80001f0 <memchr>
 8009a1a:	b138      	cbz	r0, 8009a2c <_svfiprintf_r+0x150>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	eba0 000a 	sub.w	r0, r0, sl
 8009a22:	2240      	movs	r2, #64	; 0x40
 8009a24:	4082      	lsls	r2, r0
 8009a26:	4313      	orrs	r3, r2
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a30:	4825      	ldr	r0, [pc, #148]	; (8009ac8 <_svfiprintf_r+0x1ec>)
 8009a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a36:	2206      	movs	r2, #6
 8009a38:	f7f6 fbda 	bl	80001f0 <memchr>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d038      	beq.n	8009ab2 <_svfiprintf_r+0x1d6>
 8009a40:	4b22      	ldr	r3, [pc, #136]	; (8009acc <_svfiprintf_r+0x1f0>)
 8009a42:	bb1b      	cbnz	r3, 8009a8c <_svfiprintf_r+0x1b0>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	3307      	adds	r3, #7
 8009a48:	f023 0307 	bic.w	r3, r3, #7
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	4433      	add	r3, r6
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	e768      	b.n	800992a <_svfiprintf_r+0x4e>
 8009a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	2001      	movs	r0, #1
 8009a60:	e7a6      	b.n	80099b0 <_svfiprintf_r+0xd4>
 8009a62:	2300      	movs	r3, #0
 8009a64:	3401      	adds	r4, #1
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a74:	3a30      	subs	r2, #48	; 0x30
 8009a76:	2a09      	cmp	r2, #9
 8009a78:	d903      	bls.n	8009a82 <_svfiprintf_r+0x1a6>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c6      	beq.n	8009a0c <_svfiprintf_r+0x130>
 8009a7e:	9105      	str	r1, [sp, #20]
 8009a80:	e7c4      	b.n	8009a0c <_svfiprintf_r+0x130>
 8009a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7f0      	b.n	8009a6e <_svfiprintf_r+0x192>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	462a      	mov	r2, r5
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <_svfiprintf_r+0x1f4>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4638      	mov	r0, r7
 8009a98:	f3af 8000 	nop.w
 8009a9c:	1c42      	adds	r2, r0, #1
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	d1d6      	bne.n	8009a50 <_svfiprintf_r+0x174>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	065b      	lsls	r3, r3, #25
 8009aa6:	f53f af2d 	bmi.w	8009904 <_svfiprintf_r+0x28>
 8009aaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aac:	b01d      	add	sp, #116	; 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <_svfiprintf_r+0x1f4>)
 8009aba:	a904      	add	r1, sp, #16
 8009abc:	4638      	mov	r0, r7
 8009abe:	f000 f879 	bl	8009bb4 <_printf_i>
 8009ac2:	e7eb      	b.n	8009a9c <_svfiprintf_r+0x1c0>
 8009ac4:	08009f58 	.word	0x08009f58
 8009ac8:	08009f62 	.word	0x08009f62
 8009acc:	00000000 	.word	0x00000000
 8009ad0:	08009829 	.word	0x08009829
 8009ad4:	08009f5e 	.word	0x08009f5e

08009ad8 <_printf_common>:
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	4616      	mov	r6, r2
 8009ade:	4699      	mov	r9, r3
 8009ae0:	688a      	ldr	r2, [r1, #8]
 8009ae2:	690b      	ldr	r3, [r1, #16]
 8009ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	bfb8      	it	lt
 8009aec:	4613      	movlt	r3, r2
 8009aee:	6033      	str	r3, [r6, #0]
 8009af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af4:	4607      	mov	r7, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	b10a      	cbz	r2, 8009afe <_printf_common+0x26>
 8009afa:	3301      	adds	r3, #1
 8009afc:	6033      	str	r3, [r6, #0]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	0699      	lsls	r1, r3, #26
 8009b02:	bf42      	ittt	mi
 8009b04:	6833      	ldrmi	r3, [r6, #0]
 8009b06:	3302      	addmi	r3, #2
 8009b08:	6033      	strmi	r3, [r6, #0]
 8009b0a:	6825      	ldr	r5, [r4, #0]
 8009b0c:	f015 0506 	ands.w	r5, r5, #6
 8009b10:	d106      	bne.n	8009b20 <_printf_common+0x48>
 8009b12:	f104 0a19 	add.w	sl, r4, #25
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	6832      	ldr	r2, [r6, #0]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dc26      	bgt.n	8009b6e <_printf_common+0x96>
 8009b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b24:	1e13      	subs	r3, r2, #0
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	bf18      	it	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	0692      	lsls	r2, r2, #26
 8009b2e:	d42b      	bmi.n	8009b88 <_printf_common+0xb0>
 8009b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b34:	4649      	mov	r1, r9
 8009b36:	4638      	mov	r0, r7
 8009b38:	47c0      	blx	r8
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d01e      	beq.n	8009b7c <_printf_common+0xa4>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	6922      	ldr	r2, [r4, #16]
 8009b42:	f003 0306 	and.w	r3, r3, #6
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	bf02      	ittt	eq
 8009b4a:	68e5      	ldreq	r5, [r4, #12]
 8009b4c:	6833      	ldreq	r3, [r6, #0]
 8009b4e:	1aed      	subeq	r5, r5, r3
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	bf0c      	ite	eq
 8009b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b58:	2500      	movne	r5, #0
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	bfc4      	itt	gt
 8009b5e:	1a9b      	subgt	r3, r3, r2
 8009b60:	18ed      	addgt	r5, r5, r3
 8009b62:	2600      	movs	r6, #0
 8009b64:	341a      	adds	r4, #26
 8009b66:	42b5      	cmp	r5, r6
 8009b68:	d11a      	bne.n	8009ba0 <_printf_common+0xc8>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e008      	b.n	8009b80 <_printf_common+0xa8>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4652      	mov	r2, sl
 8009b72:	4649      	mov	r1, r9
 8009b74:	4638      	mov	r0, r7
 8009b76:	47c0      	blx	r8
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d103      	bne.n	8009b84 <_printf_common+0xac>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	3501      	adds	r5, #1
 8009b86:	e7c6      	b.n	8009b16 <_printf_common+0x3e>
 8009b88:	18e1      	adds	r1, r4, r3
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	2030      	movs	r0, #48	; 0x30
 8009b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b92:	4422      	add	r2, r4
 8009b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b9c:	3302      	adds	r3, #2
 8009b9e:	e7c7      	b.n	8009b30 <_printf_common+0x58>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	47c0      	blx	r8
 8009baa:	3001      	adds	r0, #1
 8009bac:	d0e6      	beq.n	8009b7c <_printf_common+0xa4>
 8009bae:	3601      	adds	r6, #1
 8009bb0:	e7d9      	b.n	8009b66 <_printf_common+0x8e>
	...

08009bb4 <_printf_i>:
 8009bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	7e0f      	ldrb	r7, [r1, #24]
 8009bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bbc:	2f78      	cmp	r7, #120	; 0x78
 8009bbe:	4691      	mov	r9, r2
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	469a      	mov	sl, r3
 8009bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bca:	d807      	bhi.n	8009bdc <_printf_i+0x28>
 8009bcc:	2f62      	cmp	r7, #98	; 0x62
 8009bce:	d80a      	bhi.n	8009be6 <_printf_i+0x32>
 8009bd0:	2f00      	cmp	r7, #0
 8009bd2:	f000 80d4 	beq.w	8009d7e <_printf_i+0x1ca>
 8009bd6:	2f58      	cmp	r7, #88	; 0x58
 8009bd8:	f000 80c0 	beq.w	8009d5c <_printf_i+0x1a8>
 8009bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be4:	e03a      	b.n	8009c5c <_printf_i+0xa8>
 8009be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bea:	2b15      	cmp	r3, #21
 8009bec:	d8f6      	bhi.n	8009bdc <_printf_i+0x28>
 8009bee:	a101      	add	r1, pc, #4	; (adr r1, 8009bf4 <_printf_i+0x40>)
 8009bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	08009c61 	.word	0x08009c61
 8009bfc:	08009bdd 	.word	0x08009bdd
 8009c00:	08009bdd 	.word	0x08009bdd
 8009c04:	08009bdd 	.word	0x08009bdd
 8009c08:	08009bdd 	.word	0x08009bdd
 8009c0c:	08009c61 	.word	0x08009c61
 8009c10:	08009bdd 	.word	0x08009bdd
 8009c14:	08009bdd 	.word	0x08009bdd
 8009c18:	08009bdd 	.word	0x08009bdd
 8009c1c:	08009bdd 	.word	0x08009bdd
 8009c20:	08009d65 	.word	0x08009d65
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009d1f 	.word	0x08009d1f
 8009c2c:	08009bdd 	.word	0x08009bdd
 8009c30:	08009bdd 	.word	0x08009bdd
 8009c34:	08009d87 	.word	0x08009d87
 8009c38:	08009bdd 	.word	0x08009bdd
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009bdd 	.word	0x08009bdd
 8009c44:	08009bdd 	.word	0x08009bdd
 8009c48:	08009d27 	.word	0x08009d27
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	1d1a      	adds	r2, r3, #4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	602a      	str	r2, [r5, #0]
 8009c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e09f      	b.n	8009da0 <_printf_i+0x1ec>
 8009c60:	6820      	ldr	r0, [r4, #0]
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	0607      	lsls	r7, r0, #24
 8009c66:	f103 0104 	add.w	r1, r3, #4
 8009c6a:	6029      	str	r1, [r5, #0]
 8009c6c:	d501      	bpl.n	8009c72 <_printf_i+0xbe>
 8009c6e:	681e      	ldr	r6, [r3, #0]
 8009c70:	e003      	b.n	8009c7a <_printf_i+0xc6>
 8009c72:	0646      	lsls	r6, r0, #25
 8009c74:	d5fb      	bpl.n	8009c6e <_printf_i+0xba>
 8009c76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	da03      	bge.n	8009c86 <_printf_i+0xd2>
 8009c7e:	232d      	movs	r3, #45	; 0x2d
 8009c80:	4276      	negs	r6, r6
 8009c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c86:	485a      	ldr	r0, [pc, #360]	; (8009df0 <_printf_i+0x23c>)
 8009c88:	230a      	movs	r3, #10
 8009c8a:	e012      	b.n	8009cb2 <_printf_i+0xfe>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	1d19      	adds	r1, r3, #4
 8009c92:	6029      	str	r1, [r5, #0]
 8009c94:	0605      	lsls	r5, r0, #24
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0xe8>
 8009c98:	681e      	ldr	r6, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0xee>
 8009c9c:	0641      	lsls	r1, r0, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0xe4>
 8009ca0:	881e      	ldrh	r6, [r3, #0]
 8009ca2:	4853      	ldr	r0, [pc, #332]	; (8009df0 <_printf_i+0x23c>)
 8009ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ca6:	bf0c      	ite	eq
 8009ca8:	2308      	moveq	r3, #8
 8009caa:	230a      	movne	r3, #10
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cb2:	6865      	ldr	r5, [r4, #4]
 8009cb4:	60a5      	str	r5, [r4, #8]
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90e      	cbnz	r6, 8009cc8 <_printf_i+0x114>
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	d04b      	beq.n	8009d60 <_printf_i+0x1ac>
 8009cc8:	4615      	mov	r5, r2
 8009cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cce:	fb03 6711 	mls	r7, r3, r1, r6
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cd8:	4637      	mov	r7, r6
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460e      	mov	r6, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x116>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x148>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07de      	lsls	r6, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x148>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	; 0x30
 8009cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cfc:	1b52      	subs	r2, r2, r5
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee4 	bl	8009ad8 <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14a      	bne.n	8009daa <_printf_i+0x1f6>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	4833      	ldr	r0, [pc, #204]	; (8009df4 <_printf_i+0x240>)
 8009d28:	2778      	movs	r7, #120	; 0x78
 8009d2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6829      	ldr	r1, [r5, #0]
 8009d32:	061f      	lsls	r7, r3, #24
 8009d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d38:	d402      	bmi.n	8009d40 <_printf_i+0x18c>
 8009d3a:	065f      	lsls	r7, r3, #25
 8009d3c:	bf48      	it	mi
 8009d3e:	b2b6      	uxthmi	r6, r6
 8009d40:	07df      	lsls	r7, r3, #31
 8009d42:	bf48      	it	mi
 8009d44:	f043 0320 	orrmi.w	r3, r3, #32
 8009d48:	6029      	str	r1, [r5, #0]
 8009d4a:	bf48      	it	mi
 8009d4c:	6023      	strmi	r3, [r4, #0]
 8009d4e:	b91e      	cbnz	r6, 8009d58 <_printf_i+0x1a4>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	f023 0320 	bic.w	r3, r3, #32
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	2310      	movs	r3, #16
 8009d5a:	e7a7      	b.n	8009cac <_printf_i+0xf8>
 8009d5c:	4824      	ldr	r0, [pc, #144]	; (8009df0 <_printf_i+0x23c>)
 8009d5e:	e7e4      	b.n	8009d2a <_printf_i+0x176>
 8009d60:	4615      	mov	r5, r2
 8009d62:	e7bd      	b.n	8009ce0 <_printf_i+0x12c>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	6826      	ldr	r6, [r4, #0]
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	1d18      	adds	r0, r3, #4
 8009d6c:	6028      	str	r0, [r5, #0]
 8009d6e:	0635      	lsls	r5, r6, #24
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	d501      	bpl.n	8009d78 <_printf_i+0x1c4>
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e002      	b.n	8009d7e <_printf_i+0x1ca>
 8009d78:	0670      	lsls	r0, r6, #25
 8009d7a:	d5fb      	bpl.n	8009d74 <_printf_i+0x1c0>
 8009d7c:	8019      	strh	r1, [r3, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	4615      	mov	r5, r2
 8009d84:	e7bc      	b.n	8009d00 <_printf_i+0x14c>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	602a      	str	r2, [r5, #0]
 8009d8c:	681d      	ldr	r5, [r3, #0]
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7f6 fa2c 	bl	80001f0 <memchr>
 8009d98:	b108      	cbz	r0, 8009d9e <_printf_i+0x1ea>
 8009d9a:	1b40      	subs	r0, r0, r5
 8009d9c:	6060      	str	r0, [r4, #4]
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da8:	e7aa      	b.n	8009d00 <_printf_i+0x14c>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	462a      	mov	r2, r5
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0ad      	beq.n	8009d14 <_printf_i+0x160>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d413      	bmi.n	8009de6 <_printf_i+0x232>
 8009dbe:	68e0      	ldr	r0, [r4, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4618      	movlt	r0, r3
 8009dc8:	e7a6      	b.n	8009d18 <_printf_i+0x164>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d09d      	beq.n	8009d14 <_printf_i+0x160>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dcf2      	bgt.n	8009dca <_printf_i+0x216>
 8009de4:	e7eb      	b.n	8009dbe <_printf_i+0x20a>
 8009de6:	2500      	movs	r5, #0
 8009de8:	f104 0619 	add.w	r6, r4, #25
 8009dec:	e7f5      	b.n	8009dda <_printf_i+0x226>
 8009dee:	bf00      	nop
 8009df0:	08009f69 	.word	0x08009f69
 8009df4:	08009f7a 	.word	0x08009f7a

08009df8 <memmove>:
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	eb01 0402 	add.w	r4, r1, r2
 8009e00:	d902      	bls.n	8009e08 <memmove+0x10>
 8009e02:	4284      	cmp	r4, r0
 8009e04:	4623      	mov	r3, r4
 8009e06:	d807      	bhi.n	8009e18 <memmove+0x20>
 8009e08:	1e43      	subs	r3, r0, #1
 8009e0a:	42a1      	cmp	r1, r4
 8009e0c:	d008      	beq.n	8009e20 <memmove+0x28>
 8009e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e16:	e7f8      	b.n	8009e0a <memmove+0x12>
 8009e18:	4402      	add	r2, r0
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	d100      	bne.n	8009e22 <memmove+0x2a>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e2a:	e7f7      	b.n	8009e1c <memmove+0x24>

08009e2c <_sbrk_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	; (8009e48 <_sbrk_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f6 ffce 	bl	8000dd8 <_sbrk>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_sbrk_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_sbrk_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000468 	.word	0x20000468

08009e4c <memcpy>:
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	4770      	bx	lr
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e62:	4291      	cmp	r1, r2
 8009e64:	d1f9      	bne.n	8009e5a <memcpy+0xe>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <_realloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4614      	mov	r4, r2
 8009e70:	460e      	mov	r6, r1
 8009e72:	b921      	cbnz	r1, 8009e7e <_realloc_r+0x16>
 8009e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e78:	4611      	mov	r1, r2
 8009e7a:	f7ff bc49 	b.w	8009710 <_malloc_r>
 8009e7e:	b92a      	cbnz	r2, 8009e8c <_realloc_r+0x24>
 8009e80:	f7ff fbda 	bl	8009638 <_free_r>
 8009e84:	4625      	mov	r5, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	f000 f81b 	bl	8009ec6 <_malloc_usable_size_r>
 8009e90:	4284      	cmp	r4, r0
 8009e92:	4607      	mov	r7, r0
 8009e94:	d802      	bhi.n	8009e9c <_realloc_r+0x34>
 8009e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e9a:	d812      	bhi.n	8009ec2 <_realloc_r+0x5a>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff fc36 	bl	8009710 <_malloc_r>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0ed      	beq.n	8009e86 <_realloc_r+0x1e>
 8009eaa:	42bc      	cmp	r4, r7
 8009eac:	4622      	mov	r2, r4
 8009eae:	4631      	mov	r1, r6
 8009eb0:	bf28      	it	cs
 8009eb2:	463a      	movcs	r2, r7
 8009eb4:	f7ff ffca 	bl	8009e4c <memcpy>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f7ff fbbc 	bl	8009638 <_free_r>
 8009ec0:	e7e1      	b.n	8009e86 <_realloc_r+0x1e>
 8009ec2:	4635      	mov	r5, r6
 8009ec4:	e7df      	b.n	8009e86 <_realloc_r+0x1e>

08009ec6 <_malloc_usable_size_r>:
 8009ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eca:	1f18      	subs	r0, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfbc      	itt	lt
 8009ed0:	580b      	ldrlt	r3, [r1, r0]
 8009ed2:	18c0      	addlt	r0, r0, r3
 8009ed4:	4770      	bx	lr
	...

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
